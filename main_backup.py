#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
CURSO INTERATIVO DE PYTHON PARA INICIANTES
Desenvolvido para ensinar Python do zero

Autor: Sistema de Ensino Python
Vers√£o: 2.0 - Com melhorias e novos recursos
"""

import time
import sys
import os
from datetime import datetime

# Adicionar o diret√≥rio src ao path para imports
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.utils import PythonCourseUtils
from src.modules import CourseModules
from src.progress_manager import ProgressManager
from src.visual_feedback import VisualFeedback
from src.config_manager import ConfigManager
from src.logger import CourseLogger
from src.review_mode import ReviewMode
from src.glossary import Glossary
from src.keyboard_shortcuts import KeyboardShortcuts
from src.certificate_generator import CertificateGenerator
from src.ui_components import UIComponents, ThemeManager
from src.tutor_assistant import TutorAssistant
from src.learning_analytics import LearningAnalytics
from src.gamification_system import GamificationSystem, AchievementNotifier, BadgeType
from src.code_editor import CodePlayground
from src.interactive_demos import InteractiveDemoSession
from src.sync_manager import SyncManager
from src.adaptive_exercises import AdaptiveExerciseGenerator, AdaptiveExerciseSession
from src.visual_debugger import DebugSession
from src.error_tracker import ErrorTracker
from src.security import SecureInput



class PythonCourse:
    """Classe principal do curso de Python"""
    
    def __init__(self):
        # Inicializa componentes b√°sicos
        self.utils = PythonCourseUtils()
        self.modules = CourseModules()
        
        # Inicializa novos componentes
        self.config = ConfigManager()
        self.progress = ProgressManager()
        self.visual = VisualFeedback()
        self.logger = CourseLogger()
        self.review = ReviewMode(self.progress)
        self.glossary = Glossary()
        self.shortcuts = KeyboardShortcuts(self.config.get_section('keyboard_shortcuts'))
        self.certificate = CertificateGenerator()
        self.ui = UIComponents()
        self.theme_manager = ThemeManager()
        self.tutor = TutorAssistant()
        self.analytics = LearningAnalytics(self.progress)
        self.gamification = GamificationSystem(self.progress)
        self.code_playground = CodePlayground()
        self.interactive_demos = InteractiveDemoSession(self.ui)
        self.sync_manager = SyncManager()
        self.adaptive_generator = AdaptiveExerciseGenerator(self.progress, self.analytics)
        self.adaptive_session = AdaptiveExerciseSession(self.adaptive_generator, self.ui)
        self.debug_session = DebugSession(self.ui)
        self.error_tracker = ErrorTracker()
        self.secure_input = SecureInput()
        
        # Tempo de in√≠cio da sess√£o
        self.session_start = datetime.now()
        
        # Integra visual feedback aos m√≥dulos
        self.modules.visual_feedback = self.visual
        self.modules.progress_manager = self.progress
        
        # Conecta utils com sistemas de progresso e gamifica√ß√£o
        self.utils.set_managers(self.progress, self.gamification)
        self.modules.utils.set_managers(self.progress, self.gamification)
        
        self.menu_options = {
            # M√≥dulos B√°sicos (1-11)
            "1": (self.modules.modulo_1_introducao, "Introdu√ß√£o ao Python"),
            "2": (self.modules.modulo_2_primeiro_programa, "Seu Primeiro Programa"),
            "3": (self.modules.modulo_3_variaveis, "Vari√°veis"),
            "4": (self.modules.modulo_4_tipos_dados, "Tipos de Dados"),
            "5": (self.modules.modulo_5_entrada_dados, "Entrada de Dados"),
            "6": (self.modules.modulo_6_operacoes, "Opera√ß√µes Matem√°ticas"),
            "7": (self.modules.modulo_7_condicoes, "Condi√ß√µes (if/else)"),
            "8": (self.modules.modulo_8_loops, "Repeti√ß√µes (loops)"),
            "9": (self.modules.modulo_9_listas, "Listas"),
            "10": (self.modules.modulo_10_funcoes, "Fun√ß√µes"),
            "11": (self.modules.projeto_final, "PROJETO: Calculadora B√°sica"),
            
            # M√≥dulos Intermedi√°rios (12-17)
            "12": (self.modules.modulo_12_dicionarios, "Dicion√°rios e Sets"),
            "13": (self.modules.modulo_13_funcoes_avancadas, "Fun√ß√µes Avan√ßadas & Lambda"),
            "14": (self.modules.modulo_14_comprehensions, "List/Dict Comprehensions"),
            "15": (self.modules.modulo_15_arquivos, "Manipula√ß√£o de Arquivos"),
            "16": (self.modules.modulo_16_excecoes, "Tratamento de Erros"),
            "17": (self.modules.modulo_17_modulos, "M√≥dulos e Bibliotecas"),
            
            # M√≥dulos Avan√ßados (18-23)
            "18": (self.modules.modulo_18_oop_basico, "Programa√ß√£o Orientada a Objetos"),
            "19": (self.modules.modulo_19_oop_avancado, "OOP Avan√ßado: Heran√ßa e Polimorfismo"),
            "20": (self.modules.modulo_20_decorators, "Decorators e Context Managers"),
            "21": (self.modules.modulo_21_geradores, "Generators e Iterators"),
            "22": (self.modules.modulo_22_regex, "Express√µes Regulares"),
            "23": (self.modules.modulo_23_debugging, "Debugging e Profiling"),
            
            # Projetos Pr√°ticos (24-26)
            "24": (self.modules.projeto_intermediario, "PROJETO: Sistema de Biblioteca"),
            "25": (self.modules.projeto_avancado, "PROJETO: Web Scraper"),
            "26": (self.modules.projeto_final_avancado, "PROJETO FINAL: API REST")
        }
        
        # Registra atalhos de teclado
        self._register_shortcuts()
    
    def _register_shortcuts(self) -> None:
        """Registra a√ß√µes para atalhos de teclado"""
        self.shortcuts.register_action('show_progress', self._show_progress_summary)
        self.shortcuts.register_action('toggle_hints', self._toggle_hints)
    
    def _show_progress_summary(self, context=None) -> None:
        """Exibe resumo do progresso"""
        summary = self.progress.get_progress_summary()
        self.utils.limpar_tela()
        print(self.visual.get_score_summary())
        print(f"\nüìä Progresso Geral: {summary['completion_percentage']:.1f}%")
        print(f"üìö M√≥dulos Completos: {summary['modules_completed']}/{summary['total_modules']}")
        self.utils.pausar()
    
    def _toggle_hints(self, context=None) -> None:
        """Alterna exibi√ß√£o de dicas"""
        current = self.config.get('display.show_hints_delay')
        new_value = 0 if current > 0 else 3
        self.config.set('display.show_hints_delay', new_value)
        status = "ativadas" if new_value > 0 else "desativadas"
        print(f"\nüí° Dicas {status}")
        time.sleep(1)
    
    def _check_first_time_user(self) -> None:
        """Verifica se √© a primeira vez do usu√°rio"""
        if not self.progress.progress_data['user_name']:
            self.utils.limpar_tela()
            self.utils.titulo("BEM-VINDO AO CURSO DE PYTHON!")
            print("Parece que √© sua primeira vez aqui! üéâ")
            nome = input("\nComo posso te chamar? ").strip()
            if nome:
                self.progress.set_user_name(nome)
                self.logger.log_session_start(nome)
                print(f"\n√ìtimo, {nome}! Vamos come√ßar sua jornada Python! üöÄ")
                self.visual.unlock_achievement("Primeira Vez no Curso!")
                self.progress.add_achievement("Primeira Vez no Curso!")
                self.utils.pausar()
        else:
            nome = self.progress.progress_data['user_name']
            self.logger.log_session_start(nome)
            print(f"\nüëã Bem-vindo de volta, {nome}!")
            time.sleep(1)
    
    def exibir_menu(self) -> None:
        """Exibe o menu principal do curso"""
        self.utils.limpar_tela()
        
        # Cabe√ßalho principal
        summary = self.progress.get_progress_summary()
        subtitle = f"Bem-vindo, {summary['user_name']}!" if summary['user_name'] else "Sistema de Ensino Interativo"
        
        self.ui.header(
            "CURSO INTERATIVO DE PYTHON 2.0",
            subtitle,
            "üêç"
        )
        
        # Barra de progresso geral
        if summary['completion_percentage'] > 0:
            self.ui.progress_bar(
                summary['modules_completed'],
                summary['total_modules'],
                f"üìä Progresso Geral - {summary['total_score']} pontos",
                40
            )
            print()
        
        # Menu de m√≥dulos
        module_options = []
        for opcao, (_, descricao) in self.menu_options.items():
            module_id = f"modulo_{opcao}"
            status = self.progress.get_module_status(module_id)
            
            if status.get('completed'):
                option_status = "completed"
                icon = "‚úÖ"
            else:
                option_status = "pending"
                icon = "üìò"
            
            module_options.append({
                "key": opcao,
                "text": descricao,
                "icon": icon,
                "status": option_status
            })
        
        self.ui.section("M√ìDULOS DO CURSO", "üìö")
        
        # Organiza m√≥dulos por categoria
        basic_modules = [opt for opt in module_options if int(opt['key']) <= 11]
        intermediate_modules = [opt for opt in module_options if 12 <= int(opt['key']) <= 17]
        advanced_modules = [opt for opt in module_options if 18 <= int(opt['key']) <= 23]
        projects = [opt for opt in module_options if int(opt['key']) >= 24]
        
        # M√≥dulos B√°sicos
        print("üìö B√ÅSICO (1-11):")
        for i in range(0, len(basic_modules), 2):
            left = basic_modules[i]
            right = basic_modules[i + 1] if i + 1 < len(basic_modules) else None
            
            left_text = f"  {left['icon']} {left['key']:<2}. {left['text']:<28}"
            
            if right:
                right_text = f"{right['icon']} {right['key']:<2}. {right['text']}"
                print(f"{left_text} {right_text}")
            else:
                print(left_text)
        
        # M√≥dulos Intermedi√°rios
        if intermediate_modules:
            print("\nüéì INTERMEDI√ÅRIO (12-17):")
            for i in range(0, len(intermediate_modules), 2):
                left = intermediate_modules[i]
                right = intermediate_modules[i + 1] if i + 1 < len(intermediate_modules) else None
                
                left_text = f"  {left['icon']} {left['key']:<2}. {left['text']:<28}"
                
                if right:
                    right_text = f"{right['icon']} {right['key']:<2}. {right['text']}"
                    print(f"{left_text} {right_text}")
                else:
                    print(left_text)
        
        # M√≥dulos Avan√ßados
        if advanced_modules:
            print("\nüöÄ AVAN√áADO (18-23):")
            for i in range(0, len(advanced_modules), 2):
                left = advanced_modules[i]
                right = advanced_modules[i + 1] if i + 1 < len(advanced_modules) else None
                
                left_text = f"  {left['icon']} {left['key']:<2}. {left['text']:<28}"
                
                if right:
                    right_text = f"{right['icon']} {right['key']:<2}. {right['text']}"
                    print(f"{left_text} {right_text}")
                else:
                    print(left_text)
        
        # Projetos
        if projects:
            print("\nüõ†Ô∏è PROJETOS (24-26):")
            for project in projects:
                print(f"  {project['icon']} {project['key']:<2}. {project['text']}")
        
        # Menu de recursos extras
        self.ui.section("RECURSOS EXTRAS", "‚≠ê")
        extra_options = [
            {"text": "R. üîÑ Modo Revis√£o", "description": "Pratique o que aprendeu"},
            {"text": "G. üìñ Gloss√°rio de Termos", "description": "Dicion√°rio Python"},
            {"text": "P. üìä Ver Progresso Detalhado", "description": "Estat√≠sticas completas"},
            {"text": "C. üéì Gerar Certificado", "description": "Seu diploma digital"},
            {"text": "M. üöÄ Galeria Mini Projetos", "description": "Todos os projetos pr√°ticos"},
            {"text": "T. üé® Mudar Tema", "description": "Personalizar cores"},
            {"text": "H. ‚ùì Ajuda e Atalhos", "description": "Guia de uso"},
            {"text": "A. ü§ñ Assistente Python", "description": "Tire suas d√∫vidas"},
            {"text": "D. üìä Dashboard Analytics", "description": "An√°lise de aprendizagem"},
            {"text": "F. üéÆ Perfil Gamer", "description": "Conquistas e gamifica√ß√£o"},
            {"text": "E. üìù Editor de C√≥digo", "description": "Playground para experimentar"},
            {"text": "V. üé• Demos Interativas", "description": "Anima√ß√µes visuais de conceitos"},
            {"text": "S. üîÑ Sincroniza√ß√£o", "description": "Backup e m√∫ltiplos perfis"},
            {"text": "B. üéØ Exerc√≠cios Adaptativos", "description": "Treinamento personalizado"},
            {"text": "W. üî¨ Debug Visual", "description": "Analisador de c√≥digo step-by-step"},
            {"text": "X. üóëÔ∏è Resetar Progresso", "description": "Recome√ßar do zero"}
        ]
        
        for i in range(0, len(extra_options), 2):
            left = extra_options[i]
            right = extra_options[i + 1] if i + 1 < len(extra_options) else None
            
            if right:
                print(f"{left['text']:<30} {right['text']}")
            else:
                print(left['text'])
        
        # Op√ß√£o de sair
        self.ui.divider("‚îÄ")
        print("0. üö™ Sair do Curso")
        
        # Rodap√© com atalhos
        self.ui.divider("‚îÄ", "ATALHOS R√ÅPIDOS")
        print(f"‚å®Ô∏è  {self.shortcuts.create_shortcut_bar()}")
        print()
    
    def executar_opcao(self, escolha: str) -> bool:
        """Executa a op√ß√£o escolhida pelo usu√°rio"""
        escolha = escolha.upper()
        
        if escolha == "0":
            return self._sair_do_curso()
        
        # Op√ß√µes de m√≥dulos
        if escolha in self.menu_options:
            module_id = f"modulo_{escolha}"
            nome_modulo = self.menu_options[escolha][1]
            
            # Log e marca in√≠cio do m√≥dulo
            self.logger.log_module_start(module_id, nome_modulo)
            self.error_tracker.start_module(module_id)
            start_time = time.time()
            
            # Executa o m√≥dulo
            funcao, _ = self.menu_options[escolha]
            funcao()
            
            # Calcula tempo gasto
            time_spent = int(time.time() - start_time)
            
            # Atualiza progresso
            if not self.progress.get_module_status(module_id).get('completed'):
                pontos = 100  # Pontos por completar m√≥dulo
                self.progress.mark_module_completed(module_id, pontos)
                self.visual.celebration()
                self.visual.add_score(pontos, "M√≥dulo completo!")
                self.logger.log_module_completion(module_id, pontos, time_spent)
                
                # Sistema de gamifica√ß√£o
                xp_result = self.gamification.adicionar_xp(pontos, f"M√≥dulo {escolha} completo")
                
                # Verifica badges por completar m√≥dulo
                module_stats = self.error_tracker.end_module(module_id)
                badges_novos = self.gamification.verificar_conquistas_modulo(
                    module_id, 
                    sem_erros=module_stats["sem_erros"],
                    tempo_segundos=time_spent
                )
                
                # Exibe notifica√ß√µes de n√≠vel
                if xp_result["subiu_nivel"]:
                    self.ui.alert(
                        f"üéâ LEVEL UP! Agora voc√™ √© {xp_result['nivel_atual']}!\n"
                        f"Bonus: +{xp_result.get('bonus_moedas', 0)} moedas",
                        "success"
                    )
                
                # Exibe badges novos
                for badge in badges_novos:
                    AchievementNotifier.notificar_conquista(badge, self.ui)
                
                # Verifica conquistas especiais do sistema antigo
                completed = len(self.progress.progress_data['modules_completed'])
                if completed == 1:
                    self.visual.unlock_achievement("Primeiro M√≥dulo!")
                    self.progress.add_achievement("Primeiro M√≥dulo!")
                elif completed == 5:
                    self.visual.unlock_achievement("Metade do Caminho!")
                    self.progress.add_achievement("Metade do Caminho!")
                elif completed == 11:
                    self.visual.unlock_achievement("Curso Completo!")
                    self.progress.add_achievement("Curso Completo!")
            
            self.progress.update_module_progress(module_id, time_spent, 1)
            
        # Recursos extras
        elif escolha == "R":
            self.review.start_review_session()
        elif escolha == "G":
            self.glossary.show_glossary_menu()
        elif escolha == "P":
            self._mostrar_progresso_detalhado()
        elif escolha == "C":
            self._gerar_certificado()
        elif escolha == "M":
            self._mostrar_galeria_mini_projetos()
        elif escolha == "T":
            self._mudar_tema()
        elif escolha == "H":
            self._mostrar_ajuda()
        elif escolha == "A":
            self._usar_assistente()
        elif escolha == "D":
            self._mostrar_dashboard_analytics()
        elif escolha == "F":
            self._mostrar_perfil_gamer()
        elif escolha == "E":
            self._abrir_editor_codigo()
        elif escolha == "V":
            self._abrir_demos_interativas()
        elif escolha == "S":
            self._abrir_sincronizacao()
        elif escolha == "B":
            self._abrir_exercicios_adaptativos()
        elif escolha == "W":
            self._abrir_debug_visual()
        elif escolha == "X":
            self._resetar_progresso()
        else:
            print("‚ùå Op√ß√£o inv√°lida! Tente novamente.")
            time.sleep(2)
        
        return True
    
    def _mostrar_progresso_detalhado(self) -> None:
        """Mostra progresso detalhado do aluno"""
        self.utils.limpar_tela()
        
        summary = self.progress.get_detailed_progress_summary()
        
        self.ui.header("RELAT√ìRIO DE PROGRESSO", f"Aluno: {summary['user_name']}", "üìä")
        
        # Estat√≠sticas principais
        self.ui.card(
            "Estat√≠sticas Gerais",
            f"Progresso M√≥dulos: {summary['completion_percentage']:.1f}%\n"
            f"M√≥dulos Completos: {summary['modules_completed']}/{summary['total_modules']}\n"
            f"Mini Projetos: {summary['mini_projetos_completos']}/{summary['total_mini_projects']}\n"
            f"Progresso Projetos: {summary['mini_projetos_percentage']:.1f}%\n"
            f"Pontua√ß√£o Total: {summary['total_score']} pontos\n"
            f"Conquistas: {summary['achievements']} desbloqueadas",
            "üìà",
            "success" if summary['completion_percentage'] == 100 else "info"
        )
        
        # Progresso por m√≥dulo
        headers = ["M√≥dulo", "Status", "Pontos", "Tentativas"]
        rows = []
        
        for i in range(1, 12):
            module_id = f"modulo_{i}"
            status_data = self.progress.get_module_status(module_id)
            
            if status_data.get('completed'):
                status = "‚úÖ Completo"
                points = status_data.get('score', 0)
                attempts = status_data.get('attempts', 0)
            else:
                status = "‚è≥ Pendente"
                points = 0
                attempts = 0
            
            rows.append([f"M√≥dulo {i}", status, str(points), str(attempts)])
        
        self.ui.table(headers, rows, "üìö Progresso por M√≥dulo")
        
        # Mini Projetos Progress
        mini_projects_headers = ["Projeto", "Status", "Pontos"]
        mini_projects_rows = []
        
        # Define mini projects mapping
        mini_projects_info = {
            "modulo_1": "Cart√£o de Apresenta√ß√£o Python",
            "modulo_2": "Gerador de Mensagens",
            "modulo_3": "Calculadora de Vari√°veis",
            "modulo_4": "Conversor de Tipos",
            "modulo_5": "Quiz Interativo",
            "modulo_6": "Calculadora Cient√≠fica",
            "modulo_12": "Sistema de Contatos",
            "modulo_13": "Processador de Dados",
            "modulo_14": "Analisador de Logs",
            "modulo_15": "Sistema de Backup",
            "modulo_16": "Monitor Robusto",
            "modulo_17": "Framework de Plugins",
            "modulo_18": "Gest√£o de Funcion√°rios",
            "modulo_19": "Sistema RPG",
            "modulo_20": "Cache Inteligente",
            "modulo_21": "Pipeline de Dados",
            "modulo_22": "Analisador de Logs Avan√ßado",
            "modulo_23": "Profiler de Performance"
        }
        
        completed_mini_projects = self.progress.progress_data.get("mini_projetos_completos", [])
        
        for module_id, project_name in mini_projects_info.items():
            mini_projeto_key = f"{module_id}_mini_projeto"
            if mini_projeto_key in completed_mini_projects:
                status = "‚úÖ Conclu√≠do"
                module_data = self.progress.progress_data.get("modules_progress", {}).get(module_id, {})
                points = module_data.get("mini_projeto_score", 50)
            else:
                status = "‚è≥ Pendente"
                points = 0
            
            mini_projects_rows.append([project_name, status, str(points)])
        
        self.ui.table(mini_projects_headers, mini_projects_rows, "üöÄ Mini Projetos")
        
        # M√≥dulos pendentes
        pendentes = []
        for i in range(1, 12):
            module_id = f"modulo_{i}"
            if module_id not in self.progress.progress_data['modules_completed']:
                module_name = self.menu_options[str(i)][1]
                pendentes.append(f"‚Ä¢ M√≥dulo {i}: {module_name}")
        
        if pendentes:
            self.ui.card(
                "Pr√≥ximos Passos",
                "\n".join(pendentes),
                "üìù",
                "warning"
            )
        else:
            self.ui.alert("üéâ Parab√©ns! Voc√™ completou todos os m√≥dulos!", "success")
        
        self.utils.pausar()
    
    def _gerar_certificado(self) -> None:
        """Gera certificado de conclus√£o"""
        self.utils.limpar_tela()
        
        summary = self.progress.get_progress_summary()
        
        self.ui.header("GERA√á√ÉO DE CERTIFICADO", "Seu Diploma Digital", "üéì")
        
        if self.certificate.can_generate_certificate(summary):
            self.ui.alert(
                f"Parab√©ns! Voc√™ completou {summary['completion_percentage']:.1f}% do curso!",
                "success"
            )
            
            self.ui.spinner("Gerando seu certificado", 2.0)
            
            self.certificate.preview_certificate(summary)
            self.logger.log_achievement("Certificado Gerado", summary['total_score'])
            
            self.ui.card(
                "Certificado Gerado com Sucesso!",
                "‚Ä¢ Arquivo HTML criado\n"
                "‚Ä¢ Aberto no seu navegador\n"
                "‚Ä¢ Use Ctrl+P para imprimir ou salvar como PDF\n"
                "‚Ä¢ Compartilhe sua conquista!",
                "üèÜ",
                "success"
            )
        else:
            required = 80
            current = summary['completion_percentage']
            missing = required - current
            
            self.ui.alert(
                f"Voc√™ precisa completar {required}% do curso para gerar o certificado.",
                "warning"
            )
            
            self.ui.card(
                "Requisitos para Certificado",
                f"Progresso atual: {current:.1f}%\n"
                f"Necess√°rio: {required}%\n"
                f"Faltam: {missing:.1f}%\n"
                f"M√≥dulos completos: {summary['modules_completed']}/11",
                "üìã",
                "info"
            )
            
            # Barra de progresso para certificado
            self.ui.progress_bar(
                int(current),
                required,
                "Progresso para o Certificado",
                30
            )
        
        self.utils.pausar()
    
    def _mostrar_galeria_mini_projetos(self) -> None:
        """Exibe galeria completa de mini projetos"""
        self.utils.limpar_tela()
        
        self.ui.header("GALERIA DE MINI PROJETOS", "Todos os projetos pr√°ticos do curso", "üöÄ")
        
        # Defini√ß√£o de todos os mini projetos organizados
        mini_projetos_data = {
            "b√°sicos": {
                "titulo": "üå± PROJETOS B√ÅSICOS (M√≥dulos 1-6)",
                "projetos": [
                    {
                        "modulo": "modulo_1",
                        "numero": "1",
                        "nome": "Cart√£o de Apresenta√ß√£o Python",
                        "descricao": "Seu primeiro programa criando um cart√£o digital personalizado",
                        "tecnologias": "Print, Vari√°veis, Strings",
                        "aplicacoes": "Sites pessoais, perfis, assinaturas digitais",
                        "pontos": 50
                    },
                    {
                        "modulo": "modulo_2", 
                        "numero": "2",
                        "nome": "Gerador de Mensagens Motivacionais",
                        "descricao": "Sistema que cria mensagens inspiradoras personalizadas",
                        "tecnologias": "Print, Input, Concatena√ß√£o",
                        "aplicacoes": "Apps de bem-estar, coaching, gamifica√ß√£o",
                        "pontos": 50
                    },
                    {
                        "modulo": "modulo_3",
                        "numero": "3", 
                        "nome": "Calculadora de Vari√°veis Inteligente",
                        "descricao": "Calculadora que armazena e reutiliza valores em mem√≥ria",
                        "tecnologias": "Vari√°veis, Opera√ß√µes, Reutiliza√ß√£o",
                        "aplicacoes": "Sistemas cont√°beis, calculadoras avan√ßadas",
                        "pontos": 50
                    },
                    {
                        "modulo": "modulo_4",
                        "numero": "4",
                        "nome": "Conversor Universal de Tipos",
                        "descricao": "Sistema completo de convers√£o entre diferentes tipos de dados",
                        "tecnologias": "Type casting, Valida√ß√£o, Tipos de dados",
                        "aplicacoes": "ETL, importa√ß√£o de dados, APIs",
                        "pontos": 55
                    },
                    {
                        "modulo": "modulo_5",
                        "numero": "5", 
                        "nome": "Quiz Interativo Personalizado",
                        "descricao": "Sistema de perguntas e respostas com feedback inteligente",
                        "tecnologias": "Input, Valida√ß√£o, Feedback",
                        "aplicacoes": "E-learning, testes, gamifica√ß√£o educativa",
                        "pontos": 60
                    },
                    {
                        "modulo": "modulo_6",
                        "numero": "6",
                        "nome": "Calculadora Cient√≠fica Avan√ßada", 
                        "descricao": "Calculadora com fun√ß√µes matem√°ticas complexas e constantes",
                        "tecnologias": "Math, Opera√ß√µes avan√ßadas, Constantes",
                        "aplicacoes": "Engenharia, ci√™ncia, pesquisa acad√™mica",
                        "pontos": 65
                    }
                ]
            },
            "intermedi√°rios": {
                "titulo": "üéì PROJETOS INTERMEDI√ÅRIOS (M√≥dulos 12-17)",
                "projetos": [
                    {
                        "modulo": "modulo_12",
                        "numero": "12",
                        "nome": "Sistema de Contatos Inteligente",
                        "descricao": "CRM completo para gerenciamento de contatos empresariais",
                        "tecnologias": "Dicion√°rios, Sets, Estruturas complexas",
                        "aplicacoes": "CRM, agenda corporativa, networking",
                        "pontos": 70
                    },
                    {
                        "modulo": "modulo_13", 
                        "numero": "13",
                        "nome": "Processador de Dados Avan√ßado",
                        "descricao": "Sistema de an√°lise usando fun√ß√µes lambda e processamento paralelo",
                        "tecnologias": "Lambda, map(), filter(), *args, **kwargs",
                        "aplicacoes": "Business intelligence, an√°lise de vendas, ETL",
                        "pontos": 70
                    },
                    {
                        "modulo": "modulo_14",
                        "numero": "14",
                        "nome": "Analisador de Logs Inteligente", 
                        "descricao": "Sistema de an√°lise de logs usando comprehensions avan√ßadas",
                        "tecnologias": "List/Dict/Set Comprehensions, Condicionais",
                        "aplicacoes": "DevOps, monitoramento, an√°lise de seguran√ßa",
                        "pontos": 75
                    },
                    {
                        "modulo": "modulo_15",
                        "numero": "15",
                        "nome": "Sistema de Backup Inteligente",
                        "descricao": "Backup automatizado com compress√£o e versionamento",
                        "tecnologias": "Arquivos, JSON, CSV, ZIP, Diret√≥rios",
                        "aplicacoes": "Backup empresarial, versionamento, arquivamento",
                        "pontos": 75
                    },
                    {
                        "modulo": "modulo_16",
                        "numero": "16", 
                        "nome": "Sistema de Monitoramento Robusto",
                        "descricao": "Monitor de sistema com tratamento avan√ßado de erros",
                        "tecnologias": "Try/except, finally, custom exceptions",
                        "aplicacoes": "IoT, monitoramento de servidores, sistemas cr√≠ticos",
                        "pontos": 80
                    },
                    {
                        "modulo": "modulo_17",
                        "numero": "17",
                        "nome": "Framework de Plugins Modular",
                        "descricao": "Sistema extens√≠vel com carregamento din√¢mico de plugins",
                        "tecnologias": "Imports din√¢micos, m√≥dulos, packages",
                        "aplicacoes": "Editores, IDEs, sistemas extens√≠veis",
                        "pontos": 80
                    }
                ]
            },
            "avan√ßados": {
                "titulo": "üöÄ PROJETOS AVAN√áADOS (M√≥dulos 18-23)",
                "projetos": [
                    {
                        "modulo": "modulo_18",
                        "numero": "18",
                        "nome": "Sistema de Gest√£o de Funcion√°rios",
                        "descricao": "Sistema completo de RH usando programa√ß√£o orientada a objetos",
                        "tecnologias": "Classes, objetos, encapsulamento, m√©todos",
                        "aplicacoes": "RH corporativo, gest√£o empresarial, HRIS",
                        "pontos": 85
                    },
                    {
                        "modulo": "modulo_19",
                        "numero": "19", 
                        "nome": "Sistema de Jogos RPG",
                        "descricao": "Engine de RPG com heran√ßa e polimorfismo completos",
                        "tecnologias": "Heran√ßa, polimorfismo, classes abstratas",
                        "aplicacoes": "Game development, simula√ß√µes, hierarquias complexas",
                        "pontos": 90
                    },
                    {
                        "modulo": "modulo_20",
                        "numero": "20",
                        "nome": "Sistema de Cache Inteligente",
                        "descricao": "Cache avan√ßado com decorators e context managers",
                        "tecnologias": "Decorators, context managers, functools",
                        "aplicacoes": "Otimiza√ß√£o web, APIs de alta performance",
                        "pontos": 90
                    },
                    {
                        "modulo": "modulo_21",
                        "numero": "21",
                        "nome": "Pipeline de Processamento de Dados",
                        "descricao": "Pipeline eficiente para big data usando generators",
                        "tecnologias": "Generators, yield, iterator protocol",
                        "aplicacoes": "Big data, ETL, processamento de streams",
                        "pontos": 95
                    },
                    {
                        "modulo": "modulo_22", 
                        "numero": "22",
                        "nome": "Analisador de Logs Avan√ßado",
                        "descricao": "Sistema completo de an√°lise usando express√µes regulares",
                        "tecnologias": "Regex patterns, groups, lookahead",
                        "aplicacoes": "Seguran√ßa, auditoria, monitoramento avan√ßado",
                        "pontos": 95
                    },
                    {
                        "modulo": "modulo_23",
                        "numero": "23",
                        "nome": "Profiler de Performance",
                        "descricao": "Sistema completo de profiling e debugging avan√ßado",
                        "tecnologias": "Profiling, tracing, memory analysis",
                        "aplicacoes": "Otimiza√ß√£o de c√≥digo, debugging profissional",
                        "pontos": 100
                    }
                ]
            }
        }
        
        # Obt√©m projetos completos
        completed_mini_projects = self.progress.progress_data.get("mini_projetos_completos", [])
        
        # Exibe estat√≠sticas gerais
        total_projects = sum(len(cat["projetos"]) for cat in mini_projetos_data.values())
        completed_count = len(completed_mini_projects)
        completion_percentage = (completed_count / total_projects) * 100 if total_projects > 0 else 0
        
        self.ui.card(
            "Estat√≠sticas da Galeria",
            f"üìä Projetos Completos: {completed_count}/{total_projects}\n"
            f"üìà Progresso: {completion_percentage:.1f}%\n"
            f"üí∞ Pontos Dispon√≠veis: {sum(sum(p['pontos'] for p in cat['projetos']) for cat in mini_projetos_data.values())} pts\n"
            f"üèÜ Pontos Conquistados: {sum(p['pontos'] for cat in mini_projetos_data.values() for p in cat['projetos'] if p['modulo'] + '_mini_projeto' in completed_mini_projects)} pts",
            "üìä",
            "info"
        )
        
        print("\nüéØ MENU DE OP√á√ïES:")
        print("1. üìã Ver Todos os Projetos")
        print("2. üå± S√≥ Projetos B√°sicos")
        print("3. üéì S√≥ Projetos Intermedi√°rios") 
        print("4. üöÄ S√≥ Projetos Avan√ßados")
        print("5. ‚úÖ S√≥ Projetos Completos")
        print("6. ‚è≥ S√≥ Projetos Pendentes")
        print("7. üî• Executar um Projeto Espec√≠fico")
        print("0. üîô Voltar")
        
        while True:
            try:
                escolha = input("\nüëâ Sua escolha (0-7): ").strip()
                
                if escolha == "0":
                    break
                elif escolha == "1":
                    self._exibir_projetos_categoria(mini_projetos_data, "todos", completed_mini_projects)
                elif escolha == "2":
                    self._exibir_projetos_categoria({"b√°sicos": mini_projetos_data["b√°sicos"]}, "b√°sicos", completed_mini_projects)
                elif escolha == "3":
                    self._exibir_projetos_categoria({"intermedi√°rios": mini_projetos_data["intermedi√°rios"]}, "intermedi√°rios", completed_mini_projects)
                elif escolha == "4":
                    self._exibir_projetos_categoria({"avan√ßados": mini_projetos_data["avan√ßados"]}, "avan√ßados", completed_mini_projects)
                elif escolha == "5":
                    self._exibir_projetos_filtrados(mini_projetos_data, completed_mini_projects, True)
                elif escolha == "6":
                    self._exibir_projetos_filtrados(mini_projetos_data, completed_mini_projects, False)
                elif escolha == "7":
                    self._executar_projeto_especifico(mini_projetos_data)
                else:
                    print("‚ùå Op√ß√£o inv√°lida!")
                    continue
                    
                input("\n‚èØÔ∏è Pressione ENTER para voltar ao menu...")
                self.utils.limpar_tela()
                self.ui.header("GALERIA DE MINI PROJETOS", "Todos os projetos pr√°ticos do curso", "üöÄ")
                
            except KeyboardInterrupt:
                break
    
    def _exibir_projetos_categoria(self, categorias_data: dict, nome_categoria: str, completed_projects: list) -> None:
        """Exibe projetos de uma categoria espec√≠fica"""
        self.utils.limpar_tela()
        
        titulo = f"PROJETOS {nome_categoria.upper()}" if nome_categoria != "todos" else "TODOS OS PROJETOS"
        self.ui.header(titulo, "Detalhes dos projetos", "üìã")
        
        for categoria, dados in categorias_data.items():
            print(f"\n{dados['titulo']}")
            print("=" * 60)
            
            for projeto in dados["projetos"]:
                modulo_key = f"{projeto['modulo']}_mini_projeto"
                status = "‚úÖ" if modulo_key in completed_projects else "‚è≥"
                
                self.ui.card(
                    f"{status} {projeto['nome']} (M√≥dulo {projeto['numero']})",
                    f"üìù {projeto['descricao']}\n"
                    f"üõ†Ô∏è Tecnologias: {projeto['tecnologias']}\n"
                    f"üéØ Aplica√ß√µes: {projeto['aplicacoes']}\n"
                    f"‚≠ê Pontos: {projeto['pontos']}",
                    "üöÄ",
                    "success" if modulo_key in completed_projects else "info"
                )
    
    def _exibir_projetos_filtrados(self, categorias_data: dict, completed_projects: list, mostrar_completos: bool) -> None:
        """Exibe projetos filtrados por status de conclus√£o"""
        self.utils.limpar_tela()
        
        titulo = "PROJETOS COMPLETOS" if mostrar_completos else "PROJETOS PENDENTES"
        icon = "‚úÖ" if mostrar_completos else "‚è≥"
        self.ui.header(titulo, "Filtrados por status", icon)
        
        projetos_encontrados = 0
        
        for categoria, dados in categorias_data.items():
            projetos_categoria = []
            
            for projeto in dados["projetos"]:
                modulo_key = f"{projeto['modulo']}_mini_projeto"
                is_completed = modulo_key in completed_projects
                
                if is_completed == mostrar_completos:
                    projetos_categoria.append(projeto)
                    projetos_encontrados += 1
            
            if projetos_categoria:
                print(f"\n{dados['titulo']}")
                print("=" * 60)
                
                for projeto in projetos_categoria:
                    status_icon = "‚úÖ" if mostrar_completos else "‚è≥"
                    self.ui.card(
                        f"{status_icon} {projeto['nome']} (M√≥dulo {projeto['numero']})",
                        f"üìù {projeto['descricao']}\n"
                        f"üõ†Ô∏è Tecnologias: {projeto['tecnologias']}\n"
                        f"üéØ Aplica√ß√µes: {projeto['aplicacoes']}\n"
                        f"‚≠ê Pontos: {projeto['pontos']}",
                        "üöÄ",
                        "success" if mostrar_completos else "warning"
                    )
        
        if projetos_encontrados == 0:
            mensagem = "Parab√©ns! Voc√™ completou todos os projetos!" if not mostrar_completos else "Voc√™ ainda n√£o completou nenhum projeto."
            self.ui.alert(mensagem, "success" if not mostrar_completos else "info")
    
    def _executar_projeto_especifico(self, categorias_data: dict) -> None:
        """Permite executar um projeto espec√≠fico"""
        self.utils.limpar_tela()
        self.ui.header("EXECUTAR PROJETO", "Escolha um projeto para executar", "üî•")
        
        # Lista todos os projetos numerados
        print("üìã PROJETOS DISPON√çVEIS:")
        all_projects = []
        counter = 1
        
        for categoria, dados in categorias_data.items():
            print(f"\n{dados['titulo']}")
            for projeto in dados["projetos"]:
                print(f"  {counter:2d}. {projeto['nome']} (M√≥dulo {projeto['numero']})")
                all_projects.append(projeto)
                counter += 1
        
        print(f"\n  0. üîô Voltar")
        
        try:
            escolha = int(input("\nüëâ N√∫mero do projeto para executar (0 para voltar): "))
            
            if escolha == 0:
                return
            elif 1 <= escolha <= len(all_projects):
                projeto_escolhido = all_projects[escolha - 1]
                modulo_numero = projeto_escolhido["numero"]
                
                # Executa o m√≥dulo correspondente
                if modulo_numero in self.menu_options:
                    self.ui.alert(f"üöÄ Executando: {projeto_escolhido['nome']}", "info")
                    funcao, _ = self.menu_options[modulo_numero]
                    funcao()
                else:
                    self.ui.alert("‚ùå M√≥dulo n√£o dispon√≠vel ainda!", "error")
            else:
                self.ui.alert("‚ùå N√∫mero inv√°lido!", "error")
                
        except ValueError:
            self.ui.alert("‚ùå Digite um n√∫mero v√°lido!", "error")
        except KeyboardInterrupt:
            return
    
    def _mudar_tema(self) -> None:
        """Permite ao usu√°rio mudar o tema visual"""
        self.utils.limpar_tela()
        
        self.ui.header("PERSONALIZA√á√ÉO VISUAL", "Escolha seu tema favorito", "üé®")
        
        themes = self.theme_manager.list_themes()
        
        self.ui.card(
            "Temas Dispon√≠veis",
            "‚Ä¢ python - Azul e amarelo cl√°ssico\n"
            "‚Ä¢ matrix - Verde estilo Matrix\n"
            "‚Ä¢ sunset - Cores quentes do p√¥r do sol",
            "üé≠",
            "info"
        )
        
        print("\nTemas dispon√≠veis:")
        for i, theme in enumerate(themes, 1):
            theme_data = self.theme_manager.get_theme(theme)
            print(f"{i}. {theme_data['name']}")
        
        print("0. Voltar ao menu")
        
        try:
            choice = input("\nüëâ Escolha um tema (n√∫mero): ").strip()
            
            if choice == "0":
                return
            
            theme_index = int(choice) - 1
            if 0 <= theme_index < len(themes):
                selected_theme = themes[theme_index]
                theme_data = self.theme_manager.get_theme(selected_theme)
                
                self.ui.alert(f"Tema '{theme_data['name']}' selecionado!", "success")
                
                # Aqui voc√™ poderia implementar a mudan√ßa de tema
                # Por exemplo, salvando a prefer√™ncia nas configura√ß√µes
                self.config.set('display.theme', selected_theme)
                
                self.ui.card(
                    "Tema Aplicado",
                    f"O tema '{theme_data['name']}' foi aplicado com sucesso!\n"
                    "Reinicie o programa para ver as mudan√ßas completas.",
                    "‚ú®",
                    "success"
                )
            else:
                self.ui.alert("Op√ß√£o inv√°lida!", "error")
        
        except ValueError:
            self.ui.alert("Digite apenas n√∫meros!", "error")
        except KeyboardInterrupt:
            return
        
        self.utils.pausar()
    
    def _mostrar_ajuda(self) -> None:
        """Mostra ajuda e atalhos dispon√≠veis"""
        self.utils.limpar_tela()
        self.utils.titulo("‚ùì AJUDA E INFORMA√á√ïES")
        
        print("üìö SOBRE O CURSO:")
        print(f"   Vers√£o: {self.config.get('course.version')}")
        print(f"   Autor: {self.config.get('course.author')}")
        print("\n‚ú® RECURSOS:")
        print("   ‚Ä¢ Sistema de pontua√ß√£o e conquistas")
        print("   ‚Ä¢ Modo revis√£o para praticar")
        print("   ‚Ä¢ Gloss√°rio com termos importantes")
        print("   ‚Ä¢ Certificado de conclus√£o")
        print("   ‚Ä¢ Progresso salvo automaticamente")
        
        print("\n" + self.shortcuts.help_text)
        
        print("\nüí° DICAS:")
        print("   ‚Ä¢ Complete os m√≥dulos em ordem")
        print("   ‚Ä¢ Use o modo revis√£o para fixar o conte√∫do")
        print("   ‚Ä¢ Consulte o gloss√°rio quando tiver d√∫vidas")
        print("   ‚Ä¢ Pratique os exerc√≠cios com calma")
        
        self.utils.pausar()
    
    def _usar_assistente(self) -> None:
        """Abre o assistente de ajuda com IA offline"""
        # Detecta m√≥dulo atual que o aluno est√° estudando
        modulo_atual = ""
        for i in range(1, 27):
            module_id = f"modulo_{i}"
            if module_id in self.progress.progress_data['modules_progress']:
                status = self.progress.progress_data['modules_progress'][module_id]
                if not status.get('completed', False) and status.get('attempts', 0) > 0:
                    modulo_atual = f"M√≥dulo {i}: {self.menu_options.get(str(i), ('', ''))[1]}"
                    break
        
        # Se n√£o encontrou m√≥dulo em progresso, pega o pr√≥ximo n√£o completo
        if not modulo_atual:
            for i in range(1, 27):
                module_id = f"modulo_{i}"
                if module_id not in self.progress.progress_data['modules_completed']:
                    modulo_atual = f"M√≥dulo {i}: {self.menu_options.get(str(i), ('', ''))[1]}"
                    break
        
        # Inicia sess√£o do assistente
        self.tutor.sessao_ajuda(modulo_atual)
    
    def _mostrar_dashboard_analytics(self) -> None:
        """Exibe dashboard de an√°lise de aprendizagem"""
        # Registra atividade do dia
        self.analytics.registrar_atividade_diaria()
        
        # Exibe dashboard
        self.analytics.exibir_dashboard(self.ui)
        
        print("\nüéØ A√á√ïES DISPON√çVEIS:")
        print("1. üìä Ver estat√≠sticas detalhadas")
        print("2. üí° Receber recomenda√ß√µes personalizadas")
        print("3. üéØ Analisar padr√µes de erro")
        print("0. üîô Voltar ao menu")
        
        try:
            acao = input("\nüëâ Escolha: ").strip()
            
            if acao == "1":
                relatorio = self.analytics.gerar_relatorio_completo()
                
                self.ui.section("ESTAT√çSTICAS DETALHADAS", "üìà")
                print(f"üéØ Taxa de sucesso m√©dia: {self._calcular_taxa_media():.1f}%")
                print(f"‚è±Ô∏è Tempo m√©dio por m√≥dulo: {self._calcular_tempo_medio_geral()} min")
                print(f"üî• Streak mais longo: {relatorio['resumo_geral'].get('maior_streak', 0)} dias")
                
            elif acao == "2":
                insights = self.analytics.gerar_insights_personalizados()
                if insights:
                    self.ui.section("RECOMENDA√á√ïES PERSONALIZADAS", "üí°")
                    for insight in insights:
                        self.ui.alert(f"{insight['descricao']}\nüí° {insight['sugestao']}", "info")
                else:
                    print("üìä Continue estudando para gerar mais insights!")
            
            elif acao == "3":
                if self.analytics.analytics_data["error_patterns"]:
                    self.ui.section("AN√ÅLISE DE ERROS", "üîç")
                    for erro, count in list(self.analytics.analytics_data["error_patterns"].items())[:5]:
                        print(f"‚Ä¢ {erro}: {count} ocorr√™ncias")
                        # Sugest√£o baseada no erro
                        if "NameError" in erro:
                            print("  üí° Dica: Sempre declare vari√°veis antes de usar")
                        elif "SyntaxError" in erro:
                            print("  üí° Dica: Verifique par√™nteses, aspas e dois pontos")
                        elif "IndentationError" in erro:
                            print("  üí° Dica: Use 4 espa√ßos para indenta√ß√£o")
                else:
                    print("üéâ Nenhum erro registrado ainda!")
        
        except KeyboardInterrupt:
            pass
        
        self.utils.pausar()
    
    def _mostrar_perfil_gamer(self) -> None:
        """Exibe perfil de gamifica√ß√£o do usu√°rio"""
        # Atualiza streak di√°rio
        streak_info = self.gamification.verificar_e_atualizar_streak()
        
        if streak_info["manteve_streak"]:
            self.ui.alert(f"üî• Streak mantido! {streak_info['streak_atual']} dias consecutivos!", "success")
        elif streak_info["quebrou_streak"]:
            self.ui.alert(f"üíî Streak quebrado... Vamos recome√ßar!", "warning")
        
        # Exibe perfil
        self.gamification.exibir_perfil_gamer(self.ui)
        
        print("\nüéÆ A√á√ïES GAMER:")
        print("1. üè™ Loja de Power-ups")
        print("2. üéØ Desafio Di√°rio")
        print("3. üèÜ Ver Todas as Conquistas")
        print("4. üìà Hist√≥rico de XP")
        print("0. üîô Voltar ao menu")
        
        try:
            acao = input("\nüëâ Escolha: ").strip()
            
            if acao == "1":
                self._mostrar_loja_powerups()
            elif acao == "2":
                self._mostrar_desafio_diario()
            elif acao == "3":
                self._mostrar_todas_conquistas()
            elif acao == "4":
                self._mostrar_historico_xp()
        
        except KeyboardInterrupt:
            pass
        
        self.utils.pausar()
    
    def _abrir_editor_codigo(self) -> None:
        """Abre o editor/playground de c√≥digo"""
        self.code_playground.start_playground(self.ui)
    
    def _abrir_demos_interativas(self) -> None:
        """Abre sistema de demos interativas"""
        self.interactive_demos.start_demo_session()
    
    def _abrir_sincronizacao(self) -> None:
        """Abre sistema de sincroniza√ß√£o"""
        self.sync_manager.show_sync_menu(self.ui)
    
    def _abrir_exercicios_adaptativos(self) -> None:
        """Abre sistema de exerc√≠cios adaptativos"""
        self.ui.header("EXERC√çCIOS ADAPTATIVOS", "Treinamento Personalizado", "üéØ")
        
        print("üéØ OP√á√ïES:")
        print("1. üìö Sess√£o de Pr√°tica Mista")
        print("2. üé™ Focar em √Åreas Fracas")
        print("3. üìñ Revis√µes Pendentes")
        print("4. üìä Relat√≥rio de Performance")
        print("0. üîô Voltar")
        
        choice = input("\nüëâ Escolha: ").strip()
        
        if choice == "1":
            self.adaptive_session.start_session("mixed")
        elif choice == "2":
            self.adaptive_session.start_session("weak_areas")
        elif choice == "3":
            self.adaptive_session.start_session("reviews")
        elif choice == "4":
            self._mostrar_relatorio_exercicios()
    
    def _abrir_debug_visual(self) -> None:
        """Abre sistema de debug visual"""
        self.debug_session.start_debug_session()
    
    def _mostrar_relatorio_exercicios(self) -> None:
        """Mostra relat√≥rio de performance dos exerc√≠cios adaptativos"""
        report = self.adaptive_generator.get_performance_report()
        
        if report["status"] == "no_data":
            self.ui.alert("üì≠ Nenhum exerc√≠cio realizado ainda", "info")
            return
        
        self.ui.header("RELAT√ìRIO DE EXERC√çCIOS", "Sua Performance", "üìä")
        
        # Estat√≠sticas gerais
        self.ui.card(
            "Performance Geral",
            f"Exerc√≠cios Realizados: {report['total_exercises']}\n"
            f"Taxa de Acerto: {report['overall_accuracy']:.1f}%\n"
            f"Sequ√™ncia Atual: {report['recent_streak']} acertos\n"
            f"Revis√µes Pendentes: {report['due_reviews']}",
            "üìà",
            "success" if report['overall_accuracy'] >= 70 else "warning"
        )
        
        # Performance por t√≥pico
        if report['topic_performance']:
            print("\nüìö PERFORMANCE POR T√ìPICO:")
            for topic, stats in report['topic_performance'].items():
                accuracy = stats['accuracy']
                status = "‚úÖ" if accuracy >= 70 else "‚ö†Ô∏è" if accuracy >= 50 else "‚ùå"
                print(f"{status} {topic.replace('_', ' ').title()}: {stats['correct']}/{stats['total']} ({accuracy:.0f}%)")
        
        # √Åreas para focar
        if report['recommended_focus']:
            print(f"\nüí° √ÅREAS RECOMENDADAS PARA FOCO:")
            for topic in report['recommended_focus']:
                print(f"  ‚Ä¢ {topic.replace('_', ' ').title()}")
        
        self.utils.pausar()
    
    def _mostrar_loja_powerups(self) -> None:
        """Mostra loja de power-ups"""
        self.ui.section("LOJA DE POWER-UPS", "üè™")
        
        power_ups = self.gamification.obter_power_ups_disponiveis()
        moedas_atual = self.gamification.game_data["moedas"]
        
        print(f"üí∞ Suas moedas: {moedas_atual}")
        print()
        
        for i, power_up in enumerate(power_ups, 1):
            status = "‚úÖ" if moedas_atual >= power_up["custo"] else "‚ùå"
            print(f"{i}. {power_up['nome']} - {power_up['custo']} moedas {status}")
            print(f"   {power_up['descricao']}")
            print()
        
        try:
            escolha = int(input("Comprar qual power-up? (0 para cancelar): ")) - 1
            if 0 <= escolha < len(power_ups):
                power_up = power_ups[escolha]
                if self.gamification.comprar_power_up(power_up["id"]):
                    self.ui.alert(f"‚úÖ {power_up['nome']} comprado com sucesso!", "success")
                else:
                    self.ui.alert("‚ùå Moedas insuficientes!", "error")
        except ValueError:
            pass
    
    def _mostrar_desafio_diario(self) -> None:
        """Mostra desafio di√°rio"""
        desafio = self.gamification.criar_desafio_diario()
        
        self.ui.card(
            desafio["titulo"],
            f"{desafio['descricao']}\n\n"
            f"üéØ Meta: {desafio['meta']}\n"
            f"üèÜ Recompensa: {desafio['recompensa_xp']} XP + {desafio['recompensa_moedas']} moedas",
            "üéØ",
            "info"
        )
    
    def _mostrar_todas_conquistas(self) -> None:
        """Mostra todas as conquistas dispon√≠veis e desbloqueadas"""
        self.ui.section("TODAS AS CONQUISTAS", "üèÜ")
        
        badges_desbloqueados = [b["id"] for b in self.gamification.game_data["badges_desbloqueados"]]
        
        for badge in BadgeType:
            status = "‚úÖ" if badge.name in badges_desbloqueados else "üîí"
            print(f"{status} {badge.value[0]} {badge.value[1]}")
            print(f"   {badge.value[2]}")
            print()
    
    def _mostrar_historico_xp(self) -> None:
        """Mostra hist√≥rico de ganho de XP"""
        historico = self.gamification.game_data.get("historico_xp", [])
        
        if historico:
            self.ui.section("HIST√ìRICO DE XP", "üìà")
            for entrada in historico[-10:]:  # √öltimas 10
                timestamp = datetime.fromisoformat(entrada["timestamp"]).strftime("%d/%m %H:%M")
                print(f"{timestamp} - +{entrada['quantidade']} XP - {entrada['motivo']}")
        else:
            print("üì≠ Hist√≥rico vazio")
    
    def _calcular_taxa_media(self) -> float:
        """Calcula taxa de sucesso m√©dia"""
        total_modulos = len(self.progress.progress_data["modules_completed"])
        if total_modulos == 0:
            return 0.0
        
        total_tentativas = 0
        total_sucessos = 0
        
        for modulo_id in self.progress.progress_data["modules_completed"]:
            modulo_data = self.progress.progress_data["modules_progress"].get(modulo_id, {})
            tentativas = modulo_data.get("attempts", 1)
            total_tentativas += tentativas
            total_sucessos += 1  # M√≥dulo foi completado
        
        return (total_sucessos / total_tentativas) * 100 if total_tentativas > 0 else 0.0
    
    def _calcular_tempo_medio_geral(self) -> int:
        """Calcula tempo m√©dio geral em minutos"""
        total_tempo = 0
        total_modulos = 0
        
        for modulo_data in self.progress.progress_data["modules_progress"].values():
            if modulo_data.get("completed"):
                total_tempo += modulo_data.get("time_spent", 0)
                total_modulos += 1
        
        return (total_tempo // 60) if total_modulos > 0 else 0
    
    def _resetar_progresso(self) -> None:
        """Reseta todo o progresso do usu√°rio com confirma√ß√£o"""
        self.utils.limpar_tela()
        self.ui.header("RESETAR PROGRESSO", "‚ö†Ô∏è ATEN√á√ÉO! Esta a√ß√£o √© irrevers√≠vel!", "üóëÔ∏è")
        
        summary = self.progress.get_progress_summary()
        
        # Mostra informa√ß√µes do progresso atual
        self.ui.card(
            "Progresso Atual que ser√° PERDIDO",
            f"üë§ Usu√°rio: {summary['user_name']}\n"
            f"üìà Progresso: {summary['completion_percentage']:.1f}%\n"
            f"üìö M√≥dulos Completos: {summary['modules_completed']}/{summary['total_modules']}\n"
            f"üèÜ Pontua√ß√£o Total: {summary['total_score']} pontos\n"
            f"üéØ Conquistas: {summary['achievements']} desbloqueadas",
            "üìä",
            "warning"
        )
        
        self.ui.alert(
            "‚ö†Ô∏è AVISO: Todos os dados ser√£o perdidos permanentemente!",
            "error"
        )
        
        print("ü§î MOTIVOS COMUNS PARA RESETAR:")
        print("‚Ä¢ üë• M√∫ltiplos usu√°rios no mesmo computador")
        print("‚Ä¢ üîÑ Quero refazer o curso desde o in√≠cio")
        print("‚Ä¢ üìä Dados corrompidos ou inconsistentes")
        print("‚Ä¢ üéØ Come√ßar com metodologia diferente")
        
        print("\nüí° ALTERNATIVAS MENOS DR√ÅSTICAS:")
        print("‚Ä¢ üîÑ Use o Modo Revis√£o para praticar")
        print("‚Ä¢ üìÇ Fa√ßa backup manual dos dados")
        print("‚Ä¢ üë§ Crie outro perfil de usu√°rio no sistema")
        
        self.ui.divider("‚îÄ", "CONFIRMA√á√ÉO")
        
        try:
            # Primeira confirma√ß√£o
            print("üîê ETAPA 1: Confirma√ß√£o b√°sica")
            confirma1 = input("Digite 'RESETAR' (em mai√∫sculas) para continuar: ").strip()
            
            if confirma1 != "RESETAR":
                self.ui.alert("‚ùå Opera√ß√£o cancelada. Progresso mantido.", "info")
                self.utils.pausar()
                return
            
            # Segunda confirma√ß√£o com nome do usu√°rio
            print("\nüîê ETAPA 2: Confirma√ß√£o com nome")
            if summary['user_name']:
                nome_confirmacao = input(f"Digite o nome '{summary['user_name']}' para confirmar: ").strip()
                if nome_confirmacao != summary['user_name']:
                    self.ui.alert("‚ùå Nome incorreto. Opera√ß√£o cancelada.", "error")
                    self.utils.pausar()
                    return
            
            # Terceira confirma√ß√£o final
            print("\nüîê ETAPA 3: Confirma√ß√£o final")
            print("‚ö†Ô∏è √öLTIMA CHANCE! Esta a√ß√£o √© IRREVERS√çVEL!")
            confirma_final = input("Digite 'SIM' para resetar DEFINITIVAMENTE: ").strip().upper()
            
            if confirma_final != "SIM":
                self.ui.alert("‚ùå Opera√ß√£o cancelada. Progresso mantido.", "info")
                self.utils.pausar()
                return
            
            # Execu√ß√£o do reset
            self.ui.spinner("Resetando todos os dados", 3.0)
            
            # Reset do progresso
            self.progress.reset_progress()
            
            # Log da a√ß√£o
            self.logger.log_user_action("Progresso resetado pelo usu√°rio")
            
            # Feedback visual
            self.utils.limpar_tela()
            self.ui.alert("‚úÖ PROGRESSO RESETADO COM SUCESSO!", "success")
            
            self.ui.card(
                "Reset Conclu√≠do",
                "‚Ä¢ ‚úÖ Todos os m√≥dulos marcados como n√£o conclu√≠dos\n"
                "‚Ä¢ ‚úÖ Pontua√ß√£o zerada\n"
                "‚Ä¢ ‚úÖ Conquistas removidas\n"
                "‚Ä¢ ‚úÖ Estat√≠sticas de tempo resetadas\n"
                "‚Ä¢ ‚úÖ Nome de usu√°rio removido\n"
                "‚Ä¢ ‚úÖ Hist√≥rico limpo",
                "üéØ",
                "success"
            )
            
            print("\nüéâ RECOME√áO TOTAL!")
            print("Na pr√≥xima execu√ß√£o, voc√™ ser√° tratado como um novo usu√°rio.")
            print("Poder√° inserir um novo nome e come√ßar sua jornada do zero!")
            
            print("\nüöÄ DICAS PARA O RECOME√áO:")
            print("‚Ä¢ üìö Aproveite para revisar conceitos que tinha d√∫vidas")
            print("‚Ä¢ üéØ Estabele√ßa metas de estudo diferentes")
            print("‚Ä¢ ‚è∞ Experimente ritmos de aprendizado diferentes")
            print("‚Ä¢ üìù Tome notas durante o curso")
            
            self.ui.divider("‚îÄ")
            print("üèÅ Pressione ENTER para sair e reiniciar...")
            input()
            
            # For√ßa sa√≠da para reinicializa√ß√£o
            sys.exit(0)
            
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è Opera√ß√£o cancelada pelo usu√°rio (Ctrl+C)")
            self.ui.alert("‚ùå Reset cancelado. Progresso mantido.", "info")
            self.utils.pausar()
            return
        except Exception as e:
            print(f"\n‚ùå Erro durante o reset: {e}")
            self.ui.alert("‚ùå Erro no reset. Progresso mantido por seguran√ßa.", "error")
            self.utils.pausar()
            return
    
    def _sair_do_curso(self) -> bool:
        """Finaliza o curso e salva progresso"""
        # Calcula tempo da sess√£o
        session_duration = int((datetime.now() - self.session_start).total_seconds())
        
        # Salva progresso final
        self.progress.save_progress()
        
        # Log de fim de sess√£o
        self.logger.log_session_end(session_duration)
        
        # Mensagem de despedida personalizada
        summary = self.progress.get_progress_summary()
        
        print("\n" + "=" * 50)
        if summary['user_name']:
            print(f"üëã At√© logo, {summary['user_name']}!")
        else:
            print("üëã Obrigado por estudar Python conosco!")
        
        if summary['completion_percentage'] == 100:
            print("üéâ Parab√©ns por completar todo o curso!")
        elif summary['completion_percentage'] > 0:
            print(f"üìä Voc√™ completou {summary['completion_percentage']:.1f}% do curso.")
            print("Continue praticando e volte sempre que quiser!")
        
        print("üöÄ Boa sorte na sua jornada Python!")
        print("=" * 50)
        
        return False
    
    def menu_principal(self) -> None:
        """Menu principal do curso"""
        # Verifica se √© primeira vez
        self._check_first_time_user()
        
        while True:
            self.exibir_menu()
            
            # Processa atalhos de teclado
            print("\nüëâ Escolha uma op√ß√£o: ", end='', flush=True)
            try:
                escolha = input().strip()
            except KeyboardInterrupt:
                # Re-lan√ßa a exce√ß√£o para ser tratada no n√≠vel superior
                raise
            
            if not self.executar_opcao(escolha):
                break


def main() -> None:
    """Fun√ß√£o principal do programa"""
    course = None
    try:
        course = PythonCourse()
        course.menu_principal()
    except KeyboardInterrupt:
        # Tratamento para Ctrl+C
        print("\n\n‚ö†Ô∏è  Interrompido pelo usu√°rio (Ctrl+C)")
        
        if course:
            try:
                # Salva o progresso antes de sair
                print("üíæ Salvando seu progresso...")
                course.progress.save_progress()
                
                # Log de interrup√ß√£o
                session_duration = int((datetime.now() - course.session_start).total_seconds())
                course.logger.log_user_action("Sess√£o interrompida com Ctrl+C")
                course.logger.log_session_end(session_duration)
                
                # Mensagem de despedida
                summary = course.progress.get_progress_summary()
                if summary['user_name']:
                    print(f"\nüëã At√© logo, {summary['user_name']}!")
                print("‚úÖ Seu progresso foi salvo com seguran√ßa.")
                print("üîÑ Voc√™ pode continuar de onde parou na pr√≥xima vez!")
                
            except Exception as e:
                print(f"‚ö†Ô∏è  Erro ao salvar progresso: {e}")
        
        print("\nüêç Obrigado por usar o Curso de Python!")
        sys.exit(0)
    except Exception as e:
        # Tratamento para outros erros
        print(f"\n‚ùå Erro inesperado: {e}")
        if course:
            try:
                course.progress.save_progress()
                print("üíæ Progresso salvo antes de sair.")
            except:
                pass
        sys.exit(1)


if __name__ == "__main__":
    main()