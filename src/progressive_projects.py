#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Sistema de Projetos Graduais
Projetos reais que evoluem atrav√©s dos m√≥dulos do curso
"""

import json
import os
from datetime import datetime
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, asdict

@dataclass
class ProjectStep:
    """Representa um passo de um projeto"""
    step_id: str
    module_id: str
    title: str
    description: str
    instructions: List[str]
    code_template: str
    expected_output: str
    validation_criteria: List[str]
    concepts_learned: List[str]
    difficulty: str  # "beginner", "intermediate", "advanced"
    estimated_time: int  # em minutos
    
@dataclass
class ProjectProgress:
    """Progresso do usu√°rio em um projeto"""
    project_id: str
    current_step: int
    completed_steps: List[str]
    code_submissions: Dict[str, str]
    last_updated: str
    total_time_spent: int
    is_completed: bool

class ProgressiveProjectsSystem:
    """Sistema principal de projetos graduais"""
    
    def __init__(self, ui_components=None, progress_manager=None, course_controller=None):
        self.ui = ui_components
        self.progress = progress_manager
        self.course_controller = course_controller
        self.projects = self._load_projects()
        self.user_progress = self._load_user_progress()
        
    def _load_projects(self) -> Dict[str, List[ProjectStep]]:
        """Carrega defini√ß√µes dos projetos"""
        return {
            "biblioteca_pessoal": self._get_biblioteca_project(),
            "ecommerce_simples": self._get_ecommerce_project(), 
            "api_dashboard": self._get_api_dashboard_project()
        }
    
    def _load_user_progress(self) -> Dict[str, ProjectProgress]:
        """Carrega progresso do usu√°rio"""
        progress_file = "data/projects_progress.json"
        if os.path.exists(progress_file):
            try:
                with open(progress_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    return {
                        k: ProjectProgress(**v) for k, v in data.items()
                    }
            except:
                pass
        
        # Inicializar progresso vazio
        return {
            "biblioteca_pessoal": ProjectProgress(
                project_id="biblioteca_pessoal",
                current_step=0,
                completed_steps=[],
                code_submissions={},
                last_updated=datetime.now().isoformat(),
                total_time_spent=0,
                is_completed=False
            ),
            "ecommerce_simples": ProjectProgress(
                project_id="ecommerce_simples", 
                current_step=0,
                completed_steps=[],
                code_submissions={},
                last_updated=datetime.now().isoformat(),
                total_time_spent=0,
                is_completed=False
            ),
            "api_dashboard": ProjectProgress(
                project_id="api_dashboard",
                current_step=0, 
                completed_steps=[],
                code_submissions={},
                last_updated=datetime.now().isoformat(),
                total_time_spent=0,
                is_completed=False
            )
        }
    
    def save_progress(self):
        """Salva progresso dos projetos"""
        os.makedirs("data", exist_ok=True)
        progress_data = {
            k: asdict(v) for k, v in self.user_progress.items()
        }
        
        with open("data/projects_progress.json", 'w', encoding='utf-8') as f:
            json.dump(progress_data, f, indent=2, ensure_ascii=False)
    
    def reload_progress(self):
        """Recarrega progresso dos projetos do arquivo"""
        self.user_progress = self._load_user_progress()
    
    def get_project_for_module(self, module_number: int) -> Optional[tuple]:
        """Retorna projeto e passo correspondente ao m√≥dulo"""
        if 1 <= module_number <= 10:
            project_id = "biblioteca_pessoal"
            step_index = module_number - 1
        elif 11 <= module_number <= 20:
            project_id = "ecommerce_simples"
            step_index = module_number - 11
        elif 21 <= module_number <= 30:
            project_id = "api_dashboard"
            step_index = module_number - 21
        else:
            return None
            
        if project_id in self.projects:
            steps = self.projects[project_id]
            if step_index < len(steps):
                return (project_id, steps[step_index])
        
        return None
    
    def show_project_step(self, module_number: int):
        """Exibe o passo do projeto para o m√≥dulo atual"""
        project_info = self.get_project_for_module(module_number)
        if not project_info:
            return None
            
        project_id, step = project_info
        progress = self.user_progress[project_id]
        
        if self.ui:
            self.ui.clear_screen()
            self.ui.header(f"üöÄ PROJETO: {step.title}", f"M√≥dulo {module_number}")
        
        self._display_project_intro(project_id, step, module_number)
        self._display_step_content(step)
        return self._handle_step_interaction(project_id, step, module_number)
    
    def _display_project_intro(self, project_id: str, step: ProjectStep, module_number: int):
        """Exibe introdu√ß√£o do projeto"""
        project_names = {
            "biblioteca_pessoal": "üìö Sistema de Biblioteca Pessoal",
            "ecommerce_simples": "üõí E-commerce Simples", 
            "api_dashboard": "üìä API e Dashboard Analytics"
        }
        
        if self.ui:
            # Use o sistema de cores melhorado
            info_color = self.ui.get_color("info")
            accent_color = self.ui.get_color("accent")
            text_color = self.ui.get_color("text")
            reset = self.ui.get_color("reset")
            
            print(f"\n{accent_color}üéØ {project_names[project_id]}{reset}")
            print(f"{info_color}{'‚îÄ' * 50}{reset}")
            print(f"{info_color}üìç Passo {module_number}/10{reset} ‚Ä¢ {text_color}‚è±Ô∏è {step.estimated_time}min{reset} ‚Ä¢ {accent_color}üìà {step.difficulty.title()}{reset}")
            print()
            print(f"{accent_color}üß† Conceitos principais:{reset}")
            for concept in step.concepts_learned:
                print(f"  {info_color}‚Ä¢{reset} {text_color}{concept}{reset}")
        else:
            # Fallback sem cores
            print(f"\nüéØ {project_names[project_id]}")
            print("‚îÄ" * 50)
            print(f"üìç Passo {module_number}/10 ‚Ä¢ ‚è±Ô∏è {step.estimated_time}min ‚Ä¢ üìà {step.difficulty.title()}")
            print()
            print("üß† Conceitos principais:")
            for concept in step.concepts_learned:
                print(f"  ‚Ä¢ {concept}")
        print()
        
    def _display_step_content(self, step: ProjectStep):
        """Exibe conte√∫do detalhado do passo"""
        if self.ui:
            # Se√ß√µes organizadas com cores
            section_color = self.ui.get_color("warning")
            content_color = self.ui.get_color("text")
            code_color = self.ui.get_color("primary")
            success_color = self.ui.get_color("success")
            reset = self.ui.get_color("reset")
            
            # Descri√ß√£o
            print(f"{section_color}üìã DESCRI√á√ÉO{reset}")
            print(f"{content_color}{step.description}{reset}")
            print()
            
            # Instru√ß√µes
            print(f"{section_color}üîß PASSO A PASSO{reset}")
            for i, instruction in enumerate(step.instructions, 1):
                print(f" {section_color}{i}.{reset} {content_color}{instruction}{reset}")
            print()
            
            # Template de c√≥digo
            if step.code_template:
                print(f"{section_color}üíª TEMPLATE INICIAL{reset}")
                print(f"{code_color}{step.code_template}{reset}")
                print()
            
            # Crit√©rios
            print(f"{section_color}‚úÖ VALIDA√á√ÉO{reset}")
            for criteria in step.validation_criteria:
                print(f"  {success_color}‚úì{reset} {content_color}{criteria}{reset}")
            print()
        else:
            # Fallback sem cores
            print("üìã DESCRI√á√ÉO")
            print(step.description)
            print()
            
            print("üîß PASSO A PASSO")
            for i, instruction in enumerate(step.instructions, 1):
                print(f" {i}. {instruction}")
            print()
            
            if step.code_template:
                print("üíª TEMPLATE INICIAL")
                print(step.code_template)
                print()
            
            print("‚úÖ VALIDA√á√ÉO")
            for criteria in step.validation_criteria:
                print(f"  ‚úì {criteria}")
            print()
        
        if step.expected_output:
            if self.ui:
                section_color = self.ui.get_color("warning")
                content_color = self.ui.get_color("text")
                reset = self.ui.get_color("reset")
                print(f"{section_color}üì§ RESULTADO ESPERADO{reset}")
                print(f"{content_color}{step.expected_output}{reset}")
            else:
                print("üì§ RESULTADO ESPERADO")
                print(step.expected_output)
            print()
    
    def _handle_step_interaction(self, project_id: str, step: ProjectStep, module_number: int):
        """Gerencia intera√ß√£o do usu√°rio com o passo"""
        if self.ui:
            # Menu redesenhado com cores
            menu_color = self.ui.get_color("accent")
            option_color = self.ui.get_color("primary")
            input_color = self.ui.get_color("warning")
            reset = self.ui.get_color("reset")
            
            print(f"\n{menu_color}{'‚ïê' * 50}{reset}")
            print(f"{menu_color}üéØ O QUE FAZER AGORA?{reset}")
            print(f"{menu_color}{'‚ïê' * 50}{reset}")
            print(f"{option_color}1.{reset} üöÄ Continuar com o m√≥dulo")
            print(f"{option_color}2.{reset} üí° Ver c√≥digo de exemplo")
            print(f"{option_color}3.{reset} ‚úÖ Marcar passo como conclu√≠do")
            print(f"{option_color}4.{reset} üìà Ver progresso do projeto")
            print(f"{option_color}0.{reset} üö™ Pular projeto por enquanto")
            print(f"{menu_color}{'‚ïê' * 50}{reset}")
            
            choice = input(f"\n{input_color}üëâ Sua escolha: {reset}").strip()
        else:
            # Fallback sem cores
            print("\n" + "‚ïê" * 50)
            print("üéØ O QUE FAZER AGORA?")
            print("‚ïê" * 50)
            print("1. üöÄ Continuar com o m√≥dulo")
            print("2. üí° Ver c√≥digo de exemplo")
            print("3. ‚úÖ Marcar passo como conclu√≠do")
            print("4. üìà Ver progresso do projeto")
            print("0. üö™ Pular projeto por enquanto")
            print("‚ïê" * 50)
            
            choice = input("\nüëâ Sua escolha: ").strip()
        
        if choice == "1":
            # Retorna o n√∫mero do m√≥dulo para execu√ß√£o
            return f"execute_module_{module_number}"
        elif choice == "2":
            self._show_example_code(step)
            # Recursively call to show menu again
            return self._handle_step_interaction(project_id, step, module_number)
        elif choice == "3":
            self._mark_step_completed(project_id, step)
            # Ap√≥s marcar como conclu√≠do, retorna None para voltar ao menu
            return None
        elif choice == "4":
            self._show_project_progress(project_id)
            # Recursively call to show menu again
            return self._handle_step_interaction(project_id, step, module_number)
        elif choice == "0":
            if self.ui:
                success_color = self.ui.get_color("success")
                reset = self.ui.get_color("reset")
                print(f"\n{success_color}‚úÖ Voc√™ pode retomar o projeto a qualquer momento!{reset}")
            else:
                print("\n‚úÖ Voc√™ pode retomar o projeto a qualquer momento!")
            input("Pressione ENTER para continuar...")
            return None
        else:
            if self.ui:
                error_color = self.ui.get_color("error")
                reset = self.ui.get_color("reset")
                print(f"\n{error_color}‚ùå Op√ß√£o inv√°lida! Tente novamente.{reset}")
            else:
                print("\n‚ùå Op√ß√£o inv√°lida! Tente novamente.")
            # Recursively call to show menu again
            return self._handle_step_interaction(project_id, step, module_number)
    
    def _show_example_code(self, step: ProjectStep):
        """Mostra c√≥digo de exemplo para o passo"""
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üí° C√ìDIGO DE EXEMPLO", step.title)
        
        print("üìù Este √© um exemplo de como resolver este passo:")
        print("=" * 50)
        print(step.code_template)
        print()
        print("üí° Dicas importantes:")
        for criteria in step.validation_criteria:
            print(f"  ‚Ä¢ {criteria}")
        
        input("\nPressione ENTER para voltar...")
    
    def _mark_step_completed(self, project_id: str, step: ProjectStep):
        """Marca passo como conclu√≠do"""
        progress = self.user_progress[project_id]
        
        if step.step_id not in progress.completed_steps:
            progress.completed_steps.append(step.step_id)
            progress.current_step += 1
            progress.last_updated = datetime.now().isoformat()
            
            # Salvar progresso
            self.save_progress()
            
            if self.ui:
                success_color = self.ui.get_color("success")
                info_color = self.ui.get_color("info")
                reset = self.ui.get_color("reset")
                
                print(f"\n{success_color}{'‚úÖ' * 25}{reset}")
                print(f"{success_color}‚úÖ Passo '{step.title}' marcado como conclu√≠do!{reset}")
                print(f"{info_color}üéâ Voc√™ completou {len(progress.completed_steps)} passos do projeto!{reset}")
                print(f"{success_color}{'‚úÖ' * 25}{reset}")
            else:
                print(f"‚úÖ Passo '{step.title}' marcado como conclu√≠do!")
                print(f"üéâ Voc√™ completou {len(progress.completed_steps)} passos do projeto!")
            
            # Verificar se projeto foi completado
            total_steps = len(self.projects[project_id])
            if len(progress.completed_steps) >= total_steps:
                progress.is_completed = True
                if self.ui:
                    celebration_color = self.ui.get_color("warning")
                    print(f"\n{celebration_color}üèÜ PARAB√âNS! Voc√™ completou todo o projeto '{project_id}'!{reset}")
                else:
                    print(f"üèÜ PARAB√âNS! Voc√™ completou todo o projeto '{project_id}'!")
                
        else:
            if self.ui:
                info_color = self.ui.get_color("info")
                reset = self.ui.get_color("reset")
                print(f"{info_color}‚ÑπÔ∏è Este passo j√° foi marcado como conclu√≠do.{reset}")
            else:
                print("‚ÑπÔ∏è Este passo j√° foi marcado como conclu√≠do.")
            
        input("Pressione ENTER para continuar...")
    
    def _show_project_progress(self, project_id: str):
        """Mostra progresso geral do projeto"""
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üìä PROGRESSO DO PROJETO", project_id.title())
        
        progress = self.user_progress[project_id]
        total_steps = len(self.projects[project_id])
        completed = len(progress.completed_steps)
        completion_percentage = (completed / total_steps) * 100
        
        print(f"üìà Progresso: {completed}/{total_steps} passos ({completion_percentage:.1f}%)")
        print(f"‚è±Ô∏è Tempo gasto: {progress.total_time_spent} minutos")
        print(f"üìÖ √öltima atualiza√ß√£o: {progress.last_updated[:10]}")
        print()
        
        print("üìã PASSOS COMPLETADOS:")
        print("=" * 40)
        for step_id in progress.completed_steps:
            # Encontrar t√≠tulo do passo
            for step in self.projects[project_id]:
                if step.step_id == step_id:
                    print(f"  ‚úÖ {step.title}")
                    break
        
        print("\nüìã PR√ìXIMOS PASSOS:")
        print("=" * 40)
        for step in self.projects[project_id]:
            if step.step_id not in progress.completed_steps:
                print(f"  ‚è≥ {step.title}")
                break
        
        input("\nPressione ENTER para continuar...")
    
    # ========= DEFINI√á√ïES DOS PROJETOS =========
    
    def _get_biblioteca_project(self) -> List[ProjectStep]:
        """Define projeto Sistema de Biblioteca Pessoal (M√≥dulos 1-10)"""
        return [
            ProjectStep(
                step_id="bib_001",
                module_id="modulo_1",
                title="Cadastro de Livros B√°sico",
                description="""üéØ OBJETIVO DO PROJETO:
Vamos criar seu primeiro programa Python! Imagine que voc√™ tem uma cole√ß√£o de livros em casa e quer organiz√°-los no computador. Este projeto vai ensinar voc√™ a:

üìö O QUE VAMOS FAZER:
‚Ä¢ Perguntar para o usu√°rio informa√ß√µes sobre um livro (como t√≠tulo, autor, etc.)
‚Ä¢ Guardar essas informa√ß√µes na "mem√≥ria" do computador (usando vari√°veis)
‚Ä¢ Mostrar as informa√ß√µes organizadas na tela

üåü POR QUE ISSO √â √öTIL:
‚Ä¢ √â a base de qualquer sistema de cadastro (lojas, escolas, hospitais)
‚Ä¢ Voc√™ aprende os conceitos fundamentais de programa√ß√£o
‚Ä¢ √â algo que voc√™ pode mostrar para fam√≠lia e amigos!

üí° CONCEITOS QUE VOC√ä VAI DOMINAR:
‚Ä¢ Vari√°veis: Como o computador "lembra" das informa√ß√µes
‚Ä¢ Input: Como fazer perguntas para o usu√°rio
‚Ä¢ Print: Como mostrar informa√ß√µes na tela
‚Ä¢ F-strings: Como deixar o texto bonito e organizado""",
                instructions=[
                    "üìù PASSO 1: Entenda o que s√£o vari√°veis\n   ‚Üí Vari√°veis s√£o como 'caixas' onde guardamos informa√ß√µes\n   ‚Üí Exemplo: titulo = 'Harry Potter' (guardamos o nome do livro na caixa 'titulo')",
                    
                    "üó£Ô∏è PASSO 2: Aprenda a fazer perguntas para o usu√°rio\n   ‚Üí Use input() para perguntar algo\n   ‚Üí Exemplo: nome = input('Qual seu nome?')\n   ‚Üí O que o usu√°rio digitar ser√° guardado na vari√°vel 'nome'",
                    
                    "üìã PASSO 3: Colete as informa√ß√µes do livro\n   ‚Üí Pergunte o t√≠tulo, autor, ano e g√™nero\n   ‚Üí Guarde cada resposta em uma vari√°vel diferente\n   ‚Üí Dica: Use nomes claros como 'titulo', 'autor', 'ano', 'genero'",
                    
                    "‚ú® PASSO 4: Exiba as informa√ß√µes de forma organizada\n   ‚Üí Use print() para mostrar as informa√ß√µes\n   ‚Üí Use f-strings para deixar bonito: f'T√≠tulo: {titulo}'\n   ‚Üí Crie uma 'ficha' visual do livro",
                    
                    "üîÑ PASSO 5: Teste com livros diferentes\n   ‚Üí Execute o programa pelo menos 2 vezes\n   ‚Üí Use livros que voc√™ conhece\n   ‚Üí Veja como cada execu√ß√£o guarda informa√ß√µes diferentes"
                ],
                code_template="""# üêç MEU PRIMEIRO PROGRAMA PYTHON! üêç
# Sistema de Biblioteca - Cadastro de Livros

# üìù PARTE 1: COLETANDO INFORMA√á√ïES
# As linhas abaixo fazem perguntas para o usu√°rio
# O que for digitado ser√° guardado nas "caixas" (vari√°veis)

titulo = input("üìö Digite o t√≠tulo do livro: ")
# ‚Üë Esta linha pergunta o t√≠tulo e guarda na vari√°vel 'titulo'

autor = input("‚úçÔ∏è Digite o autor: ")
# ‚Üë Esta linha pergunta o autor e guarda na vari√°vel 'autor'

ano = input("üìÖ Digite o ano de publica√ß√£o: ")
# ‚Üë Esta linha pergunta o ano e guarda na vari√°vel 'ano'

genero = input("üìñ Digite o g√™nero (fic√ß√£o, romance, etc.): ")
# ‚Üë Esta linha pergunta o g√™nero e guarda na vari√°vel 'genero'

# üìã PARTE 2: EXIBINDO AS INFORMA√á√ïES
# Agora vamos mostrar tudo organizado na tela

print("\\n" + "="*40)  # Cria uma linha decorativa
print("üìö‚ú® LIVRO CADASTRADO COM SUCESSO! ‚ú®üìö")
print("="*40)
print(f"üìñ T√≠tulo: {titulo}")
print(f"‚úçÔ∏è Autor: {autor}")
print(f"üìÖ Ano: {ano}")
print(f"üìö G√™nero: {genero}")
print("="*40)
print("üéâ Parab√©ns! Seu livro foi adicionado √† biblioteca!")

# üí° EXPLICA√á√ÉO DO C√ìDIGO:
# - input() = pergunta algo para o usu√°rio
# - = (igual) = guarda a resposta numa vari√°vel
# - print() = mostra algo na tela
# - f"{variavel}" = coloca o conte√∫do da vari√°vel no texto""",
                expected_output="""EXEMPLO DO QUE VOC√ä VER√Å:

Quando executar o programa, aparecer√°:
üìö Digite o t√≠tulo do livro: [usu√°rio digita: O Pequeno Pr√≠ncipe]
‚úçÔ∏è Digite o autor: [usu√°rio digita: Antoine de Saint-Exup√©ry]
üìÖ Digite o ano de publica√ß√£o: [usu√°rio digita: 1943]
üìñ Digite o g√™nero: [usu√°rio digita: F√°bula]

========================================
üìö‚ú® LIVRO CADASTRADO COM SUCESSO! ‚ú®üìö
========================================
üìñ T√≠tulo: O Pequeno Pr√≠ncipe
‚úçÔ∏è Autor: Antoine de Saint-Exup√©ry
üìÖ Ano: 1943
üìö G√™nero: F√°bula
========================================
üéâ Parab√©ns! Seu livro foi adicionado √† biblioteca!""",
                validation_criteria=[
                    "‚úÖ O programa faz 4 perguntas (t√≠tulo, autor, ano, g√™nero)",
                    "‚úÖ As respostas s√£o guardadas em vari√°veis com nomes claros",
                    "‚úÖ As informa√ß√µes s√£o exibidas de forma organizada e bonita",
                    "‚úÖ O c√≥digo tem coment√°rios explicando cada parte",
                    "‚úÖ Usa f-strings para inserir as vari√°veis no texto",
                    "‚úÖ Funciona quando voc√™ digita diferentes livros"
                ],
                concepts_learned=[
                    "üóÉÔ∏è VARI√ÅVEIS: Como criar 'caixas' para guardar informa√ß√µes (titulo = 'Harry Potter')",
                    "üó£Ô∏è FUN√á√ÉO INPUT(): Como fazer perguntas para o usu√°rio e receber respostas",
                    "üì∫ FUN√á√ÉO PRINT(): Como mostrar informa√ß√µes na tela de forma organizada",
                    "‚ú® F-STRINGS: Como inserir vari√°veis dentro de textos (f'T√≠tulo: {titulo}')",
                    "üìù COMENT√ÅRIOS: Como explicar seu c√≥digo usando # (muito importante!)",
                    "üèóÔ∏è ESTRUTURA DE PROGRAMA: Como organizar c√≥digo em se√ß√µes l√≥gicas"
                ],
                difficulty="beginner",
                estimated_time=15
            ),
            ProjectStep(
                step_id="bib_002",
                module_id="modulo_2", 
                title="Sistema Inteligente - Valida√ß√£o e Decis√µes",
                description="""üéØ EVOLUINDO SEU PROGRAMA:
Agora vamos tornar seu programa mais inteligente! No projeto anterior, voc√™ aprendeu o b√°sico. Agora vamos ensinar o computador a:

üß† O QUE VAMOS ADICIONAR:
‚Ä¢ Verificar se as informa√ß√µes est√£o corretas (valida√ß√£o)
‚Ä¢ Tomar decis√µes autom√°ticas (if/else)
‚Ä¢ Permitir cadastrar v√°rios livros de uma vez (loops)
‚Ä¢ Classificar livros automaticamente (ex: cl√°ssico ou moderno)

üåü POR QUE ISSO √â REVOLUCION√ÅRIO:
‚Ä¢ Seu programa agora "pensa" e toma decis√µes
‚Ä¢ N√£o aceita mais informa√ß√µes inv√°lidas
‚Ä¢ Funciona como um sistema profissional
‚Ä¢ Voc√™ est√° aprendendo l√≥gica de programa√ß√£o!

üí° NOVOS CONCEITOS SUPER IMPORTANTES:
‚Ä¢ Condi√ß√µes (if/else): Como o programa toma decis√µes
‚Ä¢ Loops (while): Como repetir a√ß√µes automaticamente
‚Ä¢ Valida√ß√£o: Como verificar se dados est√£o corretos
‚Ä¢ Break: Como parar um loop quando necess√°rio""",
                instructions=[
                    "üõ°Ô∏è PASSO 1: Aprenda sobre valida√ß√£o de dados\n   ‚Üí Valida√ß√£o = verificar se a informa√ß√£o est√° certa\n   ‚Üí Exemplo: ano deve ser um n√∫mero, n√£o uma palavra\n   ‚Üí Se estiver errado, pe√ßa para digitar novamente",
                    
                    "ü§î PASSO 2: Ensine o programa a tomar decis√µes\n   ‚Üí Use if/else para fazer verifica√ß√µes\n   ‚Üí Exemplo: if ano < 1974: print('Livro cl√°ssico!')\n   ‚Üí O programa vai classificar automaticamente",
                    
                    "üîÑ PASSO 3: Implemente loops para cadastros m√∫ltiplos\n   ‚Üí Use while True: para repetir o cadastro\n   ‚Üí Permita cadastrar v√°rios livros seguidos\n   ‚Üí O usu√°rio escolhe quando parar",
                    
                    "üö™ PASSO 4: Adicione uma 'porta de sa√≠da'\n   ‚Üí Use break para sair do loop\n   ‚Üí Quando usu√°rio digitar 'sair', o programa para\n   ‚Üí Sempre deixe uma forma de sair!",
                    
                    "‚ú® PASSO 5: Teste o sistema completo\n   ‚Üí Tente cadastrar livros v√°lidos e inv√°lidos\n   ‚Üí Veja como o programa se comporta\n   ‚Üí Teste a classifica√ß√£o autom√°tica de livros"
                ],
                code_template="""# üß† SISTEMA INTELIGENTE DE BIBLIOTECA üß†
# Agora com valida√ß√£o e decis√µes autom√°ticas!

print("üèõÔ∏è Bem-vindo ao Sistema Inteligente de Biblioteca!")
print("üìö Agora podemos cadastrar v√°rios livros e classific√°-los automaticamente!")

# üîÑ LOOP PRINCIPAL - Permite cadastrar v√°rios livros
while True:
    print("\\n" + "="*50)
    print("üìö NOVO CADASTRO DE LIVRO")
    print("="*50)
    
    # üö™ PORTA DE SA√çDA - sempre tenha uma!
    titulo = input("üìñ T√≠tulo do livro (ou digite 'sair' para terminar): ")
    
    # ü§î PRIMEIRA DECIS√ÉO: O usu√°rio quer sair?
    if titulo.lower() == 'sair':
        print("üëã Obrigado por usar o sistema! At√© logo!")
        break  # ‚Üê Isso para o loop
    
    # üìù Coletando outras informa√ß√µes
    autor = input("‚úçÔ∏è Autor: ")
    genero = input("üìö G√™nero: ")
    
    # üõ°Ô∏è VALIDA√á√ÉO INTELIGENTE DO ANO
    print("\\nüìÖ Agora vamos validar o ano...")
    while True:  # ‚Üê Loop para valida√ß√£o
        try:
            ano = int(input("Ano de publica√ß√£o (1000-2024): "))
            
            # ü§î SEGUNDA DECIS√ÉO: O ano est√° v√°lido?
            if 1000 <= ano <= 2024:
                print(f"‚úÖ Ano {ano} √© v√°lido!")
                break  # ‚Üê Sai do loop de valida√ß√£o
            else:
                print("‚ùå Erro: Ano deve estar entre 1000 e 2024")
                print("üí° Tente novamente...")
                
        except ValueError:
            print("‚ùå Erro: Digite apenas n√∫meros!")
            print("üí° Exemplo: 1997, 2020, etc.")
    
    # üß† CLASSIFICA√á√ÉO AUTOM√ÅTICA (Intelig√™ncia Artificial b√°sica!)
    ano_atual = 2024
    idade_livro = ano_atual - ano
    
    # ü§î TERCEIRA DECIS√ÉO: √â cl√°ssico ou contempor√¢neo?
    if idade_livro >= 50:
        classificacao = "üìú CL√ÅSSICO"
        emoji_classe = "üìú"
    else:
        classificacao = "üÜï CONTEMPOR√ÇNEO"
        emoji_classe = "üÜï"
    
    # üìã EXIBINDO RESULTADO COMPLETO
    print("\\n" + "üéâ"*20)
    print("‚úÖ LIVRO CADASTRADO COM SUCESSO!")
    print("üéâ"*20)
    print(f"üìñ T√≠tulo: {titulo}")
    print(f"‚úçÔ∏è Autor: {autor}")
    print(f"üìÖ Ano: {ano}")
    print(f"üìö G√™nero: {genero}")
    print(f"{emoji_classe} Classifica√ß√£o: {classificacao}")
    print(f"üïê Idade do livro: {idade_livro} anos")
    print("="*50)

print("\\nüéì PARAB√âNS! Voc√™ criou um sistema inteligente!")
print("üí° Seu programa agora:")
print("   ‚úÖ Valida dados automaticamente")
print("   ‚úÖ Toma decis√µes sozinho")
print("   ‚úÖ Processa m√∫ltiplos livros")
print("   ‚úÖ Classifica livros automaticamente")

# üí° CONCEITOS APRENDIDOS:
# - while True = loop infinito (at√© encontrar break)
# - if/else = tomada de decis√µes
# - try/except = tratamento de erros
# - break = para sair de loops
# - Valida√ß√£o = verificar se dados est√£o corretos""",
                expected_output="""EXEMPLO DO SISTEMA EM FUNCIONAMENTO:

üèõÔ∏è Bem-vindo ao Sistema Inteligente de Biblioteca!
üìö Agora podemos cadastrar v√°rios livros e classific√°-los automaticamente!

==================================================
üìö NOVO CADASTRO DE LIVRO
==================================================
üìñ T√≠tulo do livro: O Senhor dos An√©is
‚úçÔ∏è Autor: J.R.R. Tolkien
üìö G√™nero: Fantasia

üìÖ Agora vamos validar o ano...
Ano de publica√ß√£o (1000-2024): 1954
‚úÖ Ano 1954 √© v√°lido!

üéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâ
‚úÖ LIVRO CADASTRADO COM SUCESSO!
üéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâüéâ
üìñ T√≠tulo: O Senhor dos An√©is
‚úçÔ∏è Autor: J.R.R. Tolkien
üìÖ Ano: 1954
üìö G√™nero: Fantasia
üìú Classifica√ß√£o: üìú CL√ÅSSICO
üïê Idade do livro: 70 anos
==================================================""",
                validation_criteria=[
                    "‚úÖ O programa aceita m√∫ltiplos cadastros (loop while funciona)",
                    "‚úÖ Valida anos corretamente (s√≥ aceita n√∫meros entre 1000-2024)",
                    "‚úÖ Trata erros quando usu√°rio digita texto em vez de n√∫mero",
                    "‚úÖ Classifica livros automaticamente (cl√°ssico vs contempor√¢neo)",
                    "‚úÖ Permite sair digitando 'sair' (break funciona)",
                    "‚úÖ C√≥digo bem comentado explicando cada parte"
                ],
                concepts_learned=[
                    "üîÑ LOOPS (while): Como repetir a√ß√µes at√© uma condi√ß√£o ser atendida",
                    "ü§î CONDI√á√ïES (if/else): Como o programa toma decis√µes autom√°ticas",
                    "üõ°Ô∏è VALIDA√á√ÉO: Como verificar se dados est√£o corretos antes de usar",
                    "üö® TRATAMENTO DE ERROS (try/except): Como lidar com entradas inv√°lidas",
                    "üö™ CONTROLE DE FLUXO (break): Como sair de loops quando necess√°rio",
                    "üìä C√ÅLCULOS: Como fazer opera√ß√µes matem√°ticas simples (idade do livro)"
                ],
                difficulty="beginner",
                estimated_time=20
            ),
            ProjectStep(
                step_id="bib_003",
                module_id="modulo_3",
                title="Lista de Livros e Busca",
                description="Implementar armazenamento em lista e fun√ß√£o de busca b√°sica.",
                instructions=[
                    "Crie lista para armazenar todos os livros",
                    "Modifique cadastro para adicionar livros √† lista",
                    "Implemente fun√ß√£o para listar todos os livros",
                    "Crie fun√ß√£o de busca por t√≠tulo",
                    "Adicione menu de op√ß√µes (cadastrar, listar, buscar)"
                ],
                code_template="""
# Sistema de Biblioteca - Passo 3: Lista e Busca
biblioteca = []

def cadastrar_livro():
    # ... c√≥digo de cadastro ...
    livro = {
        'titulo': titulo,
        'autor': autor,
        'ano': ano,
        'genero': genero,
        'classificacao': classificacao
    }
    biblioteca.append(livro)
    print(f"üìö Livro adicionado! Total: {len(biblioteca)} livros")

def listar_livros():
    if not biblioteca:
        print("üì≠ Nenhum livro cadastrado ainda.")
        return
    
    print(f"\\nüìö BIBLIOTECA ({len(biblioteca)} livros):")
    print("-" * 50)
    for i, livro in enumerate(biblioteca, 1):
        print(f"{i}. {livro['titulo']} - {livro['autor']} ({livro['ano']})")

def buscar_livro():
    if not biblioteca:
        print("üì≠ Biblioteca vazia!")
        return
    
    termo = input("Digite o t√≠tulo a buscar: ").lower()
    encontrados = []
    
    for livro in biblioteca:
        if termo in livro['titulo'].lower():
            encontrados.append(livro)
    
    if encontrados:
        print(f"\\nüîç Encontrados {len(encontrados)} livro(s):")
        for livro in encontrados:
            print(f"‚Ä¢ {livro['titulo']} - {livro['autor']}")
    else:
        print("‚ùå Nenhum livro encontrado.")

# Menu principal
while True:
    print("\\n=== BIBLIOTECA PESSOAL ===")
    print("1. Cadastrar livro")
    print("2. Listar livros")
    print("3. Buscar livro")
    print("0. Sair")
    
    opcao = input("Escolha uma op√ß√£o: ")
    # ... implementar menu ...
                """,
                expected_output="Sistema com menu e funcionalidades de busca",
                validation_criteria=[
                    "Lista armazena livros corretamente",
                    "Menu de op√ß√µes funcional",
                    "Busca encontra livros por t√≠tulo",
                    "Fun√ß√µes bem organizadas"
                ],
                concepts_learned=[
                    "Listas e m√©todos de lista",
                    "Dicion√°rios para estruturar dados",
                    "Fun√ß√µes (def)",
                    "Menu de op√ß√µes com loop"
                ],
                difficulty="beginner",
                estimated_time=25
            ),
            # Continuando com os demais m√≥dulos 4-10...
            ProjectStep(
                step_id="bib_004",
                module_id="modulo_4",
                title="Persist√™ncia em Arquivo",
                description="Salvar e carregar biblioteca em arquivo JSON.",
                instructions=[
                    "Implemente fun√ß√£o para salvar biblioteca em arquivo JSON",
                    "Crie fun√ß√£o para carregar dados do arquivo",
                    "Adicione tratamento para arquivo n√£o existir",
                    "Chame carregar_dados() no in√≠cio do programa",
                    "Chame salvar_dados() sempre que cadastrar livro"
                ],
                code_template="""
import json
import os

ARQUIVO_BIBLIOTECA = "biblioteca.json"

def salvar_dados():
    try:
        with open(ARQUIVO_BIBLIOTECA, 'w', encoding='utf-8') as arquivo:
            json.dump(biblioteca, arquivo, indent=2, ensure_ascii=False)
        print("üíæ Dados salvos automaticamente!")
    except Exception as e:
        print(f"‚ùå Erro ao salvar: {e}")

def carregar_dados():
    global biblioteca
    if os.path.exists(ARQUIVO_BIBLIOTECA):
        try:
            with open(ARQUIVO_BIBLIOTECA, 'r', encoding='utf-8') as arquivo:
                biblioteca = json.load(arquivo)
            print(f"üìÇ Carregados {len(biblioteca)} livros do arquivo!")
        except Exception as e:
            print(f"‚ùå Erro ao carregar: {e}")
            biblioteca = []
    else:
        biblioteca = []
        print("üìù Criando nova biblioteca...")

# Inicializar dados
carregar_dados()
                """,
                expected_output="Sistema que persiste dados entre execu√ß√µes",
                validation_criteria=[
                    "Salva dados em JSON corretamente",
                    "Carrega dados na inicializa√ß√£o",
                    "Trata erros de arquivo adequadamente",
                    "Encoding UTF-8 preserva acentos"
                ],
                concepts_learned=[
                    "Manipula√ß√£o de arquivos",
                    "JSON para persist√™ncia",
                    "Tratamento de exce√ß√µes",
                    "Encoding de caracteres"
                ],
                difficulty="intermediate",
                estimated_time=30
            )
        ]
    
    def _get_ecommerce_project(self) -> List[ProjectStep]:
        """Define projeto E-commerce Simples (M√≥dulos 11-20)"""
        return [
            ProjectStep(
                step_id="ecom_001", 
                module_id="modulo_11",
                title="Cat√°logo de Produtos",
                description="Criar um sistema de cat√°logo usando classes e objetos.",
                instructions=[
                    "Criar classe Produto com atributos nome, pre√ßo, categoria",
                    "Implementar m√©todo __str__ para exibi√ß√£o",
                    "Criar lista de produtos", 
                    "Implementar fun√ß√£o para listar produtos"
                ],
                code_template="""
class Produto:
    def __init__(self, nome, preco, categoria):
        self.nome = nome
        self.preco = preco
        self.categoria = categoria
    
    def __str__(self):
        return f"{self.nome} - R$ {self.preco:.2f} ({self.categoria})"

# Criar cat√°logo
catalogo = []
# Adicionar produtos...
                """,
                expected_output="Lista de produtos formatada",
                validation_criteria=[
                    "Classe Produto bem definida",
                    "M√©todo __str__ implementado",
                    "Lista de produtos funcional"
                ],
                concepts_learned=[
                    "Classes e objetos",
                    "M√©todos especiais",
                    "Listas de objetos"
                ],
                difficulty="intermediate", 
                estimated_time=25
            ),
            # Mais passos do e-commerce...
        ]
    
    def _get_api_dashboard_project(self) -> List[ProjectStep]:
        """Define projeto API e Dashboard (M√≥dulos 21-30)"""
        return [
            ProjectStep(
                step_id="api_001",
                module_id="modulo_21", 
                title="API de Dados B√°sica",
                description="Criar uma API simples usando Flask para servir dados.",
                instructions=[
                    "Instalar Flask",
                    "Criar endpoint b√°sico /api/data",
                    "Retornar dados JSON",
                    "Testar com curl ou browser"
                ],
                code_template="""
from flask import Flask, jsonify

app = Flask(__name__)

@app.route('/api/data')
def get_data():
    dados = {
        'usuarios': 150,
        'vendas': 2500,
        'produtos': 45
    }
    return jsonify(dados)

if __name__ == '__main__':
    app.run(debug=True)
                """,
                expected_output="API funcionando em localhost:5000",
                validation_criteria=[
                    "Flask instalado e funcionando",
                    "Endpoint retorna JSON v√°lido",
                    "Dados estruturados corretamente"
                ],
                concepts_learned=[
                    "APIs REST b√°sicas",
                    "Flask framework", 
                    "JSON e serializa√ß√£o"
                ],
                difficulty="advanced",
                estimated_time=35
            ),
            # Mais passos da API...
        ]