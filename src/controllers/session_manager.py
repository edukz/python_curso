#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Gerenciador de Sess√£o
Gerencia o ciclo de vida da sess√£o do curso
"""

import time
import sys
from typing import Dict, Any, Optional
from datetime import datetime

from ..ui_components import UIComponents
from ..progress_manager import ProgressManager
from ..logger import CourseLogger
from ..error_tracker import ErrorTracker
from ..sync_manager import SyncManager
from ..security import SecureInput


class SessionManager:
    """Gerencia a sess√£o do usu√°rio"""
    
    def __init__(self, components: Dict[str, Any]):
        """Inicializa com componentes necess√°rios"""
        self.ui = components['ui']
        self.progress = components['progress']
        self.logger = components['logger']
        self.error_tracker = components['error_tracker']
        self.sync_manager = components['sync_manager']
        self.secure_input = components['secure_input']
        
        self.session_start = datetime.now()
        self.session_active = True
    
    def initialize_session(self) -> bool:
        """
        Inicializa a sess√£o do curso
        
        Returns:
            True se inicializa√ß√£o bem-sucedida
        """
        try:
            self.ui.clear_screen()
            self._show_welcome_message()
            
            # Verifica se √© primeira vez
            if not self.progress.progress_data.get("user_name"):
                if not self._setup_new_user():
                    return False
            
            # Log de in√≠cio de sess√£o
            self.logger.log_session_start()
            
            # Sincroniza√ß√£o inicial
            self._sync_data()
            
            return True
            
        except Exception as e:
            self.ui.error(f"Erro ao inicializar sess√£o: {str(e)}")
            return False
    
    def _show_welcome_message(self) -> None:
        """Exibe mensagem de boas-vindas"""
        welcome_message = """
        üêç‚ú® BEM-VINDO AO CURSO INTERATIVO DE PYTHON! ‚ú®üêç
        
        Um curso completo e moderno para aprender Python do zero.
        
        üöÄ Recursos inclusos:
        ‚Ä¢ 23 m√≥dulos progressivos (b√°sico ‚Üí intermedi√°rio ‚Üí avan√ßado)
        ‚Ä¢ 18 mini projetos pr√°ticos
        ‚Ä¢ Sistema de gamifica√ß√£o com XP e conquistas
        ‚Ä¢ Demos interativas e debugger visual
        ‚Ä¢ Exerc√≠cios adaptativos personalizados
        ‚Ä¢ Certificado de conclus√£o
        
        üí° Dica: Use 'H' para ver todos os atalhos dispon√≠veis!
        """
        
        print(welcome_message)
        
        # Pausa para leitura
        input("üî∏ Pressione ENTER para continuar...")
    
    def _setup_new_user(self) -> bool:
        """
        Configura novo usu√°rio
        
        Returns:
            True se configura√ß√£o bem-sucedida
        """
        self.ui.clear_screen()
        print("üéØ CONFIGURA√á√ÉO INICIAL")
        print("=" * 50)
        
        # Solicita nome do usu√°rio
        nome = self.secure_input.get_input(
            "üë§ Digite seu nome: ",
            input_type="text",
            max_length=100
        )
        
        if not nome:
            print("‚ùå Nome √© obrigat√≥rio!")
            return False
        
        # Salva configura√ß√µes
        self.progress.set_user_name(nome)
        
        # Mensagem de configura√ß√£o conclu√≠da
        self.ui.success(
            f"‚úÖ Configura√ß√£o conclu√≠da!\n"
            f"üëã Ol√°, {nome}! Vamos come√ßar sua jornada Python!"
        )
        
        time.sleep(2)
        return True
    
    def _sync_data(self) -> None:
        """Sincroniza dados se configurado"""
        try:
            if hasattr(self.sync_manager, 'sync_up'):
                self.sync_manager.sync_up()
        except Exception as e:
            self.logger.log_error(f"Erro na sincroniza√ß√£o: {str(e)}")
    
    def cleanup_session(self) -> None:
        """Limpa recursos da sess√£o (otimizado para sa√≠da r√°pida)"""
        try:
            # Calcula dura√ß√£o da sess√£o
            session_duration = (datetime.now() - self.session_start).total_seconds()
            
            # Atualiza tempo total (opera√ß√£o cr√≠tica)
            self.progress.progress_data["total_time_spent"] += int(session_duration)
            self.progress.save_progress()
            
            # Log de fim de sess√£o (r√°pido)
            self.logger.log_session_end(session_duration)
            
            # Pula sincroniza√ß√£o e limpeza de cache na sa√≠da para ser mais r√°pido
            # Estas opera√ß√µes ser√£o feitas na pr√≥xima inicializa√ß√£o
            
        except Exception as e:
            # Falha silenciosa para n√£o atrasar a sa√≠da
            pass
    
    def _show_error_report(self) -> None:
        """Exibe relat√≥rio de erros da sess√£o"""
        report = self.error_tracker.get_error_report()
        
        self.ui.warning(
            "üìã RELAT√ìRIO DE ERROS DA SESS√ÉO\n"
            f"{report}\n\n"
            "üí° Estes dados ajudam a melhorar o curso!"
        )
    
    def _cleanup_caches(self) -> None:
        """Limpa caches expirados"""
        try:
            # Cleanup de componentes que tenham cache
            for component_name in ['config', 'glossary', 'analytics']:
                component = getattr(self, component_name, None)
                if hasattr(component, 'cleanup_expired'):
                    component.cleanup_expired()
        except Exception:
            pass
    
    def handle_interruption(self) -> bool:
        """
        Trata interrup√ß√£o do usu√°rio (Ctrl+C) - Sa√≠da r√°pida
        
        Returns:
            True se deve continuar, False se deve sair
        """
        print("\n‚è∏Ô∏è  Ctrl+C detectado!")
        print("üíæ Salvando progresso...")
        
        # Salva progresso rapidamente
        self.progress.save_progress()
        
        print("‚úÖ Progresso salvo. Saindo...")
        return False
    
    def _show_quick_progress(self) -> None:
        """Exibe progresso r√°pido"""
        completion = self.progress.get_completion_percentage()
        modules_completed = len(self.progress.progress_data["modules_completed"])
        total_score = self.progress.progress_data["total_score"]
        
        print(f"\nüìä PROGRESSO ATUAL:")
        print(f"  üìö M√≥dulos: {modules_completed}/23")
        print(f"  üìà Conclus√£o: {completion:.1f}%")
        print(f"  ‚≠ê Pontos: {total_score}")
        
        input("\nüî∏ Pressione ENTER para continuar...")
    
    def show_exit_message(self) -> None:
        """Exibe mensagem de despedida"""
        user_name = self.progress.progress_data.get("user_name", "")
        completion = self.progress.get_completion_percentage()
        session_duration = (datetime.now() - self.session_start).total_seconds()
        
        self.ui.clear_screen()
        
        farewell_message = f"""
        üêç OBRIGADO POR USAR O CURSO DE PYTHON! üêç
        
        üëã At√© logo, {user_name}!
        
        üìä Resumo da sess√£o:
        ‚Ä¢ ‚è±Ô∏è  Tempo de estudo: {int(session_duration // 60)} minutos
        ‚Ä¢ üìà Progresso atual: {completion:.1f}%
        ‚Ä¢ üíæ Dados salvos automaticamente
        
        üí° Dicas para continuar aprendendo:
        ‚Ä¢ Pratique regularmente (mesmo que 15 minutos por dia)
        ‚Ä¢ Aplique o conhecimento em projetos pessoais
        ‚Ä¢ Participe de comunidades Python
        ‚Ä¢ Continue explorando a documenta√ß√£o oficial
        
        üöÄ Continue sua jornada Python!
        
        ‚≠ê Desenvolvido com ‚ù§Ô∏è para facilitar seu aprendizado
        """
        
        print(farewell_message)
        
        # Pausa reduzida para leitura
        time.sleep(0.5)
    
    def is_session_active(self) -> bool:
        """Verifica se a sess√£o est√° ativa"""
        return self.session_active
    
    def end_session(self) -> None:
        """Finaliza a sess√£o"""
        self.session_active = False