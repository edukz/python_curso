#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Sistema de Debug Visual
Ferramentas para debug step-by-step com visualiza√ß√£o de vari√°veis e execu√ß√£o
"""

import ast
import sys
import time
import os
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime
import traceback


class VariableTracker:
    """Rastreador de vari√°veis durante execu√ß√£o"""
    
    def __init__(self):
        self.variable_history: List[Dict[str, Any]] = []
        self.current_line: int = 0
        self.execution_stack: List[Dict[str, Any]] = []
    
    def track_variables(self, local_vars: Dict[str, Any], line_number: int) -> None:
        """Registra estado das vari√°veis em uma linha"""
        # Filtra vari√°veis internas do Python
        filtered_vars = {
            k: v for k, v in local_vars.items() 
            if not k.startswith('__') and k not in ['annotations']
        }
        
        snapshot = {
            "line": line_number,
            "variables": filtered_vars.copy(),
            "timestamp": datetime.now().isoformat()
        }
        
        self.variable_history.append(snapshot)
        self.current_line = line_number
    
    def get_variable_changes(self, line_number: int) -> Dict[str, Any]:
        """Retorna mudan√ßas de vari√°veis em uma linha espec√≠fica"""
        current_snapshot = None
        previous_snapshot = None
        
        for snapshot in self.variable_history:
            if snapshot["line"] == line_number:
                current_snapshot = snapshot
            elif snapshot["line"] == line_number - 1:
                previous_snapshot = snapshot
        
        if not current_snapshot:
            return {}
        
        changes = {
            "new_variables": {},
            "modified_variables": {},
            "unchanged_variables": {}
        }
        
        current_vars = current_snapshot["variables"]
        previous_vars = previous_snapshot["variables"] if previous_snapshot else {}
        
        for var_name, var_value in current_vars.items():
            if var_name not in previous_vars:
                changes["new_variables"][var_name] = var_value
            elif previous_vars[var_name] != var_value:
                changes["modified_variables"][var_name] = {
                    "old": previous_vars[var_name],
                    "new": var_value
                }
            else:
                changes["unchanged_variables"][var_name] = var_value
        
        return changes


class CodeVisualizer:
    """Visualizador de c√≥digo com destaque de execu√ß√£o"""
    
    def __init__(self):
        self.colors = {
            'current': '\033[43m\033[30m',  # Fundo amarelo, texto preto
            'executed': '\033[42m\033[30m',  # Fundo verde, texto preto
            'error': '\033[41m\033[37m',     # Fundo vermelho, texto branco
            'reset': '\033[0m',              # Reset
            'line_num': '\033[36m',          # Ciano
            'variable': '\033[35m',          # Magenta
            'value': '\033[32m'              # Verde
        }
    
    def display_code_with_highlights(self, code_lines: List[str], 
                                   current_line: int, 
                                   executed_lines: List[int] = None,
                                   error_line: int = None) -> None:
        """Exibe c√≥digo com destacamento de linhas"""
        executed_lines = executed_lines or []
        
        print("\n" + "="*60)
        print(" " * 20 + "VISUALIZA√á√ÉO DO C√ìDIGO")
        print("="*60)
        
        for i, line in enumerate(code_lines, 1):
            # Determina cor da linha
            line_color = ""
            if i == error_line:
                line_color = self.colors['error']
            elif i == current_line:
                line_color = self.colors['current']
            elif i in executed_lines:
                line_color = self.colors['executed']
            
            # N√∫mero da linha
            line_num = f"{self.colors['line_num']}{i:3d}{self.colors['reset']}"
            
            # Indicador de execu√ß√£o
            if i == current_line:
                indicator = " ‚û§ "
            elif i in executed_lines:
                indicator = " ‚úì "
            elif i == error_line:
                indicator = " ‚ùå "
            else:
                indicator = "   "
            
            # Exibe linha
            print(f"{line_num}{indicator}{line_color}{line.rstrip()}{self.colors['reset']}")
        
        print("="*60)
    
    def display_variables_table(self, variables: Dict[str, Any], 
                              changes: Dict[str, Any] = None) -> None:
        """Exibe tabela de vari√°veis com destaque para mudan√ßas"""
        if not variables:
            print("\nüìã Nenhuma vari√°vel definida ainda")
            return
        
        changes = changes or {}
        
        print(f"\n{self.colors['variable']}üìã ESTADO DAS VARI√ÅVEIS:{self.colors['reset']}")
        print("‚îÄ" * 50)
        
        for var_name, var_value in variables.items():
            # Determina status da vari√°vel
            status = ""
            if var_name in changes.get("new_variables", {}):
                status = f"{self.colors['current']} NOVA {self.colors['reset']}"
            elif var_name in changes.get("modified_variables", {}):
                old_value = changes["modified_variables"][var_name]["old"]
                status = f"{self.colors['current']} ALTERADA {self.colors['reset']} (era: {old_value})"
            
            # Formata valor
            value_str = self._format_value(var_value)
            
            print(f"{self.colors['variable']}{var_name:15}{self.colors['reset']} = {self.colors['value']}{value_str}{self.colors['reset']} {status}")
        
        print("‚îÄ" * 50)
    
    def _format_value(self, value: Any) -> str:
        """Formata valor para exibi√ß√£o"""
        if isinstance(value, str):
            return f"'{value}'"
        elif isinstance(value, list):
            if len(value) <= 5:
                return str(value)
            else:
                return f"[{', '.join(map(str, value[:3]))}, ... +{len(value)-3} itens]"
        elif isinstance(value, dict):
            if len(value) <= 3:
                return str(value)
            else:
                keys = list(value.keys())[:2]
                return f"{{{', '.join(f'{k}: {value[k]}' for k in keys)}, ... +{len(value)-2} itens}}"
        else:
            return str(value)
    
    def display_execution_arrow(self, message: str = "Executando...") -> None:
        """Exibe seta de execu√ß√£o com anima√ß√£o"""
        print(f"\n{self.colors['current']} ‚ñ∂ {message} {self.colors['reset']}")


class StepByStepDebugger:
    """Debugger que executa c√≥digo passo a passo"""
    
    def __init__(self, ui_components):
        self.ui = ui_components
        self.tracker = VariableTracker()
        self.visualizer = CodeVisualizer()
        self.breakpoints: List[int] = []
        self.current_namespace: Dict[str, Any] = {}
        self.executed_lines: List[int] = []
        self.paused = False
    
    def debug_code(self, code: str, auto_step: bool = False) -> None:
        """Executa c√≥digo em modo debug step-by-step"""
        try:
            # Parse do c√≥digo
            tree = ast.parse(code)
            code_lines = code.split('\n')
            
            # Mostra c√≥digo inicial
            self.visualizer.display_code_with_highlights(code_lines, 0)
            
            if not auto_step:
                input("\nüéØ Pressione ENTER para come√ßar o debug...")
            
            # Executa com instrumenta√ß√£o
            self._execute_with_instrumentation(tree, code_lines, auto_step)
            
        except SyntaxError as e:
            self._show_syntax_error(e, code.split('\n'))
        except Exception as e:
            self._show_runtime_error(e, code.split('\n'))
    
    def _execute_with_instrumentation(self, tree: ast.AST, code_lines: List[str], auto_step: bool) -> None:
        """Executa AST com instrumenta√ß√£o para debug"""
        
        # Adiciona instrumenta√ß√£o ao AST
        instrumented_tree = self._instrument_ast(tree)
        
        # Compila c√≥digo instrumentado
        compiled_code = compile(instrumented_tree, '<debug>', 'exec')
        
        # Namespace para execu√ß√£o
        debug_namespace = {
            '__debug_tracker__': self._debug_step_callback,
            '__builtins__': __builtins__
        }
        
        try:
            # Executa c√≥digo instrumentado
            exec(compiled_code, debug_namespace, debug_namespace)
            
            print(f"\n{self.visualizer.colors['executed']}‚úÖ Execu√ß√£o conclu√≠da com sucesso!{self.visualizer.colors['reset']}")
            
        except Exception as e:
            self._show_runtime_error(e, code_lines)
    
    def _instrument_ast(self, tree: ast.AST) -> ast.AST:
        """Adiciona instrumenta√ß√£o ao AST para rastreamento"""
        
        class DebugInstrumenter(ast.NodeTransformer):
            def visit_stmt(self, node):
                # Adiciona chamada de rastreamento antes de cada statement
                if hasattr(node, 'lineno'):
                    debug_call = ast.Expr(
                        value=ast.Call(
                            func=ast.Name(id='__debug_tracker__', ctx=ast.Load()),
                            args=[ast.Constant(value=node.lineno)],
                            keywords=[]
                        )
                    )
                    debug_call.lineno = node.lineno
                    debug_call.col_offset = 0
                    
                    # Retorna sequ√™ncia com debug call + statement original
                    return [debug_call, self.generic_visit(node)]
                
                return self.generic_visit(node)
            
            # Instrumenta diferentes tipos de statements
            visit_Assign = visit_stmt
            visit_AugAssign = visit_stmt
            visit_Expr = visit_stmt
            visit_If = visit_stmt
            visit_For = visit_stmt
            visit_While = visit_stmt
            visit_FunctionDef = visit_stmt
            visit_Return = visit_stmt
        
        instrumenter = DebugInstrumenter()
        return instrumenter.visit(tree)
    
    def _debug_step_callback(self, line_number: int) -> None:
        """Callback chamado a cada step do debug"""
        # Obt√©m frame atual
        frame = sys._getframe(1)
        local_vars = frame.f_locals.copy()
        
        # Remove vari√°veis internas do debug
        local_vars = {k: v for k, v in local_vars.items() 
                     if not k.startswith('__debug')}
        
        # Atualiza rastreamento
        self.tracker.track_variables(local_vars, line_number)
        self.executed_lines.append(line_number)
        
        # Obt√©m mudan√ßas de vari√°veis
        changes = self.tracker.get_variable_changes(line_number)
        
        # Limpa tela e mostra estado atual
        os.system('cls' if os.name == 'nt' else 'clear')
        
        # Reconstr√≥i c√≥digo original do frame
        code_lines = []
        if frame.f_code.co_filename == '<debug>':
            # Tenta reconstruir do AST original (simplificado)
            code_lines = ["# C√≥digo em execu√ß√£o..."]
        else:
            try:
                with open(frame.f_code.co_filename, 'r') as f:
                    code_lines = f.readlines()
            except:
                code_lines = ["# C√≥digo n√£o dispon√≠vel"]
        
        # Visualiza estado atual
        self.visualizer.display_code_with_highlights(
            code_lines, line_number, self.executed_lines
        )
        
        self.visualizer.display_variables_table(local_vars, changes)
        
        # Controles do debug
        self._show_debug_controls()
        
        # Pausa para intera√ß√£o do usu√°rio
        if not self.paused:
            command = input("\nüéÆ Debug> ").strip().lower()
            self._process_debug_command(command, line_number)
    
    def _show_debug_controls(self) -> None:
        """Mostra controles dispon√≠veis do debugger"""
        print(f"\n{self.visualizer.colors['variable']}üéÆ CONTROLES:{self.visualizer.colors['reset']}")
        print("  ENTER/n - Pr√≥ximo passo")
        print("  c - Continuar execu√ß√£o")
        print("  b <linha> - Adicionar breakpoint")
        print("  p <var> - Examinar vari√°vel")
        print("  l - Listar vari√°veis")
        print("  q - Sair do debug")
    
    def _process_debug_command(self, command: str, current_line: int) -> None:
        """Processa comandos do debug"""
        if command in ['', 'n', 'next']:
            # Pr√≥ximo passo (padr√£o)
            pass
        
        elif command in ['c', 'continue']:
            self.paused = True
            print("‚ñ∂ Continuando execu√ß√£o...")
        
        elif command.startswith('b '):
            # Adicionar breakpoint
            try:
                line_num = int(command.split()[1])
                self.breakpoints.append(line_num)
                print(f"üî¥ Breakpoint adicionado na linha {line_num}")
            except (ValueError, IndexError):
                print("‚ùå Uso: b <n√∫mero_da_linha>")
            input("Pressione ENTER...")
        
        elif command.startswith('p '):
            # Examinar vari√°vel
            var_name = command.split()[1]
            frame = sys._getframe(2)  # Frame do c√≥digo em debug
            if var_name in frame.f_locals:
                value = frame.f_locals[var_name]
                print(f"\nüîç {var_name} = {self.visualizer._format_value(value)}")
                print(f"   Tipo: {type(value).__name__}")
                if hasattr(value, '__len__'):
                    print(f"   Tamanho: {len(value)}")
            else:
                print(f"‚ùå Vari√°vel '{var_name}' n√£o encontrada")
            input("Pressione ENTER...")
        
        elif command in ['l', 'list']:
            # Listar todas as vari√°veis
            frame = sys._getframe(2)
            self.visualizer.display_variables_table(frame.f_locals)
            input("Pressione ENTER...")
        
        elif command in ['q', 'quit']:
            print("üõë Debug interrompido")
            raise KeyboardInterrupt()
        
        else:
            print("‚ùå Comando n√£o reconhecido")
            input("Pressione ENTER...")
    
    def _show_syntax_error(self, error: SyntaxError, code_lines: List[str]) -> None:
        """Mostra erro de sintaxe com destacamento"""
        error_line = error.lineno or 1
        
        print(f"\n{self.visualizer.colors['error']}‚ùå ERRO DE SINTAXE:{self.visualizer.colors['reset']}")
        
        self.visualizer.display_code_with_highlights(
            code_lines, 0, error_line=error_line
        )
        
        print(f"\nüîç DETALHES DO ERRO:")
        print(f"   Linha {error_line}: {error.msg}")
        if error.text:
            print(f"   C√≥digo: {error.text.strip()}")
        
        print(f"\nüí° DICAS PARA CORRIGIR:")
        self._suggest_syntax_fix(error)
    
    def _show_runtime_error(self, error: Exception, code_lines: List[str]) -> None:
        """Mostra erro de execu√ß√£o com contexto"""
        tb = traceback.extract_tb(error.__traceback__)
        
        # Encontra linha do erro no c√≥digo do usu√°rio
        error_line = 1
        for frame in tb:
            if frame.filename in ['<debug>', '<string>']:
                error_line = frame.lineno
                break
        
        print(f"\n{self.visualizer.colors['error']}‚ùå ERRO DE EXECU√á√ÉO:{self.visualizer.colors['reset']}")
        
        self.visualizer.display_code_with_highlights(
            code_lines, 0, self.executed_lines, error_line
        )
        
        print(f"\nüîç DETALHES DO ERRO:")
        print(f"   Tipo: {type(error).__name__}")
        print(f"   Mensagem: {str(error)}")
        print(f"   Linha: {error_line}")
        
        # Mostra vari√°veis no momento do erro
        if self.tracker.variable_history:
            last_snapshot = self.tracker.variable_history[-1]
            self.visualizer.display_variables_table(last_snapshot["variables"])
        
        print(f"\nüí° SUGEST√ïES DE CORRE√á√ÉO:")
        self._suggest_runtime_fix(error)
    
    def _suggest_syntax_fix(self, error: SyntaxError) -> None:
        """Sugere corre√ß√µes para erro de sintaxe"""
        if "invalid syntax" in error.msg.lower():
            print("   ‚Ä¢ Verifique par√™nteses, colchetes e chaves")
            print("   ‚Ä¢ Confirme se tem ':' ap√≥s if, for, while, def")
            print("   ‚Ä¢ Verifique se fechou todas as aspas")
        elif "unexpected indent" in error.msg.lower():
            print("   ‚Ä¢ Problema de indenta√ß√£o - use 4 espa√ßos")
            print("   ‚Ä¢ N√£o misture tabs e espa√ßos")
        elif "unindent" in error.msg.lower():
            print("   ‚Ä¢ Indenta√ß√£o inconsistente")
            print("   ‚Ä¢ Verifique o alinhamento do c√≥digo")
    
    def _suggest_runtime_fix(self, error: Exception) -> None:
        """Sugere corre√ß√µes para erro de execu√ß√£o"""
        error_type = type(error).__name__
        
        if error_type == "NameError":
            print("   ‚Ä¢ Vari√°vel n√£o foi definida antes do uso")
            print("   ‚Ä¢ Verifique a grafia do nome")
            print("   ‚Ä¢ Declare a vari√°vel primeiro")
        elif error_type == "TypeError":
            print("   ‚Ä¢ Tipos incompat√≠veis na opera√ß√£o")
            print("   ‚Ä¢ Verifique os tipos das vari√°veis")
            print("   ‚Ä¢ Use convers√£o se necess√°rio (int, str, float)")
        elif error_type == "IndexError":
            print("   ‚Ä¢ Tentou acessar √≠ndice que n√£o existe")
            print("   ‚Ä¢ Verifique o tamanho da lista")
            print("   ‚Ä¢ Lembre que √≠ndices come√ßam em 0")
        elif error_type == "KeyError":
            print("   ‚Ä¢ Chave n√£o existe no dicion√°rio")
            print("   ‚Ä¢ Use .get() para chaves opcionais")
            print("   ‚Ä¢ Verifique se a chave est√° correta")
        elif error_type == "ValueError":
            print("   ‚Ä¢ Valor inv√°lido para a opera√ß√£o")
            print("   ‚Ä¢ Verifique se o valor pode ser convertido")
            print("   ‚Ä¢ Valide entradas do usu√°rio")


class CodeComparer:
    """Comparador de c√≥digo esperado vs obtido"""
    
    def __init__(self, ui_components):
        self.ui = ui_components
    
    def compare_outputs(self, expected: str, actual: str, code: str) -> None:
        """Compara sa√≠da esperada com sa√≠da obtida"""
        self.ui.header("COMPARA√á√ÉO DE RESULTADOS", "Esperado vs Obtido", "üîç")
        
        print("üìù C√ìDIGO EXECUTADO:")
        print("```python")
        print(code)
        print("```")
        
        print(f"\n‚úÖ SA√çDA ESPERADA:")
        print(f"   {expected}")
        
        print(f"\nüì§ SA√çDA OBTIDA:")
        print(f"   {actual}")
        
        if expected.strip() == actual.strip():
            self.ui.alert("üéâ Sa√≠das coincidem perfeitamente!", "success")
        else:
            self.ui.alert("‚ùå Sa√≠das diferentes - vamos analisar!", "warning")
            self._analyze_differences(expected, actual)
    
    def _analyze_differences(self, expected: str, actual: str) -> None:
        """Analisa diferen√ßas entre sa√≠das"""
        print(f"\nüîç AN√ÅLISE DAS DIFEREN√áAS:")
        
        # Diferen√ßas b√°sicas
        if len(expected) != len(actual):
            print(f"   üìè Tamanhos diferentes: esperado {len(expected)}, obtido {len(actual)}")
        
        # Diferen√ßas de espa√ßos
        if expected.strip() == actual.strip():
            print("   üî§ Conte√∫do igual, mas espa√ßos diferentes")
            print("   üí° Dica: Verifique espa√ßos em branco extras")
        
        # Diferen√ßas de mai√∫sculas
        elif expected.lower() == actual.lower():
            print("   üî§ Conte√∫do igual, mas mai√∫sculas/min√∫sculas diferentes")
            print("   üí° Dica: Verifique a capitaliza√ß√£o")
        
        # Diferen√ßas de n√∫meros
        elif expected.replace('.', '').isdigit() and actual.replace('.', '').isdigit():
            try:
                exp_num = float(expected)
                act_num = float(actual)
                diff = abs(exp_num - act_num)
                print(f"   üî¢ Diferen√ßa num√©rica: {diff}")
                if diff < 0.01:
                    print("   üí° Diferen√ßa m√≠nima - pode ser arredondamento")
            except ValueError:
                pass
        
        else:
            print("   üìù Conte√∫dos completamente diferentes")
            print("   üí° Dica: Revise a l√≥gica do c√≥digo")


class DebugSession:
    """Sess√£o completa de debug com interface"""
    
    def __init__(self, ui_components):
        self.ui = ui_components
        self.debugger = StepByStepDebugger(ui_components)
        self.comparer = CodeComparer(ui_components)
    
    def start_debug_session(self) -> None:
        """Inicia sess√£o interativa de debug"""
        self.ui.header("LABORAT√ìRIO DE DEBUG", "An√°lise Visual de C√≥digo", "üî¨")
        
        print("üéØ OP√á√ïES DE DEBUG:")
        print("1. üêõ Debug Step-by-Step")
        print("2. üîç Comparar Sa√≠das")
        print("3. üìù Testar C√≥digo com Visualiza√ß√£o")
        print("4. üéì Tutorial de Debug")
        print("0. üîô Voltar")
        
        choice = input("\nüëâ Escolha: ").strip()
        
        if choice == "1":
            self._step_by_step_debug()
        elif choice == "2":
            self._compare_outputs_session()
        elif choice == "3":
            self._visual_code_test()
        elif choice == "4":
            self._debug_tutorial()
    
    def _step_by_step_debug(self) -> None:
        """Sess√£o de debug passo a passo"""
        print("\nüêõ DEBUG STEP-BY-STEP")
        print("Digite seu c√≥digo (digite 'FIM' em uma linha para terminar):")
        
        code_lines = []
        while True:
            line = input(f"{len(code_lines)+1:2d}| ")
            if line.upper().strip() == "FIM":
                break
            code_lines.append(line)
        
        if code_lines:
            code = '\n'.join(code_lines)
            print("\nüî¨ Iniciando debug...")
            self.debugger.debug_code(code)
    
    def _compare_outputs_session(self) -> None:
        """Sess√£o de compara√ß√£o de sa√≠das"""
        print("\nüîç COMPARA√á√ÉO DE SA√çDAS")
        
        print("Digite o c√≥digo:")
        code_lines = []
        while True:
            line = input(f"{len(code_lines)+1:2d}| ")
            if line.upper().strip() == "FIM":
                break
            code_lines.append(line)
        
        code = '\n'.join(code_lines)
        expected = input("\nSa√≠da esperada: ")
        
        # Executa c√≥digo e captura sa√≠da
        import io
        import contextlib
        
        output_buffer = io.StringIO()
        
        try:
            with contextlib.redirect_stdout(output_buffer):
                exec(code)
            actual = output_buffer.getvalue().strip()
            
            self.comparer.compare_outputs(expected, actual, code)
        
        except Exception as e:
            print(f"\n‚ùå Erro na execu√ß√£o: {e}")
    
    def _visual_code_test(self) -> None:
        """Teste de c√≥digo com visualiza√ß√£o"""
        print("\nüìù TESTE VISUAL DE C√ìDIGO")
        
        examples = [
            ("Vari√°veis b√°sicas", "nome = 'Python'\nidade = 30\nprint(f'{nome} tem {idade} anos')"),
            ("Loop simples", "for i in range(3):\n    print(f'N√∫mero: {i}')"),
            ("Condicionais", "x = 10\nif x > 5:\n    print('Maior')\nelse:\n    print('Menor')"),
            ("Lista", "frutas = ['ma√ß√£', 'banana']\nfrutas.append('laranja')\nprint(frutas)")
        ]
        
        print("Escolha um exemplo:")
        for i, (name, _) in enumerate(examples, 1):
            print(f"{i}. {name}")
        print("0. C√≥digo personalizado")
        
        choice = input("\nüëâ Escolha: ").strip()
        
        if choice == "0":
            self._step_by_step_debug()
        else:
            try:
                idx = int(choice) - 1
                if 0 <= idx < len(examples):
                    name, code = examples[idx]
                    print(f"\nüî¨ Debugando: {name}")
                    self.debugger.debug_code(code, auto_step=False)
            except ValueError:
                print("‚ùå Op√ß√£o inv√°lida")
    
    def _debug_tutorial(self) -> None:
        """Tutorial de debug"""
        self.ui.header("TUTORIAL DE DEBUG", "Aprenda a Debugar", "üéì")
        
        print("""
üéØ O QUE √â DEBUG?
Debug √© o processo de encontrar e corrigir erros (bugs) no c√≥digo.

üîç TIPOS DE ERROS:
1. Erros de Sintaxe - C√≥digo mal escrito
2. Erros de Execu√ß√£o - C√≥digo quebra durante execu√ß√£o
3. Erros L√≥gicos - C√≥digo executa mas faz coisa errada

üõ†Ô∏è FERRAMENTAS DE DEBUG:
‚Ä¢ Step-by-step: Executa linha por linha
‚Ä¢ Vari√°veis: Mostra valores em tempo real
‚Ä¢ Breakpoints: Pausa em pontos espec√≠ficos
‚Ä¢ Stack trace: Mostra onde erro ocorreu

üí° DICAS PROFISSIONAIS:
‚Ä¢ Use print() para rastrear valores
‚Ä¢ Teste com dados simples primeiro
‚Ä¢ Quebre problemas complexos em partes
‚Ä¢ Leia mensagens de erro com aten√ß√£o

üéÆ COMANDOS DO DEBUGGER:
‚Ä¢ ENTER - Pr√≥ximo passo
‚Ä¢ c - Continuar at√© o fim
‚Ä¢ p <var> - Examinar vari√°vel
‚Ä¢ b <linha> - Adicionar breakpoint
‚Ä¢ l - Listar todas as vari√°veis
‚Ä¢ q - Sair do debug
""")
        
        input("\nüìö Pressione ENTER para voltar...")