#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
M√≥dulo 19: Programa√ß√£o Orientada a Objetos (OOP) - Avan√ßado
VERS√ÉO REFATORADA seguindo o padr√£o pedag√≥gico estabelecido
Aprenda heran√ßa, polimorfismo e classes abstratas de forma interativa
"""

from ..shared.base_module import BaseModule
import random
import time


class Modulo19OopAvancado(BaseModule):
    """M√≥dulo 19: OOP Avan√ßado - Heran√ßa, Polimorfismo e Classes Abstratas"""
    
    def __init__(self):
        super().__init__("modulo_19", "OOP Avan√ßado - Heran√ßa, Polimorfismo e Abstratas")
        self.has_mini_project = True
        self.mini_project_points = 120
    
    def execute(self) -> None:
        """Executa o m√≥dulo OOP Avan√ßado"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return

        try:
            self._oop_avancado()
        except Exception as e:
            self.error_handler(lambda: None)
    
    def _oop_avancado(self) -> None:
        """Conte√∫do principal do m√≥dulo OOP Avan√ßado"""
        # === CABE√áALHO VISUAL ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üß¨ M√ìDULO 19: OOP AVAN√áADO - HERAN√áA E POLIMORFISMO")
        else:
            print("\n" + "="*60)
            print("üß¨ M√ìDULO 19: OOP AVAN√áADO - HERAN√áA E POLIMORFISMO")
            print("="*60)

        # === MENSAGENS MOTIVACIONAIS ===
        self.print_success("üéâ Bem-vindo ao n√≠vel avan√ßado da Programa√ß√£o Orientada a Objetos!")
        self.print_tip("Este m√≥dulo est√° dividido em se√ß√µes interativas. Voc√™ controla o ritmo!")

        # === FLUXO PRINCIPAL COM TRATAMENTO DE CTRL+C ===

        # 1. Sistema de navega√ß√£o por se√ß√µes
        try:
            self._navegacao_secoes_interativas()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Navega√ß√£o interrompida pelo usu√°rio. Voltando ao menu principal...")
            return

        # 2. Se√ß√£o de Pr√°tica Interativa
        try:
            self._secao_pratica_interativa()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è M√≥dulo interrompido pelo usu√°rio. Voltando ao menu principal...")
            return

        # 3. Mini Projeto Pr√°tico
        try:
            self._mini_projeto_sistema_rpg()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Mini projeto interrompido. Voltando ao menu principal...")
            return

        # 4. Marcar m√≥dulo como completo
        self.complete_module()
    
    def _navegacao_secoes_interativas(self) -> None:
        """Sistema de navega√ß√£o por se√ß√µes do m√≥dulo"""

        # === DEFINI√á√ÉO DAS SE√á√ïES (5-7 SE√á√ïES RECOMENDADAS) ===
        secoes = [
            {
                'id': 'secao_conceito_heranca',
                'titulo': 'üß¨ O que √© Heran√ßa?',
                'descricao': 'Entenda o conceito fundamental de heran√ßa em OOP',
                'funcao': self._secao_conceito_heranca
            },
            {
                'id': 'secao_polimorfismo_pratico',
                'titulo': 'üé≠ Como Polimorfismo funciona?',
                'descricao': 'Veja polimorfismo em a√ß√£o com exemplos pr√°ticos',
                'funcao': self._secao_polimorfismo_pratico
            },
            {
                'id': 'secao_classes_abstratas_exemplos',
                'titulo': 'üèõÔ∏è Classes Abstratas na pr√°tica',
                'descricao': 'Aprenda a criar contratos com classes abstratas',
                'funcao': self._secao_classes_abstratas_exemplos
            },
            {
                'id': 'secao_mundo_real',
                'titulo': 'üè¢ Onde usar na vida real?',
                'descricao': 'Veja OOP avan√ßado em sistemas reais e empresas',
                'funcao': self._secao_mundo_real
            },
            {
                'id': 'secao_melhores_praticas',
                'titulo': '‚≠ê Melhores pr√°ticas OOP',
                'descricao': 'Dicas de profissionais experientes',
                'funcao': self._secao_melhores_praticas
            },
            {
                'id': 'secao_erros_comuns',
                'titulo': '‚ö†Ô∏è Erros comuns e como evitar',
                'descricao': 'Aprenda com os erros mais frequentes em OOP avan√ßado',
                'funcao': self._secao_erros_comuns
            },
            {
                'id': 'secao_curiosidades',
                'titulo': 'üí´ Curiosidades sobre OOP',
                'descricao': 'Fatos interessantes e hist√≥ria da programa√ß√£o OO',
                'funcao': self._secao_curiosidades
            }
        ]

        secoes_visitadas = set()

        # === LOOP PRINCIPAL DE NAVEGA√á√ÉO ===
        while True:
            # Limpa tela e mostra cabe√ßalho
            if self.ui:
                self.ui.clear_screen()
            else:
                print("\n" + "="*50)
            
            self.print_section("NAVEGA√á√ÉO DO M√ìDULO", "üìö", "accent")
            self.print_colored("Escolha uma se√ß√£o para estudar:", "text")

            # Lista todas as se√ß√µes com status
            print()
            for i, secao in enumerate(secoes, 1):
                status = "‚úÖ" if secao['id'] in secoes_visitadas else "üìñ"
                print(f"{status} {i}. {secao['titulo']}")
                self.print_colored(f"    {secao['descricao']}", "text")
                print()

            print("0. üéØ Continuar para os Exerc√≠cios Pr√°ticos")

            # Mostra progresso visual
            progresso = len(secoes_visitadas)
            total = len(secoes)
            self.print_colored(f"\nüìä Progresso: {progresso}/{total} se√ß√µes visitadas", "info")

            if progresso == total:
                self.print_success("üåü Voc√™ completou todas as se√ß√µes! Est√° pronto para praticar!")

            # Processa escolha do usu√°rio
            try:
                escolha = input(f"\nüëâ Escolha uma se√ß√£o (1-{len(secoes)}) ou 0 para continuar: ").strip()

                if escolha == "0":
                    # Verifica se visitou se√ß√µes suficientes
                    if progresso >= 3:  # Pelo menos 3 se√ß√µes visitadas
                        break
                    else:
                        self.print_warning("üìö Recomendamos visitar pelo menos 3 se√ß√µes antes de continuar!")
                        continuar = input("Quer continuar mesmo assim? (s/n): ").lower()
                        if continuar in ['s', 'sim', 'yes']:
                            break
                elif escolha.isdigit() and 1 <= int(escolha) <= len(secoes):
                    # Executa se√ß√£o escolhida
                    idx = int(escolha) - 1
                    try:
                        secoes[idx]['funcao']()
                        secoes_visitadas.add(secoes[idx]['id'])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Se√ß√£o interrompida. Voltando ao menu...")
                        continue
                else:
                    self.print_warning(f"‚ùå Op√ß√£o inv√°lida! Digite um n√∫mero de 1 a {len(secoes)} ou 0.")

            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Pulando para exerc√≠cios pr√°ticos...")
                break
            except Exception as e:
                self.print_warning(f"‚ùå Erro: {str(e)}. Tente novamente.")
    
    def _secao_conceito_heranca(self) -> None:
        """Se√ß√£o: O que √© Heran√ßa?"""
        if self.ui:
            self.ui.clear_screen()

        # === CABE√áALHO ATRATIVO ===
        self.print_section("O QUE √â HERAN√áA?", "üß¨")

        # === DEFINI√á√ÉO DO CONCEITO (SEMPRE PRIMEIRO) ===
        self.print_concept(
            "Heran√ßa em OOP",
            "Um mecanismo que permite criar uma nova classe baseada em uma classe existente, reutilizando e estendendo suas funcionalidades."
        )

        # === DICA RELACIONADA ===
        self.print_tip("Heran√ßa √© como genes na biologia - filhos herdam caracter√≠sticas dos pais!")

        # === ANALOGIA DO COTIDIANO ===
        self.print_colored("\nüè† ANALOGIA DO DIA A DIA:", "warning")
        self.print_colored("Imagine uma fam√≠lia: os filhos herdam caracter√≠sticas dos pais (olhos, altura), mas tamb√©m desenvolvem suas pr√≥prias personalidades. Na programa√ß√£o √© igual - a classe filha herda m√©todos e atributos da classe pai, mas pode adicionar ou modificar comportamentos.", "text")
        input("\nüî∏ Pressione ENTER para continuar...")

        # === EXPLICA√á√ÉO T√âCNICA GRADUAL ===
        self.print_colored("\nüîß COMO FUNCIONA NA PR√ÅTICA:", "info")
        passos_tecnicos = [
            "1. Voc√™ cria uma classe pai com caracter√≠sticas comuns",
            "2. Voc√™ cria classes filhas que herdam da classe pai",
            "3. As classes filhas ganham automaticamente todos os m√©todos do pai",
            "4. Voc√™ pode adicionar novos m√©todos espec√≠ficos nas classes filhas",
            "5. Voc√™ pode modificar (sobrescrever) m√©todos herdados se necess√°rio"
        ]

        for i, passo in enumerate(passos_tecnicos, 1):
            self.print_colored(passo, "text")
            if i < len(passos_tecnicos):
                input("   ‚è≥ Pressione ENTER para o pr√≥ximo passo...")

        # === EXEMPLO DE C√ìDIGO ===
        self.print_colored("\nüíª EXEMPLO PR√ÅTICO:", "success")
        codigo_exemplo = '''# Exemplo simples de heran√ßa
class Veiculo:  # Classe pai
    def __init__(self, marca):
        self.marca = marca
    
    def acelerar(self):
        return f"{self.marca} est√° acelerando"

class Carro(Veiculo):  # Classe filha
    def __init__(self, marca, portas):
        super().__init__(marca)  # Chama o pai
        self.portas = portas
    
    def buzinar(self):  # M√©todo novo
        return "Beep beep!"

# Testando
carro = Carro("Toyota", 4)
print(carro.acelerar())  # M√©todo herdado
print(carro.buzinar())   # M√©todo pr√≥prio'''
        
        self.exemplo(codigo_exemplo)
        print("\nüöÄ Vamos ver funcionando:")
        self.executar_codigo(codigo_exemplo)

        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nüåç ONDE √â USADO NO MUNDO REAL:", "accent")
        aplicacoes = [
            "Facebook: Classe User ‚Üí AdminUser, RegularUser",
            "Netflix: Classe Video ‚Üí Movie, Series, Documentary",
            "Uber: Classe Vehicle ‚Üí Car, Motorcycle, Bike",
            "YouTube: Classe Content ‚Üí Video, Short, Live"
        ]
        for app in aplicacoes:
            self.print_colored(f"‚Ä¢ {app}", "primary")

        self.pausar()
    
    def _secao_polimorfismo_pratico(self) -> None:
        """Se√ß√£o: Como Polimorfismo funciona?"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("COMO POLIMORFISMO FUNCIONA?", "üé≠")

        self.print_concept(
            "Polimorfismo",
            "A capacidade de objetos diferentes responderem ao mesmo m√©todo de formas diferentes. 'Poly' = muitas, 'morphos' = formas."
        )

        self.print_tip("Pense em um controle remoto universal - o mesmo bot√£o 'ligar' funciona para TV, som e DVD!")

        # Exemplo pr√°tico detalhado
        self.print_colored("\nüéµ ANALOGIA: ORQUESTRA MUSICAL", "warning")
        self.print_colored("Um maestro d√° o comando 'tocar' para toda orquestra. Cada instrumento 'toca' de forma diferente: piano pressiona teclas, violino usa arco, bateria usa baquetas. Mesmo comando, a√ß√µes diferentes!", "text")
        
        input("\nüî∏ Pressione ENTER para ver o c√≥digo...")

        codigo_polimorfismo = '''# Polimorfismo em a√ß√£o
class Instrumento:
    def __init__(self, nome):
        self.nome = nome
    
    def tocar(self):
        return "Tocando instrumento"

class Piano(Instrumento):
    def tocar(self):
        return f"{self.nome}: Pressionando teclas üéπ"

class Violino(Instrumento):
    def tocar(self):
        return f"{self.nome}: Usando o arco üéª"

class Bateria(Instrumento):
    def tocar(self):
        return f"{self.nome}: Batendo com baquetas ü•Å"

# Polimorfismo - mesmo m√©todo, comportamentos diferentes
orquestra = [
    Piano("Piano de cauda"),
    Violino("Stradivarius"),
    Bateria("Kit completo")
]

print("üéº CONCERTO DA ORQUESTRA:")
for instrumento in orquestra:
    print(instrumento.tocar())  # Mesmo m√©todo, sons diferentes!'''

        self.exemplo(codigo_polimorfismo)
        self.executar_codigo(codigo_polimorfismo)

        self.print_colored("\nüåç APLICA√á√ïES REAIS:", "accent")
        apps_reais = [
            "WhatsApp: Classe Message ‚Üí TextMessage.send(), ImageMessage.send(), AudioMessage.send()",
            "Photoshop: Classe Tool ‚Üí BrushTool.draw(), EraserTool.draw(), PencilTool.draw()",
            "Games: Classe Character ‚Üí Warrior.attack(), Mage.attack(), Archer.attack()"
        ]
        for app in apps_reais:
            self.print_colored(f"‚Ä¢ {app}", "primary")

        self.pausar()
    
    def _secao_classes_abstratas_exemplos(self) -> None:
        """Se√ß√£o: Classes Abstratas na pr√°tica"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("CLASSES ABSTRATAS NA PR√ÅTICA", "üèõÔ∏è")

        self.print_concept(
            "Classes Abstratas",
            "S√£o 'contratos' que definem quais m√©todos as classes filhas DEVEM implementar. N√£o podem ser instanciadas diretamente."
        )

        self.print_tip("Como uma planta arquitet√¥nica - define o que deve existir, mas n√£o constr√≥i nada sozinha!")

        self.print_colored("\nüèóÔ∏è ANALOGIA: PLANTA DE CASA", "warning")
        self.print_colored("Uma planta arquitet√¥nica define 'deve ter cozinha, banheiro, sala', mas n√£o diz como ser√° a cor das paredes. Cada construtor implementa os detalhes. Classes abstratas s√£o iguais!", "text")
        
        input("\nüî∏ Pressione ENTER para ver exemplo...")

        codigo_abstrato = '''from abc import ABC, abstractmethod

# Classe abstrata - como uma "planta de casa"
class Funcionario(ABC):
    def __init__(self, nome, salario):
        self.nome = nome
        self.salario = salario
    
    @abstractmethod
    def calcular_bonus(self):  # DEVE ser implementado
        pass
    
    @abstractmethod
    def get_funcao(self):      # DEVE ser implementado
        pass
    
    def info(self):  # M√©todo concreto - pode usar
        return f"{self.nome} - {self.get_funcao()}"

# Implementa√ß√µes concretas
class Desenvolvedor(Funcionario):
    def calcular_bonus(self):
        return self.salario * 0.15  # 15% de b√¥nus
    
    def get_funcao(self):
        return "Desenvolvedor Python"

class Gerente(Funcionario):
    def calcular_bonus(self):
        return self.salario * 0.25  # 25% de b√¥nus
    
    def get_funcao(self):
        return "Gerente de Projeto"

# Testando
dev = Desenvolvedor("Ana", 5000)
gerente = Gerente("Carlos", 8000)

print(f"{dev.info()} - B√¥nus: R$ {dev.calcular_bonus():.2f}")
print(f"{gerente.info()} - B√¥nus: R$ {gerente.calcular_bonus():.2f}")

# Isso daria erro:
# func = Funcionario("Teste", 1000)  # TypeError!'''

        self.exemplo(codigo_abstrato)
        self.executar_codigo(codigo_abstrato)

        self.print_colored("\nüåç ONDE √â USADO:", "accent")
        usos = [
            "Django: Models abstratos para bancos de dados",
            "Jogos: Classes base para personagens",
            "APIs: Interfaces padronizadas para servi√ßos",
            "Frameworks: Templates para componentes"
        ]
        for uso in usos:
            self.print_colored(f"‚Ä¢ {uso}", "primary")

        self.pausar()
    
    def _secao_mundo_real(self) -> None:
        """Se√ß√£o: Onde usar na vida real?"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("OOP AVAN√áADO NO MUNDO REAL", "üè¢")

        self.print_success("üåç Vamos ver como grandes empresas usam esses conceitos!")

        casos_reais = [
            {
                'empresa': 'NETFLIX',
                'conceito': 'Heran√ßa e Polimorfismo',
                'exemplo': 'Classe Content ‚Üí Movie, Series, Documentary. Cada tipo implementa play() diferente.',
                'codigo': '''class Content:
    def __init__(self, title, duration):
        self.title = title
        self.duration = duration
    
    def play(self):
        pass  # Cada tipo implementa diferente

class Movie(Content):
    def play(self):
        return f"Reproduzindo filme: {self.title}"

class Series(Content):
    def __init__(self, title, episodes):
        super().__init__(title, episodes * 45)  # 45min por ep
        self.episodes = episodes
    
    def play(self):
        return f"Reproduzindo s√©rie: {self.title} ({self.episodes} eps)"

# Polimorfismo
catalogo = [Movie("Matrix", 136), Series("Stranger Things", 8)]
for item in catalogo:
    print(item.play())'''
            },
            {
                'empresa': 'UBER',
                'conceito': 'Classes Abstratas',
                'exemplo': 'Classe Vehicle abstrata for√ßa implementa√ß√£o de calculate_fare() para cada tipo.',
                'codigo': '''from abc import ABC, abstractmethod

class Vehicle(ABC):
    def __init__(self, license_plate):
        self.license_plate = license_plate
    
    @abstractmethod
    def calculate_fare(self, distance):
        pass

class UberX(Vehicle):
    def calculate_fare(self, distance):
        return distance * 1.5  # R$ 1,50 por km

class UberBlack(Vehicle):
    def calculate_fare(self, distance):
        return distance * 3.0  # R$ 3,00 por km

# Uso
ride1 = UberX("ABC-1234")
ride2 = UberBlack("XYZ-5678")

print(f"UberX 10km: R$ {ride1.calculate_fare(10):.2f}")
print(f"UberBlack 10km: R$ {ride2.calculate_fare(10):.2f}")'''
            }
        ]

        for caso in casos_reais:
            self.print_colored(f"\nüè¢ {caso['empresa']}", "warning")
            self.print_colored(f"üî∏ Conceito: {caso['conceito']}", "info")
            self.print_colored(f"üìù {caso['exemplo']}", "text")
            
            input("\nPressione ENTER para ver o c√≥digo...")
            self.exemplo(caso['codigo'])
            self.executar_codigo(caso['codigo'])
            
            if caso != casos_reais[-1]:
                input("\nPressione ENTER para o pr√≥ximo exemplo...")

        self.print_success("\nüéÜ Agora voc√™ viu OOP avan√ßado sendo usado por gigantes da tecnologia!")
        self.pausar()
    
    def _secao_melhores_praticas(self) -> None:
        """Se√ß√£o: Melhores pr√°ticas OOP"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("MELHORES PR√ÅTICAS OOP", "‚≠ê")

        self.print_success("üèÜ Dicas de desenvolvedores seniores!")

        praticas = [
            {
                'titulo': 'Prefira Composi√ß√£o √† Heran√ßa',
                'explicacao': 'Nem sempre heran√ßa √© a melhor op√ß√£o. √Äs vezes √© melhor ter objetos como atributos.',
                'exemplo': 'Em vez de Car herdar de Engine, Car pode TER um Engine como atributo.'
            },
            {
                'titulo': 'Use Nomes Descritivos',
                'explicacao': 'Classes e m√©todos devem ter nomes que explicam claramente seu prop√≥sito.',
                'exemplo': 'EmailSender √© melhor que ES. send_email() √© melhor que send().'
            },
            {
                'titulo': 'Mantenha Classes Pequenas',
                'explicacao': 'Uma classe deve ter uma responsabilidade bem definida (Princ√≠pio da Responsabilidade √önica).',
                'exemplo': 'Melhor ter UserValidator e UserSaver separados que UserManager fazendo tudo.'
            },
            {
                'titulo': 'Use Heran√ßa para Relacionamentos "is-a"',
                'explicacao': 'Heran√ßa deve representar uma rela√ß√£o "X √© um Y".',
                'exemplo': 'Dog is-a Animal ‚úÖ. Car is-a Engine ‚ùå (Car HAS-A Engine).'
            }
        ]

        for i, pratica in enumerate(praticas, 1):
            self.print_colored(f"\n{i}. {pratica['titulo']}", "warning")
            self.print_colored(f"üìù {pratica['explicacao']}", "text")
            self.print_colored(f"üí° Exemplo: {pratica['exemplo']}", "info")
            
            if i < len(praticas):
                input("\nPressione ENTER para a pr√≥xima dica...")

        self.print_tip("üöÄ Estas dicas v√™m da experi√™ncia de milhares de desenvolvedores!")
        self.pausar()
    
    def _secao_erros_comuns(self) -> None:
        """Se√ß√£o: Erros comuns e como evitar"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("ERROS COMUNS EM OOP AVAN√áADO", "‚ö†Ô∏è")

        self.print_warning("üö® Vamos ver os erros mais comuns para voc√™ evitar!")

        erros = [
            {
                'erro': 'Esquecer de chamar super().__init__()',
                'problema': 'A classe pai n√£o √© inicializada corretamente',
                'solucao': 'Sempre chame super().__init__() no construtor da classe filha',
                'codigo_errado': '''class Animal:
    def __init__(self, nome):
        self.nome = nome

class Cachorro(Animal):
    def __init__(self, nome, raca):
        # ERRO: N√£o chamou super()
        self.raca = raca''',
                'codigo_correto': '''class Cachorro(Animal):
    def __init__(self, nome, raca):
        super().__init__(nome)  # ‚úÖ Correto!
        self.raca = raca'''
            },
            {
                'erro': 'Hierarquias muito profundas',
                'problema': 'Classes filhas de filhas de filhas... fica confuso de manter',
                'solucao': 'Prefira composi√ß√£o ou mantenha hierarquias simples (m√°x 3-4 n√≠veis)',
                'codigo_errado': '''# ERRO: Hierarquia muito profunda
class Vehicle ‚Üí LandVehicle ‚Üí Car ‚Üí SportsCar ‚Üí Ferrari ‚Üí LaFerrari''',
                'codigo_correto': '''# ‚úÖ Melhor: Usar composi√ß√£o
class Car:
    def __init__(self, engine, brand):
        self.engine = engine
        self.brand = brand'''
            }
        ]

        for i, erro in enumerate(erros, 1):
            self.print_colored(f"\n‚ùå ERRO {i}: {erro['erro']}", "error")
            self.print_colored(f"üí• Problema: {erro['problema']}", "text")
            self.print_colored(f"‚úÖ Solu√ß√£o: {erro['solucao']}", "success")
            
            print("\nüíª C√ìDIGO ERRADO:")
            self.print_code_section("EVITE", erro['codigo_errado'])
            
            print("\nüéÜ C√ìDIGO CORRETO:")
            self.print_code_section("FA√áA ASSIM", erro['codigo_correto'])
            
            if i < len(erros):
                input("\nPressione ENTER para o pr√≥ximo erro...")

        self.print_success("\nüèÜ Agora voc√™ conhece as armadilhas mais comuns!")
        self.pausar()
    
    def _secao_curiosidades(self) -> None:
        """Se√ß√£o: Curiosidades sobre OOP"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("CURIOSIDADES SOBRE OOP", "üí´")

        self.print_success("üéÜ Fatos interessantes sobre Programa√ß√£o Orientada a Objetos!")

        curiosidades = [
            {
                'titulo': 'OOP foi inventada em 1967!',
                'fato': 'A primeira linguagem OOP foi Simula, criada na Noruega. Era usada para simula√ß√µes f√≠sicas.',
                'impacto': 'Hoje, 90% dos sistemas do mundo usam OOP!'
            },
            {
                'titulo': 'Java foi criada em apenas 18 meses',
                'fato': 'James Gosling criou Java na Sun Microsystems em tempo recorde para competir com C++.',
                'impacto': 'Java popularizou OOP para milh√µes de desenvolvedores.'
            },
            {
                'titulo': 'Python nasceu como hobby!',
                'fato': 'Guido van Rossum criou Python nas f√©rias de Natal de 1989, por divers√£o.',
                'impacto': 'Hoje √© uma das linguagens mais populares do mundo!'
            },
            {
                'titulo': 'Minecraft foi feito com OOP',
                'fato': 'O jogo mais vendido da hist√≥ria usa heran√ßa para blocos, criaturas e itens.',
                'impacto': 'Prova que OOP pode criar experi√™ncias incr√≠veis!'
            }
        ]

        for i, curiosidade in enumerate(curiosidades, 1):
            self.print_colored(f"\nüåü {curiosidade['titulo']}", "warning")
            self.print_colored(f"üìù {curiosidade['fato']}", "text")
            self.print_colored(f"üöÄ Impacto: {curiosidade['impacto']}", "success")
            
            if i < len(curiosidades):
                input("\nPressione ENTER para a pr√≥xima curiosidade...")

        self.print_success("\nüéâ OOP tem uma hist√≥ria rica e continua evoluindo!")
        self.print_tip("üí° Voc√™ faz parte dessa hist√≥ria ao aprender esses conceitos!")
        self.pausar()
    
    def _secao_pratica_interativa(self) -> None:
        """Se√ß√£o de pr√°tica interativa do m√≥dulo"""

        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_section("HORA DE PRATICAR!", "üéØ", "success")
        self.print_colored("Vamos testar o que voc√™ aprendeu com exerc√≠cios pr√°ticos!", "text")

        # === INSTRU√á√ïES PARA INICIANTES ===
        self.print_tip("Para iniciantes: Cada exerc√≠cio √© opcional, mas recomendamos fazer todos!")
        self.print_colored("\nüéì SOBRE OS EXERC√çCIOS:", "info")
        self.print_colored("‚Ä¢ N√£o se preocupe se errar - faz parte do aprendizado!", "text")
        self.print_colored("‚Ä¢ Voc√™ pode tentar quantas vezes quiser", "text")
        self.print_colored("‚Ä¢ Digite 'help' se precisar de ajuda", "text")
        self.print_colored("‚Ä¢ Use Ctrl+C para voltar ao menu principal se necess√°rio", "text")

        # === DEFINI√á√ÉO DOS EXERC√çCIOS ===
        exercicios = [
            {
                'title': 'Quiz: Conhecimentos sobre OOP Avan√ßado',
                'type': 'quiz',
                'questions': [
                    {
                        'question': 'Qual √© a principal vantagem da heran√ßa em OOP?',
                        'answer': ['reutilizar c√≥digo', 'reutiliza√ß√£o', 'herdar'],
                        'hint': 'Pense em como uma classe filha pode usar o que a classe pai j√° tem'
                    },
                    {
                        'question': 'O que √© polimorfismo?',
                        'answer': ['mesmo m√©todo comportamentos diferentes', 'uma interface v√°rias formas', 'polimorfismo'],
                        'hint': 'Poly = muitas, morphos = formas. Objetos diferentes, mesma interface'
                    },
                    {
                        'question': 'Para que servem classes abstratas?',
                        'answer': ['definir contratos', 'for√ßar implementa√ß√£o', 'modelo'],
                        'hint': 'S√£o como plantas arquitet√¥nicas - definem o que deve existir'
                    },
                    {
                        'question': 'O que faz o super() em Python?',
                        'answer': ['chama m√©todo pai', 'acessa classe pai', 'super'],
                        'hint': 'Permite acessar m√©todos e atributos da classe pai'
                    },
                    {
                        'question': 'O que √© MRO em Python?',
                        'answer': ['method resolution order', 'ordem resolu√ß√£o', 'mro'],
                        'hint': 'Define a ordem que Python busca m√©todos em heran√ßa m√∫ltipla'
                    }
                ]
            },
            {
                'title': 'Desafio: Complete o C√≥digo',
                'type': 'code_completion',
                'exercises': [
                    {
                        'instruction': 'B√ÅSICO: Complete a heran√ßa simples',
                        'starter': '''class Animal:
    def fazer_som(self):
        return "Som gen√©rico"

class Cachorro(______):  # Complete aqui
    def fazer_som(self):
        return "Au au!"

# Teste
cao = Cachorro()
print(cao.fazer_som())''',
                        'solution': 'Animal',
                        'type': 'simple'
                    },
                    {
                        'instruction': 'INTERMEDI√ÅRIO: Use super() corretamente',
                        'starter': '''class Veiculo:
    def __init__(self, marca):
        self.marca = marca
    
    def acelerar(self):
        return "Acelerando..."

class Carro(Veiculo):
    def __init__(self, marca, portas):
        ______.______(marca)  # Complete aqui
        self.portas = portas

# Teste
carro = Carro("Toyota", 4)
print(carro.marca)''',
                        'solution': 'super().__init__',
                        'type': 'intermediate'
                    },
                    {
                        'instruction': 'AVAN√áADO: Implemente classe abstrata',
                        'starter': '''from abc import ABC, abstractmethod

class Forma(ABC):
    ______  # Complete aqui
    def calcular_area(self):
        pass

class Retangulo(Forma):
    def __init__(self, largura, altura):
        self.largura = largura
        self.altura = altura
    
    def calcular_area(self):
        return self.largura * self.altura''',
                        'solution': '@abstractmethod',
                        'type': 'advanced'
                    }
                ]
            },
            {
                'title': 'Exerc√≠cio Criativo: Sistema de Animais do Zoo',
                'type': 'creative',
                'instruction': 'Crie um sistema de zoo com pelo menos 3 tipos de animais usando heran√ßa e polimorfismo'
            }
        ]

        # === MENU PRINCIPAL DE EXERC√çCIOS ===
        while True:
            print("\nEscolha uma atividade:")
            print("1. üìù Quiz de Conhecimentos")
            print("2. üíª Complete o C√≥digo")
            print("3. üé® Exerc√≠cio Criativo")
            print("0. Continuar para o Mini Projeto")

            try:
                escolha = input("\nüëâ Sua escolha: ").strip().lower()

                if escolha in ["0", "continuar", "sair", "proximo"]:
                    break
                elif escolha in ["1", "quiz", "conhecimentos"]:
                    try:
                        self._run_quiz(exercicios[0])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Quiz interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no quiz. Continuando...")
                elif escolha in ["2", "codigo", "completar"]:
                    try:
                        self._run_code_completion(exercicios[1])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio de c√≥digo interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio de c√≥digo. Continuando...")
                elif escolha in ["3", "criativo"]:
                    try:
                        self._run_creative_exercise(exercicios[2])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio criativo interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio criativo. Continuando...")
                elif escolha in ["help", "ajuda", "h", "?"]:
                    self._show_help_pratica()
                else:
                    self.print_warning("‚ùå Op√ß√£o inv√°lida! Digite 1, 2, 3, 0 ou 'help' para ajuda.")

            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Opera√ß√£o cancelada pelo usu√°rio. Voltando ao menu principal...")
                return  # CR√çTICO: Return em vez de break para sair completamente
            except Exception as e:
                self.print_warning("‚ùå Erro inesperado no menu. Tente novamente.")
    
    def _run_quiz(self, quiz_data: dict) -> None:
        """Executa um quiz interativo"""
        self.print_section("QUIZ DE CONHECIMENTOS", "üß†", "info")
        self.print_colored("Responda as perguntas sobre OOP Avan√ßado:", "text")
        
        perguntas = quiz_data['questions']
        acertos = 0
        
        for i, pergunta in enumerate(perguntas, 1):
            print(f"\nüî∏ Pergunta {i}/{len(perguntas)}:")
            print(f"{pergunta['question']}")
            
            resposta = input("\nüëâ Sua resposta: ").strip().lower()
            
            # Verifica se a resposta cont√©m alguma das palavras-chave
            acertou = any(palavra in resposta for palavra in pergunta['answer'])
            
            if acertou:
                self.print_success("‚úÖ Correto!")
                acertos += 1
            else:
                self.print_warning("‚ùå Ops, n√£o foi dessa vez.")
                self.print_tip(f"Dica: {pergunta['hint']}")
            
            if i < len(perguntas):
                input("\nPressione ENTER para a pr√≥xima pergunta...")
        
        # Resultado final
        porcentagem = (acertos / len(perguntas)) * 100
        print(f"\nüìä RESULTADO: {acertos}/{len(perguntas)} ({porcentagem:.1f}%)")
        
        if porcentagem >= 80:
            self.print_success("üéÜ Excelente! Voc√™ domina OOP avan√ßado!")
        elif porcentagem >= 60:
            self.print_success("üí™ Bom trabalho! Continue praticando.")
        else:
            self.print_tip("üìö Revise os conceitos e tente novamente mais tarde.")
        
        self.pausar()
    
    def _run_code_completion(self, exercise_data: dict) -> None:
        """Executa exerc√≠cios de completar c√≥digo"""
        self.print_section("COMPLETE O C√ìDIGO", "üíª", "warning")
        self.print_colored("Complete os c√≥digos abaixo com os conceitos aprendidos:", "text")
        
        exercicios = exercise_data['exercises']
        
        for i, ex in enumerate(exercicios, 1):
            print(f"\nüî∏ Exerc√≠cio {i}/{len(exercicios)} - {ex['type'].upper()}:")
            print(f"{ex['instruction']}")
            print("\n" + "="*50)
            print(ex['starter'])
            print("="*50)
            
            resposta = input("\nüëâ Complete com: ").strip()
            
            if ex['solution'].lower() in resposta.lower():
                self.print_success("‚úÖ Perfeito! C√≥digo completado corretamente!")
            else:
                self.print_warning(f"‚ùå Quase l√°! A resposta era: {ex['solution']}")
            
            if i < len(exercicios):
                input("\nPressione ENTER para o pr√≥ximo exerc√≠cio...")
        
        self.print_success("üéâ Exerc√≠cios de c√≥digo conclu√≠dos!")
        self.pausar()
    
    def _run_creative_exercise(self, exercise_data: dict) -> None:
        """Executa exerc√≠cio criativo"""
        self.print_section("EXERC√çCIO CRIATIVO", "üé®", "accent")
        
        self.print_colored(f"\nüéØ {exercise_data['title']}", "warning")
        self.print_colored(f"{exercise_data['instruction']}", "text")
        
        self.print_colored("\nüìù REQUISITOS:", "info")
        requisitos = [
            "1. Classe base Animal com m√©todos comuns",
            "2. Pelo menos 3 classes filhas (ex: Le√£o, Pinguim, Macaco)",
            "3. Cada animal deve ter som e movimento espec√≠ficos",
            "4. Use polimorfismo em uma lista de animais",
            "5. Seja criativo com os comportamentos!"
        ]
        
        for req in requisitos:
            self.print_colored(f"  {req}", "text")
        
        self.print_colored("\nüìä EXEMPLO DE USO:", "success")
        exemplo = '''# Seu sistema deve funcionar assim:
zoo = [
    Leao("Simba"),
    Pinguim("Pingu"),
    Macaco("George")
]

for animal in zoo:
    animal.fazer_som()    # Polimorfismo!
    animal.mover()        # Cada um se move diferente'''
        
        print(exemplo)
        
        self.print_tip("üí° Este √© um exerc√≠cio para voc√™ implementar no seu editor favorito!")
        self.print_colored("Use os conceitos de heran√ßa, polimorfismo e seja criativo!", "text")
        
        if input("\nDeseja ver uma solu√ß√£o de exemplo? (s/n): ").lower().startswith('s'):
            self._mostrar_solucao_zoo()
        
        self.pausar()
    
    def _mostrar_solucao_zoo(self) -> None:
        """Mostra exemplo de solu√ß√£o para o exerc√≠cio criativo"""
        self.print_section("üéÜ EXEMPLO DE SOLU√á√ÉO", "üéÜ")
        
        codigo_zoo = '''# Sistema de Zoo com OOP Avan√ßado
class Animal:
    def __init__(self, nome):
        self.nome = nome
        self.energia = 100
    
    def fazer_som(self):
        return "Som gen√©rico"
    
    def mover(self):
        return "Movendo-se"
    
    def info(self):
        print(f"{self.nome}: {self.fazer_som()} - {self.mover()}")

class Leao(Animal):
    def fazer_som(self):
        return "ROAAAAR!"
    
    def mover(self):
        return "Correndo pela savana"

class Pinguim(Animal):
    def fazer_som(self):
        return "Quack quack!"
    
    def mover(self):
        return "Deslizando no gelo"

class Macaco(Animal):
    def fazer_som(self):
        return "Oook ook ahh!"
    
    def mover(self):
        return "Saltando entre galhos"

# Polimorfismo em a√ß√£o
zoo = [Leao("Simba"), Pinguim("Pingu"), Macaco("George")]

for animal in zoo:
    animal.info()  # Cada um se comporta diferente!'''
        
        self.exemplo(codigo_zoo)
        print("\nüöÄ EXECUTANDO O EXEMPLO:")
        self.executar_codigo(codigo_zoo)
    
    def _show_help_pratica(self) -> None:
        """Mostra ajuda sobre as op√ß√µes dispon√≠veis"""
        self.print_section("AJUDA - SE√á√ÉO DE PR√ÅTICA", "‚ùì", "info")
        help_text = [
            "üìù OP√á√ÉO 1 - Quiz: Teste seus conhecimentos sobre OOP avan√ßado",
            "üíª OP√á√ÉO 2 - Complete o C√≥digo: 3 exerc√≠cios progressivos",
            "üé® OP√á√ÉO 3 - Exerc√≠cio Criativo: Sistema de zoo com heran√ßa",
            "üî¢ OP√á√ÉO 0 - Continue para o Mini Projeto final",
            "",
            "üí° DICAS:",
            "‚Ä¢ Voc√™ pode digitar o n√∫mero ou palavras como 'quiz', 'codigo'",
            "‚Ä¢ Digite 'help' a qualquer momento para ver esta ajuda",
            "‚Ä¢ Use Ctrl+C se quiser voltar ao menu principal",
            "‚Ä¢ Recomendamos fazer todas as atividades para aprender melhor!"
        ]

        for line in help_text:
            if line:
                self.print_colored(f"  {line}", "text")
            else:
                print()

        input("\nüî∏ Pressione ENTER para voltar ao menu...")
    
    def _mini_projeto_sistema_rpg(self) -> None:
        """Mini Projeto - M√≥dulo 19: Sistema de Aventura RPG"""

        # === CABE√áALHO IMPACTANTE ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üéØ MINI PROJETO: SISTEMA DE AVENTURA RPG")
        else:
            print("\n" + "="*50)
            print("üéØ MINI PROJETO: SISTEMA DE AVENTURA RPG")
            print("="*50)

        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_success("üéâ Vamos criar seu projeto pr√°tico aplicando OOP avan√ßado!")

        self.print_concept(
            "Sistema de Aventura RPG",
            "Um jogo completo onde voc√™ pode criar diferentes tipos de her√≥is, cada um com habilidades √∫nicas, e fazer batalhas √©picas!"
        )

        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nEste tipo de programa √© √∫til para:", "text")
        usos_praticos = [
            "Desenvolvimento de jogos mobile (como Clash Royale)",
            "Sistemas de simula√ß√£o empresarial",
            "Aplica√ß√µes educacionais interativas",
            "Plataformas de treinamento gamificado"
        ]
        for uso in usos_praticos:
            self.print_colored(f"‚Ä¢ {uso}", "accent")

        # === DESENVOLVIMENTO PASSO A PASSO ===

        # PASSO 1: Escolha do Her√≥i
        self.print_section("PASSO 1: Escolha seu Her√≥i", "üìù", "info")
        self.print_tip("Vamos criar um her√≥i personalizado para voc√™!")

        try:
            print("\nEscolha o tipo do seu her√≥i:")
            print("1. ‚öîÔ∏è Guerreiro (forte e resistente)")
            print("2. üßô Mago (m√°gico e inteligente)")
            print("3. üèπ Arqueiro (r√°pido e preciso)")
            
            escolha_heroi = input("\nSua escolha (1-3): ").strip()
            tipos_heroi = {"1": "Guerreiro", "2": "Mago", "3": "Arqueiro"}
            tipo_escolhido = tipos_heroi.get(escolha_heroi, "Guerreiro")
            
            nome_heroi = input(f"\nNome do seu {tipo_escolhido}: ").strip() or "Her√≥i"
            
            self.print_success(f"üéÜ {nome_heroi}, o {tipo_escolhido}, foi criado!")

        except KeyboardInterrupt:
            self.print_warning("Projeto cancelado pelo usu√°rio")
            return

        # PASSO 2: Criando Inimigos
        self.print_section("PASSO 2: Gerando Inimigos", "‚öôÔ∏è", "success")
        self.print_colored("Criando inimigos para sua aventura...", "text")

        # PASSO 3: Batalha √âpica
        self.print_section("PASSO 3: Batalha √âpica!", "üé¨", "warning")

        # === C√ìDIGO FINAL GERADO ===
        self.print_colored("Aqui est√° o c√≥digo completo do seu jogo:", "text")

        codigo_final = f'''# üêç PROJETO: SISTEMA DE AVENTURA RPG
# M√≥dulo 19: OOP Avan√ßado

from abc import ABC, abstractmethod
import random

class Personagem(ABC):
    """Classe abstrata base para todos os personagens"""
    
    def __init__(self, nome, vida, ataque, defesa):
        self.nome = nome
        self.vida_max = vida
        self.vida_atual = vida
        self.ataque = ataque
        self.defesa = defesa
    
    @abstractmethod
    def habilidade_especial(self):
        """Cada personagem tem uma habilidade √∫nica"""
        pass
    
    @abstractmethod
    def get_tipo(self):
        """Retorna o tipo do personagem"""
        pass
    
    def atacar(self, alvo):
        """Ataque b√°sico - polimorfismo"""
        dano = max(1, self.ataque - alvo.defesa + random.randint(-2, 3))
        alvo.vida_atual = max(0, alvo.vida_atual - dano)
        return dano
    
    def esta_vivo(self):
        return self.vida_atual > 0
    
    def info(self):
        return f"{{self.nome}} ({{self.get_tipo()}}) - Vida: {{self.vida_atual}}/{{self.vida_max}}"

class Guerreiro(Personagem):
    def __init__(self, nome):
        super().__init__(nome, vida=120, ataque=25, defesa=15)
    
    def habilidade_especial(self):
        return "Golpe Devastador! (+50% dano)"
    
    def get_tipo(self):
        return "Guerreiro"

class Mago(Personagem):
    def __init__(self, nome):
        super().__init__(nome, vida=80, ataque=30, defesa=8)
    
    def habilidade_especial(self):
        return "Bola de Fogo! (ignora defesa)"
    
    def get_tipo(self):
        return "Mago"

class Arqueiro(Personagem):
    def __init__(self, nome):
        super().__init__(nome, vida=100, ataque=22, defesa=10)
    
    def habilidade_especial(self):
        return "Tiro Certeiro! (sempre acerta cr√≠tico)"
    
    def get_tipo(self):
        return "Arqueiro"

class Orc(Personagem):
    def __init__(self, nome="Orc Selvagem"):
        super().__init__(nome, vida=90, ataque=20, defesa=12)
    
    def habilidade_especial(self):
        return "Grito de Guerra!"
    
    def get_tipo(self):
        return "Orc"

class Esqueleto(Personagem):
    def __init__(self, nome="Esqueleto Guerreiro"):
        super().__init__(nome, vida=70, ataque=18, defesa=8)
    
    def habilidade_especial(self):
        return "Ossos Voadores!"
    
    def get_tipo(self):
        return "Esqueleto"

# Factory Pattern para criar her√≥is
class HeroiFactory:
    @staticmethod
    def criar_heroi(tipo, nome):
        if tipo == "Guerreiro":
            return Guerreiro(nome)
        elif tipo == "Mago":
            return Mago(nome)
        elif tipo == "Arqueiro":
            return Arqueiro(nome)
        else:
            return Guerreiro(nome)

class SistemaBatalha:
    @staticmethod
    def batalha(heroi, inimigo):
        print(f"\\n‚öîÔ∏è  {{heroi.nome}} vs {{inimigo.nome}}!")
        print("=" * 40)
        
        turno = 1
        while heroi.esta_vivo() and inimigo.esta_vivo():
            print(f"\\nTurno {{turno}}:")
            
            # Turno do her√≥i
            if random.random() < 0.3:  # 30% chance de habilidade especial
                print(f"{{heroi.nome}} usa {{heroi.habilidade_especial()}}")
                dano = heroi.atacar(inimigo) * 1.5
            else:
                dano = heroi.atacar(inimigo)
            
            print(f"{{heroi.nome}} ataca causando {{dano:.0f}} de dano!")
            print(f"{{inimigo.info()}}")
            
            if not inimigo.esta_vivo():
                print(f"\\nüèÜ {{heroi.nome}} venceu!")
                break
            
            # Turno do inimigo
            dano_inimigo = inimigo.atacar(heroi)
            print(f"{{inimigo.nome}} contra-ataca causando {{dano_inimigo}} de dano!")
            print(f"{{heroi.info()}}")
            
            if not heroi.esta_vivo():
                print(f"\\nüíÄ {{inimigo.nome}} venceu...")
                break
            
            turno += 1
            if turno > 10:  # Evita loops infinitos
                print("\\nBatalha muito longa! Empate!")
                break

# === JOGO PRINCIPAL ===
print("üè∞ BEM-VINDO AO SISTEMA DE AVENTURA RPG!")
print("=" * 50)

# Criar her√≥i
heroi = HeroiFactory.criar_heroi("{tipo_escolhido}", "{nome_heroi}")
print(f"\\nüéÜ Her√≥i criado: {{heroi.info()}}")

# Criar inimigos
inimigos = [Orc(), Esqueleto("Esqueleto do Mal")]

print(f"\\nüëπ Inimigos apareceram: {{len(inimigos)}} criaturas!")
for inimigo in inimigos:
    print(f"  - {{inimigo.info()}}")

# Batalhas
for i, inimigo in enumerate(inimigos, 1):
    if heroi.esta_vivo():
        print(f"\\nüó°Ô∏è BATALHA {{i}}:")
        SistemaBatalha.batalha(heroi, inimigo)
        
        if heroi.esta_vivo():
            # Recupera um pouco de vida
            cura = min(20, heroi.vida_max - heroi.vida_atual)
            heroi.vida_atual += cura
            print(f"\\nüíñ {{heroi.nome}} recuperou {{cura}} pontos de vida!")
    else:
        break

if heroi.esta_vivo():
    print(f"\\nüéâ PARAB√âNS! {{heroi.nome}} completou a aventura!")
    print("üèÜ VOC√ä √â UM VERDADEIRO HER√ìI!")
else:
    print(f"\\nüíÄ {{heroi.nome}} foi derrotado na aventura...")
    print("üí™ Tente novamente, her√≥i!")

print("\\n‚ú® Obrigado por jogar! ‚ú®")'''

        self.exemplo(codigo_final)

        # === EXECU√á√ÉO DO RESULTADO ===
        self.print_section("RESULTADO FINAL", "üé¨", "warning")
        self.executar_codigo(codigo_final)

        # === MENSAGEM DE CONQUISTA ===
        self.print_success("üéâ PARAB√âNS! Voc√™ criou seu jogo de aventura RPG!")

        # === APLICA√á√ïES AVAN√áADAS ===
        self.print_section("PR√ìXIMOS PASSOS", "üöÄ", "info")
        proximos_passos = [
            "Adicionar mais tipos de personagens (Paladino, Necromante)",
            "Criar sistema de itens e equipamentos",
            "Implementar sistema de n√≠veis e evolu√ß√£o",
            "Adicionar interface gr√°fica com Pygame ou Tkinter",
            "Criar multiplayer com sockets"
        ]
        for passo in proximos_passos:
            self.print_colored(f"‚Ä¢ {passo}", "primary")

        self.print_success("\nüèÜ CONQUISTA DESBLOQUEADA: Mestre em OOP Avan√ßado!")

        # === REGISTRO DE CONCLUS√ÉO ===
        self.complete_mini_project("Sistema de Aventura RPG")

        self.pausar()


# Para teste standalone
if __name__ == "__main__":
    module = Modulo19OopAvancado()
    print("\n" + "="*60)
    print("üöÄ TESTE DO M√ìDULO 19 - OOP AVAN√áADO")
    print("Vers√£o refatorada seguindo padr√£o pedag√≥gico")
    print("="*60)
    try:
        module._oop_avancado()
    except KeyboardInterrupt:
        print("\n\nüëã Teste interrompido. At√© mais!")
    except Exception as e:
        print(f"\n‚ùå Erro durante o teste: {e}")