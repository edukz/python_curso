#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
M√≥dulo 16: Tratamento de Exce√ß√µes
Aprenda a lidar com erros de forma profissional
"""

from ..shared.base_module import BaseModule


class Modulo16Excecoes(BaseModule):
    """M√≥dulo 16: Tratamento de Exce√ß√µes - Lidando com Erros"""
    
    def __init__(self):
        super().__init__("modulo_16", "Tratamento de Exce√ß√µes")
        self.has_mini_project = True
        self.mini_project_points = 80
    
    def execute(self) -> None:
        """Executa o m√≥dulo sobre tratamento de exce√ß√µes"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return
        
        try:
            self._excecoes_module()
        except Exception as e:
            self.error_handler(lambda: None)
    
    def _excecoes_module(self) -> None:
        """Conte√∫do principal sobre tratamento de exce√ß√µes"""
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("‚ö†Ô∏è M√ìDULO 16: TRATAMENTO DE EXCE√á√ïES")
        else:
            print("\n" + "="*60)
            print("‚ö†Ô∏è M√ìDULO 16: TRATAMENTO DE EXCE√á√ïES")
            print("="*60)
        
        print("üõ°Ô∏è Aprenda a lidar com erros de forma profissional!")
        print("üéØ T√≥picos abordados:")
        print("‚Ä¢ Try/except/finally")
        print("‚Ä¢ Tipos de exce√ß√µes")
        print("‚Ä¢ Criando exce√ß√µes customizadas")
        print("‚Ä¢ Boas pr√°ticas de tratamento")
        print("‚Ä¢ Logging de erros")
        print("‚Ä¢ Debugging e an√°lise de erros")
        
        input("\nüî∏ Pressione ENTER para continuar...")
        
        self._conceitos_basicos()
        self._tipos_excecoes()
        self._excecoes_customizadas()
        self._boas_praticas()
        self._mini_projeto_exception_handler()
        
        # Marcar m√≥dulo como completo
        if self.progress:
            self.progress.complete_module(self.module_id)
            print(f"\nüéâ M√≥dulo {self.module_id} conclu√≠do!")
    
    def _conceitos_basicos(self):
        """Conceitos b√°sicos de exce√ß√µes"""
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üìö CONCEITOS B√ÅSICOS DE EXCE√á√ïES")
        
        print("üîç O que s√£o exce√ß√µes?")
        print("‚Ä¢ Eventos que interrompem o fluxo normal do programa")
        print("‚Ä¢ Sinais de que algo deu errado")
        print("‚Ä¢ Podem ser tratadas ou propagadas")
        
        print("\nüõ†Ô∏è Estrutura try/except:")
        codigo_basico = '''
try:
    # C√≥digo que pode gerar erro
    numero = int(input("Digite um n√∫mero: "))
    resultado = 10 / numero
    print(f"Resultado: {resultado}")
except ValueError:
    print("‚ùå Erro: Voc√™ deve digitar um n√∫mero v√°lido!")
except ZeroDivisionError:
    print("‚ùå Erro: N√£o √© poss√≠vel dividir por zero!")
except Exception as e:
    print(f"‚ùå Erro inesperado: {e}")
else:
    print("‚úÖ Opera√ß√£o realizada com sucesso!")
finally:
    print("üîÑ Esta mensagem sempre aparece!")
'''
        
        print(codigo_basico)
        input("\nüî∏ Pressione ENTER para continuar...")
    
    def _tipos_excecoes(self):
        """Tipos comuns de exce√ß√µes"""
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üè∑Ô∏è TIPOS COMUNS DE EXCE√á√ïES")
        
        print("üìã Exce√ß√µes mais frequentes:")
        
        tipos_excecoes = [
            ("ValueError", "Valor inv√°lido para o tipo esperado"),
            ("TypeError", "Tipo de dados incorreto"),
            ("KeyError", "Chave n√£o encontrada em dicion√°rio"),
            ("IndexError", "√çndice fora do range de uma lista"),
            ("FileNotFoundError", "Arquivo n√£o encontrado"),
            ("ZeroDivisionError", "Divis√£o por zero"),
            ("AttributeError", "Atributo n√£o existe no objeto"),
            ("ImportError", "M√≥dulo n√£o pode ser importado"),
            ("ConnectionError", "Problemas de conex√£o"),
            ("TimeoutError", "Opera√ß√£o demorou muito")
        ]
        
        for excecao, descricao in tipos_excecoes:
            print(f"‚Ä¢ {excecao}: {descricao}")
        
        print("\nüí° Exemplo pr√°tico:")
        exemplo_tipos = '''
# Diferentes tipos de erros
def demonstrar_excecoes():
    exemplos = [
        lambda: int("abc"),           # ValueError
        lambda: "texto" + 5,          # TypeError  
        lambda: {"a": 1}["b"],        # KeyError
        lambda: [1, 2, 3][10],        # IndexError
        lambda: open("inexistente.txt"),  # FileNotFoundError
        lambda: 10 / 0,               # ZeroDivisionError
    ]
    
    for i, exemplo in enumerate(exemplos):
        try:
            resultado = exemplo()
            print(f"Exemplo {i+1}: {resultado}")
        except Exception as e:
            print(f"Exemplo {i+1}: {type(e).__name__} - {e}")

demonstrar_excecoes()
'''
        
        print(exemplo_tipos)
        input("\nüî∏ Pressione ENTER para continuar...")
    
    def _excecoes_customizadas(self):
        """Criando exce√ß√µes customizadas"""
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("‚öôÔ∏è EXCE√á√ïES CUSTOMIZADAS")
        
        print("üî® Criando suas pr√≥prias exce√ß√µes:")
        
        excecoes_custom = '''
# Exce√ß√£o base customizada
class MeuAppError(Exception):
    """Exce√ß√£o base para erros do meu aplicativo"""
    pass

# Exce√ß√µes espec√≠ficas
class IdadeInvalidaError(MeuAppError):
    """Erro quando idade √© inv√°lida"""
    def __init__(self, idade, mensagem="Idade deve estar entre 0 e 150"):
        self.idade = idade
        self.mensagem = mensagem
        super().__init__(self.mensagem)

class SaldoInsuficienteError(MeuAppError):
    """Erro quando saldo da conta √© insuficiente"""
    def __init__(self, saldo_atual, valor_tentativa):
        self.saldo_atual = saldo_atual
        self.valor_tentativa = valor_tentativa
        mensagem = f"Saldo insuficiente: R${saldo_atual:.2f} < R${valor_tentativa:.2f}"
        super().__init__(mensagem)

# Usando exce√ß√µes customizadas
class ContaBancaria:
    def __init__(self, saldo=0):
        self.saldo = saldo
    
    def sacar(self, valor):
        if valor > self.saldo:
            raise SaldoInsuficienteError(self.saldo, valor)
        self.saldo -= valor
        return self.saldo

# Exemplo de uso
try:
    conta = ContaBancaria(100)
    conta.sacar(150)  # Vai gerar erro
except SaldoInsuficienteError as e:
    print(f"‚ùå {e}")
    print(f"üí∞ Saldo atual: R${e.saldo_atual:.2f}")
    print(f"üí∏ Tentativa: R${e.valor_tentativa:.2f}")
'''
        
        print(excecoes_custom)
        input("\nüî∏ Pressione ENTER para continuar...")
    
    def _boas_praticas(self):
        """Boas pr√°ticas no tratamento de exce√ß√µes"""
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("‚úÖ BOAS PR√ÅTICAS")
        
        print("üéØ Regras de ouro para tratamento de exce√ß√µes:")
        
        praticas = [
            "1. Seja espec√≠fico: capture exce√ß√µes espec√≠ficas, n√£o Exception gen√©rica",
            "2. Falhe r√°pido: n√£o mascare erros desnecessariamente", 
            "3. Log apropriado: registre erros para debugging",
            "4. Cleanup: use finally para limpeza de recursos",
            "5. Contexto: forne√ßa informa√ß√µes √∫teis sobre o erro",
            "6. N√£o silencie: nunca use 'except: pass' sem motivo",
            "7. Re-raise quando necess√°rio: propague erros que n√£o pode tratar"
        ]
        
        for pratica in praticas:
            print(f"‚Ä¢ {pratica}")
        
        print("\nüí° Exemplo de boas pr√°ticas:")
        
        exemplo_praticas = '''
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def processar_arquivo(nome_arquivo):
    """Exemplo de tratamento robusto de exce√ß√µes"""
    arquivo = None
    try:
        # Opera√ß√£o que pode falhar
        arquivo = open(nome_arquivo, 'r')
        dados = arquivo.read()
        
        # Processamento que pode falhar
        resultado = processar_dados(dados)
        
        logger.info(f"Arquivo {nome_arquivo} processado com sucesso")
        return resultado
        
    except FileNotFoundError:
        logger.error(f"Arquivo {nome_arquivo} n√£o encontrado")
        raise  # Re-propaga o erro
        
    except PermissionError:
        logger.error(f"Sem permiss√£o para ler {nome_arquivo}")
        raise
        
    except Exception as e:
        logger.error(f"Erro inesperado ao processar {nome_arquivo}: {e}")
        raise  # Re-propaga erro n√£o tratado
        
    finally:
        # Limpeza sempre executada
        if arquivo and not arquivo.closed:
            arquivo.close()
            logger.info(f"Arquivo {nome_arquivo} fechado")

def processar_dados(dados):
    """Simula processamento de dados"""
    if not dados.strip():
        raise ValueError("Dados vazios n√£o podem ser processados")
    return len(dados.split())
'''
        
        print(exemplo_praticas)
        input("\nüî∏ Pressione ENTER para continuar...")
    
    def _mini_projeto_exception_handler(self):
        """Mini projeto: Sistema de Exception Handler"""
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üöÄ MINI PROJETO: EXCEPTION HANDLER")
        
        print("üìä Vamos criar um sistema robusto de tratamento de exce√ß√µes!")
        print("üéØ Funcionalidades:")
        print("‚Ä¢ Decorador para captura autom√°tica de exce√ß√µes")
        print("‚Ä¢ Logger personalizado para erros")
        print("‚Ä¢ Sistema de retry autom√°tico")
        print("‚Ä¢ Notifica√ß√µes de erro")
        
        input("\nüî∏ Pressione ENTER para ver o c√≥digo...")
        
        codigo_projeto = '''
import functools
import logging
import time
from typing import Callable, Any

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

class ExceptionHandler:
    """Sistema avan√ßado de tratamento de exce√ß√µes"""
    
    def __init__(self, logger_name="ExceptionHandler"):
        self.logger = logging.getLogger(logger_name)
    
    def handle_exceptions(self, 
                         max_retries=3, 
                         delay=1, 
                         exceptions=(Exception,),
                         notify=True):
        """
        Decorador para tratamento autom√°tico de exce√ß√µes
        
        Args:
            max_retries: N√∫mero m√°ximo de tentativas
            delay: Delay entre tentativas (segundos)
            exceptions: Tupla de exce√ß√µes para capturar
            notify: Se deve notificar sobre erros
        """
        def decorator(func: Callable) -> Callable:
            @functools.wraps(func)
            def wrapper(*args, **kwargs) -> Any:
                last_exception = None
                
                for tentativa in range(max_retries + 1):
                    try:
                        result = func(*args, **kwargs)
                        
                        if tentativa > 0:
                            self.logger.info(
                                f"‚úÖ {func.__name__} executada com sucesso "
                                f"na tentativa {tentativa + 1}"
                            )
                        
                        return result
                        
                    except exceptions as e:
                        last_exception = e
                        
                        self.logger.warning(
                            f"‚ö†Ô∏è Tentativa {tentativa + 1} falhou em {func.__name__}: {e}"
                        )
                        
                        if tentativa < max_retries:
                            self.logger.info(f"üîÑ Tentando novamente em {delay}s...")
                            time.sleep(delay)
                        else:
                            self.logger.error(
                                f"‚ùå {func.__name__} falhou ap√≥s {max_retries + 1} tentativas"
                            )
                            
                            if notify:
                                self.notify_error(func.__name__, last_exception)
                            
                            raise last_exception
                
            return wrapper
        return decorator
    
    def notify_error(self, function_name: str, exception: Exception):
        """Notifica sobre erro cr√≠tico"""
        message = f"""
        üö® ERRO CR√çTICO DETECTADO üö®
        
        Fun√ß√£o: {function_name}
        Erro: {type(exception).__name__}
        Mensagem: {str(exception)}
        Timestamp: {time.strftime('%Y-%m-%d %H:%M:%S')}
        
        A√ß√£o necess√°ria: Verificar logs e corrigir problema.
        """
        
        print(message)
        self.logger.critical(f"ERRO CR√çTICO em {function_name}: {exception}")

# Exemplo de uso
handler = ExceptionHandler()

@handler.handle_exceptions(max_retries=2, delay=0.5)
def operacao_instavel():
    """Simula opera√ß√£o que pode falhar"""
    import random
    
    if random.random() < 0.7:  # 70% chance de falhar
        raise ConnectionError("Falha na conex√£o com servidor")
    
    return "‚úÖ Opera√ß√£o realizada com sucesso!"

@handler.handle_exceptions(exceptions=(ValueError, TypeError))
def calcular_media(numeros):
    """Calcula m√©dia de uma lista de n√∫meros"""
    if not numeros:
        raise ValueError("Lista de n√∫meros n√£o pode estar vazia")
    
    if not all(isinstance(n, (int, float)) for n in numeros):
        raise TypeError("Todos os elementos devem ser n√∫meros")
    
    return sum(numeros) / len(numeros)

# Demonstra√ß√£o
print("=== TESTANDO SISTEMA DE EXCEPTION HANDLER ===")

# Teste 1: Opera√ß√£o inst√°vel
try:
    resultado = operacao_instavel()
    print(f"Resultado: {resultado}")
except Exception as e:
    print(f"Falha final: {e}")

# Teste 2: C√°lculo de m√©dia
try:
    media = calcular_media([1, 2, 3, 4, 5])
    print(f"M√©dia: {media}")
    
    # Teste com erro
    media = calcular_media([])
except Exception as e:
    print(f"Erro no c√°lculo: {e}")
'''
        
        print(codigo_projeto)
        
        print("\nüèÜ PARAB√âNS! Voc√™ criou um sistema robusto de exception handling!")
        print("üéØ Aplica√ß√£o real: sistemas cr√≠ticos que precisam de alta confiabilidade")
        
        # Registra conclus√£o do mini projeto  
        if hasattr(self, 'complete_mini_project'):
            self.complete_mini_project("Sistema de Exception Handler")
        
        input("\nüî∏ Pressione ENTER para finalizar...")


# Para teste standalone
if __name__ == "__main__":
    module = Modulo16Excecoes()
    print("Teste do m√≥dulo 16 - vers√£o standalone")
    module._excecoes_module()