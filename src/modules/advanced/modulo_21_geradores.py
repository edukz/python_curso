#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
M√≥dulo 21: Generators e Iterators
VERS√ÉO REFATORADA seguindo o padr√£o pedag√≥gico estabelecido
Aprenda generators e iterators de forma interativa
"""

from ..shared.base_module import BaseModule
import sys
import time
import random
from typing import Iterator, Generator, Dict, Any, List, Optional, Callable
from datetime import datetime
from itertools import islice, chain, groupby


class Modulo21Geradores(BaseModule):
    """M√≥dulo 21: Generators e Iterators - Efici√™ncia M√°xima"""
    
    def __init__(self):
        super().__init__("modulo_21", "Generators e Iterators")
        self.has_mini_project = True
        self.mini_project_points = 110
    
    def execute(self) -> None:
        """Executa o m√≥dulo Generators e Iterators"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return

        try:
            self._geradores()
        except Exception as e:
            self.error_handler(lambda: None)
    
    def _geradores(self) -> None:
        """Conte√∫do principal do m√≥dulo Generators e Iterators"""
        # === CABE√áALHO VISUAL ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("‚ö° M√ìDULO 21: GENERATORS E ITERATORS")
        else:
            print("\n" + "="*60)
            print("‚ö° M√ìDULO 21: GENERATORS E ITERATORS")
            print("="*60)

        # === MENSAGENS MOTIVACIONAIS ===
        self.print_success("üéâ Bem-vindo ao mundo dos Generators e Iterators!")
        self.print_tip("Este m√≥dulo est√° dividido em se√ß√µes interativas. Voc√™ controla o ritmo!")

        # === FLUXO PRINCIPAL COM TRATAMENTO DE CTRL+C ===

        # 1. Sistema de navega√ß√£o por se√ß√µes
        try:
            self._navegacao_secoes_interativas()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Navega√ß√£o interrompida pelo usu√°rio. Voltando ao menu principal...")
            return

        # 2. Se√ß√£o de Pr√°tica Interativa
        try:
            self._secao_pratica_interativa()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è M√≥dulo interrompido pelo usu√°rio. Voltando ao menu principal...")
            return

        # 3. Mini Projeto Pr√°tico
        try:
            self._mini_projeto_pipeline_dados()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Mini projeto interrompido. Voltando ao menu principal...")
            return

        # 4. Marcar m√≥dulo como completo
        self.complete_module()
    
    def _navegacao_secoes_interativas(self) -> None:
        """Sistema de navega√ß√£o por se√ß√µes do m√≥dulo"""

        # === DEFINI√á√ÉO DAS SE√á√ïES (7 SE√á√ïES) ===
        secoes = [
            {
                'id': 'secao_conceito_generators',
                'titulo': 'üéØ O que s√£o Generators?',
                'descricao': 'Entenda o conceito que revoluciona o processamento de dados',
                'funcao': self._secao_conceito_generators
            },
            {
                'id': 'secao_yield_funcionamento',
                'titulo': '‚öôÔ∏è Como yield funciona?',
                'descricao': 'Veja a m√°gica por tr√°s da palavra-chave yield',
                'funcao': self._secao_yield_funcionamento
            },
            {
                'id': 'secao_iterators_customizados',
                'titulo': 'üîÑ Iterators Customizados',
                'descricao': 'Aprenda a criar seus pr√≥prios iterators do zero',
                'funcao': self._secao_iterators_customizados
            },
            {
                'id': 'secao_generator_expressions',
                'titulo': 'üí° Generator Expressions',
                'descricao': 'Sintaxe concisa para generators poderosos',
                'funcao': self._secao_generator_expressions
            },
            {
                'id': 'secao_casos_uso_reais',
                'titulo': 'üåç Onde usar na vida real?',
                'descricao': 'Aplica√ß√µes pr√°ticas em projetos profissionais',
                'funcao': self._secao_casos_uso_reais
            },
            {
                'id': 'secao_memoria_performance',
                'titulo': '‚ö° Mem√≥ria e Performance',
                'descricao': 'Por que generators s√£o t√£o eficientes?',
                'funcao': self._secao_memoria_performance
            },
            {
                'id': 'secao_curiosidades',
                'titulo': 'üí´ Curiosidades sobre Generators',
                'descricao': 'Fatos interessantes e funcionalidades avan√ßadas',
                'funcao': self._secao_curiosidades
            }
        ]

        secoes_visitadas = set()

        # === LOOP PRINCIPAL DE NAVEGA√á√ÉO ===
        while True:
            # Limpa tela e mostra cabe√ßalho
            self.ui.clear_screen() if self.ui else print("\n" + "="*50)
            self.print_section("NAVEGA√á√ÉO DO M√ìDULO", "üìö", "accent")
            self.print_colored("Escolha uma se√ß√£o para estudar:", "text")

            # Lista todas as se√ß√µes com status
            print()
            for i, secao in enumerate(secoes, 1):
                status = "‚úÖ" if secao['id'] in secoes_visitadas else "üìñ"
                print(f"{status} {i}. {secao['titulo']}")
                self.print_colored(f"    {secao['descricao']}", "text")
                print()

            print("0. üéØ Continuar para os Exerc√≠cios Pr√°ticos")

            # Mostra progresso visual
            progresso = len(secoes_visitadas)
            total = len(secoes)
            self.print_colored(f"\nüìä Progresso: {progresso}/{total} se√ß√µes visitadas", "info")

            if progresso == total:
                self.print_success("üåü Voc√™ completou todas as se√ß√µes! Est√° pronto para praticar!")

            # Processa escolha do usu√°rio
            try:
                escolha = input(f"\nüëâ Escolha uma se√ß√£o (1-{len(secoes)}) ou 0 para continuar: ").strip()

                if escolha == "0":
                    # Verifica se visitou se√ß√µes suficientes
                    if progresso >= 3:  # Pelo menos 3 se√ß√µes visitadas
                        break
                    else:
                        self.print_warning("üìö Recomendamos visitar pelo menos 3 se√ß√µes antes de continuar!")
                        continuar = input("Quer continuar mesmo assim? (s/n): ").lower()
                        if continuar in ['s', 'sim', 'yes']:
                            break
                elif escolha.isdigit() and 1 <= int(escolha) <= len(secoes):
                    # Executa se√ß√£o escolhida
                    idx = int(escolha) - 1
                    secoes[idx]['funcao']()
                    secoes_visitadas.add(secoes[idx]['id'])
                else:
                    self.print_warning(f"‚ùå Op√ß√£o inv√°lida! Digite um n√∫mero de 1 a {len(secoes)} ou 0.")

            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Pulando para exerc√≠cios pr√°ticos...")
                break
            except Exception as e:
                self.print_warning(f"‚ùå Erro: {str(e)}. Tente novamente.")

    def _secao_conceito_generators(self) -> None:
        """Se√ß√£o: O que s√£o Generators?"""
        if self.ui:
            self.ui.clear_screen()

        # === CABE√áALHO ATRATIVO ===
        self.print_section("O QUE S√ÉO GENERATORS?", "üéØ")

        # === DEFINI√á√ÉO DO CONCEITO (SEMPRE PRIMEIRO) ===
        self.print_concept(
            "Generator",
            "Uma fun√ß√£o especial que produz uma sequ√™ncia de valores sob demanda, pausando e retomando sua execu√ß√£o"
        )

        # === DICA RELACIONADA ===
        self.print_tip("Generators s√£o como 'f√°bricas pregui√ßosas' - s√≥ produzem quando voc√™ pede!")

        # === ANALOGIA DO COTIDIANO ===
        self.print_colored("\nüè† ANALOGIA DO DIA A DIA:", "warning")
        self.print_colored("√â como uma torneira de √°gua:", "text")
        self.print_colored("‚Ä¢ Lista comum: enche um balde inteiro (usa muita mem√≥ria)", "text")
        self.print_colored("‚Ä¢ Generator: abre torneira quando precisa (economiza √°gua/mem√≥ria)", "text")
        self.print_colored("‚Ä¢ Voc√™ controla quando quer mais √°gua (valores)", "text")
        input("\nüî∏ Pressione ENTER para continuar...")

        # === EXPLICA√á√ÉO T√âCNICA GRADUAL ===
        self.print_colored("\nüîß COMO FUNCIONA NA PR√ÅTICA:", "info")
        passos_tecnicos = [
            "1. Fun√ß√£o usa 'yield' ao inv√©s de 'return'",
            "2. Quando yield √© encontrado, fun√ß√£o 'pausa' e retorna valor",
            "3. Estado da fun√ß√£o fica 'congelado' na mem√≥ria",
            "4. Pr√≥xima chamada continua de onde parou",
            "5. Quando fun√ß√£o termina, levanta StopIteration"
        ]

        for i, passo in enumerate(passos_tecnicos, 1):
            self.print_colored(passo, "text")
            if i < len(passos_tecnicos):
                input("   ‚è≥ Pressione ENTER para o pr√≥ximo passo...")

        # === EXEMPLO DE C√ìDIGO ===
        self.print_colored("\nüíª EXEMPLO SIMPLES:", "success")
        codigo_exemplo = '''# Comparando fun√ß√£o normal vs generator
def numeros_lista(n):
    """Fun√ß√£o normal - cria lista completa"""
    resultado = []
    for i in range(1, n + 1):
        resultado.append(i)
    return resultado

def numeros_generator(n):
    """Generator - produz um valor por vez"""
    for i in range(1, n + 1):
        yield i  # Pausa aqui e retorna valor

# Testando a diferen√ßa
print("=== FUN√á√ÉO NORMAL ===")
lista = numeros_lista(5)
print(f"Lista completa: {lista}")
print(f"Tipo: {type(lista)}")

print("\\n=== GENERATOR ===")
gen = numeros_generator(5)
print(f"Generator object: {gen}")
print(f"Tipo: {type(gen)}")

print("\\nUsando generator:")
for numero in gen:
    print(f"Recebi: {numero}")'''

        self.exemplo(codigo_exemplo)

        # Executa o c√≥digo para mostrar resultado
        print("\nüöÄ Vamos ver funcionando:")
        self.executar_codigo(codigo_exemplo)

        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nüåç ONDE √â USADO NO MUNDO REAL:", "accent")
        aplicacoes = [
            "Netflix - Streaming de conte√∫do (carrega conforme assiste)",
            "Google - Processamento de big data (resultados sob demanda)",
            "Instagram - Feed infinito (carrega mais posts quando scrolla)",
            "Spotify - Recomenda√ß√µes musicais (gera sugest√µes dinamicamente)",
            "Bancos - Processamento de transa√ß√µes (batch processing eficiente)"
        ]
        for app in aplicacoes:
            self.print_colored(f"‚Ä¢ {app}", "primary")

        self.pausar()

    def _secao_yield_funcionamento(self) -> None:
        """Se√ß√£o: Como yield funciona?"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("COMO YIELD FUNCIONA?", "‚öôÔ∏è", "success")

        self.print_concept(
            "yield",
            "A palavra-chave m√°gica que transforma uma fun√ß√£o em generator, pausando a execu√ß√£o e retornando valores"
        )

        self.print_colored("\nüîç VAMOS DISSECAR O YIELD:", "info")

        codigo_detalhado = '''# Demonstra√ß√£o passo a passo do yield
def contador_com_debug():
    """Generator que mostra cada passo da execu√ß√£o"""
    print("üöÄ Generator iniciado!")
    
    print("üìù Antes do primeiro yield")
    yield 1
    print("üìù Depois do primeiro yield, antes do segundo")
    
    yield 2
    print("üìù Depois do segundo yield, antes do terceiro")
    
    yield 3
    print("üìù Depois do terceiro yield - prestes a terminar")
    
    print("üèÅ Generator terminando!")

print("=== RASTREANDO EXECU√á√ÉO DO GENERATOR ===")

# Criando o generator
gen = contador_com_debug()
print(f"Generator criado: {gen}")

print("\\n1. Primeira chamada de next():")
primeiro = next(gen)
print(f"   Valor retornado: {primeiro}")

print("\\n2. Segunda chamada de next():")
segundo = next(gen)  
print(f"   Valor retornado: {segundo}")

print("\\n3. Terceira chamada de next():")
terceiro = next(gen)
print(f"   Valor retornado: {terceiro}")

print("\\n4. Tentando chamar next() novamente:")
try:
    quarto = next(gen)
except StopIteration:
    print("   StopIteration levantada - generator esgotado!")

# Yield com valor de retorno
def generator_com_calculo():
    """Generator que faz c√°lculos sob demanda"""
    print("üí≠ Calculando quadrados...")
    for i in range(1, 6):
        quadrado = i ** 2
        print(f"   Calculei {i}¬≤ = {quadrado}")
        yield quadrado

print("\\n=== GENERATOR COM C√ÅLCULOS ===")
quadrados = generator_com_calculo()

print("Consumindo valores um a um:")
for valor in quadrados:
    print(f"Recebi: {valor}")
    input("   Pressione ENTER para continuar...")'''

        self.exemplo(codigo_detalhado)
        print("\nüöÄ Executando demonstra√ß√£o interativa:")
        self.executar_codigo(codigo_detalhado)

        self.print_tip("yield 'congela' o estado da fun√ß√£o - vari√°veis locais ficam preservadas!")

        self.pausar()

    def _secao_iterators_customizados(self) -> None:
        """Se√ß√£o: Iterators Customizados"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("ITERATORS CUSTOMIZADOS", "üîÑ", "warning")

        self.print_concept(
            "Iterator Protocol",
            "Um padr√£o que define como criar objetos que podem ser percorridos com for loops"
        )

        self.print_colored("\nüèóÔ∏è PROTOCOLO DO ITERATOR:", "info")
        protocolo = [
            "__iter__(): retorna o pr√≥prio iterator",
            "__next__(): retorna pr√≥ximo item ou StopIteration"
        ]
        for item in protocolo:
            self.print_colored(f"‚Ä¢ {item}", "text")

        exemplo_iterators = '''# Criando iterators customizados do zero
class ContadorIterator:
    """Iterator que conta de start at√© end"""
    
    def __init__(self, start, end):
        self.current = start
        self.end = end
    
    def __iter__(self):
        return self
    
    def __next__(self):
        if self.current < self.end:
            self.current += 1
            return self.current - 1
        raise StopIteration

class FibonacciIterator:
    """Iterator que gera sequ√™ncia de Fibonacci"""
    
    def __init__(self, max_count):
        self.max_count = max_count
        self.count = 0
        self.a, self.b = 0, 1
    
    def __iter__(self):
        return self
    
    def __next__(self):
        if self.count < self.max_count:
            self.count += 1
            if self.count == 1:
                return self.a
            elif self.count == 2:
                return self.b
            else:
                self.a, self.b = self.b, self.a + self.b
                return self.b
        raise StopIteration

# Comparando com generators equivalentes
def contador_generator(start, end):
    """Generator equivalente ao ContadorIterator"""
    for i in range(start, end):
        yield i

def fibonacci_generator(max_count):
    """Generator equivalente ao FibonacciIterator"""
    a, b = 0, 1
    for _ in range(max_count):
        yield a
        a, b = b, a + b

print("=== ITERATOR CLASSES VS GENERATORS ===")

print("\\n1. Contador Iterator:")
contador_iter = ContadorIterator(1, 6)
print("  Iterator:", list(contador_iter))

contador_gen = contador_generator(1, 6)
print("  Generator:", list(contador_gen))

print("\\n2. Fibonacci Iterator:")
fib_iter = FibonacciIterator(8)
print("  Iterator:", list(fib_iter))

fib_gen = fibonacci_generator(8)
print("  Generator:", list(fib_gen))

# Medindo linhas de c√≥digo
import inspect

contador_iter_lines = len(inspect.getsource(ContadorIterator).split('\\n'))
contador_gen_lines = len(inspect.getsource(contador_generator).split('\\n'))

print(f"\\nüìä COMPARA√á√ÉO DE C√ìDIGO:")
print(f"Contador Iterator: {contador_iter_lines} linhas")
print(f"Contador Generator: {contador_gen_lines} linhas")
print(f"Generator √© {contador_iter_lines/contador_gen_lines:.1f}x mais conciso!")'''

        self.exemplo(exemplo_iterators)
        print("\nüöÄ Comparando iterators e generators:")
        self.executar_codigo(exemplo_iterators)

        self.pausar()

    def _secao_generator_expressions(self) -> None:
        """Se√ß√£o: Generator Expressions"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("GENERATOR EXPRESSIONS", "üí°", "info")

        self.print_concept(
            "Generator Expression",
            "Sintaxe concisa para criar generators usando par√™nteses ao inv√©s de colchetes"
        )

        self.print_colored("\nüÜö SINTAXE COMPARADA:", "warning")
        self.print_colored("Lista: [x**2 for x in range(5)]", "text")
        self.print_colored("Generator: (x**2 for x in range(5))", "text")

        exemplo_expressions = '''# Generator Expressions - sintaxe concisa
import sys

# Comparando List Comprehension vs Generator Expression
print("=== COMPARA√á√ÉO: LISTA VS GENERATOR EXPRESSION ===")

# Lista - todos os valores na mem√≥ria
lista_quadrados = [x**2 for x in range(1000)]
print(f"Lista com 1000 quadrados: {sys.getsizeof(lista_quadrados)} bytes")

# Generator - valores sob demanda
gen_quadrados = (x**2 for x in range(1000))
print(f"Generator equivalente: {sys.getsizeof(gen_quadrados)} bytes")

diferenca = sys.getsizeof(lista_quadrados) / sys.getsizeof(gen_quadrados)
print(f"Generator usa {diferenca:.0f}x menos mem√≥ria!")

# Exemplos pr√°ticos de generator expressions
print("\\n=== EXEMPLOS PR√ÅTICOS ===")

# 1. Processando n√∫meros
pares = (x for x in range(20) if x % 2 == 0)
print("N√∫meros pares:", list(pares))

# 2. Transformando strings
nomes = ["Jo√£o", "maria", "PEDRO", "ana"]
nomes_formatados = (nome.title() for nome in nomes)
print("Nomes formatados:", list(nomes_formatados))

# 3. Calculando valores
vendas = [100, 250, 300, 150, 400]
vendas_com_desconto = (venda * 0.9 for venda in vendas if venda > 200)
print("Vendas > 200 com 10% desconto:", list(vendas_com_desconto))

# 4. Aninhando generator expressions
matriz = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
elementos_pares = (num for linha in matriz for num in linha if num % 2 == 0)
print("Elementos pares da matriz:", list(elementos_pares))

# 5. Pipeline de transforma√ß√µes
texto = "Python √© uma linguagem incr√≠vel"
palavras_grandes = (palavra.upper() for palavra in texto.split() if len(palavra) > 4)
print("Palavras grandes em mai√∫scula:", list(palavras_grandes))

# Usando generator expression com sum, max, any, all
numeros = (x for x in range(1, 101))
soma = sum(numeros)
print(f"\\nSoma de 1 a 100: {soma}")

# Reutilizando generator (cuidado - eles se esgotam!)
numeros2 = (x for x in range(1, 11))
print(f"Primeiro uso - lista: {list(numeros2)}")
print(f"Segundo uso - lista: {list(numeros2)}")  # Vazio!

# Generator infinito
def contador_infinito():
    i = 0
    while True:
        yield i
        i += 1

print("\\n=== GENERATOR INFINITO ===")
infinito = contador_infinito()
primeiros_10 = [next(infinito) for _ in range(10)]
print(f"Primeiros 10 n√∫meros: {primeiros_10}")'''

        self.exemplo(exemplo_expressions)
        print("\nüöÄ Testando generator expressions:")
        self.executar_codigo(exemplo_expressions)

        self.pausar()

    def _secao_casos_uso_reais(self) -> None:
        """Se√ß√£o: Onde usar na vida real?"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("CASOS DE USO NO MUNDO REAL", "üåç", "accent")

        casos_uso = {
            "üìä Processamento de Big Data": [
                "Apache Spark: Processamento distribu√≠do de datasets",
                "Pandas: Leitura de arquivos CSV gigantes chunk por chunk",
                "ETL Pipelines: Transforma√ß√£o de dados em streaming"
            ],
            "üåê Desenvolvimento Web": [
                "Django: Pagina√ß√£o eficiente de resultados",
                "FastAPI: Streaming de responses HTTP",
                "Web scraping: Processamento de p√°ginas uma por vez"
            ],
            "üéÆ Jogos e Simula√ß√µes": [
                "Procedural generation: Gera√ß√£o infinita de terrenos",
                "AI pathfinding: Explora√ß√£o de caminhos sob demanda",
                "Event systems: Processamento de eventos em tempo real"
            ],
            "üíæ Sistemas de Arquivo": [
                "Log processing: An√°lise de logs linha por linha",
                "Backup systems: Compress√£o incremental",
                "File monitoring: Observa√ß√£o de mudan√ßas em tempo real"
            ],
            "üîÑ APIs e Microservi√ßos": [
                "Pagination: Resultados paginados de APIs",
                "Stream processing: Kafka, RabbitMQ consumers",
                "Rate limiting: Controle de throughput"
            ]
        }

        for categoria, exemplos in casos_uso.items():
            self.print_colored(f"\n{categoria}:", "warning")
            for exemplo in exemplos:
                self.print_colored(f"  ‚Ä¢ {exemplo}", "text")

        self.print_colored("\nüíº EMPRESAS QUE USAM INTENSIVAMENTE:", "info")
        empresas = [
            "Google: MapReduce e BigQuery para processamento distribu√≠do",
            "Netflix: Streaming de v√≠deo e recomenda√ß√µes em tempo real",
            "Instagram: Feed infinito com lazy loading",
            "Airbnb: Busca e filtros de propriedades com pagina√ß√£o",
            "Uber: Processamento de localiza√ß√µes e rotas din√¢micas"
        ]
        for empresa in empresas:
            self.print_colored(f"‚Ä¢ {empresa}", "accent")

        # Exemplo pr√°tico
        self.print_colored("\nüíª EXEMPLO PR√ÅTICO - PROCESSAMENTO DE LOGS:", "success")
        exemplo_pratico = '''# Simulando processamento de logs de um servidor web
import random
from datetime import datetime, timedelta

def gerar_log_entries(num_entries=100):
    """Generator que simula entradas de log de servidor"""
    ips = ["192.168.1.10", "10.0.0.15", "172.16.0.5", "203.0.113.1"]
    pages = ["/", "/login", "/dashboard", "/api/users", "/api/orders"]
    statuses = [200, 200, 200, 404, 500, 301]  # 200 mais comum
    
    base_time = datetime.now() - timedelta(hours=24)
    
    for i in range(num_entries):
        timestamp = base_time + timedelta(minutes=i)
        ip = random.choice(ips)
        page = random.choice(pages)
        status = random.choice(statuses)
        size = random.randint(100, 5000)
        
        # Formato t√≠pico de log de servidor
        yield f'{ip} - - [{timestamp.strftime("%d/%b/%Y:%H:%M:%S")}] "GET {page} HTTP/1.1" {status} {size}'

def processar_logs_memoria_eficiente(log_generator):
    """Processa logs sem carregar tudo na mem√≥ria"""
    stats = {
        'total_requests': 0,
        'errors_4xx': 0,
        'errors_5xx': 0,
        'unique_ips': set(),
        'popular_pages': {},
        'total_bytes': 0
    }
    
    for log_line in log_generator:
        stats['total_requests'] += 1
        
        # Parsing simples da linha de log
        parts = log_line.split()
        ip = parts[0]
        status = int(parts[-2])
        size = int(parts[-1])
        
        # Extrai p√°gina da requisi√ß√£o
        page = parts[6] if len(parts) > 6 else "unknown"
        
        # Atualiza estat√≠sticas
        stats['unique_ips'].add(ip)
        stats['total_bytes'] += size
        
        if 400 <= status < 500:
            stats['errors_4xx'] += 1
        elif status >= 500:
            stats['errors_5xx'] += 1
        
        if page in stats['popular_pages']:
            stats['popular_pages'][page] += 1
        else:
            stats['popular_pages'][page] = 1
    
    return stats

# Processando logs com generator
print("üîç Processando logs do servidor...")
logs = gerar_log_entries(50)
estatisticas = processar_logs_memoria_eficiente(logs)

print(f"\\nüìä ESTAT√çSTICAS:")
print(f"Total de requisi√ß√µes: {estatisticas['total_requests']}")
print(f"IPs √∫nicos: {len(estatisticas['unique_ips'])}")
print(f"Erros 4xx: {estatisticas['errors_4xx']}")
print(f"Erros 5xx: {estatisticas['errors_5xx']}")
print(f"Total de bytes: {estatisticas['total_bytes']:,}")

print(f"\\nüìà P√ÅGINAS MAIS ACESSADAS:")
pages_sorted = sorted(estatisticas['popular_pages'].items(), key=lambda x: x[1], reverse=True)
for page, count in pages_sorted[:3]:
    print(f"  {page}: {count} acessos")'''

        self.exemplo(exemplo_pratico)
        print("\nüöÄ Exemplo real de processamento:")
        self.executar_codigo(exemplo_pratico)

        self.pausar()

    def _secao_memoria_performance(self) -> None:
        """Se√ß√£o: Mem√≥ria e Performance"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("MEM√ìRIA E PERFORMANCE", "‚ö°", "success")

        self.print_concept(
            "Lazy Evaluation",
            "Generators s√≥ calculam valores quando necess√°rio, economizando mem√≥ria e melhorando performance"
        )

        exemplo_performance = '''# Demonstra√ß√£o de efici√™ncia de mem√≥ria e performance
import sys
import time
import tracemalloc

def medir_memoria_e_tempo(func, *args, **kwargs):
    """Utilit√°rio para medir uso de mem√≥ria e tempo"""
    tracemalloc.start()
    start_time = time.time()
    
    resultado = func(*args, **kwargs)
    
    end_time = time.time()
    current, peak = tracemalloc.get_traced_memory()
    tracemalloc.stop()
    
    return {
        'resultado': resultado,
        'tempo': end_time - start_time,
        'memoria_atual': current,
        'memoria_pico': peak
    }

# Fun√ß√£o que usa lista (carrega tudo na mem√≥ria)
def processar_com_lista(n):
    """Processa n√∫meros usando lista"""
    numeros = [x**2 for x in range(n)]  # Todos na mem√≥ria
    soma = sum(numeros)
    return soma

# Fun√ß√£o que usa generator (lazy evaluation)
def processar_com_generator(n):
    """Processa n√∫meros usando generator"""
    numeros = (x**2 for x in range(n))  # Sob demanda
    soma = sum(numeros)
    return soma

print("=== COMPARA√á√ÉO DE PERFORMANCE ===")
n = 100000  # 100 mil n√∫meros

print(f"\\nProcessando {n:,} n√∫meros...")

# Teste com lista
print("\\n1. Usando LISTA:")
stats_lista = medir_memoria_e_tempo(processar_com_lista, n)
print(f"   Tempo: {stats_lista['tempo']:.4f} segundos")
print(f"   Mem√≥ria pico: {stats_lista['memoria_pico'] / 1024 / 1024:.2f} MB")
print(f"   Resultado: {stats_lista['resultado']:,}")

# Teste com generator
print("\\n2. Usando GENERATOR:")
stats_gen = medir_memoria_e_tempo(processar_com_generator, n)
print(f"   Tempo: {stats_gen['tempo']:.4f} segundos")
print(f"   Mem√≥ria pico: {stats_gen['memoria_pico'] / 1024 / 1024:.2f} MB")
print(f"   Resultado: {stats_gen['resultado']:,}")

# Compara√ß√£o
reducao_memoria = (1 - stats_gen['memoria_pico'] / stats_lista['memoria_pico']) * 100
print(f"\\nüìä REDU√á√ÉO DE MEM√ìRIA: {reducao_memoria:.1f}%")

# Demonstrando lazy evaluation
print("\\n=== LAZY EVALUATION EM A√á√ÉO ===")

def generator_com_prints(n):
    """Generator que mostra quando cada valor √© calculado"""
    for i in range(n):
        print(f"   Calculando {i}...")
        yield i**2

print("\\nCriando generator (n√£o calcula nada ainda):")
gen = generator_com_prints(5)
print("Generator criado!")

print("\\nConsumindo valores um por vez:")
for i, valor in enumerate(gen):
    print(f"Recebi valor {valor}")
    if i >= 2:  # Para ap√≥s 3 valores
        break
print("Parou no meio - valores restantes n√£o foram calculados!")

# Generator infinito - imposs√≠vel com listas
def fibonacci_infinito():
    """Generator que produz Fibonacci infinitamente"""
    a, b = 0, 1
    while True:
        yield a
        a, b = b, a + b

print("\\n=== GENERATOR INFINITO ===")
fib = fibonacci_infinito()
primeiros_15 = []
for _ in range(15):
    primeiros_15.append(next(fib))

print(f"Primeiros 15 Fibonacci: {primeiros_15}")
print("Generator ainda tem infinitos n√∫meros dispon√≠veis!")

# Pipeline eficiente
def numeros_grandes(start, end):
    """Produz n√∫meros em range"""
    for i in range(start, end):
        yield i

def apenas_pares(numeros_gen):
    """Filtra apenas pares"""
    for num in numeros_gen:
        if num % 2 == 0:
            yield num

def elevar_ao_cubo(numeros_gen):
    """Eleva n√∫meros ao cubo"""
    for num in numeros_gen:
        yield num ** 3

print("\\n=== PIPELINE EFICIENTE ===")
print("Processando 1 milh√£o de n√∫meros atrav√©s de pipeline...")

pipeline = elevar_ao_cubo(apenas_pares(numeros_grandes(1, 1000000)))

# Pega apenas os primeiros 10 resultados
resultado = []
for i, valor in enumerate(pipeline):
    resultado.append(valor)
    if i >= 9:  # Apenas 10 valores
        break

print(f"Primeiros 10 resultados: {resultado}")
print("Pipeline processou apenas os valores necess√°rios!")'''

        self.exemplo(exemplo_performance)
        print("\nüöÄ Medindo performance:")
        self.executar_codigo(exemplo_performance)

        self.pausar()

    def _secao_curiosidades(self) -> None:
        """Se√ß√£o: Curiosidades sobre Generators"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("CURIOSIDADES SOBRE GENERATORS", "üí´", "info")

        curiosidades = [
            {
                "titulo": "üé≠ Origem dos Generators",
                "texto": "Generators foram inspirados nos 'iterators' do C++ e 'yield' do CLU (1975), mas Python os popularizou!"
            },
            {
                "titulo": "üß† PEP 255",
                "texto": "Generators foram oficialmente introduzidos no Python 2.2 atrav√©s da PEP 255 por Tim Peters e Neil Schemenauer!"
            },
            {
                "titulo": "‚ö° Performance Extrema",
                "texto": "Um generator pode ser at√© 90% mais eficiente em mem√≥ria que listas equivalentes em datasets grandes!"
            },
            {
                "titulo": "üîÑ yield from",
                "texto": "Python 3.3 introduziu 'yield from' para delegar gera√ß√£o a outros generators de forma elegante!"
            },
            {
                "titulo": "üé™ Generator Tricks",
                "texto": "Voc√™ pode enviar valores DE VOLTA para generators usando .send() e at√© lan√ßar exce√ß√µes com .throw()!"
            },
            {
                "titulo": "üåü Async Generators",
                "texto": "Python 3.6+ tem 'async generators' com 'async def' + 'yield' para programa√ß√£o ass√≠ncrona!"
            }
        ]

        for i, curiosidade in enumerate(curiosidades, 1):
            self.print_colored(f"\n{curiosidade['titulo']}", "accent")
            self.print_colored(curiosidade['texto'], "text")
            if i < len(curiosidades):
                input("\nüî∏ Pressione ENTER para a pr√≥xima curiosidade...")

        # === C√ìDIGO CURIOSO ===
        self.print_colored("\nüé™ C√ìDIGO CURIOSO - GENERATOR COM COMUNICA√á√ÉO BIDIRECIONAL:", "warning")
        
        codigo_curioso = '''# Generator avan√ßado com send() e throw()
def calculator_generator():
    """Generator que funciona como uma calculadora interativa"""
    print("üßÆ Calculadora Generator iniciada!")
    result = 0
    
    while True:
        try:
            # Recebe opera√ß√£o do usu√°rio
            operation = yield result
            
            if operation is None:
                continue
                
            if operation[0] == 'add':
                result += operation[1]
                print(f"‚ûï Adicionei {operation[1]}. Resultado: {result}")
                
            elif operation[0] == 'multiply':
                result *= operation[1]
                print(f"‚úñÔ∏è Multipliquei por {operation[1]}. Resultado: {result}")
                
            elif operation[0] == 'reset':
                result = 0
                print("üîÑ Reset realizado. Resultado: 0")
                
            elif operation[0] == 'sqrt':
                if result >= 0:
                    result = result ** 0.5
                    print(f"‚àö Raiz quadrada calculada. Resultado: {result:.2f}")
                else:
                    raise ValueError("N√£o √© poss√≠vel calcular raiz de n√∫mero negativo")
                    
        except Exception as e:
            print(f"‚ùå Erro na calculadora: {e}")
            result = 0  # Reset em caso de erro

# Demonstra√ß√£o da calculadora
print("=== CALCULADORA GENERATOR ===")
calc = calculator_generator()

# Inicia o generator
current = next(calc)
print(f"Valor inicial: {current}")

# Enviando opera√ß√µes
current = calc.send(('add', 10))
print(f"Ap√≥s adicionar 10: {current}")

current = calc.send(('multiply', 3))
print(f"Ap√≥s multiplicar por 3: {current}")

current = calc.send(('sqrt', None))
print(f"Ap√≥s raiz quadrada: {current}")

# Teste de erro com throw()
print("\\nTestando tratamento de erro:")
try:
    calc.throw(ValueError, "Erro simulado!")
except ValueError:
    print("Erro capturado e tratado pelo generator")

current = next(calc)
print(f"Valor ap√≥s erro: {current}")

# Generator com yield from
def sub_generator(n):
    """Sub-generator que produz n√∫meros"""
    for i in range(n):
        yield f"Sub: {i}"

def main_generator():
    """Generator principal que delega para sub-generators"""
    yield "In√≠cio"
    yield from sub_generator(3)  # Delega para sub-generator
    yield "Meio"
    yield from sub_generator(2)
    yield "Fim"

print("\\n=== YIELD FROM ===")
main_gen = main_generator()
for value in main_gen:
    print(f"  {value}")

# Generator coroutine (conceito avan√ßado)
def echo_coroutine():
    """Coroutine que ecoa mensagens"""
    print("üîä Echo coroutine iniciada")
    while True:
        message = yield
        if message is not None:
            print(f"Echo: {message.upper()}")

print("\\n=== COROUTINE ===")
echo = echo_coroutine()
next(echo)  # Priming the coroutine

echo.send("hello world")
echo.send("python √© incr√≠vel")
echo.send("generators s√£o poderosos")'''

        self.exemplo(codigo_curioso)
        print("\nüöÄ Recursos avan√ßados de generators:")
        self.executar_codigo(codigo_curioso)

        self.print_success("\nüéâ Agora voc√™ conhece os segredos dos Generators!")
        self.pausar()

    def _secao_pratica_interativa(self) -> None:
        """Se√ß√£o de pr√°tica interativa do m√≥dulo"""

        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_section("HORA DE PRATICAR!", "üéØ", "success")
        self.print_colored("Vamos testar o que voc√™ aprendeu com exerc√≠cios pr√°ticos!", "text")

        # === INSTRU√á√ïES PARA INICIANTES ===
        self.print_tip("Para iniciantes: Cada exerc√≠cio √© opcional, mas recomendamos fazer todos!")
        self.print_colored("\nüéì SOBRE OS EXERC√çCIOS:", "info")
        self.print_colored("‚Ä¢ N√£o se preocupe se errar - faz parte do aprendizado!", "text")
        self.print_colored("‚Ä¢ Voc√™ pode tentar quantas vezes quiser", "text")
        self.print_colored("‚Ä¢ Digite 'help' se precisar de ajuda", "text")
        self.print_colored("‚Ä¢ Use Ctrl+C para voltar ao menu principal se necess√°rio", "text")

        # === DEFINI√á√ÉO DOS EXERC√çCIOS ===
        exercicios = [
            {
                'title': 'Quiz: Conhecimentos sobre Generators e Iterators',
                'type': 'quiz',
                'questions': [
                    {
                        'question': 'Qual palavra-chave transforma uma fun√ß√£o em generator?',
                        'answer': ['yield'],
                        'hint': '√â a palavra que "pausa" a fun√ß√£o e retorna um valor'
                    },
                    {
                        'question': 'Quais m√©todos uma classe deve implementar para ser um iterator?',
                        'answer': ['__iter__ e __next__', '__iter__ __next__', 'iter e next'],
                        'hint': 'S√£o dois m√©todos especiais que come√ßam e terminam com __'
                    },
                    {
                        'question': 'Qual a principal vantagem dos generators sobre listas?',
                        'answer': ['economia de mem√≥ria', 'memoria', 'lazy evaluation'],
                        'hint': 'Pense em como generators processam dados sob demanda'
                    },
                    {
                        'question': 'Como voc√™ cria uma generator expression?',
                        'answer': ['par√™nteses', '()', 'com par√™nteses'],
                        'hint': '√â como list comprehension, mas com outro tipo de bracket'
                    },
                    {
                        'question': 'O que acontece quando um generator se esgota?',
                        'answer': ['stopiteration', 'levanta stopiteration', 'stopiteration exception'],
                        'hint': 'Uma exce√ß√£o espec√≠fica √© levantada automaticamente'
                    }
                ]
            },
            {
                'title': 'Desafio: Complete o C√≥digo',
                'type': 'code_completion',
                'exercises': [
                    {
                        'instruction': 'B√ÅSICO: Complete este generator que produz n√∫meros pares',
                        'starter': '''def numeros_pares(max_num):
    for i in range(2, max_num + 1, 2):
        # Complete aqui
''',
                        'solution': 'yield i',
                        'type': 'simple'
                    },
                    {
                        'instruction': 'INTERMEDI√ÅRIO: Complete a generator expression para quadrados √≠mpares',
                        'starter': '''numeros = range(1, 11)
quadrados_impares = # Complete aqui
print(list(quadrados_impares))''',
                        'solution': '(x**2 for x in numeros if x % 2 == 1)',
                        'type': 'intermediate'
                    },
                    {
                        'instruction': 'AVAN√áADO: Complete o m√©todo __next__ do iterator',
                        'starter': '''class ContadorRegressivo:
    def __init__(self, start):
        self.start = start
    
    def __iter__(self):
        return self
    
    def __next__(self):
        if self.start > 0:
            # Complete aqui
            self.start -= 1
            return self.start + 1
        raise StopIteration''',
                        'solution': 'result = self.start',
                        'type': 'advanced'
                    }
                ]
            },
            {
                'title': 'Exerc√≠cio Criativo: Monitor de Sistema em Tempo Real',
                'type': 'creative',
                'instruction': 'Crie um generator que simula monitoramento de sistema (CPU, mem√≥ria, disco) gerando valores aleat√≥rios a cada segundo, com alertas quando valores ficam cr√≠ticos'
            }
        ]

        # === MENU PRINCIPAL DE EXERC√çCIOS ===
        while True:
            print("\nEscolha uma atividade:")
            print("1. üìù Quiz de Conhecimentos")
            print("2. üíª Complete o C√≥digo")
            print("3. üé® Exerc√≠cio Criativo")
            print("0. Continuar para o Mini Projeto")

            try:
                escolha = input("\nüëâ Sua escolha: ").strip().lower()

                if escolha in ["0", "continuar", "sair", "proximo"]:
                    break
                elif escolha in ["1", "quiz", "conhecimentos"]:
                    try:
                        self._run_quiz(exercicios[0])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Quiz interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no quiz. Continuando...")
                elif escolha in ["2", "codigo", "completar"]:
                    try:
                        self._run_code_completion(exercicios[1])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio de c√≥digo interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio de c√≥digo. Continuando...")
                elif escolha in ["3", "criativo"]:
                    try:
                        self._run_creative_exercise(exercicios[2])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio criativo interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio criativo. Continuando...")
                elif escolha in ["help", "ajuda", "h", "?"]:
                    self._show_help()
                else:
                    self.print_warning("‚ùå Op√ß√£o inv√°lida! Digite 1, 2, 3, 0 ou 'help' para ajuda.")

            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Opera√ß√£o cancelada pelo usu√°rio. Voltando ao menu principal...")
                return  # CR√çTICO: Return em vez de break para sair completamente
            except Exception as e:
                self.print_warning("‚ùå Erro inesperado no menu. Tente novamente.")

    def _run_quiz(self, quiz_data: Dict[str, Any]) -> None:
        """Executa quiz de conhecimentos"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("QUIZ: GENERATORS E ITERATORS", "üìù", "info")
        
        pontos = 0
        total_questoes = len(quiz_data['questions'])
        
        for i, question in enumerate(quiz_data['questions'], 1):
            self.print_colored(f"\nüéØ PERGUNTA {i}/{total_questoes}:", "warning")
            self.print_colored(question['question'], "text")
            
            resposta = input("\nüëâ Sua resposta: ").strip().lower()
            
            correto = any(resposta == ans.lower() for ans in question['answer'])
            
            if correto:
                pontos += 1
                self.print_success("‚úÖ Correto! Muito bem!")
            else:
                self.print_warning(f"‚ùå Incorreto. {question['hint']}")
                self.print_colored(f"üí° Resposta esperada: {question['answer'][0]}", "info")
            
            if i < total_questoes:
                input("\nüî∏ Pressione ENTER para a pr√≥xima pergunta...")
        
        # Resultado final
        percentual = (pontos / total_questoes) * 100
        self.print_colored(f"\nüìä RESULTADO: {pontos}/{total_questoes} ({percentual:.1f}%)", "accent")
        
        if percentual >= 80:
            self.print_success("üèÜ Excelente! Voc√™ domina generators!")
        elif percentual >= 60:
            self.print_colored("üëç Bom trabalho! Continue praticando!", "warning")
        else:
            self.print_colored("üìö Revise o conte√∫do e tente novamente!", "info")
        
        input("\nüî∏ Pressione ENTER para voltar ao menu...")

    def _run_code_completion(self, code_data: Dict[str, Any]) -> None:
        """Executa exerc√≠cios de completar c√≥digo"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("COMPLETE O C√ìDIGO", "üíª", "success")
        
        for i, exercise in enumerate(code_data['exercises'], 1):
            self.print_colored(f"\nüéØ EXERC√çCIO {i}: {exercise['instruction']}", "warning")
            self.print_code_section("C√ìDIGO PARA COMPLETAR", exercise['starter'])
            
            resposta = input("\nüëâ Complete a linha: ").strip()
            
            if resposta.lower() == exercise['solution'].lower():
                self.print_success("‚úÖ Perfeito! C√≥digo completado corretamente!")
            else:
                self.print_warning(f"‚ùå N√£o est√° certo. A resposta era: {exercise['solution']}")
            
            if i < len(code_data['exercises']):
                input("\nüî∏ Pressione ENTER para o pr√≥ximo exerc√≠cio...")
        
        input("\nüî∏ Pressione ENTER para voltar ao menu...")

    def _run_creative_exercise(self, creative_data: Dict[str, Any]) -> None:
        """Executa exerc√≠cio criativo"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("EXERC√çCIO CRIATIVO", "üé®", "accent")
        self.print_colored(creative_data['instruction'], "text")
        
        self.print_colored("\nüí° EXEMPLO DE SOLU√á√ÉO:", "info")
        exemplo_criativo = '''# Monitor de Sistema em Tempo Real
import random
import time

def system_monitor():
    """Generator que monitora sistema em tempo real"""
    while True:
        # Simula m√©tricas do sistema
        cpu = random.uniform(0, 100)
        memory = random.uniform(20, 95)
        disk = random.uniform(10, 90)
        
        # Cria relat√≥rio
        timestamp = time.strftime("%H:%M:%S")
        status = "üü¢ NORMAL"
        
        # Verifica alertas
        if cpu > 80 or memory > 90 or disk > 85:
            status = "üî¥ CR√çTICO"
        elif cpu > 60 or memory > 70 or disk > 70:
            status = "üü° ALERTA"
        
        yield {
            'timestamp': timestamp,
            'cpu': round(cpu, 1),
            'memory': round(memory, 1),
            'disk': round(disk, 1),
            'status': status
        }
        
        time.sleep(1)  # Atualiza a cada segundo

# Demonstra√ß√£o do monitor
print("=== MONITOR DE SISTEMA ===")
monitor = system_monitor()

print("Monitorando por 5 segundos...")
for i, metrics in enumerate(monitor):
    print(f"{metrics['timestamp']} | CPU: {metrics['cpu']}% | "
          f"MEM: {metrics['memory']}% | DISK: {metrics['disk']}% | {metrics['status']}")
    
    if i >= 4:  # Para ap√≥s 5 leituras
        break

print("\\nMonitoramento finalizado!")'''
        
        self.exemplo(exemplo_criativo)
        self.executar_codigo(exemplo_criativo)
        
        self.print_colored("\nüé® AGORA √â SUA VEZ!", "warning")
        self.print_colored("Crie sua pr√≥pria vers√£o ou modifique este exemplo!", "text")
        self.print_tip("Voc√™ pode adicionar outras m√©tricas, salvar logs, enviar notifica√ß√µes, etc.")
        
        input("\nüî∏ Pressione ENTER quando terminar de pensar na sua solu√ß√£o...")

    def _show_help(self) -> None:
        """Mostra ajuda sobre as op√ß√µes dispon√≠veis"""
        self.print_section("AJUDA - SE√á√ÉO DE PR√ÅTICA", "‚ùì", "info")
        help_text = [
            "üìù OP√á√ÉO 1 - Quiz: Teste conhecimentos sobre generators e iterators",
            "üíª OP√á√ÉO 2 - Complete o C√≥digo: 3 exerc√≠cios progressivos de programa√ß√£o",
            "üé® OP√á√ÉO 3 - Exerc√≠cio Criativo: Monitor de sistema em tempo real",
            "üî¢ OP√á√ÉO 0 - Continue para o Mini Projeto final",
            "",
            "üí° DICAS:",
            "‚Ä¢ Voc√™ pode digitar o n√∫mero ou palavras como 'quiz', 'codigo'",
            "‚Ä¢ Digite 'help' a qualquer momento para ver esta ajuda",
            "‚Ä¢ Use Ctrl+C se quiser voltar ao menu principal",
            "‚Ä¢ Recomendamos fazer todas as atividades para aprender melhor!"
        ]

        for line in help_text:
            if line:
                self.print_colored(f"  {line}", "text")
            else:
                print()

        input("\nüî∏ Pressione ENTER para voltar ao menu...")

    def _mini_projeto_pipeline_dados(self) -> None:
        """Mini Projeto - M√≥dulo 21: Pipeline de Processamento de Dados com Generators"""

        # === CABE√áALHO IMPACTANTE ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üéØ MINI PROJETO: PIPELINE DE PROCESSAMENTO DE DADOS")
        else:
            print("\n" + "="*60)
            print("üéØ MINI PROJETO: PIPELINE DE PROCESSAMENTO DE DADOS")
            print("="*60)

        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_success("üéâ Vamos criar um pipeline de processamento de dados eficiente usando generators!")

        self.print_concept(
            "Pipeline de Processamento",
            "Um sistema que processa grandes volumes de dados de forma eficiente, usando generators para economizar mem√≥ria"
        )

        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nEste tipo de sistema √© usado em:", "text")
        usos_praticos = [
            "üè¶ Bancos - Processamento de milh√µes de transa√ß√µes di√°rias",
            "üìä Google Analytics - An√°lise de big data em tempo real",
            "üõí Amazon - Processamento de logs de vendas e comportamento",
            "üì± Instagram - An√°lise de engajamento e feeds personalizados",
            "üéµ Spotify - Processamento de dados de escuta para recomenda√ß√µes"
        ]
        for uso in usos_praticos:
            self.print_colored(f"‚Ä¢ {uso}", "accent")

        input("\nüî∏ Pressione ENTER para come√ßar o projeto...")

        # === DESENVOLVIMENTO PASSO A PASSO ===

        # PASSO 1: Gera√ß√£o de dados
        self.print_section("PASSO 1: Gerador de Dados Sint√©ticos", "üìù", "info")
        self.print_tip("Vamos criar um generator que produz dados de vendas sint√©ticos")

        codigo_passo1 = '''# PASSO 1: Gerador de dados sint√©ticos
import random
import time
from datetime import datetime, timedelta
from typing import Generator, Dict, Any

class DataGenerator:
    """Gerador de dados sint√©ticos para demonstra√ß√£o"""
    
    @staticmethod
    def generate_sales_data(num_records: int = 100) -> Generator[Dict[str, Any], None, None]:
        """Gera dados de vendas sint√©ticos usando generator"""
        print(f"üìä Iniciando gera√ß√£o de {num_records} registros...")
        
        produtos = ["Notebook", "Mouse", "Teclado", "Monitor", "Webcam", "Fone", "SSD", "RAM"]
        vendedores = ["Ana Silva", "Jo√£o Santos", "Maria Lima", "Carlos Oliveira", "Paula Costa"]
        regioes = ["Norte", "Sul", "Leste", "Oeste", "Centro"]
        
        base_date = datetime.now() - timedelta(days=30)
        
        for i in range(num_records):
            # Progresso visual
            if i % 20 == 0 and i > 0:
                print(f"   Gerados {i}/{num_records} registros...")
            
            # Simula delay de processamento real
            if i % 50 == 0:
                time.sleep(0.1)
            
            # Gera registro individual
            venda = {
                "id": f"V{i+1:06d}",
                "produto": random.choice(produtos),
                "vendedor": random.choice(vendedores),
                "regiao": random.choice(regioes),
                "quantidade": random.randint(1, 10),
                "preco_unitario": round(random.uniform(50.0, 2000.0), 2),
                "data": (base_date + timedelta(days=random.randint(0, 30))).strftime("%Y-%m-%d"),
                "desconto": round(random.uniform(0, 0.3), 2),  # 0 a 30%
                "cliente_tipo": random.choice(["Bronze", "Prata", "Ouro", "Platina"])
            }
            
            yield venda

# Demonstra√ß√£o do gerador
print("=== GERADOR DE DADOS SINT√âTICOS ===")

# Criando o generator (n√£o executa ainda!)
vendas_gen = DataGenerator.generate_sales_data(50)
print(f"Generator criado: {vendas_gen}")
print(f"Tipo: {type(vendas_gen)}")

# Consumindo alguns registros para demonstrar
print("\\nPrimeiros 5 registros gerados:")
for i, venda in enumerate(vendas_gen):
    print(f"  {i+1}. {venda['id']}: {venda['produto']} - R$ {venda['preco_unitario']}")
    if i >= 4:  # Para ap√≥s 5 registros
        break

print("\\n‚úÖ PASSO 1 CONCLU√çDO: Gerador de dados funcionando!")'''

        self.exemplo(codigo_passo1)
        self.executar_codigo(codigo_passo1)

        # PASSO 2: Transformadores de dados
        self.print_section("PASSO 2: Transformadores de Dados", "‚öôÔ∏è", "success")
        self.print_colored("Agora vamos criar generators que transformam os dados:", "text")

        codigo_passo2 = '''# PASSO 2: Transformadores de dados usando generators
from typing import Iterator, Callable

class DataTransformer:
    """Transformadores de dados usando generators para efici√™ncia"""
    
    @staticmethod
    def filter_data(data_stream: Iterator[Dict], condition: Callable[[Dict], bool]) -> Generator[Dict, None, None]:
        """Filtra dados baseado em uma condi√ß√£o"""
        for record in data_stream:
            if condition(record):
                yield record
    
    @staticmethod
    def transform_record(data_stream: Iterator[Dict], transformer: Callable[[Dict], Dict]) -> Generator[Dict, None, None]:
        """Transforma cada registro individualmente"""
        for record in data_stream:
            yield transformer(record)
    
    @staticmethod
    def add_calculated_fields(data_stream: Iterator[Dict]) -> Generator[Dict, None, None]:
        """Adiciona campos calculados aos registros"""
        for record in data_stream:
            # Calcula total bruto
            quantidade = int(record.get('quantidade', 0))
            preco = float(record.get('preco_unitario', 0))
            desconto = float(record.get('desconto', 0))
            
            total_bruto = quantidade * preco
            valor_desconto = total_bruto * desconto
            total_liquido = total_bruto - valor_desconto
            
            # Adiciona campos calculados
            record['total_bruto'] = round(total_bruto, 2)
            record['valor_desconto'] = round(valor_desconto, 2)
            record['total_liquido'] = round(total_liquido, 2)
            
            # Classifica venda por valor
            if total_liquido >= 1000:
                record['categoria_venda'] = "Premium"
            elif total_liquido >= 500:
                record['categoria_venda'] = "M√©dio"
            else:
                record['categoria_venda'] = "B√°sico"
            
            # Calcula comiss√£o do vendedor (5% do total l√≠quido)
            record['comissao_vendedor'] = round(total_liquido * 0.05, 2)
            
            yield record
    
    @staticmethod
    def enrich_with_metadata(data_stream: Iterator[Dict]) -> Generator[Dict, None, None]:
        """Enriquece registros com metadados"""
        for i, record in enumerate(data_stream):
            # Adiciona metadados de processamento
            record['_processed_at'] = datetime.now().isoformat()
            record['_record_number'] = i + 1
            record['_pipeline_step'] = "enriched"
            
            yield record

# Testando transformadores
print("=== TRANSFORMADORES DE DADOS ===")

# Gera dados novamente
print("\\n1. Gerando dados base:")
dados_base = DataGenerator.generate_sales_data(30)

# Aplica filtro (vendas acima de R$ 500)
print("\\n2. Filtrando vendas com pre√ßo > R$ 500:")
dados_filtrados = DataTransformer.filter_data(
    dados_base,
    lambda record: float(record['preco_unitario']) > 500
)

# Adiciona campos calculados
print("\\n3. Adicionando campos calculados:")
dados_calculados = DataTransformer.add_calculated_fields(dados_filtrados)

# Enriquece com metadados
print("\\n4. Enriquecendo com metadados:")
dados_enriquecidos = DataTransformer.enrich_with_metadata(dados_calculados)

# Processa pipeline e mostra resultados
print("\\n5. Processando pipeline completo:")
resultados = []
for record in dados_enriquecidos:
    resultados.append(record)

print(f"\\nTotal de registros processados: {len(resultados)}")

if resultados:
    print("\\nAmostra do primeiro registro processado:")
    primeiro = resultados[0]
    for key, value in primeiro.items():
        print(f"  {key}: {value}")

print("\\n‚úÖ PASSO 2 CONCLU√çDO: Pipeline de transforma√ß√£o funcionando!")'''

        self.exemplo(codigo_passo2)
        self.executar_codigo(codigo_passo2)

        # PASSO 3: Agrega√ß√£o e an√°lise
        self.print_section("PASSO 3: Agrega√ß√£o e An√°lise Final", "üé¨", "warning")
        self.print_colored("Finalmente, vamos agregar e analisar os dados processados:", "text")

        codigo_passo3 = '''# PASSO 3: Agrega√ß√£o e an√°lise final
from collections import defaultdict
import statistics

class DataAggregator:
    """Agregadores de dados usando generators"""
    
    @staticmethod
    def aggregate_by_field(data_stream: Iterator[Dict], group_field: str) -> Generator[Dict, None, None]:
        """Agrega dados por um campo espec√≠fico"""
        groups = defaultdict(list)
        
        # Agrupa todos os registros
        for record in data_stream:
            group_key = record.get(group_field, "N√£o informado")
            groups[group_key].append(record)
        
        # Calcula estat√≠sticas para cada grupo
        for group_name, records in groups.items():
            if not records:
                continue
            
            # Calcula m√©tricas do grupo
            total_vendas = len(records)
            total_receita = sum(float(r.get('total_liquido', 0)) for r in records)
            media_receita = total_receita / total_vendas if total_vendas > 0 else 0
            
            # Estat√≠sticas de quantidade
            quantidades = [int(r.get('quantidade', 0)) for r in records]
            total_unidades = sum(quantidades)
            media_unidades = statistics.mean(quantidades) if quantidades else 0
            
            # Calcula comiss√µes
            total_comissoes = sum(float(r.get('comissao_vendedor', 0)) for r in records)
            
            yield {
                'grupo': group_name,
                'grupo_campo': group_field,
                'total_vendas': total_vendas,
                'total_receita': round(total_receita, 2),
                'media_receita_por_venda': round(media_receita, 2),
                'total_unidades_vendidas': total_unidades,
                'media_unidades_por_venda': round(media_unidades, 2),
                'total_comissoes': round(total_comissoes, 2),
                'participacao_percentual': 0  # Ser√° calculado depois
            }

class ReportGenerator:
    """Gerador de relat√≥rios finais"""
    
    @staticmethod
    def generate_summary_report(aggregated_data: Iterator[Dict]) -> Dict[str, Any]:
        """Gera relat√≥rio resumo dos dados agregados"""
        print("üìä Gerando relat√≥rio final...")
        
        groups = list(aggregated_data)
        
        if not groups:
            return {"error": "Nenhum dado para an√°lise"}
        
        # Calcula totais globais
        total_global_vendas = sum(g['total_vendas'] for g in groups)
        total_global_receita = sum(g['total_receita'] for g in groups)
        
        # Atualiza participa√ß√£o percentual
        for group in groups:
            if total_global_receita > 0:
                group['participacao_percentual'] = round(
                    (group['total_receita'] / total_global_receita) * 100, 2
                )
        
        # Ordena por receita (maior primeiro)
        groups_sorted = sorted(groups, key=lambda x: x['total_receita'], reverse=True)
        
        # Identifica top performers
        top_group = groups_sorted[0] if groups_sorted else None
        bottom_group = groups_sorted[-1] if groups_sorted else None
        
        report = {
            'resumo_geral': {
                'total_grupos': len(groups),
                'total_vendas': total_global_vendas,
                'total_receita': round(total_global_receita, 2),
                'receita_media_por_grupo': round(total_global_receita / len(groups), 2)
            },
            'top_performer': top_group,
            'bottom_performer': bottom_group,
            'grupos_detalhados': groups_sorted,
            'insights': ReportGenerator._generate_insights(groups_sorted)
        }
        
        return report
    
    @staticmethod
    def _generate_insights(groups: List[Dict]) -> List[str]:
        """Gera insights autom√°ticos dos dados"""
        insights = []
        
        if len(groups) >= 2:
            top = groups[0]
            bottom = groups[-1]
            
            diferenca = top['total_receita'] - bottom['total_receita']
            insights.append(f"üìà Maior diferen√ßa de receita: R$ {diferenca:.2f} entre {top['grupo']} e {bottom['grupo']}")
        
        # Identifica grupos com alta performance por venda
        high_performers = [g for g in groups if g['media_receita_por_venda'] > 1000]
        if high_performers:
            insights.append(f"‚≠ê {len(high_performers)} grupos t√™m receita m√©dia > R$ 1.000 por venda")
        
        # Analisa concentra√ß√£o de receita
        top3_receita = sum(g['total_receita'] for g in groups[:3])
        total_receita = sum(g['total_receita'] for g in groups)
        concentracao = (top3_receita / total_receita) * 100 if total_receita > 0 else 0
        
        if concentracao > 60:
            insights.append(f"üéØ Top 3 grupos concentram {concentracao:.1f}% da receita total")
        
        return insights

# DEMONSTRA√á√ÉO COMPLETA DO PIPELINE
print("=== PIPELINE COMPLETO DE PROCESSAMENTO ===")
print()

# Pipeline completo: Gera√ß√£o ‚Üí Filtragem ‚Üí Transforma√ß√£o ‚Üí Agrega√ß√£o ‚Üí Relat√≥rio
print("üîÑ Executando pipeline completo...")

# 1. Gera√ß√£o de dados
print("\\n   üìä Passo 1: Gerando dados...")
dados = DataGenerator.generate_sales_data(100)

# 2. Filtragem (vendas acima de R$ 200)
print("   üîç Passo 2: Filtrando dados...")
dados_filtrados = DataTransformer.filter_data(
    dados,
    lambda r: float(r['preco_unitario']) > 200
)

# 3. C√°lculos
print("   üßÆ Passo 3: Adicionando c√°lculos...")
dados_calculados = DataTransformer.add_calculated_fields(dados_filtrados)

# 4. Agrega√ß√£o por vendedor
print("   üìã Passo 4: Agregando por vendedor...")
dados_agregados = DataAggregator.aggregate_by_field(dados_calculados, 'vendedor')

# 5. Relat√≥rio final
print("   üìà Passo 5: Gerando relat√≥rio...")
relatorio = ReportGenerator.generate_summary_report(dados_agregados)

# Exibe resultados
print("\\n" + "="*60)
print("üìä RELAT√ìRIO FINAL DO PIPELINE")
print("="*60)

resumo = relatorio['resumo_geral']
print(f"\\nüìà RESUMO GERAL:")
print(f"   Vendedores analisados: {resumo['total_grupos']}")
print(f"   Total de vendas: {resumo['total_vendas']}")
print(f"   Receita total: R$ {resumo['total_receita']:,.2f}")
print(f"   Receita m√©dia por vendedor: R$ {resumo['receita_media_por_grupo']:,.2f}")

if relatorio['top_performer']:
    top = relatorio['top_performer']
    print(f"\\nüèÜ TOP PERFORMER: {top['grupo']}")
    print(f"   Vendas: {top['total_vendas']}")
    print(f"   Receita: R$ {top['total_receita']:,.2f}")
    print(f"   Participa√ß√£o: {top['participacao_percentual']}%")

print(f"\\nüí° INSIGHTS:")
for insight in relatorio['insights']:
    print(f"   {insight}")

print(f"\\nüîç TOP 3 VENDEDORES:")
for i, vendedor in enumerate(relatorio['grupos_detalhados'][:3], 1):
    print(f"   {i}. {vendedor['grupo']}: R$ {vendedor['total_receita']:,.2f} ({vendedor['participacao_percentual']}%)")

print("\\n‚úÖ PIPELINE CONCLU√çDO COM SUCESSO!")
print("\\nüéØ CONCEITOS APLICADOS:")
conceitos = [
    "‚úì Generators para processamento eficiente de mem√≥ria",
    "‚úì Pipeline pattern com yield statements",
    "‚úì Lazy evaluation para grandes datasets",
    "‚úì Iterator protocol customizado",
    "‚úì Generator expressions para transforma√ß√µes",
    "‚úì Stream processing em tempo real",
    "‚úì Agrega√ß√£o de dados com generators"
]

for conceito in conceitos:
    print(f"  {conceito}")'''

        self.exemplo(codigo_passo3)
        self.executar_codigo(codigo_passo3)

        # === C√ìDIGO FINAL GERADO ===
        self.print_colored("\nAqui est√° a estrutura completa que voc√™ criou:", "text")

        codigo_final = '''# üêç PROJETO: PIPELINE DE PROCESSAMENTO DE DADOS
# M√≥dulo 21: Generators e Iterators

import random
import time
from datetime import datetime, timedelta
from typing import Iterator, Generator, Dict, Any, List, Callable
from collections import defaultdict
import statistics

class DataGenerator:
    @staticmethod
    def generate_sales_data(num_records: int) -> Generator[Dict[str, Any], None, None]:
        """Gera dados de vendas usando generator para efici√™ncia de mem√≥ria"""
        # Implementa√ß√£o com yield para produ√ß√£o sob demanda
        pass

class DataTransformer:
    @staticmethod
    def filter_data(data_stream: Iterator[Dict], condition: Callable) -> Generator[Dict, None, None]:
        """Filtra dados em stream usando generator"""
        # Pipeline de filtros eficiente
        pass
    
    @staticmethod
    def add_calculated_fields(data_stream: Iterator[Dict]) -> Generator[Dict, None, None]:
        """Adiciona campos calculados em tempo real"""
        # Transforma√ß√µes sob demanda
        pass

class DataAggregator:
    @staticmethod
    def aggregate_by_field(data_stream: Iterator[Dict], group_field: str) -> Generator[Dict, None, None]:
        """Agrega dados por campo usando generators"""
        # Agrega√ß√£o eficiente de mem√≥ria
        pass

# Pipeline completo com generators para m√°xima efici√™ncia'''

        self.exemplo(codigo_final)

        # === MENSAGEM DE CONQUISTA ===
        self.print_success("üéâ PARAB√âNS! Voc√™ criou um pipeline de processamento de dados profissional!")

        # === APLICA√á√ïES AVAN√áADAS ===
        self.print_section("PR√ìXIMOS PASSOS", "üöÄ", "info")
        proximos_passos = [
            "üîÑ Implementar processamento paralelo com multiprocessing",
            "üíæ Adicionar persist√™ncia em banco de dados",
            "üìä Criar dashboards em tempo real",
            "üåê Integrar com APIs externas para dados reais",
            "‚ö° Otimizar para processamento de terabytes",
            "üéØ Implementar machine learning no pipeline"
        ]
        for passo in proximos_passos:
            self.print_colored(f"‚Ä¢ {passo}", "primary")

        self.print_success("\nüèÜ CONQUISTA DESBLOQUEADA: Mestre dos Generators!")

        # === REGISTRO DE CONCLUS√ÉO ===
        self.complete_mini_project("Pipeline de Processamento de Dados")

        self.pausar()


# Para teste standalone
if __name__ == "__main__":
    module = Modulo21Geradores()
    print("Teste do m√≥dulo 21 - vers√£o refatorada")
    module._geradores()