#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
M√≥dulo 18: Programa√ß√£o Orientada a Objetos (OOP) - B√°sico
Aprenda os fundamentos de classes, objetos e programa√ß√£o orientada a objetos
"""

from ..shared.base_module import BaseModule


class Modulo18OopBasico(BaseModule):
    """M√≥dulo 18: Programa√ß√£o Orientada a Objetos - B√°sico"""
    
    def __init__(self):
        super().__init__("modulo_18", "OOP - Programa√ß√£o Orientada a Objetos")
        self.has_mini_project = True
        self.mini_project_points = 90
    
    def execute(self) -> None:
        """Executa o m√≥dulo sobre OOP b√°sico"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return

        try:
            self._oop_basico()
        except Exception as e:
            self.error_handler(lambda: None)
    
    def _oop_basico(self) -> None:
        """Conte√∫do principal do m√≥dulo OOP B√°sico"""
        # === CABE√áALHO VISUAL ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üèóÔ∏è M√ìDULO 18: PROGRAMA√á√ÉO ORIENTADA A OBJETOS")
        else:
            print("\n" + "="*50)
            print("üèóÔ∏è M√ìDULO 18: PROGRAMA√á√ÉO ORIENTADA A OBJETOS")
            print("="*50)

        # === MENSAGENS MOTIVACIONAIS ===
        self.print_success("üéâ Bem-vindo ao mundo da Programa√ß√£o Orientada a Objetos!")
        self.print_tip("Este m√≥dulo est√° dividido em se√ß√µes interativas. Voc√™ controla o ritmo!")

        # === FLUXO PRINCIPAL COM TRATAMENTO DE CTRL+C ===

        # 1. Sistema de navega√ß√£o por se√ß√µes
        try:
            self._navegacao_secoes_interativas()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Navega√ß√£o interrompida pelo usu√°rio. Voltando ao menu principal...")
            return

        # 2. Se√ß√£o de Pr√°tica Interativa
        try:
            self._secao_pratica_interativa()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è M√≥dulo interrompido pelo usu√°rio. Voltando ao menu principal...")
            return

        # 3. Mini Projeto Pr√°tico
        try:
            self._mini_projeto_sistema_loja()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Mini projeto interrompido. Voltando ao menu principal...")
            return

        # 4. Marcar m√≥dulo como completo
        self.complete_module()
    
    def _navegacao_secoes_interativas(self) -> None:
        """Sistema de navega√ß√£o por se√ß√µes do m√≥dulo"""

        # === DEFINI√á√ÉO DAS SE√á√ïES ===
        secoes = [
            {
                'id': 'secao_conceito_oop',
                'titulo': 'üéØ O que √© Programa√ß√£o Orientada a Objetos?',
                'descricao': 'Entenda o paradigma que revolucionou a programa√ß√£o',
                'funcao': self._secao_conceito_oop
            },
            {
                'id': 'secao_classes_objetos',
                'titulo': 'üèóÔ∏è Classes e Objetos',
                'descricao': 'Aprenda a criar moldes e inst√¢ncias',
                'funcao': self._secao_classes_objetos
            },
            {
                'id': 'secao_atributos_metodos',
                'titulo': '‚öôÔ∏è Atributos e M√©todos',
                'descricao': 'Caracter√≠sticas e comportamentos dos objetos',
                'funcao': self._secao_atributos_metodos
            },
            {
                'id': 'secao_construtor',
                'titulo': 'üîß O Construtor __init__',
                'descricao': 'Como inicializar objetos corretamente',
                'funcao': self._secao_construtor
            },
            {
                'id': 'secao_encapsulamento',
                'titulo': 'üîí Encapsulamento e Privacidade',
                'descricao': 'Protegendo dados e controlando acesso',
                'funcao': self._secao_encapsulamento
            },
            {
                'id': 'secao_casos_uso',
                'titulo': 'üåç OOP no Mundo Real',
                'descricao': 'Como empresas usam OOP em seus sistemas',
                'funcao': self._secao_casos_uso
            },
            {
                'id': 'secao_melhores_praticas',
                'titulo': '‚≠ê Melhores Pr√°ticas em OOP',
                'descricao': 'Dicas de desenvolvedores experientes',
                'funcao': self._secao_melhores_praticas
            }
        ]

        secoes_visitadas = set()

        # === LOOP PRINCIPAL DE NAVEGA√á√ÉO ===
        while True:
            # Limpa tela e mostra cabe√ßalho
            self.ui.clear_screen() if self.ui else print("\n" + "="*50)
            self.print_section("NAVEGA√á√ÉO DO M√ìDULO", "üìö", "accent")
            self.print_colored("Escolha uma se√ß√£o para estudar:", "text")

            # Lista todas as se√ß√µes com status
            print()
            for i, secao in enumerate(secoes, 1):
                status = "‚úÖ" if secao['id'] in secoes_visitadas else "üìñ"
                print(f"{status} {i}. {secao['titulo']}")
                self.print_colored(f"    {secao['descricao']}", "text")
                print()

            print("0. üéØ Continuar para os Exerc√≠cios Pr√°ticos")

            # Mostra progresso visual
            progresso = len(secoes_visitadas)
            total = len(secoes)
            self.print_colored(f"\nüìä Progresso: {progresso}/{total} se√ß√µes visitadas", "info")

            if progresso == total:
                self.print_success("üåü Voc√™ completou todas as se√ß√µes! Est√° pronto para praticar!")

            # Processa escolha do usu√°rio
            try:
                escolha = input(f"\nüëâ Escolha uma se√ß√£o (1-{len(secoes)}) ou 0 para continuar: ").strip()

                if escolha == "0":
                    # Verifica se visitou se√ß√µes suficientes
                    if progresso >= 3:  # Pelo menos 3 se√ß√µes visitadas
                        break
                    else:
                        self.print_warning("üìö Recomendamos visitar pelo menos 3 se√ß√µes antes de continuar!")
                        continuar = input("Quer continuar mesmo assim? (s/n): ").lower()
                        if continuar in ['s', 'sim', 'yes']:
                            break
                elif escolha.isdigit() and 1 <= int(escolha) <= len(secoes):
                    # Executa se√ß√£o escolhida
                    idx = int(escolha) - 1
                    secoes[idx]['funcao']()
                    secoes_visitadas.add(secoes[idx]['id'])
                else:
                    self.print_warning(f"‚ùå Op√ß√£o inv√°lida! Digite um n√∫mero de 1 a {len(secoes)} ou 0.")

            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Pulando para exerc√≠cios pr√°ticos...")
                break
            except Exception as e:
                self.print_warning(f"‚ùå Erro: {str(e)}. Tente novamente.")
    
    def _secao_conceito_oop(self) -> None:
        """Se√ß√£o: O que √© Programa√ß√£o Orientada a Objetos?"""
        if self.ui:
            self.ui.clear_screen()

        # === CABE√áALHO ATRATIVO ===
        self.print_section("O QUE √â PROGRAMA√á√ÉO ORIENTADA A OBJETOS?", "üéØ")

        # === DEFINI√á√ÉO DO CONCEITO ===
        self.print_concept(
            "Programa√ß√£o Orientada a Objetos (OOP)",
            "√â um paradigma de programa√ß√£o que organiza c√≥digo em 'objetos' - estruturas que combinam dados (atributos) e fun√ß√µes (m√©todos) que operam sobre esses dados."
        )

        # === DICA RELACIONADA ===
        self.print_tip("OOP √© usado em 90% dos sistemas empresariais modernos!")

        # === ANALOGIA DO COTIDIANO ===
        self.print_colored("\nüè† ANALOGIA DO DIA A DIA:", "warning")
        self.print_colored("Imagine uma f√°brica de carros. A 'CLASSE' √© o projeto/molde do carro.", "text")
        self.print_colored("Cada carro produzido √© um 'OBJETO' - uma inst√¢ncia √∫nica do projeto.", "text")
        self.print_colored("Todos os carros t√™m as mesmas caracter√≠sticas (cor, modelo) e a√ß√µes (acelerar, frear).", "text")
        input("\nüî∏ Pressione ENTER para continuar...")

        # === EXPLICA√á√ÉO T√âCNICA GRADUAL ===
        self.print_colored("\nüîß OS 4 PILARES DA OOP:", "info")
        pilares = [
            "1. üèóÔ∏è ENCAPSULAMENTO - Agrupa dados e m√©todos em uma √∫nica unidade",
            "2. üß¨ HERAN√áA - Classes filhas herdam caracter√≠sticas das classes pais",
            "3. üé≠ POLIMORFISMO - Objetos diferentes respondem a mesma mensagem de formas diferentes",
            "4. üéØ ABSTRA√á√ÉO - Esconde complexidade interna, mostra apenas o necess√°rio"
        ]

        for i, pilar in enumerate(pilares, 1):
            self.print_colored(pilar, "text")
            if i < len(pilares):
                input("   ‚è≥ Pressione ENTER para o pr√≥ximo pilar...")

        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nüåç ONDE √â USADO NO MUNDO REAL:", "accent")
        aplicacoes = [
            "üè¶ Sistemas banc√°rios - Classes Conta, Cliente, Transa√ß√£o",
            "üõí E-commerce - Classes Produto, Carrinho, Pedido, Usuario",
            "üéÆ Jogos - Classes Personagem, Arma, Cen√°rio, Inimigo",
            "üè• Hospitais - Classes Paciente, M√©dico, Consulta, Exame",
            "üöó Uber/99 - Classes Motorista, Passageiro, Viagem, Veiculo"
        ]
        for app in aplicacoes:
            self.print_colored(f"‚Ä¢ {app}", "primary")

        self.pausar()
    
    def _secao_classes_objetos(self) -> None:
        """Se√ß√£o: Classes e Objetos"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("CLASSES E OBJETOS", "üèóÔ∏è")

        # === DEFINI√á√ÉO DUPLA ===
        self.print_concept(
            "Classe",
            "√â um molde, modelo ou planta baixa que define como os objetos ser√£o criados. Define atributos e m√©todos que os objetos ter√£o."
        )

        self.print_concept(
            "Objeto",
            "√â uma inst√¢ncia de uma classe - um 'produto' criado a partir do molde. Cada objeto tem seus pr√≥prios valores para os atributos."
        )

        # === ANALOGIA VISUAL ===
        self.print_colored("\nüè≠ ANALOGIA DA F√ÅBRICA:", "warning")
        self.print_colored("‚Ä¢ CLASSE = Molde de biscoito (formato estrela)", "text")
        self.print_colored("‚Ä¢ OBJETO = Cada biscoito individual feito com o molde", "text")
        self.print_colored("‚Ä¢ Todos t√™m formato de estrela, mas podem ter sabores diferentes!", "text")
        input("\nüî∏ Pressione ENTER para ver c√≥digo...")

        # === EXEMPLO B√ÅSICO ===
        self.print_colored("\nüíª PRIMEIRO EXEMPLO - CLASSE PESSOA:", "success")
        codigo_pessoa = '''# Definindo uma classe
class Pessoa:
    """Classe que representa uma pessoa"""
    
    def __init__(self, nome, idade):
        """Construtor - como criar uma pessoa"""
        self.nome = nome      # Atributo
        self.idade = idade    # Atributo
    
    def cumprimentar(self):
        """M√©todo - a√ß√£o que a pessoa pode fazer"""
        return f"Ol√°! Eu sou {self.nome} e tenho {self.idade} anos."

# Criando objetos (inst√¢ncias da classe)
pessoa1 = Pessoa("Ana", 25)
pessoa2 = Pessoa("Carlos", 30)

# Usando os objetos
print("=== OBJETOS CRIADOS ===")
print(f"Pessoa 1: {pessoa1.nome}, {pessoa1.idade} anos")
print(f"Pessoa 2: {pessoa2.nome}, {pessoa2.idade} anos")

print("\\n=== OBJETOS EM A√á√ÉO ===")
print(pessoa1.cumprimentar())
print(pessoa2.cumprimentar())

# Modificando atributos
pessoa1.idade = 26
print(f"\\nAp√≥s anivers√°rio: {pessoa1.nome} agora tem {pessoa1.idade} anos")'''

        self.exemplo(codigo_pessoa)
        self.executar_codigo(codigo_pessoa)

        # === EXEMPLO MAIS PR√ÅTICO ===
        self.print_colored("\nüöó EXEMPLO PR√ÅTICO - CLASSE CARRO:", "info")
        codigo_carro = '''class Carro:
    """Classe que representa um carro"""
    
    def __init__(self, marca, modelo, ano):
        """Inicializa um carro"""
        self.marca = marca
        self.modelo = modelo
        self.ano = ano
        self.velocidade = 0      # Todos os carros come√ßam parados
        self.ligado = False      # Todos come√ßam desligados
    
    def ligar(self):
        """Liga o carro"""
        if not self.ligado:
            self.ligado = True
            print(f"üöó {self.marca} {self.modelo} ligado! Vruuum!")
        else:
            print("üöó Carro j√° est√° ligado!")
    
    def acelerar(self, incremento):
        """Acelera o carro"""
        if self.ligado:
            self.velocidade += incremento
            print(f"üèÉ Acelerando! Velocidade: {self.velocidade} km/h")
        else:
            print("üöó Ligue o carro primeiro!")
    
    def frear(self, decremento):
        """Freia o carro"""
        self.velocidade = max(0, self.velocidade - decremento)
        print(f"üõë Freando! Velocidade: {self.velocidade} km/h")
    
    def status(self):
        """Mostra status do carro"""
        estado = "ligado" if self.ligado else "desligado"
        print(f"üìä {self.marca} {self.modelo} ({self.ano}) - {estado} - {self.velocidade} km/h")

# Criando uma garagem com v√°rios carros
print("=== CRIANDO CARROS ===")
carro1 = Carro("Toyota", "Corolla", 2022)
carro2 = Carro("Honda", "Civic", 2023)
carro3 = Carro("Ford", "Mustang", 2024)

# Testando os carros
print("\\n=== TESTANDO CARRO 1 ===")
carro1.status()
carro1.acelerar(30)  # Tentativa sem ligar
carro1.ligar()
carro1.acelerar(30)
carro1.acelerar(20)
carro1.frear(15)
carro1.status()

print("\\n=== TESTANDO CARRO 2 ===")
carro2.ligar()
carro2.acelerar(60)
carro2.status()

print("\\n=== STATUS DE TODOS OS CARROS ===")
carros = [carro1, carro2, carro3]
for i, carro in enumerate(carros, 1):
    print(f"Carro {i}:")
    carro.status()'''

        self.exemplo(codigo_carro)
        self.executar_codigo(codigo_carro)

        self.print_colored("\nüéØ PONTOS IMPORTANTES:", "accent")
        pontos = [
            "‚Ä¢ Uma classe pode gerar infinitos objetos",
            "‚Ä¢ Cada objeto tem seus pr√≥prios valores de atributos",
            "‚Ä¢ Todos os objetos da mesma classe t√™m os mesmos m√©todos",
            "‚Ä¢ Modificar um objeto n√£o afeta os outros"
        ]
        for ponto in pontos:
            self.print_colored(ponto, "primary")

        self.pausar()
    
    def _secao_atributos_metodos(self) -> None:
        """Se√ß√£o: Atributos e M√©todos"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("ATRIBUTOS E M√âTODOS", "‚öôÔ∏è")

        # === DEFINI√á√ïES ===
        self.print_concept(
            "Atributos",
            "S√£o as caracter√≠sticas ou propriedades dos objetos. Como vari√°veis que pertencem ao objeto (ex: nome, idade, cor)."
        )

        self.print_concept(
            "M√©todos",
            "S√£o as a√ß√µes ou comportamentos que os objetos podem executar. Como fun√ß√µes que pertencem ao objeto (ex: falar, andar, calcular)."
        )

        # === ANALOGIA ===
        self.print_colored("\nüë§ ANALOGIA PESSOA:", "warning")
        self.print_colored("‚Ä¢ ATRIBUTOS: altura, peso, cor dos olhos, nome (caracter√≠sticas)", "text")
        self.print_colored("‚Ä¢ M√âTODOS: falar, andar, dormir, comer (a√ß√µes)", "text")
        input("\nüî∏ Pressione ENTER para ver tipos de atributos...")

        # === TIPOS DE ATRIBUTOS ===
        self.print_colored("\nüìä TIPOS DE ATRIBUTOS:", "info")
        tipos_atributos = [
            "1. üè† ATRIBUTOS DE INST√ÇNCIA - √önicos para cada objeto",
            "2. üè¢ ATRIBUTOS DE CLASSE - Compartilhados por todos os objetos",
            "3. üîí ATRIBUTOS PRIVADOS - Come√ßam com _ (conven√ß√£o Python)"
        ]

        for tipo in tipos_atributos:
            self.print_colored(tipo, "text")

        input("\n‚è≥ Pressione ENTER para exemplo completo...")

        # === EXEMPLO COMPLETO ===
        self.print_colored("\nüíª EXEMPLO: CONTA BANC√ÅRIA COMPLETA:", "success")
        codigo_conta = '''class ContaBancaria:
    """Classe que representa uma conta banc√°ria"""
    
    # Atributo de CLASSE - compartilhado por todas as contas
    banco = "Banco Python"
    taxa_saque = 2.50
    total_contas = 0
    
    def __init__(self, titular, saldo_inicial=0):
        """Construtor - atributos de INST√ÇNCIA"""
        # Atributos p√∫blicos
        self.titular = titular
        self.numero = ContaBancaria.total_contas + 1
        
        # Atributos "privados" (conven√ß√£o com _)
        self._saldo = saldo_inicial
        self._historico = []
        
        # Incrementa contador de classe
        ContaBancaria.total_contas += 1
        
        # Registra cria√ß√£o da conta
        self._registrar_operacao(f"Conta criada com saldo inicial: R$ {saldo_inicial}")
        
        print(f"‚úÖ Conta {self.numero} criada para {self.titular}")
    
    # M√âTODOS DE INST√ÇNCIA - operam sobre objetos espec√≠ficos
    def depositar(self, valor):
        """Deposita dinheiro na conta"""
        if valor > 0:
            self._saldo += valor
            self._registrar_operacao(f"Dep√≥sito: +R$ {valor:.2f}")
            print(f"üí∞ Dep√≥sito realizado! Saldo: R$ {self._saldo:.2f}")
            return True
        else:
            print("‚ùå Valor deve ser positivo!")
            return False
    
    def sacar(self, valor):
        """Saca dinheiro da conta"""
        valor_total = valor + ContaBancaria.taxa_saque
        
        if valor <= 0:
            print("‚ùå Valor deve ser positivo!")
            return False
        
        if valor_total > self._saldo:
            print(f"‚ùå Saldo insuficiente! (Valor + taxa: R$ {valor_total:.2f})")
            return False
        
        self._saldo -= valor_total
        self._registrar_operacao(f"Saque: -R$ {valor:.2f} (taxa: R$ {ContaBancaria.taxa_saque})")
        print(f"üí∏ Saque realizado! Saldo: R$ {self._saldo:.2f}")
        return True
    
    def consultar_saldo(self):
        """Consulta saldo atual"""
        print(f"üí∞ Saldo de {self.titular}: R$ {self._saldo:.2f}")
        return self._saldo
    
    def extrato(self):
        """Mostra extrato da conta"""
        print(f"\\nüìÑ EXTRATO - CONTA {self.numero}")
        print(f"Titular: {self.titular}")
        print(f"Banco: {ContaBancaria.banco}")
        print("-" * 40)
        
        for operacao in self._historico[-5:]:  # √öltimas 5 opera√ß√µes
            print(f"  {operacao}")
        
        print("-" * 40)
        print(f"Saldo atual: R$ {self._saldo:.2f}")
        print(f"Taxa de saque: R$ {ContaBancaria.taxa_saque}")
    
    # M√âTODO PRIVADO - s√≥ usado internamente
    def _registrar_operacao(self, descricao):
        """Registra opera√ß√£o no hist√≥rico"""
        from datetime import datetime
        timestamp = datetime.now().strftime("%d/%m %H:%M")
        self._historico.append(f"[{timestamp}] {descricao}")
    
    # M√âTODO DE CLASSE - opera sobre a classe, n√£o sobre inst√¢ncias
    @classmethod
    def alterar_taxa_saque(cls, nova_taxa):
        """Altera taxa de saque para todas as contas"""
        taxa_anterior = cls.taxa_saque
        cls.taxa_saque = nova_taxa
        print(f"üè¶ Taxa de saque alterada: R$ {taxa_anterior} ‚Üí R$ {nova_taxa}")
    
    @classmethod
    def relatorio_banco(cls):
        """Relat√≥rio geral do banco"""
        print(f"\\nüè¶ RELAT√ìRIO {cls.banco}")
        print(f"üìä Total de contas: {cls.total_contas}")
        print(f"üí≥ Taxa de saque atual: R$ {cls.taxa_saque}")

# Demonstra√ß√£o do sistema
print("=== SISTEMA BANC√ÅRIO ===")

# Criando contas
conta1 = ContaBancaria("Jo√£o Silva", 1000)
conta2 = ContaBancaria("Maria Santos", 500)
conta3 = ContaBancaria("Pedro Costa")

print("\\n=== OPERA√á√ïES ===")
# Opera√ß√µes nas contas
conta1.depositar(200)
conta1.sacar(150)
conta2.depositar(300)
conta2.sacar(800)  # Vai falhar

print("\\n=== CONSULTAS ===")
conta1.consultar_saldo()
conta2.consultar_saldo()

# Extrato
conta1.extrato()

print("\\n=== ALTERANDO CONFIGURA√á√ïES DO BANCO ===")
# Alterando atributo de classe
ContaBancaria.alterar_taxa_saque(3.00)
conta3.sacar(50)  # Usa nova taxa

# Relat√≥rio geral
ContaBancaria.relatorio_banco()

print("\\nüéØ RESUMO DOS CONCEITOS:")
print("‚úÖ Atributos de inst√¢ncia: titular, _saldo, numero")
print("‚úÖ Atributos de classe: banco, taxa_saque, total_contas")
print("‚úÖ M√©todos de inst√¢ncia: depositar, sacar, consultar_saldo")
print("‚úÖ M√©todos de classe: alterar_taxa_saque, relatorio_banco")
print("‚úÖ M√©todos privados: _registrar_operacao")'''

        self.exemplo(codigo_conta)
        self.executar_codigo(codigo_conta)

        self.pausar()
    
    def _secao_construtor(self) -> None:
        """Se√ß√£o: O Construtor __init__"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("O CONSTRUTOR __init__", "üîß")

        # === DEFINI√á√ÉO ===
        self.print_concept(
            "Construtor __init__",
            "√â um m√©todo especial que √© executado automaticamente quando um objeto √© criado. √â onde voc√™ inicializa os atributos do objeto."
        )

        # === ANALOGIA ===
        self.print_colored("\nüèóÔ∏è ANALOGIA DA CONSTRU√á√ÉO:", "warning")
        self.print_colored("Quando voc√™ constr√≥i uma casa, o construtor:", "text")
        self.print_colored("‚Ä¢ Define as funda√ß√µes (atributos b√°sicos)", "text")
        self.print_colored("‚Ä¢ Instala sistemas essenciais (configura√ß√µes iniciais)", "text")
        self.print_colored("‚Ä¢ Deixa a casa pronta para morar (objeto funcional)", "text")
        input("\nüî∏ Pressione ENTER para ver exemplo...")

        # === EXEMPLO PROGRESSIVO ===
        self.print_colored("\nüíª EVOLU√á√ÉO DO CONSTRUTOR:", "success")
        
        # Construtor simples
        codigo_simples = '''# CONSTRUTOR B√ÅSICO
class Produto:
    def __init__(self, nome, preco):
        """Construtor simples"""
        self.nome = nome
        self.preco = preco
        print(f"‚úÖ Produto '{nome}' criado com pre√ßo R$ {preco}")

# Testando
produto1 = Produto("Notebook", 2500)
produto2 = Produto("Mouse", 50)

print(f"Produto 1: {produto1.nome} - R$ {produto1.preco}")
print(f"Produto 2: {produto2.nome} - R$ {produto2.preco}")'''

        self.exemplo(codigo_simples)
        self.executar_codigo(codigo_simples)

        input("\n‚è≥ Pressione ENTER para construtor com valores padr√£o...")

        # Construtor com valores padr√£o
        codigo_padrao = '''# CONSTRUTOR COM VALORES PADR√ÉO
class Funcionario:
    def __init__(self, nome, cargo="Estagi√°rio", salario=1000):
        """Construtor com valores padr√£o"""
        self.nome = nome
        self.cargo = cargo
        self.salario = salario
        self.ativo = True        # Valor sempre padr√£o
        self.id = id(self)       # ID √∫nico autom√°tico
        
        print(f"üë§ {nome} contratado como {cargo}")

# Diferentes formas de criar funcion√°rios
print("=== CRIANDO FUNCION√ÅRIOS ===")
func1 = Funcionario("Ana")                                    # Usa padr√µes
func2 = Funcionario("Bruno", "Desenvolvedor")                 # Especifica cargo
func3 = Funcionario("Carla", "Gerente", 8000)                # Especifica tudo

print(f"\\n{func1.nome}: {func1.cargo} - R$ {func1.salario}")
print(f"{func2.nome}: {func2.cargo} - R$ {func2.salario}")
print(f"{func3.nome}: {func3.cargo} - R$ {func3.salario}")'''

        self.exemplo(codigo_padrao)
        self.executar_codigo(codigo_padrao)

        input("\n‚è≥ Pressione ENTER para construtor avan√ßado...")

        # Construtor avan√ßado
        codigo_avancado = '''# CONSTRUTOR AVAN√áADO COM VALIDA√á√ïES
class Usuario:
    total_usuarios = 0
    
    def __init__(self, nome, email, idade=18):
        """Construtor com valida√ß√µes e inicializa√ß√µes avan√ßadas"""
        
        # Valida√ß√µes
        if not nome or len(nome.strip()) < 2:
            raise ValueError("Nome deve ter pelo menos 2 caracteres")
        
        if "@" not in email or "." not in email:
            raise ValueError("Email inv√°lido")
        
        if idade < 13:
            raise ValueError("Idade m√≠nima √© 13 anos")
        
        # Inicializa√ß√µes
        self.nome = nome.strip().title()
        self.email = email.lower().strip()
        self.idade = idade
        
        # Atributos autom√°ticos
        Usuario.total_usuarios += 1
        self.id = Usuario.total_usuarios
        
        # Configura√ß√µes baseadas na idade
        if idade >= 18:
            self.tipo = "Adulto"
            self.permissoes = ["comprar", "vender", "contratar"]
        else:
            self.tipo = "Menor"
            self.permissoes = ["comprar"]
        
        # Hist√≥rico
        self.historico = []
        self._registrar_evento("Usu√°rio criado")
        
        print(f"üéâ Usu√°rio {self.nome} criado com sucesso!")
        print(f"üìß Email: {self.email}")
        print(f"üéÇ Idade: {self.idade} anos ({self.tipo})")
        print(f"üîë Permiss√µes: {', '.join(self.permissoes)}")
    
    def _registrar_evento(self, evento):
        """Registra evento no hist√≥rico"""
        from datetime import datetime
        timestamp = datetime.now().strftime("%d/%m/%Y %H:%M")
        self.historico.append(f"[{timestamp}] {evento}")
    
    def mostrar_info(self):
        """Mostra informa√ß√µes completas"""
        print(f"\\nüë§ USU√ÅRIO #{self.id}: {self.nome}")
        print(f"üìß Email: {self.email}")
        print(f"üéÇ Idade: {self.idade} anos ({self.tipo})")
        print(f"üîë Permiss√µes: {', '.join(self.permissoes)}")
        print(f"üìã Eventos: {len(self.historico)}")

# Testando o construtor avan√ßado
print("=== CRIANDO USU√ÅRIOS COM VALIDA√á√ÉO ===")

try:
    user1 = Usuario("Jo√£o Silva", "joao@email.com", 25)
    user2 = Usuario("Ana Costa", "ana@gmail.com", 16)
    user3 = Usuario("", "invalido")  # Vai dar erro
except ValueError as e:
    print(f"‚ùå Erro na cria√ß√£o: {e}")

print("\\n=== INFORMA√á√ïES DOS USU√ÅRIOS ===")
user1.mostrar_info()
user2.mostrar_info()

print(f"\\nüìä Total de usu√°rios criados: {Usuario.total_usuarios}")'''

        self.exemplo(codigo_avancado)
        self.executar_codigo(codigo_avancado)

        # === DICAS IMPORTANTES ===
        self.print_colored("\nüéØ DICAS IMPORTANTES SOBRE __init__:", "accent")
        dicas = [
            "‚Ä¢ __init__ N√ÉO retorna nada (n√£o use return)",
            "‚Ä¢ self sempre √© o primeiro par√¢metro",
            "‚Ä¢ Pode ter valores padr√£o nos par√¢metros",
            "‚Ä¢ Use para validar dados antes de criar o objeto",
            "‚Ä¢ Inicialize todos os atributos necess√°rios",
            "‚Ä¢ Pode chamar outros m√©todos durante a inicializa√ß√£o"
        ]
        for dica in dicas:
            self.print_colored(dica, "primary")

        self.pausar()
    
    def _secao_encapsulamento(self) -> None:
        """Se√ß√£o: Encapsulamento e Privacidade"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("ENCAPSULAMENTO E PRIVACIDADE", "üîí")

        # === DEFINI√á√ÉO ===
        self.print_concept(
            "Encapsulamento",
            "√â o princ√≠pio de esconder detalhes internos do objeto e controlar como os dados s√£o acessados e modificados. Protege os dados de modifica√ß√µes acidentais."
        )

        # === ANALOGIA ===
        self.print_colored("\nüè† ANALOGIA DA CASA:", "warning")
        self.print_colored("‚Ä¢ Porta da frente = m√©todos p√∫blicos (qualquer um pode usar)", "text")
        self.print_colored("‚Ä¢ Quartos privados = atributos privados (s√≥ a fam√≠lia acessa)", "text")
        self.print_colored("‚Ä¢ Cofre = dados ultra-protegidos com valida√ß√£o", "text")
        input("\nüî∏ Pressione ENTER para ver na pr√°tica...")

        # === EXEMPLO PR√ÅTICO ===
        self.print_colored("\nüíª EXEMPLO: CONTA SEGURA COM ENCAPSULAMENTO:", "success")
        codigo_encapsulamento = '''class ContaSegura:
    """Conta banc√°ria com encapsulamento adequado"""
    
    def __init__(self, titular, saldo_inicial=0):
        """Construtor com valida√ß√£o"""
        if not titular or len(titular.strip()) < 2:
            raise ValueError("Titular deve ter pelo menos 2 caracteres")
        
        if saldo_inicial < 0:
            raise ValueError("Saldo inicial n√£o pode ser negativo")
        
        # Atributos P√öBLICOS - podem ser acessados diretamente
        self.titular = titular.strip().title()
        self.numero = id(self) % 100000  # N√∫mero √∫nico
        
        # Atributos PRIVADOS - conven√ß√£o com _ 
        # (Python n√£o impede acesso, mas indica que s√£o internos)
        self._saldo = saldo_inicial
        self._historico = []
        self._limite_credito = 1000
        self._tentativas_senha = 0
        self._bloqueada = False
        
        # Atributos MUITO PRIVADOS - conven√ß√£o com __
        # (Python "esconde" esses atributos)
        self.__senha = "1234"  # Senha super secreta
        
        print(f"üè¶ Conta {self.numero} criada para {self.titular}")
    
    # PROPRIEDADE SOMENTE LEITURA (getter)
    @property
    def saldo(self):
        """Permite consultar saldo, mas n√£o modificar diretamente"""
        if self._bloqueada:
            return "‚ùå Conta bloqueada"
        return self._saldo
    
    # PROPRIEDADE COM VALIDA√á√ÉO (getter + setter)
    @property
    def limite_credito(self):
        """Consulta limite de cr√©dito"""
        return self._limite_credito
    
    @limite_credito.setter
    def limite_credito(self, novo_limite):
        """Define novo limite com valida√ß√£o"""
        if novo_limite < 0:
            raise ValueError("Limite n√£o pode ser negativo")
        if novo_limite > 10000:
            raise ValueError("Limite m√°ximo √© R$ 10.000")
        
        limite_anterior = self._limite_credito
        self._limite_credito = novo_limite
        print(f"üí≥ Limite alterado: R$ {limite_anterior} ‚Üí R$ {novo_limite}")
    
    # M√âTODOS P√öBLICOS - interface para interagir com a conta
    def depositar(self, valor):
        """Deposita dinheiro (m√©todo p√∫blico)"""
        if self._bloqueada:
            print("‚ùå Conta bloqueada! N√£o √© poss√≠vel depositar.")
            return False
        
        if valor <= 0:
            print("‚ùå Valor deve ser positivo!")
            return False
        
        self._saldo += valor
        self._registrar_transacao(f"Dep√≥sito: +R$ {valor:.2f}")
        print(f"üí∞ Dep√≥sito realizado! Saldo: R$ {self._saldo:.2f}")
        return True
    
    def sacar(self, valor, senha):
        """Saca dinheiro com verifica√ß√£o de senha"""
        # Verifica se conta est√° bloqueada
        if self._bloqueada:
            print("‚ùå Conta bloqueada! Procure uma ag√™ncia.")
            return False
        
        # Verifica senha
        if not self._verificar_senha(senha):
            return False
        
        # Verifica valor
        if valor <= 0:
            print("‚ùå Valor deve ser positivo!")
            return False
        
        # Verifica se tem saldo dispon√≠vel (considerando limite)
        saldo_disponivel = self._saldo + self._limite_credito
        if valor > saldo_disponivel:
            print(f"‚ùå Saldo insuficiente! Dispon√≠vel: R$ {saldo_disponivel:.2f}")
            return False
        
        # Realiza o saque
        self._saldo -= valor
        self._registrar_transacao(f"Saque: -R$ {valor:.2f}")
        
        if self._saldo < 0:
            print(f"üí∏ Saque realizado usando cr√©dito! Saldo: R$ {self._saldo:.2f}")
        else:
            print(f"üí∏ Saque realizado! Saldo: R$ {self._saldo:.2f}")
        
        return True
    
    def alterar_senha(self, senha_atual, nova_senha):
        """Altera senha com verifica√ß√£o"""
        if not self._verificar_senha(senha_atual):
            return False
        
        if len(nova_senha) < 4:
            print("‚ùå Nova senha deve ter pelo menos 4 d√≠gitos!")
            return False
        
        self.__senha = nova_senha
        print("üîê Senha alterada com sucesso!")
        return True
    
    def extrato(self, senha):
        """Mostra extrato com verifica√ß√£o de senha"""
        if not self._verificar_senha(senha):
            return
        
        print(f"\\nüìÑ EXTRATO - CONTA {self.numero}")
        print(f"üë§ Titular: {self.titular}")
        print(f"üí∞ Saldo atual: R$ {self._saldo:.2f}")
        print(f"üí≥ Limite de cr√©dito: R$ {self._limite_credito:.2f}")
        print(f"üíµ Saldo total dispon√≠vel: R$ {self._saldo + self._limite_credito:.2f}")
        print("-" * 50)
        
        if self._historico:
            print("üìã √öltimas transa√ß√µes:")
            for transacao in self._historico[-5:]:
                print(f"  {transacao}")
        else:
            print("üì≠ Nenhuma transa√ß√£o realizada")
        
        print("-" * 50)
    
    # M√âTODOS PRIVADOS - uso interno apenas
    def _verificar_senha(self, senha):
        """Verifica senha (m√©todo privado)"""
        if senha == self.__senha:
            self._tentativas_senha = 0  # Reset tentativas
            return True
        else:
            self._tentativas_senha += 1
            print(f"‚ùå Senha incorreta! Tentativa {self._tentativas_senha}/3")
            
            if self._tentativas_senha >= 3:
                self._bloqueada = True
                print("üö´ CONTA BLOQUEADA por excesso de tentativas!")
            
            return False
    
    def _registrar_transacao(self, descricao):
        """Registra transa√ß√£o no hist√≥rico (m√©todo privado)"""
        from datetime import datetime
        timestamp = datetime.now().strftime("%d/%m/%Y %H:%M")
        self._historico.append(f"[{timestamp}] {descricao}")
    
    # M√âTODO ESPECIAL - representa√ß√£o da conta
    def __str__(self):
        """Representa√ß√£o em string da conta"""
        status = "üü¢ Ativa" if not self._bloqueada else "üî¥ Bloqueada"
        return f"Conta {self.numero} - {self.titular} - {status}"

# Demonstra√ß√£o do encapsulamento
print("=== CRIANDO CONTA SEGURA ===")
conta = ContaSegura("Jo√£o Silva", 1000)

print("\\n=== TESTANDO ACESSO AOS DADOS ===")
# Acesso P√öBLICO - permitido
print(f"üë§ Titular: {conta.titular}")
print(f"üî¢ N√∫mero: {conta.numero}")
print(f"üí∞ Saldo (via propriedade): {conta.saldo}")

# Tentativa de modificar saldo diretamente
print("\\n=== TENTANDO MODIFICAR SALDO DIRETAMENTE ===")
print("Tentando: conta.saldo = 9999")
try:
    conta.saldo = 9999  # Vai dar erro!
except AttributeError as e:
    print(f"‚ùå Erro: {e}")
    print("‚úÖ Encapsulamento funcionando! Saldo protegido.")

print("\\n=== USANDO PROPRIEDADES ===")
# Usando propriedades com valida√ß√£o
print(f"Limite atual: R$ {conta.limite_credito}")
conta.limite_credito = 2000  # Setter com valida√ß√£o
try:
    conta.limite_credito = -500  # Vai dar erro
except ValueError as e:
    print(f"‚ùå {e}")

print("\\n=== OPERA√á√ïES BANC√ÅRIAS ===")
# Opera√ß√µes normais
conta.depositar(500)
conta.sacar(200, "1234")  # Senha correta
conta.sacar(100, "0000")  # Senha errada
conta.sacar(100, "0000")  # Senha errada
conta.sacar(100, "0000")  # Terceira tentativa - vai bloquear

print("\\n=== TENTANDO USAR CONTA BLOQUEADA ===")
conta.depositar(100)  # Vai falhar - conta bloqueada

print("\\nüîê CONCEITOS DEMONSTRADOS:")
print("‚úÖ Atributos p√∫blicos: titular, numero")
print("‚úÖ Atributos privados: _saldo, _historico, _limite_credito")
print("‚úÖ Atributos muito privados: __senha")
print("‚úÖ Propriedades com getter/setter: saldo, limite_credito")
print("‚úÖ M√©todos p√∫blicos: depositar, sacar, extrato")
print("‚úÖ M√©todos privados: _verificar_senha, _registrar_transacao")
print("‚úÖ Valida√ß√µes e prote√ß√µes autom√°ticas")'''

        self.exemplo(codigo_encapsulamento)
        self.executar_codigo(codigo_encapsulamento)

        # === RESUMO ===
        self.print_colored("\nüéØ N√çVEIS DE PRIVACIDADE EM PYTHON:", "accent")
        niveis = [
            "‚Ä¢ atributo ‚Üí P√öBLICO: acesso livre",
            "‚Ä¢ _atributo ‚Üí PRIVADO: conven√ß√£o, uso interno",
            "‚Ä¢ __atributo ‚Üí MUITO PRIVADO: Python 'esconde' o nome"
        ]
        for nivel in niveis:
            self.print_colored(nivel, "primary")

        self.pausar()
    
    def _secao_casos_uso(self) -> None:
        """Se√ß√£o: OOP no Mundo Real"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("OOP NO MUNDO REAL", "üåç")

        self.print_colored("Veja como grandes empresas usam OOP em seus sistemas:", "text")

        # === CASOS REAIS ===
        casos = [
            {
                'empresa': 'üõí AMAZON',
                'classes': ['Usuario', 'Produto', 'Carrinho', 'Pedido', 'Pagamento'],
                'exemplo': 'Cada produto √© um objeto com pre√ßo, estoque, avalia√ß√µes'
            },
            {
                'empresa': 'üéÆ RIOT GAMES (League of Legends)',
                'classes': ['Campeao', 'Habilidade', 'Item', 'Partida', 'Jogador'],
                'exemplo': 'Cada campe√£o herda de uma classe base com vida, mana, ataque'
            },
            {
                'empresa': 'üè¶ NUBANK',
                'classes': ['Cliente', 'Conta', 'Cartao', 'Transacao', 'Emprestimo'],
                'exemplo': 'Cada transa√ß√£o √© um objeto com valor, data, categoria'
            },
            {
                'empresa': 'üöó UBER',
                'classes': ['Motorista', 'Passageiro', 'Viagem', 'Veiculo', 'Pagamento'],
                'exemplo': 'Cada viagem conecta motorista e passageiro com pre√ßo din√¢mico'
            }
        ]

        for caso in casos:
            print(f"\n{caso['empresa']}")
            self.print_colored(f"Classes principais: {', '.join(caso['classes'])}", "accent")
            self.print_colored(f"üí° {caso['exemplo']}", "text")
            input("   ‚è≥ Pressione ENTER para pr√≥ximo caso...")

        # === EXEMPLO PR√ÅTICO INSPIRADO NO MUNDO REAL ===
        self.print_colored("\nüíª EXEMPLO: SISTEMA INSPIRADO NO NETFLIX:", "success")
        codigo_netflix = '''# Sistema de streaming inspirado no Netflix
class Usuario:
    """Representa um usu√°rio da plataforma"""
    
    def __init__(self, nome, email, plano="basico"):
        self.nome = nome
        self.email = email
        self.plano = plano
        self.historico_assistido = []
        self.lista_favoritos = []
        self.tempo_total_assistido = 0  # em minutos
    
    def assistir(self, conteudo, minutos_assistidos):
        """Registra que o usu√°rio assistiu um conte√∫do"""
        self.historico_assistido.append({
            'conteudo': conteudo.titulo,
            'minutos': minutos_assistidos,
            'data': 'hoje'
        })
        self.tempo_total_assistido += minutos_assistidos
        conteudo.registrar_visualizacao(minutos_assistidos)
        print(f"üì∫ {self.nome} assistiu {minutos_assistidos} min de '{conteudo.titulo}'")
    
    def adicionar_favorito(self, conteudo):
        """Adiciona conte√∫do aos favoritos"""
        if conteudo not in self.lista_favoritos:
            self.lista_favoritos.append(conteudo)
            print(f"‚ù§Ô∏è '{conteudo.titulo}' adicionado aos favoritos de {self.nome}")

class Conteudo:
    """Classe base para filmes e s√©ries"""
    
    def __init__(self, titulo, genero, classificacao, duracao):
        self.titulo = titulo
        self.genero = genero
        self.classificacao = classificacao  # "Livre", "12+", "16+", "18+"
        self.duracao = duracao  # em minutos
        self.total_visualizacoes = 0
        self.tempo_total_assistido = 0
        self.avaliacoes = []
    
    def registrar_visualizacao(self, minutos):
        """Registra visualiza√ß√£o do conte√∫do"""
        self.total_visualizacoes += 1
        self.tempo_total_assistido += minutos
    
    def adicionar_avaliacao(self, nota, comentario=""):
        """Adiciona avalia√ß√£o do usu√°rio"""
        if 1 <= nota <= 5:
            self.avaliacoes.append({'nota': nota, 'comentario': comentario})
            print(f"‚≠ê Avalia√ß√£o {nota}/5 adicionada para '{self.titulo}'")
    
    def media_avaliacoes(self):
        """Calcula m√©dia das avalia√ß√µes"""
        if not self.avaliacoes:
            return 0
        return sum(av['nota'] for av in self.avaliacoes) / len(self.avaliacoes)

class Filme(Conteudo):
    """Classe espec√≠fica para filmes"""
    
    def __init__(self, titulo, genero, classificacao, duracao, diretor, ano):
        super().__init__(titulo, genero, classificacao, duracao)
        self.diretor = diretor
        self.ano = ano
        self.tipo = "Filme"
    
    def info(self):
        """Informa√ß√µes do filme"""
        media = self.media_avaliacoes()
        return f"üé¨ {self.titulo} ({self.ano}) - {self.diretor}\\n" \\
               f"   G√™nero: {self.genero} | Dura√ß√£o: {self.duracao}min | " \\
               f"Nota: {media:.1f}/5"

class Serie(Conteudo):
    """Classe espec√≠fica para s√©ries"""
    
    def __init__(self, titulo, genero, classificacao, temporadas, episodios_por_temp):
        # Calcula dura√ß√£o total estimada (40 min por epis√≥dio)
        duracao_total = temporadas * episodios_por_temp * 40
        super().__init__(titulo, genero, classificacao, duracao_total)
        
        self.temporadas = temporadas
        self.episodios_por_temporada = episodios_por_temp
        self.tipo = "S√©rie"
    
    def info(self):
        """Informa√ß√µes da s√©rie"""
        media = self.media_avaliacoes()
        total_eps = self.temporadas * self.episodios_por_temporada
        return f"üì∫ {self.titulo}\\n" \\
               f"   {self.temporadas} temporadas | {total_eps} epis√≥dios | " \\
               f"G√™nero: {self.genero} | Nota: {media:.1f}/5"

class Plataforma:
    """Sistema principal da plataforma de streaming"""
    
    def __init__(self, nome):
        self.nome = nome
        self.usuarios = []
        self.catalogo = []
        self.total_minutos_assistidos = 0
    
    def adicionar_usuario(self, usuario):
        """Adiciona novo usu√°rio"""
        self.usuarios.append(usuario)
        print(f"‚úÖ {usuario.nome} cadastrado na {self.nome}")
    
    def adicionar_conteudo(self, conteudo):
        """Adiciona conte√∫do ao cat√°logo"""
        self.catalogo.append(conteudo)
        print(f"‚ûï '{conteudo.titulo}' adicionado ao cat√°logo")
    
    def buscar_por_genero(self, genero):
        """Busca conte√∫dos por g√™nero"""
        resultados = [c for c in self.catalogo if genero.lower() in c.genero.lower()]
        return resultados
    
    def top_conteudos(self, limite=5):
        """Lista os conte√∫dos mais assistidos"""
        ordenados = sorted(self.catalogo, 
                          key=lambda c: c.total_visualizacoes, 
                          reverse=True)
        return ordenados[:limite]
    
    def relatorio_uso(self):
        """Relat√≥rio de uso da plataforma"""
        total_usuarios = len(self.usuarios)
        total_conteudos = len(self.catalogo)
        total_visualizacoes = sum(c.total_visualizacoes for c in self.catalogo)
        
        print(f"\\nüìä RELAT√ìRIO {self.nome}")
        print(f"üë• Usu√°rios: {total_usuarios}")
        print(f"üé¨ Conte√∫dos: {total_conteudos}")
        print(f"üì∫ Total de visualiza√ß√µes: {total_visualizacoes}")
        
        if self.catalogo:
            print("\\nüèÜ TOP 3 MAIS ASSISTIDOS:")
            for i, conteudo in enumerate(self.top_conteudos(3), 1):
                print(f"{i}. {conteudo.titulo} - {conteudo.total_visualizacoes} views")

# Demonstra√ß√£o do sistema
print("=== CRIANDO PLATAFORMA DE STREAMING ===")

# Criando a plataforma
netflix_python = Plataforma("Netflix Python")

# Criando conte√∫dos
filme1 = Filme("O Algoritmo", "Fic√ß√£o Cient√≠fica", "12+", 120, "Ana Codes", 2023)
filme2 = Filme("Python: O Filme", "Document√°rio", "Livre", 90, "Jo√£o Dev", 2024)
serie1 = Serie("House of Code", "Drama", "16+", 3, 10)
serie2 = Serie("Breaking Bug", "Suspense", "18+", 5, 12)

# Adicionando ao cat√°logo
for conteudo in [filme1, filme2, serie1, serie2]:
    netflix_python.adicionar_conteudo(conteudo)

# Criando usu√°rios
user1 = Usuario("Maria Silva", "maria@email.com", "premium")
user2 = Usuario("Jo√£o Santos", "joao@email.com", "b√°sico")

for usuario in [user1, user2]:
    netflix_python.adicionar_usuario(usuario)

print("\\n=== USU√ÅRIOS ASSISTINDO CONTE√öDOS ===")
# Simulando uso da plataforma
user1.assistir(filme1, 120)  # Assistiu filme completo
user1.assistir(serie1, 200)  # Assistiu alguns epis√≥dios
user1.adicionar_favorito(serie1)

user2.assistir(filme2, 45)   # Assistiu parcialmente
user2.assistir(serie2, 300)  # Maratonou
user2.adicionar_favorito(filme1)

print("\\n=== AVALIA√á√ïES ===")
# Avalia√ß√µes
filme1.adicionar_avaliacao(5, "Incr√≠vel!")
filme1.adicionar_avaliacao(4, "Muito bom")
serie1.adicionar_avaliacao(5, "Melhor s√©rie!")

print("\\n=== INFORMA√á√ïES DOS CONTE√öDOS ===")
# Mostrando informa√ß√µes
for conteudo in netflix_python.catalogo:
    print(conteudo.info())

# Relat√≥rio final
netflix_python.relatorio_uso()

print("\\nüéØ CONCEITOS OOP DEMONSTRADOS:")
print("‚úÖ Heran√ßa: Filme e Serie herdam de Conteudo")
print("‚úÖ Encapsulamento: Dados protegidos nas classes")
print("‚úÖ Composi√ß√£o: Plataforma cont√©m Usuarios e Conteudos")
print("‚úÖ Polimorfismo: Filme e Serie implementam info() diferente")
print("‚úÖ Abstra√ß√£o: Interface simples para opera√ß√µes complexas")'''

        self.exemplo(codigo_netflix)
        self.executar_codigo(codigo_netflix)

        self.pausar()
    
    def _secao_melhores_praticas(self) -> None:
        """Se√ß√£o: Melhores Pr√°ticas em OOP"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("MELHORES PR√ÅTICAS EM OOP", "‚≠ê")

        self.print_colored("Dicas de desenvolvedores experientes para escrever c√≥digo OOP de qualidade:", "text")

        # === PR√ÅTICAS ESSENCIAIS ===
        praticas = [
            {
                'titulo': 'üìù 1. NOMES DESCRITIVOS',
                'regra': 'Use nomes que expliquem claramente o prop√≥sito',
                'bom': 'class ContaBancaria, def calcular_juros()',
                'ruim': 'class CB, def calc()'
            },
            {
                'titulo': 'üîß 2. RESPONSABILIDADE √öNICA',
                'regra': 'Cada classe deve ter apenas uma responsabilidade',
                'bom': 'class Usuario (s√≥ gerencia usu√°rios)',
                'ruim': 'class UsuarioEmailPagamento (faz muitas coisas)'
            },
            {
                'titulo': 'üîí 3. ENCAPSULAMENTO ADEQUADO',
                'regra': 'Proteja dados internos e forne√ßa interface clara',
                'bom': 'self._saldo com m√©todos depositar/sacar',
                'ruim': 'self.saldo modificado diretamente'
            },
            {
                'titulo': 'üìö 4. DOCUMENTA√á√ÉO CLARA',
                'regra': 'Docstrings em classes e m√©todos importantes',
                'bom': '"""Classe que gerencia contas banc√°rias"""',
                'ruim': 'Sem documenta√ß√£o'
            },
            {
                'titulo': '‚ö° 5. M√âTODOS PEQUENOS',
                'regra': 'M√©todos devem fazer uma coisa e fazer bem',
                'bom': 'def validar_email(), def enviar_email()',
                'ruim': 'def processar_usuario() (100 linhas)'
            }
        ]

        for i, pratica in enumerate(praticas, 1):
            print(f"\n{pratica['titulo']}")
            self.print_colored(f"üìã Regra: {pratica['regra']}", "info")
            self.print_colored(f"‚úÖ Bom: {pratica['bom']}", "success")
            self.print_colored(f"‚ùå Ruim: {pratica['ruim']}", "warning")
            
            if i < len(praticas):
                input("   ‚è≥ Pressione ENTER para pr√≥xima pr√°tica...")

        # === EXEMPLO PR√ÅTICO ===
        input("\nüî∏ Pressione ENTER para ver exemplo pr√°tico...")
        
        self.print_colored("\nüíª EXEMPLO: REFATORA√á√ÉO DE C√ìDIGO RUIM PARA BOM:", "success")
        codigo_praticas = '''# ‚ùå C√ìDIGO RUIM - Violando v√°rias pr√°ticas
class u:  # Nome n√£o descritivo
    def __init__(self, n, e, s):  # Par√¢metros n√£o descritivos
        self.n = n
        self.e = e
        self.s = s        # Saldo p√∫blico (sem prote√ß√£o)
        self.h = []       # Hist√≥rico p√∫blico
    
    def p(self, v):       # Nome n√£o descritivo
        self.s += v       # Modifica saldo diretamente
        self.h.append(f"Dep: {v}")
        print(f"OK: {self.s}")
        # Enviar email (responsabilidade extra!)
        print(f"Email enviado para {self.e}")
        # Calcular impostos (responsabilidade extra!)
        imposto = v * 0.1
        print(f"Imposto: {imposto}")

# ‚úÖ C√ìDIGO BOM - Seguindo melhores pr√°ticas
class ContaBancaria:
    """
    Classe que representa uma conta banc√°ria.
    
    Responsabilidades:
    - Gerenciar saldo da conta
    - Registrar transa√ß√µes
    - Validar opera√ß√µes
    """
    
    def __init__(self, titular: str, email: str, saldo_inicial: float = 0):
        """
        Inicializa uma nova conta banc√°ria.
        
        Args:
            titular: Nome do titular da conta
            email: Email do titular
            saldo_inicial: Saldo inicial da conta (padr√£o: 0)
        """
        self._validar_dados_iniciais(titular, email, saldo_inicial)
        
        # Atributos p√∫blicos
        self.titular = titular.strip().title()
        self.email = email.lower().strip()
        self.numero_conta = self._gerar_numero_conta()
        
        # Atributos protegidos
        self._saldo = saldo_inicial
        self._historico_transacoes = []
        self._conta_ativa = True
        
        self._registrar_transacao("Conta criada", saldo_inicial)
        print(f"‚úÖ Conta {self.numero_conta} criada para {self.titular}")
    
    @property
    def saldo(self) -> float:
        """Consulta o saldo atual da conta."""
        if not self._conta_ativa:
            raise ValueError("Conta inativa")
        return self._saldo
    
    def depositar(self, valor: float) -> bool:
        """
        Deposita dinheiro na conta.
        
        Args:
            valor: Valor a ser depositado
            
        Returns:
            True se o dep√≥sito foi realizado, False caso contr√°rio
        """
        if not self._validar_valor_operacao(valor):
            return False
        
        if not self._conta_ativa:
            print("‚ùå N√£o √© poss√≠vel depositar em conta inativa")
            return False
        
        self._saldo += valor
        self._registrar_transacao("Dep√≥sito", valor)
        print(f"üí∞ Dep√≥sito realizado! Saldo: R$ {self._saldo:.2f}")
        return True
    
    def sacar(self, valor: float) -> bool:
        """
        Saca dinheiro da conta.
        
        Args:
            valor: Valor a ser sacado
            
        Returns:
            True se o saque foi realizado, False caso contr√°rio
        """
        if not self._validar_valor_operacao(valor):
            return False
        
        if not self._conta_ativa:
            print("‚ùå N√£o √© poss√≠vel sacar de conta inativa")
            return False
        
        if valor > self._saldo:
            print(f"‚ùå Saldo insuficiente! Saldo: R$ {self._saldo:.2f}")
            return False
        
        self._saldo -= valor
        self._registrar_transacao("Saque", -valor)
        print(f"üí∏ Saque realizado! Saldo: R$ {self._saldo:.2f}")
        return True
    
    def obter_extrato(self, ultimas_transacoes: int = 10) -> list:
        """
        Retorna o extrato das transa√ß√µes.
        
        Args:
            ultimas_transacoes: N√∫mero de transa√ß√µes a retornar
            
        Returns:
            Lista com as √∫ltimas transa√ß√µes
        """
        return self._historico_transacoes[-ultimas_transacoes:]
    
    def desativar_conta(self) -> None:
        """Desativa a conta banc√°ria."""
        self._conta_ativa = False
        self._registrar_transacao("Conta desativada", 0)
        print(f"üîí Conta {self.numero_conta} desativada")
    
    # M√©todos privados - uso interno apenas
    def _validar_dados_iniciais(self, titular: str, email: str, saldo: float) -> None:
        """Valida dados fornecidos na cria√ß√£o da conta."""
        if not titular or len(titular.strip()) < 2:
            raise ValueError("Titular deve ter pelo menos 2 caracteres")
        
        if "@" not in email or "." not in email:
            raise ValueError("Email inv√°lido")
        
        if saldo < 0:
            raise ValueError("Saldo inicial n√£o pode ser negativo")
    
    def _validar_valor_operacao(self, valor: float) -> bool:
        """Valida valor para opera√ß√µes banc√°rias."""
        if valor <= 0:
            print("‚ùå Valor deve ser maior que zero")
            return False
        
        if valor > 10000:
            print("‚ùå Valor m√°ximo por opera√ß√£o: R$ 10.000")
            return False
        
        return True
    
    def _gerar_numero_conta(self) -> str:
        """Gera n√∫mero √∫nico da conta."""
        import random
        return f"{random.randint(10000, 99999)}-{random.randint(0, 9)}"
    
    def _registrar_transacao(self, tipo: str, valor: float) -> None:
        """Registra transa√ß√£o no hist√≥rico."""
        from datetime import datetime
        timestamp = datetime.now().strftime("%d/%m/%Y %H:%M")
        
        transacao = {
            'data': timestamp,
            'tipo': tipo,
            'valor': valor,
            'saldo_apos': self._saldo
        }
        
        self._historico_transacoes.append(transacao)
    
    def __str__(self) -> str:
        """Representa√ß√£o em string da conta."""
        status = "üü¢ Ativa" if self._conta_ativa else "üî¥ Inativa"
        return f"Conta {self.numero_conta} - {self.titular} - {status}"

# Classe separada para responsabilidades espec√≠ficas
class NotificadorEmail:
    """Classe respons√°vel apenas por enviar notifica√ß√µes por email."""
    
    @staticmethod
    def enviar_notificacao_deposito(email: str, valor: float) -> None:
        """Envia notifica√ß√£o de dep√≥sito por email."""
        print(f"üìß Email enviado para {email}: Dep√≥sito de R$ {valor:.2f} realizado")
    
    @staticmethod
    def enviar_notificacao_saque(email: str, valor: float) -> None:
        """Envia notifica√ß√£o de saque por email."""
        print(f"üìß Email enviado para {email}: Saque de R$ {valor:.2f} realizado")

class CalculadoraImpostos:
    """Classe respons√°vel apenas por c√°lculos de impostos."""
    
    @staticmethod
    def calcular_imposto_deposito(valor: float) -> float:
        """Calcula imposto sobre dep√≥sito."""
        return valor * 0.001  # 0.1% sobre dep√≥sitos
    
    @staticmethod
    def calcular_imposto_saque(valor: float) -> float:
        """Calcula imposto sobre saque."""
        return valor * 0.002  # 0.2% sobre saques

# Demonstra√ß√£o das melhorias
print("=== COMPARANDO ABORDAGENS ===")

print("\\n‚ùå C√≥digo ruim em a√ß√£o:")
conta_ruim = u("Jo√£o", "joao@email.com", 1000)
conta_ruim.p(500)  # M√©todo confuso que faz muitas coisas

print("\\n‚úÖ C√≥digo bom em a√ß√£o:")
conta_boa = ContaBancaria("Maria Silva", "maria@email.com", 1000)

# Opera√ß√µes claras e bem separadas
conta_boa.depositar(500)

# Notifica√ß√£o separada (responsabilidade √∫nica)
NotificadorEmail.enviar_notificacao_deposito(conta_boa.email, 500)

# C√°lculo de imposto separado (responsabilidade √∫nica)
imposto = CalculadoraImpostos.calcular_imposto_deposito(500)
print(f"üí∞ Imposto calculado: R$ {imposto:.2f}")

# Extrato bem formatado
print(f"\\nüìÑ Extrato: {len(conta_boa.obter_extrato())} transa√ß√µes registradas")

print(f"\\nüìä Status: {conta_boa}")
print(f"üí∞ Saldo (seguro): R$ {conta_boa.saldo:.2f}")

print("\\nüéØ MELHORIAS APLICADAS:")
print("‚úÖ Nomes descritivos e claros")
print("‚úÖ Responsabilidade √∫nica por classe")
print("‚úÖ Encapsulamento adequado")
print("‚úÖ Documenta√ß√£o completa")
print("‚úÖ M√©todos pequenos e focados")
print("‚úÖ Valida√ß√µes robustas")
print("‚úÖ Separa√ß√£o de responsabilidades")'''

        self.exemplo(codigo_praticas)
        self.executar_codigo(codigo_praticas)

        # === CHECKLIST FINAL ===
        self.print_colored("\n‚úÖ CHECKLIST PARA C√ìDIGO OOP DE QUALIDADE:", "accent")
        checklist = [
            "‚ñ° Nomes de classes come√ßam com mai√∫scula (PascalCase)",
            "‚ñ° M√©todos e atributos usam snake_case",
            "‚ñ° Cada classe tem uma responsabilidade clara",
            "‚ñ° Atributos importantes s√£o privados (_atributo)",
            "‚ñ° M√©todos fazem uma coisa s√≥",
            "‚ñ° Docstrings em classes e m√©todos principais",
            "‚ñ° Valida√ß√µes adequadas nos m√©todos p√∫blicos",
            "‚ñ° Uso de propriedades (@property) quando necess√°rio"
        ]
        
        for item in checklist:
            self.print_colored(item, "primary")

        self.pausar()
    
    def _secao_pratica_interativa(self) -> None:
        """Se√ß√£o de pr√°tica interativa do m√≥dulo"""

        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_section("HORA DE PRATICAR!", "üéØ", "success")
        self.print_colored("Vamos testar o que voc√™ aprendeu com exerc√≠cios pr√°ticos sobre OOP!", "text")

        # === INSTRU√á√ïES PARA INICIANTES ===
        self.print_tip("Para iniciantes: Cada exerc√≠cio √© opcional, mas recomendamos fazer todos!")
        self.print_colored("\nüéì SOBRE OS EXERC√çCIOS:", "info")
        self.print_colored("‚Ä¢ N√£o se preocupe se errar - faz parte do aprendizado!", "text")
        self.print_colored("‚Ä¢ Voc√™ pode tentar quantas vezes quiser", "text")
        self.print_colored("‚Ä¢ Digite 'help' se precisar de ajuda", "text")
        self.print_colored("‚Ä¢ Use Ctrl+C para voltar ao menu principal se necess√°rio", "text")

        # === DEFINI√á√ÉO DOS EXERC√çCIOS ===
        exercicios = [
            {
                'title': 'Quiz: Conhecimentos sobre OOP',
                'type': 'quiz',
                'questions': [
                    {
                        'question': 'Qual √© o m√©todo especial usado como construtor em Python?',
                        'answer': ['__init__', '__init__()', 'init', 'init()', '__new__'],
                        'hint': '√â um m√©todo especial que come√ßa e termina com dois underscores'
                    },
                    {
                        'question': 'O que representa "self" nos m√©todos de uma classe?',
                        'answer': ['inst√¢ncia atual', 'objeto atual', 'refer√™ncia ao objeto', 'pr√≥prio objeto'],
                        'hint': '√â sempre o primeiro par√¢metro dos m√©todos de inst√¢ncia'
                    },
                    {
                        'question': 'Qual conven√ß√£o indica que um atributo √© privado em Python?',
                        'answer': ['underscore', '_', 'come√ßa com _', 'come√ßar com underscore'],
                        'hint': '√â uma conven√ß√£o visual que indica uso interno'
                    },
                    {
                        'question': 'Como voc√™ cria um objeto a partir de uma classe chamada "Carro"?',
                        'answer': ['Carro()', 'objeto = Carro()', 'instancia = Carro()'],
                        'hint': '√â como chamar uma fun√ß√£o com o nome da classe'
                    },
                    {
                        'question': 'Qual √© o principal benef√≠cio do encapsulamento?',
                        'answer': ['prote√ß√£o de dados', 'proteger dados', 'controlar acesso', 'seguran√ßa'],
                        'hint': 'Impede modifica√ß√µes acidentais nos dados internos do objeto'
                    }
                ]
            },
            {
                'title': 'Desafio: Complete o C√≥digo OOP',
                'type': 'code_completion',
                'exercises': [
                    {
                        'instruction': 'B√ÅSICO: Complete a defini√ß√£o da classe Pessoa',
                        'starter': 'class Pessoa:\n    def __init__(self, nome, idade):\n        # Complete aqui\n        pass\n    \n    def cumprimentar(self):\n        return f"Ol√°, eu sou {self.nome}"',
                        'solution': 'self.nome = nome\n        self.idade = idade',
                        'type': 'simple'
                    },
                    {
                        'instruction': 'INTERMEDI√ÅRIO: Complete o m√©todo depositar da classe Conta',
                        'starter': 'class Conta:\n    def __init__(self, saldo=0):\n        self._saldo = saldo\n    \n    def depositar(self, valor):\n        if valor > 0:\n            # Complete aqui\n            print(f"Dep√≥sito realizado! Saldo: R$ {self._saldo}")\n            return True\n        return False',
                        'solution': 'self._saldo += valor',
                        'type': 'intermediate'
                    },
                    {
                        'instruction': 'AVAN√áADO: Complete a propriedade saldo com getter',
                        'starter': '@property\ndef saldo(self):\n    # Complete aqui\n    \n@saldo.setter\ndef saldo(self, valor):\n    if valor >= 0:\n        self._saldo = valor',
                        'solution': 'return self._saldo',
                        'type': 'advanced'
                    }
                ]
            },
            {
                'title': 'Exerc√≠cio Criativo: Sistema de Biblioteca',
                'type': 'creative',
                'instruction': 'Vamos criar um sistema de biblioteca usando OOP! Voc√™ definir√° as classes Livro, Usuario e Biblioteca, aplicando conceitos de encapsulamento e m√©todos.'
            }
        ]

        # === MENU PRINCIPAL DE EXERC√çCIOS ===
        while True:
            print("\nEscolha uma atividade:")
            print("1. üìù Quiz de Conhecimentos")
            print("2. üíª Complete o C√≥digo")
            print("3. üé® Exerc√≠cio Criativo")
            print("0. Continuar para o Mini Projeto")

            try:
                escolha = input("\nüëâ Sua escolha: ").strip().lower()

                if escolha in ["0", "continuar", "sair", "proximo"]:
                    break
                elif escolha in ["1", "quiz", "conhecimentos"]:
                    try:
                        self._run_quiz(exercicios[0])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Quiz interrompido. Voltando ao menu principal...")
                        return
                elif escolha in ["2", "codigo", "completar"]:
                    try:
                        self._run_code_completion(exercicios[1])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio de c√≥digo interrompido. Voltando ao menu principal...")
                        return
                elif escolha in ["3", "criativo"]:
                    try:
                        self._run_creative_exercise(exercicios[2])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio criativo interrompido. Voltando ao menu principal...")
                        return
                elif escolha in ["help", "ajuda", "h", "?"]:
                    self._show_help()
                else:
                    self.print_warning("‚ùå Op√ß√£o inv√°lida! Digite 1, 2, 3, 0 ou 'help' para ajuda.")

            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Opera√ß√£o cancelada pelo usu√°rio. Voltando ao menu principal...")
                return

    def _show_help(self) -> None:
        """Mostra ajuda sobre as op√ß√µes dispon√≠veis"""
        self.print_section("AJUDA - SE√á√ÉO DE PR√ÅTICA", "‚ùì", "info")
        help_text = [
            "üìù OP√á√ÉO 1 - Quiz: Teste seus conhecimentos sobre OOP b√°sico",
            "üíª OP√á√ÉO 2 - Complete o C√≥digo: 3 exerc√≠cios progressivos de programa√ß√£o",
            "üé® OP√á√ÉO 3 - Exerc√≠cio Criativo: Sistema de biblioteca com classes",
            "üî¢ OP√á√ÉO 0 - Continue para o Mini Projeto final",
            "",
            "üí° DICAS:",
            "‚Ä¢ Voc√™ pode digitar o n√∫mero ou palavras como 'quiz', 'codigo'",
            "‚Ä¢ Digite 'help' a qualquer momento para ver esta ajuda",
            "‚Ä¢ Use Ctrl+C se quiser voltar ao menu principal",
            "‚Ä¢ Recomendamos fazer todas as atividades para aprender melhor!"
        ]

        for line in help_text:
            if line:
                self.print_colored(f"  {line}", "text")
            else:
                print()

        input("\nüî∏ Pressione ENTER para voltar ao menu...")

    def _run_quiz(self, quiz_data: dict) -> None:
        """Executa um quiz interativo sobre OOP"""
        self.print_section(quiz_data['title'], "üìù")
        score = 0
        total_questions = len(quiz_data['questions'])
        
        for i, q in enumerate(quiz_data['questions'], 1):
            print(f"\nüìù Pergunta {i} de {total_questions}:")
            correto = self.exercicio(
                q['question'],
                q['answer'],
                q['hint']
            )
            if correto:
                score += 1
        
        # Feedback detalhado baseado na pontua√ß√£o
        percentage = (score / total_questions) * 100
        
        self.print_success(f"\nüèÜ RESULTADO: {score} de {total_questions} perguntas corretas ({percentage:.0f}%)")
        
        if percentage == 100:
            self.print_success("üåü PERFEITO! Voc√™ dominou OOP b√°sico!")
        elif percentage >= 80:
            self.print_success("üéâ MUITO BEM! Voc√™ tem um bom entendimento!")
        elif percentage >= 60:
            self.print_colored("üòä BOM TRABALHO! Revise alguns conceitos.", "warning")
        else:
            self.print_colored("üìö Continue estudando! Releia o conte√∫do.", "info")
            
        self.pausar()

    def _run_code_completion(self, exercise_data: dict) -> None:
        """Executa exerc√≠cio de completar c√≥digo OOP"""
        self.print_section(exercise_data['title'], "üíª")
        
        for i, ex in enumerate(exercise_data['exercises'], 1):
            print(f"\nüéØ EXERC√çCIO {i} de {len(exercise_data['exercises'])}:")
            print(f"üìù {ex['instruction']}")
            self.print_code_section("C√≥digo para Completar", ex['starter'])
            
            print("\n‚úçÔ∏è Complete a linha que falta:")
            print(f"üí° Dica: Complete a linha marcada com '# Complete aqui'")
            user_input = input(">>> ").strip()
            
            if user_input:
                user_code = user_input
            else:
                user_code = ex['solution']
                self.print_tip("Usando solu√ß√£o padr√£o.")
            
            # Substitui a linha que cont√©m o coment√°rio
            lines = ex['starter'].split('\n')
            for j, line in enumerate(lines):
                if '# Complete aqui' in line:
                    # Mant√©m a indenta√ß√£o original
                    indent = len(line) - len(line.lstrip())
                    lines[j] = ' ' * indent + user_code
                    break
            complete_code = '\n'.join(lines)
            
            print("\nüöÄ Executando seu c√≥digo completo:")
            self.executar_codigo(complete_code)
            
            # Verifica se a resposta est√° correta
            if user_input and user_input.strip() == ex['solution'].strip():
                self.print_success("‚úÖ PERFEITO! Voc√™ acertou a solu√ß√£o!")
            else:
                print(f"\nüí° Solu√ß√£o correta: {ex['solution']}")
                self.print_colored("üìö N√£o se preocupe! O importante √© aprender.", "info")
            
            if i < len(exercise_data['exercises']):
                input("\nüî∏ Pressione ENTER para o pr√≥ximo exerc√≠cio...")
        
        self.pausar()

    def _run_creative_exercise(self, exercise_data: dict) -> None:
        """Executa exerc√≠cio criativo de sistema de biblioteca"""
        self.print_section(exercise_data['title'], "üé®")
        print(f"\n{exercise_data['instruction']}")
        
        # Sistema interativo de biblioteca
        self.print_colored("\nüìö VAMOS CRIAR SEU SISTEMA DE BIBLIOTECA!", "success")
        
        # Cria√ß√£o interativa das classes
        codigo_biblioteca = '''# üìö SISTEMA DE BIBLIOTECA - EXERC√çCIO CRIATIVO
# Criado pelo usu√°rio aplicando conceitos de OOP

class Livro:
    """Classe que representa um livro da biblioteca"""
    
    def __init__(self, titulo, autor, isbn, ano_publicacao):
        self.titulo = titulo
        self.autor = autor
        self.isbn = isbn
        self.ano_publicacao = ano_publicacao
        self.disponivel = True
        self.emprestado_para = None
        self.data_emprestimo = None
    
    def emprestar(self, usuario, data):
        """Empresta o livro para um usu√°rio"""
        if self.disponivel:
            self.disponivel = False
            self.emprestado_para = usuario
            self.data_emprestimo = data
            print(f"üìñ '{self.titulo}' emprestado para {usuario}")
            return True
        else:
            print(f"‚ùå '{self.titulo}' j√° est√° emprestado")
            return False
    
    def devolver(self):
        """Devolve o livro para a biblioteca"""
        if not self.disponivel:
            print(f"üìö '{self.titulo}' devolvido por {self.emprestado_para}")
            self.disponivel = True
            self.emprestado_para = None
            self.data_emprestimo = None
            return True
        else:
            print(f"‚ö†Ô∏è '{self.titulo}' j√° est√° dispon√≠vel")
            return False
    
    def info(self):
        """Retorna informa√ß√µes do livro"""
        status = "üìó Dispon√≠vel" if self.disponivel else f"üìï Emprestado para {self.emprestado_para}"
        return f"'{self.titulo}' por {self.autor} ({self.ano_publicacao}) - {status}"

class Usuario:
    """Classe que representa um usu√°rio da biblioteca"""
    
    def __init__(self, nome, email, tipo="comum"):
        self.nome = nome
        self.email = email
        self.tipo = tipo  # "comum" ou "premium"
        self.livros_emprestados = []
        self.historico_emprestimos = []
        
        # Limite baseado no tipo de usu√°rio
        self.limite_emprestimos = 5 if tipo == "premium" else 3
    
    def pode_emprestar(self):
        """Verifica se o usu√°rio pode pegar mais livros"""
        return len(self.livros_emprestados) < self.limite_emprestimos
    
    def emprestar_livro(self, livro):
        """Registra empr√©stimo de livro para o usu√°rio"""
        if self.pode_emprestar():
            self.livros_emprestados.append(livro)
            self.historico_emprestimos.append(livro.titulo)
            return True
        else:
            print(f"‚ùå {self.nome} atingiu o limite de {self.limite_emprestimos} livros")
            return False
    
    def devolver_livro(self, livro):
        """Remove livro da lista de emprestados"""
        if livro in self.livros_emprestados:
            self.livros_emprestados.remove(livro)
            return True
        return False
    
    def status(self):
        """Mostra status do usu√°rio"""
        print(f"\\nüë§ {self.nome} ({self.tipo})")
        print(f"üìß {self.email}")
        print(f"üìö Livros emprestados: {len(self.livros_emprestados)}/{self.limite_emprestimos}")
        
        if self.livros_emprestados:
            print("üìñ Livros atuais:")
            for livro in self.livros_emprestados:
                print(f"  ‚Ä¢ {livro.titulo}")

class Biblioteca:
    """Sistema principal da biblioteca"""
    
    def __init__(self, nome):
        self.nome = nome
        self.livros = []
        self.usuarios = []
        print(f"üèõÔ∏è Biblioteca '{nome}' criada!")
    
    def adicionar_livro(self, livro):
        """Adiciona livro ao acervo"""
        self.livros.append(livro)
        print(f"‚ûï Livro '{livro.titulo}' adicionado ao acervo")
    
    def cadastrar_usuario(self, usuario):
        """Cadastra novo usu√°rio"""
        self.usuarios.append(usuario)
        print(f"‚úÖ Usu√°rio {usuario.nome} cadastrado")
    
    def buscar_livro(self, titulo):
        """Busca livro por t√≠tulo"""
        for livro in self.livros:
            if titulo.lower() in livro.titulo.lower():
                return livro
        return None
    
    def buscar_usuario(self, nome):
        """Busca usu√°rio por nome"""
        for usuario in self.usuarios:
            if nome.lower() in usuario.nome.lower():
                return usuario
        return None
    
    def emprestar_livro(self, titulo_livro, nome_usuario):
        """Realiza empr√©stimo de livro"""
        livro = self.buscar_livro(titulo_livro)
        usuario = self.buscar_usuario(nome_usuario)
        
        if not livro:
            print(f"‚ùå Livro '{titulo_livro}' n√£o encontrado")
            return False
        
        if not usuario:
            print(f"‚ùå Usu√°rio '{nome_usuario}' n√£o encontrado")
            return False
        
        if not usuario.pode_emprestar():
            return False
        
        if livro.emprestar(usuario.nome, "hoje"):
            usuario.emprestar_livro(livro)
            return True
        
        return False
    
    def devolver_livro(self, titulo_livro, nome_usuario):
        """Realiza devolu√ß√£o de livro"""
        livro = self.buscar_livro(titulo_livro)
        usuario = self.buscar_usuario(nome_usuario)
        
        if livro and usuario:
            if livro.devolver():
                usuario.devolver_livro(livro)
                return True
        
        return False
    
    def relatorio_acervo(self):
        """Mostra relat√≥rio do acervo"""
        total_livros = len(self.livros)
        disponiveis = sum(1 for livro in self.livros if livro.disponivel)
        emprestados = total_livros - disponiveis
        
        print(f"\\nüìä RELAT√ìRIO {self.nome}")
        print(f"üìö Total de livros: {total_livros}")
        print(f"üìó Dispon√≠veis: {disponiveis}")
        print(f"üìï Emprestados: {emprestados}")
        print(f"üë• Usu√°rios cadastrados: {len(self.usuarios)}")

# DEMONSTRA√á√ÉO DO SISTEMA
print("=== CRIANDO SISTEMA DE BIBLIOTECA ===")

# Criando a biblioteca
minha_biblioteca = Biblioteca("Biblioteca Python")

# Adicionando livros
livros = [
    Livro("Clean Code", "Robert Martin", "978-0132350884", 2008),
    Livro("Python Fluente", "Luciano Ramalho", "978-8575224625", 2015),
    Livro("Design Patterns", "Gang of Four", "978-0201633612", 1994),
    Livro("Algoritmos", "Thomas Cormen", "978-8535236996", 2012)
]

for livro in livros:
    minha_biblioteca.adicionar_livro(livro)

# Cadastrando usu√°rios
usuarios = [
    Usuario("Ana Silva", "ana@email.com", "premium"),
    Usuario("Jo√£o Santos", "joao@email.com", "comum"),
    Usuario("Maria Costa", "maria@email.com", "comum")
]

for usuario in usuarios:
    minha_biblioteca.cadastrar_usuario(usuario)

print("\\n=== REALIZANDO EMPR√âSTIMOS ===")
# Empr√©stimos
minha_biblioteca.emprestar_livro("Clean Code", "Ana Silva")
minha_biblioteca.emprestar_livro("Python Fluente", "Jo√£o Santos")
minha_biblioteca.emprestar_livro("Design Patterns", "Ana Silva")

print("\\n=== STATUS DOS USU√ÅRIOS ===")
# Status dos usu√°rios
for usuario in usuarios:
    usuario.status()

print("\\n=== INFORMA√á√ïES DOS LIVROS ===")
# Info dos livros
for livro in livros:
    print(livro.info())

print("\\n=== DEVOLVENDO LIVRO ===")
# Devolu√ß√£o
minha_biblioteca.devolver_livro("Clean Code", "Ana Silva")

# Relat√≥rio final
minha_biblioteca.relatorio_acervo()

print("\\nüéØ CONCEITOS OOP APLICADOS:")
print("‚úÖ Classes com responsabilidades claras")
print("‚úÖ Encapsulamento de dados")
print("‚úÖ M√©todos p√∫blicos bem definidos")
print("‚úÖ Intera√ß√£o entre objetos")
print("‚úÖ Estado dos objetos controlado")'''
        
        self.exemplo(codigo_biblioteca)
        self.executar_codigo(codigo_biblioteca)
        
        self.print_success("\nüèÜ PARAB√âNS! Voc√™ criou um sistema completo usando OOP!")
        self.pausar()
    
    def _mini_projeto_sistema_loja(self) -> None:
        """Mini Projeto - M√≥dulo 18: Sistema de E-commerce com OOP"""

        # === CABE√áALHO IMPACTANTE ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üéØ MINI PROJETO: SISTEMA DE E-COMMERCE")
        else:
            print("\n" + "="*50)
            print("üéØ MINI PROJETO: SISTEMA DE E-COMMERCE")
            print("="*50)

        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_success("üéâ Vamos criar um sistema de loja online completo aplicando todos os conceitos de OOP!")

        self.print_concept(
            "Sistema de E-commerce",
            "Um sistema completo de vendas online com produtos, clientes, carrinho de compras e pedidos. Usando classes, heran√ßa, encapsulamento e todas as melhores pr√°ticas de OOP."
        )

        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nEste tipo de sistema √© usado por:", "text")
        usos_praticos = [
            "üõí Amazon, Mercado Livre, Shopee - marketplaces gigantes",
            "üëï Lojas de roupas online - Zara, C&A, Renner",
            "üì± Apple Store, Google Play - lojas de apps",
            "üçï iFood, Uber Eats - delivery de comida",
            "üè™ Pequenos com√©rcios locais com loja virtual"
        ]
        for uso in usos_praticos:
            self.print_colored(f"‚Ä¢ {uso}", "accent")

        input("\nüî∏ Pressione ENTER para come√ßar o desenvolvimento...")

        # === DESENVOLVIMENTO PASSO A PASSO ===

        # PASSO 1: Planejamento das classes
        self.print_section("PASSO 1: Planejando as Classes", "üìù", "info")
        self.print_tip("Primeiro vamos definir que classes precisamos e suas responsabilidades")

        try:
            print("üìã Classes necess√°rias:")
            print("‚Ä¢ üõçÔ∏è Produto - representa itens da loja")
            print("‚Ä¢ üë§ Cliente - dados e hist√≥rico de clientes")
            print("‚Ä¢ üõí CarrinhoCompras - itens selecionados para compra")
            print("‚Ä¢ üì¶ Pedido - compra finalizada")
            print("‚Ä¢ üè™ Loja - sistema principal que gerencia tudo")
            
            input("\n‚è≥ Pressione ENTER para come√ßar a implementa√ß√£o...")

        except KeyboardInterrupt:
            self.print_warning("Projeto cancelado pelo usu√°rio")
            return

        # PASSO 2: Implementa√ß√£o
        self.print_section("PASSO 2: Implementando o Sistema", "‚öôÔ∏è", "success")
        self.print_colored("Agora vamos criar cada classe com todos os recursos necess√°rios:", "text")

        # PASSO 3: C√≥digo final
        self.print_section("PASSO 3: Sistema Completo", "üé¨", "warning")

        # === C√ìDIGO FINAL GERADO ===
        self.print_colored("Aqui est√° o c√≥digo completo do seu e-commerce:", "text")

        codigo_final = '''# üõí SISTEMA DE E-COMMERCE COMPLETO
# Mini Projeto - M√≥dulo 18: OOP B√°sico

from datetime import datetime
from typing import List, Dict, Optional
import json

class Produto:
    """Classe que representa um produto da loja"""
    
    def __init__(self, id_produto: int, nome: str, preco: float, 
                 categoria: str, estoque: int = 0, descricao: str = ""):
        """Inicializa um produto"""
        self.id = id_produto
        self.nome = nome
        self.preco = preco
        self.categoria = categoria
        self.estoque = estoque
        self.descricao = descricao
        self.avaliacoes = []
        self.total_vendas = 0
        self.ativo = True
        
        print(f"‚úÖ Produto '{nome}' cadastrado - R$ {preco:.2f}")
    
    def adicionar_estoque(self, quantidade: int) -> None:
        """Adiciona produtos ao estoque"""
        if quantidade > 0:
            self.estoque += quantidade
            print(f"üì¶ {quantidade} unidades adicionadas. Estoque: {self.estoque}")
    
    def remover_estoque(self, quantidade: int) -> bool:
        """Remove produtos do estoque (para vendas)"""
        if quantidade <= self.estoque:
            self.estoque -= quantidade
            self.total_vendas += quantidade
            return True
        return False
    
    def adicionar_avaliacao(self, nota: int, comentario: str = "") -> None:
        """Adiciona avalia√ß√£o do produto"""
        if 1 <= nota <= 5:
            avaliacao = {
                'nota': nota,
                'comentario': comentario,
                'data': datetime.now().strftime("%d/%m/%Y")
            }
            self.avaliacoes.append(avaliacao)
            print(f"‚≠ê Avalia√ß√£o {nota}/5 adicionada para '{self.nome}'")
    
    def media_avaliacoes(self) -> float:
        """Calcula m√©dia das avalia√ß√µes"""
        if not self.avaliacoes:
            return 0.0
        return sum(av['nota'] for av in self.avaliacoes) / len(self.avaliacoes)
    
    def aplicar_desconto(self, percentual: float) -> None:
        """Aplica desconto no produto"""
        if 0 < percentual <= 100:
            desconto = self.preco * (percentual / 100)
            self.preco -= desconto
            print(f"üè∑Ô∏è Desconto de {percentual}% aplicado! Novo pre√ßo: R$ {self.preco:.2f}")
    
    def info_completa(self) -> str:
        """Retorna informa√ß√µes completas do produto"""
        media = self.media_avaliacoes()
        status = "üü¢ Dispon√≠vel" if self.estoque > 0 else "üî¥ Fora de estoque"
        
        return f"""
üõçÔ∏è {self.nome} (ID: {self.id})
üí∞ Pre√ßo: R$ {self.preco:.2f}
üìÇ Categoria: {self.categoria}
üì¶ Estoque: {self.estoque} unidades
‚≠ê Avalia√ß√£o: {media:.1f}/5 ({len(self.avaliacoes)} avalia√ß√µes)
üéØ Total de vendas: {self.total_vendas}
üìù {self.descricao}
{status}"""
    
    def __str__(self) -> str:
        return f"{self.nome} - R$ {self.preco:.2f}"

class Cliente:
    """Classe que representa um cliente da loja"""
    
    def __init__(self, nome: str, email: str, telefone: str = "", endereco: str = ""):
        """Inicializa um cliente"""
        self.id = id(self) % 100000  # ID √∫nico simples
        self.nome = nome.title()
        self.email = email.lower()
        self.telefone = telefone
        self.endereco = endereco
        self.data_cadastro = datetime.now().strftime("%d/%m/%Y")
        
        # Hist√≥rico e prefer√™ncias
        self.historico_pedidos = []
        self.total_gasto = 0.0
        self.categoria_favorita = ""
        self.ativo = True
        
        # Classifica√ß√£o do cliente baseada em gastos
        self.tipo_cliente = "Bronze"  # Bronze, Prata, Ouro, Diamante
        
        print(f"üë§ Cliente {nome} cadastrado com sucesso!")
    
    def atualizar_dados(self, telefone: str = None, endereco: str = None) -> None:
        """Atualiza dados do cliente"""
        if telefone:
            self.telefone = telefone
            print(f"üìû Telefone atualizado")
        
        if endereco:
            self.endereco = endereco
            print(f"üè† Endere√ßo atualizado")
    
    def adicionar_pedido(self, pedido) -> None:
        """Adiciona pedido ao hist√≥rico do cliente"""
        self.historico_pedidos.append(pedido)
        self.total_gasto += pedido.valor_total
        self._atualizar_classificacao()
    
    def _atualizar_classificacao(self) -> None:
        """Atualiza classifica√ß√£o do cliente baseada nos gastos"""
        tipo_anterior = self.tipo_cliente
        
        if self.total_gasto >= 10000:
            self.tipo_cliente = "Diamante"
        elif self.total_gasto >= 5000:
            self.tipo_cliente = "Ouro"
        elif self.total_gasto >= 2000:
            self.tipo_cliente = "Prata"
        else:
            self.tipo_cliente = "Bronze"
        
        if tipo_anterior != self.tipo_cliente:
            print(f"üéâ {self.nome} foi promovido para {self.tipo_cliente}!")
    
    def desconto_fidelidade(self) -> float:
        """Retorna desconto baseado na fidelidade"""
        descontos = {
            "Bronze": 0,
            "Prata": 5,
            "Ouro": 10,
            "Diamante": 15
        }
        return descontos.get(self.tipo_cliente, 0)
    
    def perfil_completo(self) -> str:
        """Retorna perfil completo do cliente"""
        return f"""
üë§ {self.nome} (ID: {self.id}) - {self.tipo_cliente}
üìß {self.email}
üìû {self.telefone}
üè† {self.endereco}
üìÖ Cliente desde: {self.data_cadastro}
üí∞ Total gasto: R$ {self.total_gasto:.2f}
üì¶ Pedidos realizados: {len(self.historico_pedidos)}
üéÅ Desconto fidelidade: {self.desconto_fidelidade()}%"""

class CarrinhoCompras:
    """Classe que representa um carrinho de compras"""
    
    def __init__(self, cliente: Cliente):
        """Inicializa carrinho para um cliente"""
        self.cliente = cliente
        self.itens = {}  # {produto_id: {'produto': Produto, 'quantidade': int}}
        self.data_criacao = datetime.now()
        
        print(f"üõí Carrinho criado para {cliente.nome}")
    
    def adicionar_item(self, produto: Produto, quantidade: int = 1) -> bool:
        """Adiciona item ao carrinho"""
        if not produto.ativo:
            print(f"‚ùå Produto '{produto.nome}' n√£o est√° dispon√≠vel")
            return False
        
        if quantidade > produto.estoque:
            print(f"‚ùå Estoque insuficiente! Dispon√≠vel: {produto.estoque}")
            return False
        
        if produto.id in self.itens:
            # Produto j√° est√° no carrinho, aumenta quantidade
            nova_quantidade = self.itens[produto.id]['quantidade'] + quantidade
            if nova_quantidade <= produto.estoque:
                self.itens[produto.id]['quantidade'] = nova_quantidade
                print(f"‚ûï Quantidade atualizada: {nova_quantidade}x {produto.nome}")
            else:
                print(f"‚ùå Quantidade total excederia o estoque!")
                return False
        else:
            # Novo produto no carrinho
            self.itens[produto.id] = {
                'produto': produto,
                'quantidade': quantidade
            }
            print(f"üõí {quantidade}x {produto.nome} adicionado ao carrinho")
        
        return True
    
    def remover_item(self, produto_id: int) -> bool:
        """Remove item completamente do carrinho"""
        if produto_id in self.itens:
            produto_nome = self.itens[produto_id]['produto'].nome
            del self.itens[produto_id]
            print(f"üóëÔ∏è {produto_nome} removido do carrinho")
            return True
        else:
            print("‚ùå Item n√£o encontrado no carrinho")
            return False
    
    def alterar_quantidade(self, produto_id: int, nova_quantidade: int) -> bool:
        """Altera quantidade de um item no carrinho"""
        if produto_id not in self.itens:
            print("‚ùå Item n√£o encontrado no carrinho")
            return False
        
        produto = self.itens[produto_id]['produto']
        
        if nova_quantidade <= 0:
            return self.remover_item(produto_id)
        
        if nova_quantidade > produto.estoque:
            print(f"‚ùå Estoque insuficiente! Dispon√≠vel: {produto.estoque}")
            return False
        
        self.itens[produto_id]['quantidade'] = nova_quantidade
        print(f"‚úÖ Quantidade alterada: {nova_quantidade}x {produto.nome}")
        return True
    
    def calcular_subtotal(self) -> float:
        """Calcula subtotal do carrinho"""
        subtotal = 0.0
        for item in self.itens.values():
            subtotal += item['produto'].preco * item['quantidade']
        return subtotal
    
    def aplicar_desconto_fidelidade(self, subtotal: float) -> tuple:
        """Aplica desconto de fidelidade"""
        desconto_percent = self.cliente.desconto_fidelidade()
        desconto_valor = subtotal * (desconto_percent / 100)
        return desconto_valor, desconto_percent
    
    def calcular_total(self) -> Dict:
        """Calcula valores totais do carrinho"""
        subtotal = self.calcular_subtotal()
        desconto_valor, desconto_percent = self.aplicar_desconto_fidelidade(subtotal)
        
        # Frete (simulado)
        frete = 15.0 if subtotal < 100 else 0.0
        
        total = subtotal - desconto_valor + frete
        
        return {
            'subtotal': subtotal,
            'desconto_percent': desconto_percent,
            'desconto_valor': desconto_valor,
            'frete': frete,
            'total': total
        }
    
    def mostrar_carrinho(self) -> None:
        """Exibe conte√∫do do carrinho"""
        if not self.itens:
            print("üõí Carrinho vazio")
            return
        
        print(f"\\nüõí CARRINHO DE {self.cliente.nome}")
        print("-" * 50)
        
        for item in self.itens.values():
            produto = item['produto']
            quantidade = item['quantidade']
            subtotal_item = produto.preco * quantidade
            
            print(f"{quantidade}x {produto.nome}")
            print(f"   R$ {produto.preco:.2f} cada = R$ {subtotal_item:.2f}")
        
        valores = self.calcular_total()
        
        print("-" * 50)
        print(f"Subtotal: R$ {valores['subtotal']:.2f}")
        
        if valores['desconto_percent'] > 0:
            print(f"Desconto ({valores['desconto_percent']}%): -R$ {valores['desconto_valor']:.2f}")
        
        print(f"Frete: R$ {valores['frete']:.2f}")
        print(f"TOTAL: R$ {valores['total']:.2f}")
    
    def limpar_carrinho(self) -> None:
        """Limpa todos os itens do carrinho"""
        self.itens.clear()
        print("üóëÔ∏è Carrinho limpo")

class Pedido:
    """Classe que representa um pedido finalizado"""
    
    def __init__(self, cliente: Cliente, carrinho: CarrinhoCompras):
        """Cria pedido a partir do carrinho"""
        self.id = id(self) % 100000
        self.cliente = cliente
        self.data_pedido = datetime.now()
        self.status = "Confirmado"
        
        # Copia itens do carrinho
        self.itens = []
        for item in carrinho.itens.values():
            produto = item['produto']
            quantidade = item['quantidade']
            
            # Remove do estoque
            produto.remover_estoque(quantidade)
            
            self.itens.append({
                'produto_nome': produto.nome,
                'produto_id': produto.id,
                'preco_unitario': produto.preco,
                'quantidade': quantidade,
                'subtotal': produto.preco * quantidade
            })
        
        # Calcula valores
        valores = carrinho.calcular_total()
        self.subtotal = valores['subtotal']
        self.desconto = valores['desconto_valor']
        self.frete = valores['frete']
        self.valor_total = valores['total']
        
        # Adiciona ao hist√≥rico do cliente
        cliente.adicionar_pedido(self)
        
        print(f"‚úÖ Pedido #{self.id} criado com sucesso!")
        print(f"üí∞ Valor total: R$ {self.valor_total:.2f}")
    
    def atualizar_status(self, novo_status: str) -> None:
        """Atualiza status do pedido"""
        status_validos = ["Confirmado", "Preparando", "Enviado", "Entregue", "Cancelado"]
        
        if novo_status in status_validos:
            status_anterior = self.status
            self.status = novo_status
            print(f"üìã Pedido #{self.id}: {status_anterior} ‚Üí {novo_status}")
        else:
            print(f"‚ùå Status '{novo_status}' inv√°lido")
    
    def resumo_pedido(self) -> str:
        """Retorna resumo do pedido"""
        resumo = f"""
üì¶ PEDIDO #{self.id}
üë§ Cliente: {self.cliente.nome}
üìÖ Data: {self.data_pedido.strftime('%d/%m/%Y %H:%M')}
üìã Status: {self.status}

ITENS:"""
        
        for item in self.itens:
            resumo += f"\\n‚Ä¢ {item['quantidade']}x {item['produto_nome']} - R$ {item['subtotal']:.2f}"
        
        resumo += f"""

üí∞ VALORES:
Subtotal: R$ {self.subtotal:.2f}
Desconto: R$ {self.desconto:.2f}
Frete: R$ {self.frete:.2f}
TOTAL: R$ {self.valor_total:.2f}"""
        
        return resumo

class Loja:
    """Sistema principal da loja virtual"""
    
    def __init__(self, nome: str):
        """Inicializa a loja"""
        self.nome = nome
        self.produtos = {}  # {id: Produto}
        self.clientes = {}  # {id: Cliente}
        self.pedidos = []
        self.proximo_produto_id = 1
        
        # Estat√≠sticas
        self.total_vendas = 0.0
        self.total_pedidos = 0
        
        print(f"üè™ Loja '{nome}' criada com sucesso!")
    
    def cadastrar_produto(self, nome: str, preco: float, categoria: str, 
                         estoque: int = 0, descricao: str = "") -> Produto:
        """Cadastra novo produto"""
        produto = Produto(self.proximo_produto_id, nome, preco, categoria, estoque, descricao)
        self.produtos[self.proximo_produto_id] = produto
        self.proximo_produto_id += 1
        return produto
    
    def cadastrar_cliente(self, nome: str, email: str, telefone: str = "", endereco: str = "") -> Cliente:
        """Cadastra novo cliente"""
        cliente = Cliente(nome, email, telefone, endereco)
        self.clientes[cliente.id] = cliente
        return cliente
    
    def buscar_produto(self, termo: str) -> List[Produto]:
        """Busca produtos por nome ou categoria"""
        resultados = []
        termo_lower = termo.lower()
        
        for produto in self.produtos.values():
            if (termo_lower in produto.nome.lower() or 
                termo_lower in produto.categoria.lower() or
                termo_lower in produto.descricao.lower()):
                resultados.append(produto)
        
        return resultados
    
    def listar_produtos_categoria(self, categoria: str) -> List[Produto]:
        """Lista produtos de uma categoria"""
        return [p for p in self.produtos.values() if p.categoria.lower() == categoria.lower()]
    
    def produtos_mais_vendidos(self, limite: int = 5) -> List[Produto]:
        """Retorna produtos mais vendidos"""
        produtos_ordenados = sorted(
            self.produtos.values(),
            key=lambda p: p.total_vendas,
            reverse=True
        )
        return produtos_ordenados[:limite]
    
    def processar_pedido(self, carrinho: CarrinhoCompras) -> Optional[Pedido]:
        """Processa carrinho e cria pedido"""
        if not carrinho.itens:
            print("‚ùå Carrinho vazio!")
            return None
        
        # Verifica disponibilidade de todos os itens
        for item in carrinho.itens.values():
            produto = item['produto']
            quantidade = item['quantidade']
            
            if quantidade > produto.estoque:
                print(f"‚ùå Estoque insuficiente para {produto.nome}")
                return None
        
        # Cria pedido
        pedido = Pedido(carrinho.cliente, carrinho)
        self.pedidos.append(pedido)
        
        # Atualiza estat√≠sticas
        self.total_vendas += pedido.valor_total
        self.total_pedidos += 1
        
        # Limpa carrinho
        carrinho.limpar_carrinho()
        
        return pedido
    
    def relatorio_vendas(self) -> str:
        """Gera relat√≥rio de vendas"""
        if not self.pedidos:
            return "üì≠ Nenhuma venda realizada ainda"
        
        # Estat√≠sticas b√°sicas
        ticket_medio = self.total_vendas / self.total_pedidos
        
        # Produtos mais vendidos
        top_produtos = self.produtos_mais_vendidos(3)
        
        # Clientes que mais compraram
        clientes_ordenados = sorted(
            self.clientes.values(),
            key=lambda c: c.total_gasto,
            reverse=True
        )[:3]
        
        relatorio = f"""
üìä RELAT√ìRIO DE VENDAS - {self.nome}
{'='*50}

üí∞ FINANCEIRO:
‚Ä¢ Total de vendas: R$ {self.total_vendas:.2f}
‚Ä¢ Total de pedidos: {self.total_pedidos}
‚Ä¢ Ticket m√©dio: R$ {ticket_medio:.2f}

üèÜ TOP 3 PRODUTOS MAIS VENDIDOS:"""
        
        for i, produto in enumerate(top_produtos, 1):
            relatorio += f"\\n{i}. {produto.nome} - {produto.total_vendas} vendas"
        
        relatorio += "\\n\\nüëë TOP 3 CLIENTES:"
        
        for i, cliente in enumerate(clientes_ordenados, 1):
            relatorio += f"\\n{i}. {cliente.nome} - R$ {cliente.total_gasto:.2f}"
        
        relatorio += f"""

üìà PRODUTOS CADASTRADOS: {len(self.produtos)}
üë• CLIENTES CADASTRADOS: {len(self.clientes)}"""
        
        return relatorio

# DEMONSTRA√á√ÉO COMPLETA DO SISTEMA

print("=== CRIANDO LOJA VIRTUAL ===")

# Criando a loja
minha_loja = Loja("TechStore Python")

print("\\n=== CADASTRANDO PRODUTOS ===")
# Cadastrando produtos
notebook = minha_loja.cadastrar_produto("Notebook Dell", 2500.00, "Eletr√¥nicos", 10, "Notebook para programa√ß√£o")
mouse = minha_loja.cadastrar_produto("Mouse Gamer", 150.00, "Eletr√¥nicos", 25, "Mouse para jogos")
teclado = minha_loja.cadastrar_produto("Teclado Mec√¢nico", 300.00, "Eletr√¥nicos", 15, "Teclado para programadores")
monitor = minha_loja.cadastrar_produto("Monitor 24\"", 800.00, "Eletr√¥nicos", 8, "Monitor Full HD")

print("\\n=== CADASTRANDO CLIENTES ===")
# Cadastrando clientes
cliente1 = minha_loja.cadastrar_cliente("Ana Silva", "ana@email.com", "(11) 99999-1111", "Rua A, 123")
cliente2 = minha_loja.cadastrar_cliente("Jo√£o Santos", "joao@email.com", "(11) 88888-2222", "Rua B, 456")

print("\\n=== CLIENTE FAZENDO COMPRAS ===")
# Cliente 1 fazendo compras
carrinho1 = CarrinhoCompras(cliente1)
carrinho1.adicionar_item(notebook, 1)
carrinho1.adicionar_item(mouse, 2)
carrinho1.adicionar_item(teclado, 1)

# Mostra carrinho
carrinho1.mostrar_carrinho()

# Processa pedido
print("\\n=== FINALIZANDO PEDIDO ===")
pedido1 = minha_loja.processar_pedido(carrinho1)

print("\\n=== CLIENTE 2 FAZENDO COMPRAS ===")
# Cliente 2 fazendo compras
carrinho2 = CarrinhoCompras(cliente2)
carrinho2.adicionar_item(monitor, 1)
carrinho2.adicionar_item(mouse, 1)

# Finalizando
pedido2 = minha_loja.processar_pedido(carrinho2)

print("\\n=== ATUALIZANDO STATUS DOS PEDIDOS ===")
# Atualizando status
pedido1.atualizar_status("Enviado")
pedido2.atualizar_status("Entregue")

print("\\n=== AVALIA√á√ïES DE PRODUTOS ===")
# Adicionando avalia√ß√µes
notebook.adicionar_avaliacao(5, "Excelente para programar!")
mouse.adicionar_avaliacao(4, "Muito bom, recomendo")
mouse.adicionar_avaliacao(5, "Perfeito para jogos")

print("\\n=== INFORMA√á√ïES DOS PRODUTOS ===")
# Mostrando info dos produtos
print(notebook.info_completa())
print(mouse.info_completa())

print("\\n=== PERFIL DOS CLIENTES ===")
# Perfil dos clientes
print(cliente1.perfil_completo())
print(cliente2.perfil_completo())

print("\\n=== BUSCA DE PRODUTOS ===")
# Busca
resultados = minha_loja.buscar_produto("mouse")
print(f"Resultados para 'mouse': {len(resultados)} produtos encontrados")
for produto in resultados:
    print(f"‚Ä¢ {produto}")

# Relat√≥rio final
print(minha_loja.relatorio_vendas())

print("\\n‚úÖ SISTEMA DE E-COMMERCE FUNCIONANDO PERFEITAMENTE!")
print("\\nüéØ CONCEITOS OOP APLICADOS:")
print("  ‚Ä¢ 5 classes bem estruturadas com responsabilidades claras")
print("  ‚Ä¢ Encapsulamento - dados protegidos e m√©todos controlados")
print("  ‚Ä¢ Composi√ß√£o - objetos cont√™m outros objetos")
print("  ‚Ä¢ Abstra√ß√£o - interfaces simples para opera√ß√µes complexas")
print("  ‚Ä¢ Heran√ßa impl√≠cita - todas as classes herdam de object")
print("  ‚Ä¢ Polimorfismo - m√©todos como __str__ customizados")
print("  ‚Ä¢ Estado controlado - objetos mant√™m consist√™ncia")
print("  ‚Ä¢ Intera√ß√£o entre objetos - sistema integrado")'''

        self.exemplo(codigo_final)
        self.executar_codigo(codigo_final)

        # === MENSAGEM DE CONQUISTA ===
        self.print_success("üéâ PARAB√âNS! Voc√™ criou um sistema de e-commerce completo usando OOP!")

        # === APLICA√á√ïES AVAN√áADAS ===
        self.print_section("PR√ìXIMOS PASSOS", "üöÄ", "info")
        proximos_passos = [
            "üîê Adicionar sistema de autentica√ß√£o e seguran√ßa",
            "üí≥ Integrar gateways de pagamento (PagSeguro, Stripe)",
            "üìä Criar dashboard administrativo com gr√°ficos",
            "üì± Desenvolver API REST para aplicativo mobile",
            "üé® Criar interface web com Flask/Django",
            "üìà Implementar sistema de recomenda√ß√µes",
            "üîç Adicionar busca avan√ßada com filtros",
            "üìß Sistema de notifica√ß√µes por email",
            "üè™ Multi-loja e marketplace",
            "üì¶ Integra√ß√£o com sistemas de log√≠stica"
        ]
        for passo in proximos_passos:
            self.print_colored(f"‚Ä¢ {passo}", "primary")

        self.print_success("\nüèÜ CONQUISTA DESBLOQUEADA: Mestre em OOP B√°sico!")

        # === REGISTRO DE CONCLUS√ÉO ===
        self.complete_mini_project("Sistema de E-commerce com OOP")

        self.pausar()


# Para teste standalone
if __name__ == "__main__":
    module = Modulo18OopBasico()
    print("Teste do m√≥dulo 18 - vers√£o standalone")
    module._oop_basico()