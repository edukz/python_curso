#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
M√≥dulo 14: M√≥dulos e Pacotes
Aprenda a organizar e reutilizar c√≥digo como um profissional
"""

from ..shared.base_module import BaseModule


class Modulo14ModulosPacotes(BaseModule):
    """M√≥dulo 14: Dominando M√≥dulos e Pacotes"""
    
    def __init__(self):
        super().__init__("modulo_14", "M√≥dulos e Pacotes")
        self.has_mini_project = True
        self.mini_project_points = 85
    
    def execute(self) -> None:
        """Executa o m√≥dulo M√≥dulos e Pacotes"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return
        
        try:
            self._modulos_pacotes_interativo()
        except Exception as e:
            self.error_handler(lambda: None)
    
    def _modulos_pacotes_interativo(self) -> None:
        """Conte√∫do principal do m√≥dulo M√≥dulos e Pacotes"""
        # === CABE√áALHO VISUAL ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üì¶ M√ìDULO 14: DOMINANDO M√ìDULOS E PACOTES")
        else:
            print("\n" + "="*50)
            print("üì¶ M√ìDULO 14: DOMINANDO M√ìDULOS E PACOTES")
            print("="*50)
        
        # === MENSAGENS MOTIVACIONAIS ===
        self.print_success("üéâ Vamos aprender a organizar c√≥digo como os profissionais do Vale do Sil√≠cio!")
        self.print_tip("Este m√≥dulo est√° dividido em se√ß√µes interativas. Voc√™ controla o ritmo!")
        
        # === FLUXO PRINCIPAL COM TRATAMENTO DE CTRL+C ===
        
        # 1. Sistema de navega√ß√£o por se√ß√µes
        try:
            self._navegacao_secoes_interativas()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Navega√ß√£o interrompida pelo usu√°rio. Voltando ao menu principal...")
            return
        
        # 2. Se√ß√£o de Pr√°tica Interativa
        try:
            self._secao_pratica_interativa()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è M√≥dulo interrompido pelo usu√°rio. Voltando ao menu principal...")
            return
        
        # 3. Mini Projeto Pr√°tico
        try:
            self._mini_projeto_sistema_bibliotecas()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Mini projeto interrompido. Voltando ao menu principal...")
            return
        
        # 4. Marcar m√≥dulo como completo
        self.complete_module()
    
    def _navegacao_secoes_interativas(self) -> None:
        """Sistema de navega√ß√£o por se√ß√µes do m√≥dulo"""
        
        # === DEFINI√á√ÉO DAS SE√á√ïES ===
        secoes = [
            {
                'id': 'secao_conceito_modulos',
                'titulo': 'üéØ O que s√£o m√≥dulos e por que usar?',
                'descricao': 'Entenda o poder da modulariza√ß√£o',
                'funcao': self._secao_conceito_modulos
            },
            {
                'id': 'secao_importacao_basica',
                'titulo': '‚öôÔ∏è Como importar e usar m√≥dulos?',
                'descricao': 'Domine diferentes formas de importa√ß√£o',
                'funcao': self._secao_importacao_basica
            },
            {
                'id': 'secao_criando_modulos',
                'titulo': 'üîß Criando seus pr√≥prios m√≥dulos',
                'descricao': 'Organize seu c√≥digo profissionalmente',
                'funcao': self._secao_criando_modulos
            },
            {
                'id': 'secao_bibliotecas_populares',
                'titulo': 'üìö Bibliotecas essenciais do Python',
                'descricao': 'Conhe√ßa as ferramentas mais usadas',
                'funcao': self._secao_bibliotecas_populares
            },
            {
                'id': 'secao_pip_instalacao',
                'titulo': 'üõ†Ô∏è Instalando e gerenciando pacotes',
                'descricao': 'Pip, ambientes virtuais e boas pr√°ticas',
                'funcao': self._secao_pip_instalacao
            },
            {
                'id': 'secao_estrutura_projetos',
                'titulo': 'üìÅ Estrutura profissional de projetos',
                'descricao': 'Como organizar projetos grandes',
                'funcao': self._secao_estrutura_projetos
            },
            {
                'id': 'secao_curiosidades',
                'titulo': 'üí´ Curiosidades sobre o ecossistema Python',
                'descricao': 'Fatos interessantes e motivacionais',
                'funcao': self._secao_curiosidades
            }
        ]
        
        secoes_visitadas = set()
        
        # === LOOP PRINCIPAL DE NAVEGA√á√ÉO ===
        while True:
            # Limpa tela e mostra cabe√ßalho
            self.ui.clear_screen() if self.ui else print("\n" + "="*50)
            self.print_section("NAVEGA√á√ÉO DO M√ìDULO", "üìö", "accent")
            self.print_colored("Escolha uma se√ß√£o para estudar:", "text")
            
            # Lista todas as se√ß√µes com status
            print()
            for i, secao in enumerate(secoes, 1):
                status = "‚úÖ" if secao['id'] in secoes_visitadas else "üìñ"
                print(f"{status} {i}. {secao['titulo']}")
                self.print_colored(f"    {secao['descricao']}", "text")
                print()
            
            print("0. üéØ Continuar para os Exerc√≠cios Pr√°ticos")
            
            # Mostra progresso visual
            progresso = len(secoes_visitadas)
            total = len(secoes)
            self.print_colored(f"\nüìä Progresso: {progresso}/{total} se√ß√µes visitadas", "info")
            
            if progresso == total:
                self.print_success("üåü Voc√™ completou todas as se√ß√µes! Est√° pronto para praticar!")
            
            # Processa escolha do usu√°rio
            try:
                escolha = input(f"\nüëâ Escolha uma se√ß√£o (1-{len(secoes)}) ou 0 para continuar: ").strip()
                
                if escolha == "0":
                    # Verifica se visitou se√ß√µes suficientes
                    if progresso >= 3:  # Pelo menos 3 se√ß√µes visitadas
                        break
                    else:
                        self.print_warning("üìö Recomendamos visitar pelo menos 3 se√ß√µes antes de continuar!")
                        continuar = input("Quer continuar mesmo assim? (s/n): ").lower()
                        if continuar in ['s', 'sim', 'yes']:
                            break
                elif escolha.isdigit() and 1 <= int(escolha) <= len(secoes):
                    # Executa se√ß√£o escolhida
                    idx = int(escolha) - 1
                    secoes[idx]['funcao']()
                    secoes_visitadas.add(secoes[idx]['id'])
                else:
                    self.print_warning(f"‚ùå Op√ß√£o inv√°lida! Digite um n√∫mero de 1 a {len(secoes)} ou 0.")
            
            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Pulando para exerc√≠cios pr√°ticos...")
                break
            except Exception as e:
                self.print_warning(f"‚ùå Erro: {str(e)}. Tente novamente.")
    
    def _secao_conceito_modulos(self) -> None:
        """Se√ß√£o: O que s√£o m√≥dulos e por que usar?"""
        if self.ui:
            self.ui.clear_screen()
        
        # === CABE√áALHO ATRATIVO ===
        self.print_section("O QUE S√ÉO M√ìDULOS E POR QUE USAR?", "üéØ")
        
        # === DEFINI√á√ÉO DO CONCEITO ===
        self.print_concept(
            "M√≥dulo",
            "Um arquivo .py que cont√©m fun√ß√µes, classes e vari√°veis que podem ser reutilizadas em outros programas"
        )
        
        # === DICA RELACIONADA ===
        self.print_tip("M√≥dulos s√£o como 'caixas de ferramentas' - voc√™ pega s√≥ o que precisa!")
        
        # === ANALOGIA DO COTIDIANO ===
        self.print_colored("\nüè† ANALOGIA DO DIA A DIA:", "warning")
        self.print_colored("Imagine que voc√™ est√° montando um m√≥vel. Em vez de fazer cada parafuso do zero, voc√™ usa uma caixa de ferramentas pronta. M√≥dulos s√£o como essa caixa - c√≥digo pronto para usar!", "text")
        input("\nüî∏ Pressione ENTER para continuar...")
        
        # === EXPLICA√á√ÉO T√âCNICA GRADUAL ===
        self.print_colored("\nüîß COMO FUNCIONA NA PR√ÅTICA:", "info")
        passos_tecnicos = [
            "1. Voc√™ escreve fun√ß√µes √∫teis em um arquivo .py (ex: calculadora.py)",
            "2. Em outro programa, voc√™ 'importa' essas fun√ß√µes",
            "3. Agora pode usar as fun√ß√µes sem reescrever o c√≥digo",
            "4. Se precisar corrigir algo, muda s√≥ no arquivo original"
        ]
        
        for i, passo in enumerate(passos_tecnicos, 1):
            self.print_colored(passo, "text")
            if i < len(passos_tecnicos):
                input("   ‚è≥ Pressione ENTER para o pr√≥ximo passo...")
        
        # === EXEMPLO DE C√ìDIGO ===
        self.print_colored("\nüíª EXEMPLO PR√ÅTICO:", "success")
        codigo_exemplo = '''# M√≥dulos mais usados no Python
import math     # Fun√ß√µes matem√°ticas
import random   # N√∫meros aleat√≥rios
import datetime # Data e hora

print("=== DEMONSTRANDO M√ìDULOS ===")
print(f"üìê Raiz quadrada de 16: {math.sqrt(16)}")
print(f"üé≤ N√∫mero aleat√≥rio 1-10: {random.randint(1, 10)}")
print(f"üìÖ Data atual: {datetime.date.today()}")

# Cada m√≥dulo tem dezenas de fun√ß√µes prontas!'''
        self.exemplo(codigo_exemplo)
        
        # Executa o c√≥digo para mostrar resultado
        print("\nüöÄ Vamos ver funcionando:")
        self.executar_codigo(codigo_exemplo)
        
        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nüåç ONDE √â USADO NO MUNDO REAL:", "accent")
        aplicacoes = [
            "üè¢ Netflix usa m√≥dulos para separar login, streaming, recomenda√ß√µes",
            "üöó Tesla organiza c√≥digo em m√≥dulos: bateria, motor, navega√ß√£o",
            "üì± Instagram separa stories, feed, mensagens em m√≥dulos diferentes",
            "üéÆ Jogos dividem: gr√°ficos, √°udio, f√≠sica em m√≥dulos separados"
        ]
        for app in aplicacoes:
            self.print_colored(f"‚Ä¢ {app}", "primary")
        
        self.pausar()
    
    def _secao_importacao_basica(self) -> None:
        """Se√ß√£o: Como importar e usar m√≥dulos?"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("COMO IMPORTAR E USAR M√ìDULOS?", "‚öôÔ∏è", "success")
        
        exemplos = [
            {
                'titulo': 'IMPORTA√á√ÉO COMPLETA: import m√≥dulo',
                'descricao': 'Importa o m√≥dulo inteiro - precisa usar m√≥dulo.fun√ß√£o()',
                'codigo': '''import math
import random
import datetime

print("=== IMPORTA√á√ÉO COMPLETA ===")
print(f"üìê Pi: {math.pi}")
print(f"üìê Raiz de 25: {math.sqrt(25)}")
print(f"üé≤ N√∫mero aleat√≥rio: {random.randint(1, 100)}")
print(f"üìÖ Agora: {datetime.datetime.now().strftime('%H:%M:%S')}")

# Vantagem: Fica claro de onde vem cada fun√ß√£o
# Desvantagem: Nome fica longo''',
                'explicacao': 'Use quando quiser deixar claro a origem de cada fun√ß√£o'
            },
            {
                'titulo': 'IMPORTA√á√ÉO ESPEC√çFICA: from m√≥dulo import fun√ß√£o',
                'descricao': 'Importa s√≥ o que voc√™ precisa - usa direto a fun√ß√£o',
                'codigo': '''from math import pi, sqrt, sin, cos
from random import randint, choice, shuffle
from datetime import datetime, date

print("=== IMPORTA√á√ÉO ESPEC√çFICA ===")
print(f"üìê Pi sem 'math.': {pi}")
print(f"üìê Raiz sem 'math.': {sqrt(36)}")
print(f"üé≤ N√∫mero sem 'random.': {randint(1, 50)}")
print(f"üìÖ Data sem 'datetime.': {date.today()}")

# Vantagem: C√≥digo mais limpo
# Cuidado: Pode confundir de onde vem a fun√ß√£o''',
                'explicacao': 'Use quando voc√™ conhece bem o m√≥dulo e quer c√≥digo mais limpo'
            },
            {
                'titulo': 'APELIDOS: import m√≥dulo as apelido',
                'descricao': 'D√° um nome mais curto para m√≥dulos com nomes longos',
                'codigo': '''import datetime as dt
import random as rand

print("=== USANDO APELIDOS ===")
print(f"üìÖ Com apelido: {dt.date.today()}")
print(f"üé≤ Com apelido: {rand.randint(1, 10)}")

# Apelidos famosos da comunidade Python:
print("\\nüåü APELIDOS FAMOSOS:")
print("‚Ä¢ matplotlib.pyplot as plt (gr√°ficos)")
print("‚Ä¢ pandas as pd (an√°lise de dados)")
print("‚Ä¢ numpy as np (computa√ß√£o cient√≠fica)")
print("‚Ä¢ tensorflow as tf (machine learning)")''',
                'explicacao': 'Padr√£o da comunidade - todos usam os mesmos apelidos'
            }
        ]
        
        for i, exemplo in enumerate(exemplos, 1):
            self.print_colored(f"\n{exemplo['titulo']}", "warning")
            self.print_colored(f"üìù {exemplo['descricao']}", "text")
            
            self.exemplo(exemplo['codigo'])
            print(f"\nüöÄ Executando exemplo {i}:")
            self.executar_codigo(exemplo['codigo'])
            
            if exemplo['explicacao']:
                self.print_colored(f"\nüí° QUANDO USAR: {exemplo['explicacao']}", "info")
            
            if i < len(exemplos):
                input("\nüî∏ Pressione ENTER para o pr√≥ximo exemplo...")
        
        self.print_success("\nüéâ Agora voc√™ domina as 3 formas principais de importar!")
        self.pausar()
    
    def _secao_criando_modulos(self) -> None:
        """Se√ß√£o: Criando seus pr√≥prios m√≥dulos"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("CRIANDO SEUS PR√ìPRIOS M√ìDULOS", "üîß", "info")
        
        self.print_colored("Vamos criar um m√≥dulo de utilidades que voc√™ pode usar em seus projetos!", "text")
        
        codigo_modulo = '''# Este seria o conte√∫do do arquivo 'meu_modulo_util.py'

# === FUN√á√ïES MATEM√ÅTICAS ===
def calcular_imc(peso, altura):
    """Calcula o √çndice de Massa Corporal"""
    imc = peso / (altura ** 2)
    
    # Determina categoria
    if imc < 18.5:
        categoria = "Abaixo do peso"
    elif imc < 25:
        categoria = "Peso normal" 
    elif imc < 30:
        categoria = "Sobrepeso"
    else:
        categoria = "Obesidade"
    
    return round(imc, 1), categoria

def converter_temperatura(valor, origem, destino):
    """Converte temperaturas entre C, F e K"""
    # Converte tudo para Celsius primeiro
    if origem == "F":
        celsius = (valor - 32) * 5/9
    elif origem == "K":
        celsius = valor - 273.15
    else:
        celsius = valor
    
    # Converte para o destino
    if destino == "F":
        return round(celsius * 9/5 + 32, 1)
    elif destino == "K":
        return round(celsius + 273.15, 1)
    else:
        return round(celsius, 1)

# === FUN√á√ïES DE TEXTO ===
def gerar_senha(tamanho=8, incluir_simbolos=True):
    """Gera uma senha aleat√≥ria segura"""
    import random
    import string
    
    caracteres = string.ascii_letters + string.digits
    if incluir_simbolos:
        caracteres += "!@#$%&*"
    
    senha = ''.join(random.choice(caracteres) for _ in range(tamanho))
    return senha

def formatar_cpf(cpf):
    """Formata um CPF no padr√£o XXX.XXX.XXX-XX"""
    # Remove tudo que n√£o √© n√∫mero
    numeros = ''.join(filter(str.isdigit, cpf))
    
    if len(numeros) != 11:
        return "CPF inv√°lido"
    
    return f"{numeros[:3]}.{numeros[3:6]}.{numeros[6:9]}-{numeros[9:]}"

# === CONSTANTES DO M√ìDULO ===
VERSAO = "1.0.0"
AUTOR = "Seu Nome"
DATA_CRIACAO = "2024"

# === DEMONSTRA√á√ÉO DAS FUN√á√ïES ===
print("=== TESTANDO NOSSO M√ìDULO PERSONALIZADO ===")

# Teste IMC
imc, categoria = calcular_imc(70, 1.75)
print(f"üí™ IMC: {imc} - {categoria}")

# Teste convers√£o de temperatura
temp_f = converter_temperatura(25, "C", "F")
print(f"üå°Ô∏è 25¬∞C = {temp_f}¬∞F")

# Teste gera√ß√£o de senha
senha = gerar_senha(12)
print(f"üîê Senha gerada: {senha}")

# Teste formata√ß√£o de CPF
cpf_formatado = formatar_cpf("12345678901")
print(f"üìÑ CPF formatado: {cpf_formatado}")

print(f"\\nüìã M√≥dulo {AUTOR} v{VERSAO} ({DATA_CRIACAO})")
print("‚úÖ Todas as fun√ß√µes testadas com sucesso!")'''
        
        self.exemplo(codigo_modulo)
        print("\nüöÄ Vamos ver nosso m√≥dulo funcionando:")
        self.executar_codigo(codigo_modulo)
        
        # === COMO USAR EM OUTROS ARQUIVOS ===
        self.print_colored("\nüìÅ COMO USAR EM OUTROS ARQUIVOS:", "warning")
        codigo_uso = '''# Em outro arquivo .py, voc√™ usaria assim:

# Importa√ß√£o completa
import meu_modulo_util
resultado = meu_modulo_util.calcular_imc(80, 1.80)

# Importa√ß√£o espec√≠fica  
from meu_modulo_util import gerar_senha, formatar_cpf
senha = gerar_senha(16)
cpf = formatar_cpf("11122233344")

# Com apelido
import meu_modulo_util as util
temp = util.converter_temperatura(30, "C", "F")

print("üéØ Seu c√≥digo fica organizado e reutiliz√°vel!")'''
        
        self.exemplo(codigo_uso)
        
        self.print_colored("\nüí° VANTAGENS DOS M√ìDULOS PR√ìPRIOS:", "success")
        vantagens = [
            "‚ôªÔ∏è Reutiliza√ß√£o: Escreve uma vez, usa em v√°rios projetos",
            "üóÇÔ∏è Organiza√ß√£o: Cada tipo de fun√ß√£o no seu arquivo",
            "üêõ Manuten√ß√£o: Corrige em um lugar, funciona em todos",
            "üë• Colabora√ß√£o: Facilita trabalho em equipe",
            "üöÄ Velocidade: Desenvolve projetos mais r√°pido"
        ]
        for vantagem in vantagens:
            self.print_colored(f"‚Ä¢ {vantagem}", "primary")
        
        self.pausar()
    
    def _secao_bibliotecas_populares(self) -> None:
        """Se√ß√£o: Bibliotecas essenciais do Python"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("BIBLIOTECAS ESSENCIAIS DO PYTHON", "üìö", "accent")
        
        self.print_colored("O Python √© poderoso por sua comunidade! Conhe√ßa as bibliotecas mais usadas:", "text")
        
        codigo_bibliotecas = '''# === MAPA DAS BIBLIOTECAS PYTHON ===

bibliotecas = {
    "üèóÔ∏è J√° vem com Python (Biblioteca Padr√£o)": {
        "os": "Interagir com sistema operacional (arquivos, pastas)",
        "sys": "Configura√ß√µes do sistema Python",
        "json": "Trabalhar com dados JSON (APIs, configs)",
        "re": "Express√µes regulares (busca avan√ßada em texto)",
        "datetime": "Trabalhar com datas e hor√°rios",
        "random": "N√∫meros aleat√≥rios e escolhas",
        "math": "Fun√ß√µes matem√°ticas avan√ßadas",
        "urllib": "Fazer requisi√ß√µes web b√°sicas",
        "sqlite3": "Banco de dados SQLite integrado",
        "tkinter": "Interface gr√°fica b√°sica"
    },
    
    "üìä Ci√™ncia de Dados & IA": {
        "pandas": "Manipular planilhas e dados (Excel do Python)",
        "numpy": "Computa√ß√£o num√©rica e arrays",
        "matplotlib": "Criar gr√°ficos e visualiza√ß√µes",
        "seaborn": "Gr√°ficos estat√≠sticos bonitos",
        "scikit-learn": "Machine Learning (IA simples)",
        "tensorflow": "Deep Learning (IA avan√ßada)",
        "jupyter": "Notebooks interativos para an√°lise"
    },
    
    "üåê Desenvolvimento Web": {
        "requests": "Fazer requisi√ß√µes HTTP facilmente",
        "flask": "Framework web simples e r√°pido",
        "django": "Framework web completo (Instagram usa!)",
        "fastapi": "APIs modernas super r√°pidas",
        "beautifulsoup4": "Extrair dados de sites (web scraping)",
        "selenium": "Automatizar navegadores web"
    },
    
    "üñ•Ô∏è Interface Gr√°fica & Desktop": {
        "tkinter": "Interface b√°sica (j√° vem com Python)",
        "PyQt5/PySide2": "Interfaces profissionais (Spotify usa!)",
        "kivy": "Apps para celular Android/iOS",
        "pygame": "Criar jogos 2D"
    },
    
    "üîß Ferramentas & Utilidades": {
        "pillow": "Editar e manipular imagens",
        "openpyxl": "Trabalhar com arquivos Excel",
        "cryptography": "Criptografia e seguran√ßa",
        "schedule": "Agendar tarefas autom√°ticas",
        "click": "Criar programas de linha de comando"
    }
}

print("üêç ECOSSISTEMA PYTHON - SUAS FERRAMENTAS PODEROSAS\\n")

for categoria, libs in bibliotecas.items():
    print(f"\\n{categoria}:")
    print("="*50)
    
    for nome, descricao in libs.items():
        print(f"üì¶ {nome:15} - {descricao}")

print("\\nüí° DICAS IMPORTANTES:")
print("üî∏ Bibliotecas padr√£o: J√° instaladas, use import diretamente")
print("üî∏ Bibliotecas externas: Use 'pip install nome_biblioteca'")
print("üî∏ Procure sempre na documenta√ß√£o oficial primeiro")
print("üî∏ GitHub √© √≥timo para ver exemplos de uso")

print("\\nüöÄ PR√ìXIMOS PASSOS:")
print("1. Escolha uma √°rea que te interessa")
print("2. Instale 2-3 bibliotecas dessa √°rea")
print("3. Fa√ßa pequenos projetos para praticar")
print("4. Explore a documenta√ß√£o e exemplos")

print("\\nüåü O Python tem mais de 300.000 bibliotecas dispon√≠veis!")'''
        
        self.exemplo(codigo_bibliotecas)
        print("\nüöÄ Executando mapa de bibliotecas:")
        self.executar_codigo(codigo_bibliotecas)
        
        self.pausar()
    
    def _secao_pip_instalacao(self) -> None:
        """Se√ß√£o: Instalando e gerenciando pacotes"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("INSTALANDO E GERENCIANDO PACOTES", "üõ†Ô∏è", "warning")
        
        self.print_colored("O pip √© o 'gerente de bibliotecas' do Python. Vamos dominar!", "text")
        
        codigo_pip = '''# === GUIA COMPLETO DO PIP ===

print("üõ†Ô∏è PIP: O GERENCIADOR DE PACOTES DO PYTHON\\n")

# Comandos principais do pip (executados no terminal)
comandos_pip = {
    "Instala√ß√£o": [
        "pip install requests                 # Instala uma biblioteca",
        "pip install pandas numpy matplotlib  # Instala v√°rias de uma vez",
        "pip install django==3.2             # Vers√£o espec√≠fica",
        "pip install 'requests>=2.0,<3.0'    # Range de vers√µes"
    ],
    
    "Informa√ß√µes": [
        "pip list                            # Lista tudo instalado",
        "pip show requests                   # Detalhes de uma biblioteca",
        "pip search machine learning         # Busca por termo",
        "pip freeze                          # Lista com vers√µes exatas"
    ],
    
    "Atualiza√ß√£o": [
        "pip install --upgrade requests      # Atualiza uma biblioteca",
        "pip install --upgrade pip           # Atualiza o pr√≥prio pip",
        "pip list --outdated                 # Mostra o que pode atualizar"
    ],
    
    "Desinstala√ß√£o": [
        "pip uninstall requests              # Remove uma biblioteca",
        "pip uninstall -y requests           # Remove sem confirmar"
    ],
    
    "Ambientes Virtuais (IMPORTANTE!)": [
        "python -m venv meu_projeto          # Cria ambiente virtual",
        "meu_projeto\\\\Scripts\\\\activate         # Ativa (Windows)",
        "source meu_projeto/bin/activate     # Ativa (Linux/Mac)",
        "pip install flask                   # Instala s√≥ neste projeto",
        "deactivate                          # Desativa ambiente"
    ]
}

for categoria, comandos in comandos_pip.items():
    print(f"\\nüîπ {categoria}:")
    print("-" * 50)
    for comando in comandos:
        print(f"  {comando}")

# Demonstra√ß√£o pr√°tica
print("\\nüíª DEMONSTRA√á√ÉO PR√ÅTICA:\\n")

# Simulando verifica√ß√£o de bibliotecas instaladas
import sys
bibliotecas_teste = ['os', 'sys', 'json', 'math', 'random', 'datetime']

print("‚úÖ BIBLIOTECAS PADR√ÉO DISPON√çVEIS:")
for lib in bibliotecas_teste:
    try:
        __import__(lib)
        print(f"üì¶ {lib:10} - Instalada ‚úÖ")
    except ImportError:
        print(f"üì¶ {lib:10} - N√£o encontrada ‚ùå")

# Dicas importantes sobre vers√µes
print(f"\\nüêç VERS√ÉO DO PYTHON: {sys.version.split()[0]}")
print(f"üìç LOCAL DE INSTALA√á√ÉO: {sys.executable}")

print("\\n‚ö†Ô∏è DICAS IMPORTANTES:")
dicas = [
    "Sempre use ambientes virtuais para projetos diferentes",
    "Mantenha um arquivo requirements.txt com suas depend√™ncias",
    "Atualize regularmente, mas teste antes em produ√ß√£o",
    "Use pip freeze > requirements.txt para exportar",
    "pip install -r requirements.txt para instalar de arquivo"
]

for i, dica in enumerate(dicas, 1):
    print(f"{i}. {dica}")

print("\\nüéØ FLUXO PROFISSIONAL:")
fluxo = [
    "1. Criar ambiente virtual para o projeto",
    "2. Ativar o ambiente", 
    "3. Instalar bibliotecas necess√°rias",
    "4. Desenvolver o projeto",
    "5. Exportar depend√™ncias (requirements.txt)",
    "6. Compartilhar projeto com requirements.txt"
]

for passo in fluxo:
    print(f"   {passo}")

print("\\nüåü Com isso voc√™ gerencia bibliotecas como um profissional!")'''
        
        self.exemplo(codigo_pip)
        print("\nüöÄ Executando guia do pip:")
        self.executar_codigo(codigo_pip)
        
        self.pausar()
    
    def _secao_estrutura_projetos(self) -> None:
        """Se√ß√£o: Estrutura profissional de projetos"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("ESTRUTURA PROFISSIONAL DE PROJETOS", "üìÅ", "info")
        
        self.print_colored("Como organizar seus projetos Python como as grandes empresas!", "text")
        
        codigo_estrutura = '''# === ESTRUTURA PROFISSIONAL DE PROJETOS PYTHON ===

print("üìÅ COMO ORGANIZAR PROJETOS PYTHON PROFISSIONALMENTE\\n")

# Estrutura recomendada para projetos
estrutura_projeto = """
meu_projeto/
‚îÇ
‚îú‚îÄ‚îÄ üìÅ src/                    # C√≥digo fonte principal
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ __init__.py         # Torna pasta um pacote Python
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ main.py            # Arquivo principal de execu√ß√£o
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ models/            # Classes e modelos de dados
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ __init__.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ user.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ product.py
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ services/          # L√≥gica de neg√≥cio
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ __init__.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ auth_service.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ data_service.py
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ utils/             # Fun√ß√µes auxiliares
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ __init__.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ helpers.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÑ validators.py
‚îÇ   ‚îî‚îÄ‚îÄ üìÅ config/            # Configura√ß√µes
‚îÇ       ‚îú‚îÄ‚îÄ üìÑ __init__.py
‚îÇ       ‚îî‚îÄ‚îÄ üìÑ settings.py
‚îÇ
‚îú‚îÄ‚îÄ üìÅ tests/                 # Testes automatizados
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ test_models.py
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ test_services.py
‚îÇ   ‚îî‚îÄ‚îÄ üìÑ test_utils.py
‚îÇ
‚îú‚îÄ‚îÄ üìÅ docs/                  # Documenta√ß√£o
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ README.md
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ INSTALL.md
‚îÇ   ‚îî‚îÄ‚îÄ üìÑ API.md
‚îÇ
‚îú‚îÄ‚îÄ üìÅ data/                  # Arquivos de dados
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ sample.csv
‚îÇ   ‚îî‚îÄ‚îÄ üìÑ config.json
‚îÇ
‚îú‚îÄ‚îÄ üìÅ scripts/               # Scripts utilit√°rios
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ setup.py
‚îÇ   ‚îî‚îÄ‚îÄ üìÑ deploy.py
‚îÇ
‚îú‚îÄ‚îÄ üìÑ requirements.txt       # Depend√™ncias do projeto
‚îú‚îÄ‚îÄ üìÑ .gitignore            # Arquivos ignorados pelo Git
‚îú‚îÄ‚îÄ üìÑ .env                  # Vari√°veis de ambiente
‚îú‚îÄ‚îÄ üìÑ LICENSE               # Licen√ßa do projeto
‚îî‚îÄ‚îÄ üìÑ README.md             # Documenta√ß√£o principal
"""

print("üèóÔ∏è ESTRUTURA RECOMENDADA:")
print(estrutura_projeto)

# Exemplos de diferentes tipos de projeto
tipos_projeto = {
    "üåê Aplica√ß√£o Web (Flask/Django)": {
        "pastas_extras": ["templates/", "static/", "migrations/"],
        "arquivos_extras": ["app.py", "wsgi.py", "gunicorn.conf.py"],
        "exemplo": "Site de e-commerce, blog, API REST"
    },
    
    "üìä Projeto de Ci√™ncia de Dados": {
        "pastas_extras": ["notebooks/", "data/raw/", "data/processed/", "models/"],
        "arquivos_extras": ["analysis.ipynb", "train.py", "predict.py"],
        "exemplo": "An√°lise de vendas, ML para previs√µes"
    },
    
    "üñ•Ô∏è Aplica√ß√£o Desktop": {
        "pastas_extras": ["ui/", "resources/", "assets/"],
        "arquivos_extras": ["main_window.py", "setup.py", "build.py"],
        "exemplo": "Editor de texto, calculadora, sistema"
    },
    
    "üì¶ Biblioteca/Pacote": {
        "pastas_extras": ["examples/", "tutorials/"],
        "arquivos_extras": ["setup.py", "MANIFEST.in", "pyproject.toml"],
        "exemplo": "Requests, Pandas, suas pr√≥prias libs"
    }
}

print("\\nüéØ ESTRUTURAS POR TIPO DE PROJETO:\\n")

for tipo, detalhes in tipos_projeto.items():
    print(f"{tipo}:")
    print(f"  üìÅ Pastas extras: {', '.join(detalhes['pastas_extras'])}")
    print(f"  üìÑ Arquivos extras: {', '.join(detalhes['arquivos_extras'])}")
    print(f"  üí° Exemplo: {detalhes['exemplo']}")
    print()

# Boas pr√°ticas
print("‚úÖ BOAS PR√ÅTICAS PROFISSIONAIS:\\n")
boas_praticas = [
    "üìù README.md claro explicando o projeto",
    "üìã requirements.txt com todas as depend√™ncias",
    "üîí .env para dados sens√≠veis (senhas, chaves API)",
    "üö´ .gitignore para n√£o versionar arquivos desnecess√°rios",
    "üß™ Pasta tests/ com testes automatizados",
    "üìö Documenta√ß√£o na pasta docs/",
    "üîÑ Controle de vers√£o com Git",
    "üè∑Ô∏è Versionamento sem√¢ntico (v1.0.0, v1.1.0, etc)",
    "üì¶ __init__.py em todas as pastas de c√≥digo",
    "üîß Configura√ß√µes centralizadas em config/"
]

for pratica in boas_praticas:
    print(f"  {pratica}")

print("\\nüåü BENEF√çCIOS DA BOA ORGANIZA√á√ÉO:")
beneficios = [
    "ü§ù Facilita trabalho em equipe",
    "üîç C√≥digo f√°cil de encontrar e entender", 
    "üêõ Bugs mais f√°ceis de identificar",
    "üìà Projeto escala melhor",
    "‚ôªÔ∏è Componentes reutiliz√°veis",
    "üöÄ Deploy e manuten√ß√£o mais simples",
    "üíº Parece profissional para empregadores"
]

for beneficio in beneficios:
    print(f"  {beneficio}")

print("\\nüí° DICA FINAL: Comece simples e evolua a estrutura conforme o projeto cresce!")'''
        
        self.exemplo(codigo_estrutura)
        print("\nüöÄ Executando guia de estrutura:")
        self.executar_codigo(codigo_estrutura)
        
        self.pausar()
    
    def _secao_curiosidades(self) -> None:
        """Se√ß√£o: Curiosidades sobre o ecossistema Python"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("CURIOSIDADES SOBRE O ECOSSISTEMA PYTHON", "üí´", "accent")
        
        self.print_colored("Fatos interessantes que v√£o te motivar ainda mais!", "text")
        
        codigo_curiosidades = '''# === CURIOSIDADES INCR√çVEIS SOBRE PYTHON ===

print("üí´ FATOS INTERESSANTES SOBRE O ECOSSISTEMA PYTHON\\n")

curiosidades = {
    "üé≠ Origem do Nome": [
        "Python n√£o tem nada a ver com cobra!",
        "O nome vem do grupo de com√©dia 'Monty Python'",
        "Guido van Rossum (criador) era f√£ do grupo",
        "Por isso muitos exemplos usam 'spam' e 'eggs'"
    ],
    
    "üìà N√∫meros Impressionantes": [
        "üèÜ Linguagem #1 mais popular do mundo (2024)",
        "üì¶ Mais de 500.000 bibliotecas no PyPI",
        "üí∞ Sal√°rio m√©dio: R$ 8.000-15.000 (Brasil)",
        "üåê Usada por 8.2 milh√µes de desenvolvedores",
        "üìä 48% dos cientistas de dados usam Python"
    ],
    
    "üè¢ Empresas Famosas que Usam": [
        "üé¨ Netflix - Sistema de recomenda√ß√µes",
        "üîç Google - Buscador, YouTube, Gmail",
        "üì∑ Instagram - Backend completo",
        "üéµ Spotify - An√°lise de dados e recomenda√ß√µes",
        "üöó Tesla - Software dos carros",
        "üõ∏ NASA - An√°lise de dados espaciais",
        "üí∞ Bank of America - An√°lise financeira",
        "üéÆ Eve Online - Servidor do jogo"
    ],
    
    "üåü Conquistas Hist√≥ricas": [
        "üï≥Ô∏è Primeira foto de buraco negro (Event Horizon)",
        "üöÄ Software da SpaceX usa Python",
        "ü¶† An√°lise gen√©tica do COVID-19",
        "üî¨ Descoberta do B√≥son de Higgs (CERN)",
        "üåå Controle do telesc√≥pio Hubble",
        "üéØ Algoritmos do YouTube"
    ],
    
    "üìö Bibliotecas com Hist√≥rias Incr√≠veis": [
        "üìä NumPy: Criada por um estudante de doutorado",
        "üêº Pandas: Nome significa 'Panel Data'", 
        "üé® Matplotlib: Inspirada no MATLAB",
        "‚ö° Django: Nomeada em homenagem ao guitarrista Django Reinhardt",
        "üå∂Ô∏è Flask: Nome vem de 'micro-framework'",
        "üöÄ Requests: 'HTTP para humanos'"
    ],
    
    "üí° Filosofia Python (The Zen of Python)": [
        "'Simples √© melhor que complexo'",
        "'Legibilidade conta'",
        "'Deve haver uma forma √≥bvia de fazer'",
        "'Agora √© melhor que nunca'",
        "'Se a implementa√ß√£o √© dif√≠cil de explicar, √© m√°'"
    ]
}

for categoria, fatos in curiosidades.items():
    print(f"\\n{categoria}:")
    print("=" * 50)
    for fato in fatos:
        print(f"  ‚Ä¢ {fato}")
    print()

# Timeline interessante
print("üìÖ LINHA DO TEMPO PYTHON:\\n")
timeline = {
    "1989": "üéØ Guido van Rossum come√ßa a criar Python",
    "1991": "üêç Python 0.9.0 - Primeira vers√£o p√∫blica",
    "2000": "üöÄ Python 2.0 - List comprehensions",
    "2008": "‚ö° Python 3.0 - Quebra compatibilidade, mas melhora tudo",
    "2010": "üìä NumPy e SciPy se tornam populares",
    "2011": "üåê Django alimenta Instagram (2010) e Spotify",
    "2015": "ü§ñ TensorFlow lan√ßado pelo Google",
    "2020": "üìà Python vira linguagem #1 do mundo",
    "2024": "üéâ Voc√™ est√° aprendendo a linguagem do futuro!"
}

for ano, evento in timeline.items():
    print(f"  {ano}: {evento}")

print("\\nüéØ POR QUE PYTHON √â T√ÉO POPULAR?")
razoes = [
    "üìñ Sintaxe simples - parece ingl√™s",
    "üîß 'Baterias inclu√≠das' - muita coisa j√° vem pronta",
    "üåê Comunidade incr√≠vel e acolhedora",
    "üìö Documenta√ß√£o excelente",
    "üöÄ R√°pido para prototipar e testar ideias",
    "üî¨ Perfeito para ci√™ncia e IA",
    "üíº Alta demanda no mercado de trabalho",
    "üéì F√°cil de aprender, dif√≠cil de dominar"
]

for razao in razoes:
    print(f"  {razao}")

print("\\nüí™ VOC√ä EST√Å NO CAMINHO CERTO!")
print("Python n√£o √© apenas uma linguagem, √© uma comunidade global")
print("que est√° moldando o futuro da tecnologia. Bem-vindo(a) ao clube! üéâ")

print("\\nüåü PR√ìXIMOS PASSOS NA SUA JORNADA:")
proximo_passos = [
    "1. üéØ Domine os fundamentos (voc√™ j√° est√° fazendo!)",
    "2. üõ†Ô∏è Escolha uma √°rea: Web, IA, Data Science, Automa√ß√£o",
    "3. üöÄ Fa√ßa projetos pr√°ticos no GitHub",
    "4. ü§ù Participe da comunidade Python Brasil",
    "5. üíº Candidate-se a vagas Python (sim, voc√™ consegue!)"
]

for passo in proximo_passos:
    print(f"  {passo}")

print("\\nüêç Lembre-se: Toda jornada de mil milhas come√ßa com um √∫nico passo!")'''
        
        self.exemplo(codigo_curiosidades)
        print("\nüöÄ Executando curiosidades:")
        self.executar_codigo(codigo_curiosidades)
        
        self.pausar()
    
    def _secao_pratica_interativa(self) -> None:
        """Se√ß√£o de pr√°tica interativa do m√≥dulo"""
        
        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_section("HORA DE PRATICAR!", "üéØ", "success")
        self.print_colored("Vamos testar o que voc√™ aprendeu sobre m√≥dulos e pacotes!", "text")
        
        # === INSTRU√á√ïES PARA INICIANTES ===
        self.print_tip("Para iniciantes: Cada exerc√≠cio √© opcional, mas recomendamos fazer todos!")
        self.print_colored("\nüéì SOBRE OS EXERC√çCIOS:", "info")
        self.print_colored("‚Ä¢ N√£o se preocupe se errar - faz parte do aprendizado!", "text")
        self.print_colored("‚Ä¢ Voc√™ pode tentar quantas vezes quiser", "text")
        self.print_colored("‚Ä¢ Digite 'help' se precisar de ajuda", "text")
        self.print_colored("‚Ä¢ Use Ctrl+C para voltar ao menu principal se necess√°rio", "text")
        
        # === DEFINI√á√ÉO DOS EXERC√çCIOS ===
        exercicios = [
            {
                'title': 'Quiz: Conhecimentos sobre M√≥dulos e Pacotes',
                'type': 'quiz',
                'questions': [
                    {
                        'question': 'Qual comando √© usado para instalar uma biblioteca externa no Python?',
                        'answer': ['pip install', 'pip install biblioteca', 'pip'],
                        'hint': '√â o gerenciador de pacotes do Python'
                    },
                    {
                        'question': 'Como voc√™ importa apenas a fun√ß√£o sqrt do m√≥dulo math?',
                        'answer': ['from math import sqrt'],
                        'hint': 'Use from ... import ...'
                    },
                    {
                        'question': 'O que significa o arquivo __init__.py em uma pasta?',
                        'answer': ['torna a pasta um pacote', 'pacote python', 'pacote'],
                        'hint': 'Relacionado a organiza√ß√£o de c√≥digo em pacotes'
                    },
                    {
                        'question': 'Qual biblioteca √© mais usada para manipular dados como Excel?',
                        'answer': ['pandas', 'pd'],
                        'hint': 'Tem nome de animal preto e branco'
                    },
                    {
                        'question': 'Como criar um ambiente virtual chamado "projeto"?',
                        'answer': ['python -m venv projeto', 'venv projeto'],
                        'hint': 'Use python -m venv seguido do nome'
                    }
                ]
            },
            {
                'title': 'Desafio: Complete o C√≥digo',
                'type': 'code_completion',
                'exercises': [
                    {
                        'instruction': 'B√ÅSICO: Complete a importa√ß√£o do m√≥dulo datetime',
                        'starter': '# Complete a importa√ß√£o\n# ______ datetime\nprint(datetime.date.today())',
                        'solution': 'import',
                        'type': 'simple'
                    },
                    {
                        'instruction': 'INTERMEDI√ÅRIO: Complete a importa√ß√£o espec√≠fica',
                        'starter': '# Complete para importar apenas randint\n# from random ______ randint\nprint(randint(1, 10))',
                        'solution': 'import',
                        'type': 'intermediate'
                    },
                    {
                        'instruction': 'AVAN√áADO: Complete a instala√ß√£o de biblioteca',
                        'starter': '# Como instalar a biblioteca requests?\n# ______ install requests',
                        'solution': 'pip',
                        'type': 'advanced'
                    }
                ]
            },
            {
                'title': 'Exerc√≠cio Criativo: Criando seu M√≥dulo Utilit√°rio',
                'type': 'creative',
                'instruction': 'Crie um m√≥dulo com 3 fun√ß√µes √∫teis para seu dia a dia (ex: calculadora, formatador de texto, gerador de senha)'
            }
        ]
        
        # === MENU PRINCIPAL DE EXERC√çCIOS ===
        while True:
            # Limpa tela antes do menu
            if self.ui:
                self.ui.clear_screen()
            
            self.print_section("MENU DE EXERC√çCIOS", "üìö", "accent")
            print("\nEscolha uma atividade:")
            print("1. üìù Quiz de Conhecimentos")
            print("2. üíª Complete o C√≥digo")
            print("3. üé® Exerc√≠cio Criativo")
            print("\n" + "‚îÄ" * 40)
            print("0. üéØ Continuar para o Mini Projeto")
            print("‚îÄ" * 40)
            
            try:
                escolha = input("\nüëâ Sua escolha: ").strip().lower()
                
                if escolha in ["0", "continuar", "sair", "proximo"]:
                    break
                elif escolha in ["1", "quiz", "conhecimentos"]:
                    try:
                        self._run_quiz(exercicios[0])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Quiz interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no quiz. Continuando...")
                elif escolha in ["2", "codigo", "completar"]:
                    try:
                        self._run_code_completion(exercicios[1])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio de c√≥digo interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio de c√≥digo. Continuando...")
                elif escolha in ["3", "criativo"]:
                    try:
                        self._run_creative_exercise(exercicios[2])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio criativo interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio criativo. Continuando...")
                elif escolha in ["help", "ajuda", "h", "?"]:
                    self._show_help()
                else:
                    self.print_warning("‚ùå Op√ß√£o inv√°lida! Digite 1, 2, 3, 0 ou 'help' para ajuda.")
            
            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Opera√ß√£o cancelada pelo usu√°rio. Voltando ao menu principal...")
                return  # CR√çTICO: Return em vez de break para sair completamente
            except Exception as e:
                self.print_warning("‚ùå Erro inesperado no menu. Tente novamente.")
    
    def _show_help(self) -> None:
        """Mostra ajuda sobre as op√ß√µes dispon√≠veis"""
        self.print_section("AJUDA - SE√á√ÉO DE PR√ÅTICA", "‚ùì", "info")
        help_text = [
            "üìù OP√á√ÉO 1 - Quiz: Teste seus conhecimentos sobre m√≥dulos e pacotes",
            "üíª OP√á√ÉO 2 - Complete o C√≥digo: 3 exerc√≠cios sobre importa√ß√£o",
            "üé® OP√á√ÉO 3 - Exerc√≠cio Criativo: Crie seu pr√≥prio m√≥dulo utilit√°rio",
            "üî¢ OP√á√ÉO 0 - Continue para o Mini Projeto final",
            "",
            "üí° DICAS:",
            "‚Ä¢ Voc√™ pode digitar o n√∫mero ou palavras como 'quiz', 'codigo'",
            "‚Ä¢ Digite 'help' a qualquer momento para ver esta ajuda",
            "‚Ä¢ Use Ctrl+C se quiser voltar ao menu principal",
            "‚Ä¢ Recomendamos fazer todas as atividades para aprender melhor!"
        ]
        
        for line in help_text:
            if line:
                self.print_colored(f"  {line}", "text")
            else:
                print()
        
        input("\nüî∏ Pressione ENTER para voltar ao menu...")
    
    def _mini_projeto_sistema_bibliotecas(self) -> None:
        """Mini Projeto - M√≥dulo 14: Sistema Inteligente de Bibliotecas"""
        
        # === CABE√áALHO IMPACTANTE ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üéØ MINI PROJETO: SISTEMA INTELIGENTE DE BIBLIOTECAS")
        else:
            print("\n" + "="*50)
            print("üéØ MINI PROJETO: SISTEMA INTELIGENTE DE BIBLIOTECAS")
            print("="*50)
        
        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_success("üéâ Vamos criar um sistema que gerencia bibliotecas Python como um profissional!")
        
        self.print_concept(
            "Sistema Inteligente de Bibliotecas",
            "Um programa que analisa, instala, atualiza e organiza bibliotecas Python automaticamente"
        )
        
        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nEste tipo de programa √© √∫til para:", "text")
        usos_praticos = [
            "üè¢ Empresas que gerenciam m√∫ltiplos projetos Python",
            "üéì Escolas que precisam manter ambientes atualizados",
            "üë• Equipes de desenvolvimento que compartilham depend√™ncias",
            "üöÄ DevOps que automatizam deployments"
        ]
        for uso in usos_praticos:
            self.print_colored(f"‚Ä¢ {uso}", "accent")
        
        # === DESENVOLVIMENTO PASSO A PASSO ===
        
        # PASSO 1: An√°lise do ambiente atual
        self.print_section("PASSO 1: Analisando o Ambiente Python", "üìù", "info")
        self.print_tip("Primeiro vamos mapear tudo que est√° instalado")
        
        try:
            # === C√ìDIGO PRINCIPAL DO PROJETO ===
            codigo_projeto = '''# üìö SISTEMA INTELIGENTE DE BIBLIOTECAS
# Gerenciador avan√ßado de depend√™ncias Python

import sys
import pkg_resources
import subprocess
import json
import os
from datetime import datetime
from typing import Dict, List, Optional, Tuple

# === 1. ANALISADOR DE AMBIENTE ===
class PythonEnvironmentAnalyzer:
    """Analisa o ambiente Python atual"""
    
    def __init__(self):
        self.installed_packages = {}
        self.python_info = {}
        self.environment_health = {}
    
    def analyze_environment(self) -> Dict:
        """An√°lise completa do ambiente Python"""
        print("üîç ANALISANDO AMBIENTE PYTHON...\\n")
        
        # Informa√ß√µes do Python
        self.python_info = {
            "version": sys.version.split()[0],
            "executable": sys.executable,
            "platform": sys.platform,
            "path": sys.path[:3]  # Primeiros 3 caminhos
        }
        
        print(f"üêç Python: {self.python_info['version']}")
        print(f"üìç Localiza√ß√£o: {self.python_info['executable']}")
        print(f"üíª Plataforma: {self.python_info['platform']}")
        
        # Pacotes instalados
        self._scan_installed_packages()
        
        # An√°lise de sa√∫de
        self._analyze_health()
        
        return {
            "python_info": self.python_info,
            "packages": self.installed_packages,
            "health": self.environment_health
        }
    
    def _scan_installed_packages(self) -> None:
        """Escaneia todos os pacotes instalados"""
        print("\\nüì¶ ESCANEANDO PACOTES INSTALADOS...")
        
        # Simula pacotes instalados (em ambiente real usaria pkg_resources)
        mock_packages = {
            "pip": "23.0.1",
            "setuptools": "65.5.0", 
            "wheel": "0.38.4",
            "requests": "2.28.1",
            "numpy": "1.24.1",
            "pandas": "1.5.3",
            "matplotlib": "3.6.2",
            "flask": "2.2.2",
            "django": "4.1.5"
        }
        
        self.installed_packages = mock_packages
        
        print(f"‚úÖ Encontrados {len(self.installed_packages)} pacotes")
        
        # Categorizar por tipo
        categories = self._categorize_packages()
        
        for category, packages in categories.items():
            if packages:
                print(f"\\nüìÇ {category}:")
                for pkg, version in packages.items():
                    print(f"  ‚Ä¢ {pkg:15} v{version}")
    
    def _categorize_packages(self) -> Dict[str, Dict[str, str]]:
        """Categoriza pacotes por fun√ß√£o"""
        categories = {
            "üîß Ferramentas Base": {},
            "üìä Ci√™ncia de Dados": {},
            "üåê Web Development": {},
            "üé® Visualiza√ß√£o": {},
            "üî® Utilit√°rios": {}
        }
        
        # Mapeamento simples (em projeto real seria mais sofisticado)
        category_map = {
            "pip": "üîß Ferramentas Base",
            "setuptools": "üîß Ferramentas Base",
            "wheel": "üîß Ferramentas Base",
            "numpy": "üìä Ci√™ncia de Dados",
            "pandas": "üìä Ci√™ncia de Dados",
            "matplotlib": "üé® Visualiza√ß√£o",
            "flask": "üåê Web Development",
            "django": "üåê Web Development",
            "requests": "üî® Utilit√°rios"
        }
        
        for package, version in self.installed_packages.items():
            category = category_map.get(package, "üî® Utilit√°rios")
            categories[category][package] = version
        
        return categories
    
    def _analyze_health(self) -> None:
        """Analisa a sa√∫de do ambiente"""
        print("\\nüè• AN√ÅLISE DE SA√öDE DO AMBIENTE...")
        
        health_score = 85  # Simulado
        outdated_count = 2  # Simulado
        security_issues = 0  # Simulado
        
        self.environment_health = {
            "score": health_score,
            "outdated_packages": outdated_count,
            "security_issues": security_issues,
            "recommendations": [
                "Atualize 2 pacotes desatualizados",
                "Considere usar ambiente virtual",
                "Documente depend√™ncias em requirements.txt"
            ]
        }
        
        print(f"üìä Pontua√ß√£o de Sa√∫de: {health_score}/100")
        
        if health_score >= 80:
            print("‚úÖ Ambiente em boa condi√ß√£o!")
        elif health_score >= 60:
            print("‚ö†Ô∏è Ambiente precisa de alguns ajustes")
        else:
            print("‚ùå Ambiente precisa de aten√ß√£o urgente")
        
        if outdated_count > 0:
            print(f"üìà {outdated_count} pacotes podem ser atualizados")
        
        if security_issues > 0:
            print(f"üîí {security_issues} problemas de seguran√ßa encontrados")

# === 2. GERENCIADOR DE DEPEND√äNCIAS ===
class DependencyManager:
    """Gerencia instala√ß√£o e atualiza√ß√£o de depend√™ncias"""
    
    def __init__(self):
        self.package_database = self._load_package_database()
    
    def _load_package_database(self) -> Dict:
        """Carrega base de dados de pacotes populares"""
        return {
            "data_science": {
                "numpy": "Computa√ß√£o num√©rica fundamental",
                "pandas": "Manipula√ß√£o e an√°lise de dados",
                "matplotlib": "Visualiza√ß√£o de dados b√°sica",
                "seaborn": "Visualiza√ß√£o estat√≠stica",
                "scikit-learn": "Machine Learning",
                "jupyter": "Notebooks interativos"
            },
            "web_development": {
                "flask": "Framework web minimalista",
                "django": "Framework web completo",
                "fastapi": "API moderna e r√°pida",
                "requests": "Cliente HTTP simples",
                "beautifulsoup4": "Web scraping"
            },
            "automation": {
                "selenium": "Automa√ß√£o de navegador",
                "schedule": "Agendamento de tarefas",
                "click": "Interface linha de comando",
                "python-dotenv": "Gerenciamento de vari√°veis de ambiente"
            },
            "utilities": {
                "pillow": "Processamento de imagens",
                "openpyxl": "Manipula√ß√£o de Excel",
                "python-dateutil": "Manipula√ß√£o avan√ßada de datas",
                "tqdm": "Barras de progresso"
            }
        }
    
    def suggest_packages_for_project(self, project_type: str) -> List[str]:
        """Sugere pacotes para tipo de projeto"""
        suggestions = {
            "data_science": ["numpy", "pandas", "matplotlib", "jupyter"],
            "web_app": ["flask", "requests", "python-dotenv"],
            "automation": ["selenium", "schedule", "click"],
            "general": ["requests", "python-dateutil", "tqdm"]
        }
        
        return suggestions.get(project_type, suggestions["general"])
    
    def create_requirements_file(self, packages: List[str], filename: str = "requirements.txt") -> str:
        """Cria arquivo requirements.txt"""
        content = "# Depend√™ncias do projeto\\n"
        content += f"# Gerado em {datetime.now().strftime('%Y-%m-%d %H:%M')}\\n\\n"
        
        for package in packages:
            # Em projeto real, pegaria vers√µes espec√≠ficas
            content += f"{package}>=1.0.0\\n"
        
        return content
    
    def simulate_installation(self, packages: List[str]) -> Dict[str, bool]:
        """Simula instala√ß√£o de pacotes"""
        results = {}
        
        print("\\nüì¶ SIMULANDO INSTALA√á√ÉO...")
        
        for package in packages:
            # Simula sucesso na maioria dos casos
            success = True  # Em projeto real: subprocess.run(["pip", "install", package])
            results[package] = success
            
            if success:
                print(f"‚úÖ {package} instalado com sucesso")
            else:
                print(f"‚ùå Falha ao instalar {package}")
        
        return results

# === 3. ORGANIZADOR DE PROJETOS ===
class ProjectOrganizer:
    """Organiza estrutura de projetos Python"""
    
    def __init__(self):
        self.project_templates = self._load_templates()
    
    def _load_templates(self) -> Dict:
        """Carrega templates de estrutura de projeto"""
        return {
            "basic": [
                "src/",
                "src/__init__.py",
                "src/main.py",
                "tests/",
                "README.md",
                "requirements.txt",
                ".gitignore"
            ],
            "web_app": [
                "app/",
                "app/__init__.py",
                "app/routes.py",
                "app/models.py",
                "templates/",
                "static/",
                "config.py",
                "run.py",
                "requirements.txt"
            ],
            "data_science": [
                "data/raw/",
                "data/processed/",
                "notebooks/",
                "src/",
                "src/data_processing.py",
                "src/analysis.py",
                "models/",
                "requirements.txt",
                "README.md"
            ]
        }
    
    def generate_project_structure(self, project_name: str, template: str) -> str:
        """Gera estrutura de projeto"""
        if template not in self.project_templates:
            template = "basic"
        
        structure = f"{project_name}/\\n"
        
        for item in self.project_templates[template]:
            if item.endswith("/"):
                structure += f"‚îú‚îÄ‚îÄ üìÅ {item}\\n"
            else:
                structure += f"‚îú‚îÄ‚îÄ üìÑ {item}\\n"
        
        return structure
    
    def create_readme_template(self, project_name: str, description: str) -> str:
        """Cria template de README.md"""
        return f"""
# {project_name}

{description}

## Instala√ß√£o

```bash
pip install -r requirements.txt
```

## Como usar

```python
python src/main.py
```

## Estrutura do projeto

- `src/` - C√≥digo fonte
- `tests/` - Testes automatizados  
- `requirements.txt` - Depend√™ncias

## Contribui√ß√£o

1. Fork o projeto
2. Crie uma branch para sua feature
3. Commit suas mudan√ßas
4. Push para a branch
5. Abra um Pull Request

## Licen√ßa

MIT License

"""

# === 4. DEMONSTRA√á√ÉO COMPLETA ===
print("üìö SISTEMA INTELIGENTE DE BIBLIOTECAS\\n")
print("Gerenciando depend√™ncias Python como um profissional!\\n")

# Inicializar componentes
analyzer = PythonEnvironmentAnalyzer()
dep_manager = DependencyManager()
project_organizer = ProjectOrganizer()

# PASSO 1: An√°lise do ambiente
print("=" * 60)
print("üìä PASSO 1: AN√ÅLISE DO AMBIENTE")
print("=" * 60)

environment_data = analyzer.analyze_environment()

# PASSO 2: Sugest√µes personalizadas
print("\\n" + "=" * 60)
print("üí° PASSO 2: SUGEST√ïES INTELIGENTES")
print("=" * 60)

project_types = ["data_science", "web_app", "automation"]

for proj_type in project_types:
    suggestions = dep_manager.suggest_packages_for_project(proj_type)
    print(f"\\nüéØ Para projeto {proj_type.replace('_', ' ').title()}:")
    for package in suggestions:
        description = ""
        for category in dep_manager.package_database.values():
            if package in category:
                description = category[package]
                break
        print(f"  ‚Ä¢ {package:15} - {description}")

# PASSO 3: Cria√ß√£o de estrutura
print("\\n" + "=" * 60)
print("üèóÔ∏è PASSO 3: ORGANIZA√á√ÉO DE PROJETO")
print("=" * 60)

project_name = "meu_projeto_data_science"
structure = project_organizer.generate_project_structure(project_name, "data_science")
print(f"\\nüìÅ ESTRUTURA SUGERIDA PARA '{project_name}':")
print(structure)

# PASSO 4: Arquivo de depend√™ncias
print("\\n" + "=" * 60)
print("üìù PASSO 4: GERANDO REQUIREMENTS.TXT")
print("=" * 60)

packages_to_install = ["numpy", "pandas", "matplotlib", "jupyter"]
requirements_content = dep_manager.create_requirements_file(packages_to_install)
print("\\nüìÑ CONTE√öDO DO REQUIREMENTS.TXT:")
print(requirements_content)

# PASSO 5: Simula√ß√£o de instala√ß√£o
print("\\n" + "=" * 60)
print("‚öôÔ∏è PASSO 5: INSTALA√á√ÉO AUTOM√ÅTICA")
print("=" * 60)

installation_results = dep_manager.simulate_installation(packages_to_install)
success_count = sum(installation_results.values())
print(f"\\nüìä RESULTADO: {success_count}/{len(packages_to_install)} pacotes instalados")

# PASSO 6: Relat√≥rio final
print("\\n" + "=" * 60)
print("üìã RELAT√ìRIO FINAL")
print("=" * 60)

print(f"\\n‚úÖ AMBIENTE ANALISADO:")
print(f"  ‚Ä¢ Python {environment_data['python_info']['version']}")
print(f"  ‚Ä¢ {len(environment_data['packages'])} pacotes instalados")
print(f"  ‚Ä¢ Sa√∫de: {environment_data['health']['score']}/100")

print(f"\\nüéØ PROJETO CONFIGURADO:")
print(f"  ‚Ä¢ Estrutura: {len(project_organizer.project_templates['data_science'])} arquivos/pastas")
print(f"  ‚Ä¢ Depend√™ncias: {len(packages_to_install)} pacotes")
print(f"  ‚Ä¢ Tipo: Ci√™ncia de Dados")

print(f"\\nüöÄ PR√ìXIMOS PASSOS:")
print("  1. Criar ambiente virtual: python -m venv meu_projeto")
print("  2. Ativar ambiente: meu_projeto\\\\Scripts\\\\activate")
print("  3. Instalar depend√™ncias: pip install -r requirements.txt")
print("  4. Come√ßar a desenvolver!")

print("\\nüéâ SISTEMA FUNCIONANDO PERFEITAMENTE!")
print("üí° Conceitos aplicados:")
print("  ‚Ä¢ An√°lise de ambiente Python")
print("  ‚Ä¢ Gerenciamento de depend√™ncias")
print("  ‚Ä¢ Organiza√ß√£o profissional de projetos")
print("  ‚Ä¢ Automa√ß√£o de tarefas repetitivas")
print("  ‚Ä¢ Boas pr√°ticas de desenvolvimento")
print("  ‚Ä¢ Sistema modular e extens√≠vel")

print("\\nüåü Parab√©ns! Voc√™ criou um sistema profissional de gest√£o de bibliotecas!")'''
            
            # === C√ìDIGO FINAL GERADO ===
            self.print_colored("Aqui est√° o c√≥digo completo que voc√™ criou:", "text")
            
            self.exemplo(codigo_projeto)
            
            # === EXECU√á√ÉO DO RESULTADO ===
            self.print_section("RESULTADO FINAL", "üé¨", "warning")
            self.executar_codigo(codigo_projeto)
            
        except KeyboardInterrupt:
            self.print_warning("Projeto cancelado pelo usu√°rio")
            return
        
        # === MENSAGEM DE CONQUISTA ===
        self.print_success("üéâ PARAB√âNS! Voc√™ criou um sistema inteligente de bibliotecas!")
        
        # === APLICA√á√ïES AVAN√áADAS ===
        self.print_section("PR√ìXIMOS PASSOS", "üöÄ", "info")
        proximos_passos = [
            "Integrar com pip real para instala√ß√µes autom√°ticas",
            "Adicionar interface gr√°fica com tkinter ou PyQt",
            "Criar sistema de cache para an√°lises r√°pidas",
            "Implementar detec√ß√£o de vulnerabilidades",
            "Desenvolver API REST para uso em CI/CD",
            "Criar dashboard web com Flask/Django"
        ]
        for passo in proximos_passos:
            self.print_colored(f"‚Ä¢ {passo}", "primary")
        
        self.print_success("\nüèÜ CONQUISTA DESBLOQUEADA: Arquiteto de Sistemas Python!")
        
        # === REGISTRO DE CONCLUS√ÉO ===
        self.complete_mini_project("Sistema Inteligente de Bibliotecas")
        
        self.pausar()


# Para teste standalone
if __name__ == "__main__":
    module = Modulo14ModulosPacotes()
    print("Teste do m√≥dulo 14 - vers√£o standalone")
    module._modulos_pacotes_interativo()