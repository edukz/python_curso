#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
M√≥dulo 20: Decorators e Context Managers
VERS√ÉO REFATORADA seguindo o padr√£o pedag√≥gico estabelecido
Aprenda decorators e context managers de forma interativa
"""

from ..shared.base_module import BaseModule
import time
import functools
import threading
import random
from contextlib import contextmanager
from typing import Any, Dict, Optional, Callable
from dataclasses import dataclass
from datetime import datetime, timedelta


class Modulo20Decorators(BaseModule):
    """M√≥dulo 20: Decorators e Context Managers"""
    
    def __init__(self):
        super().__init__("modulo_20", "Decorators e Context Managers")
        self.has_mini_project = True
        self.mini_project_points = 120
    
    def execute(self) -> None:
        """Executa o m√≥dulo Decorators e Context Managers"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return

        try:
            self._decorators()
        except Exception as e:
            self.error_handler(lambda: None)
    
    def _decorators(self) -> None:
        """Conte√∫do principal do m√≥dulo Decorators e Context Managers"""
        # === CABE√áALHO VISUAL ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üé≠ M√ìDULO 20: DECORATORS E CONTEXT MANAGERS")
        else:
            print("\n" + "="*60)
            print("üé≠ M√ìDULO 20: DECORATORS E CONTEXT MANAGERS")
            print("="*60)

        # === MENSAGENS MOTIVACIONAIS ===
        self.print_success("üéâ Bem-vindo ao mundo dos Decorators e Context Managers!")
        self.print_tip("Este m√≥dulo est√° dividido em se√ß√µes interativas. Voc√™ controla o ritmo!")

        # === FLUXO PRINCIPAL COM TRATAMENTO DE CTRL+C ===

        # 1. Sistema de navega√ß√£o por se√ß√µes
        try:
            self._navegacao_secoes_interativas()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Navega√ß√£o interrompida pelo usu√°rio. Voltando ao menu principal...")
            return

        # 2. Se√ß√£o de Pr√°tica Interativa
        try:
            self._secao_pratica_interativa()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è M√≥dulo interrompido pelo usu√°rio. Voltando ao menu principal...")
            return

        # 3. Mini Projeto Pr√°tico
        try:
            self._mini_projeto_sistema_cache_inteligente()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Mini projeto interrompido. Voltando ao menu principal...")
            return

        # 4. Marcar m√≥dulo como completo
        self.complete_module()
    
    def _navegacao_secoes_interativas(self) -> None:
        """Sistema de navega√ß√£o por se√ß√µes do m√≥dulo"""

        # === DEFINI√á√ÉO DAS SE√á√ïES (7 SE√á√ïES) ===
        secoes = [
            {
                'id': 'secao_conceito_decorators',
                'titulo': 'üéØ O que s√£o Decorators?',
                'descricao': 'Entenda o conceito fundamental que mudar√° sua forma de programar',
                'funcao': self._secao_conceito_decorators
            },
            {
                'id': 'secao_como_funciona',
                'titulo': '‚öôÔ∏è Como Decorators funcionam?',
                'descricao': 'Veja o processo passo a passo por tr√°s da "m√°gica"',
                'funcao': self._secao_como_funciona
            },
            {
                'id': 'secao_decorators_parametrizados',
                'titulo': 'üîß Decorators com Par√¢metros',
                'descricao': 'Aprenda a criar decorators flex√≠veis e reutiliz√°veis',
                'funcao': self._secao_decorators_parametrizados
            },
            {
                'id': 'secao_context_managers',
                'titulo': 'üè† Context Managers e with',
                'descricao': 'Gerencie recursos de forma segura e autom√°tica',
                'funcao': self._secao_context_managers
            },
            {
                'id': 'secao_casos_uso_reais',
                'titulo': 'üåç Onde usar na vida real?',
                'descricao': 'Aplica√ß√µes pr√°ticas em projetos profissionais',
                'funcao': self._secao_casos_uso_reais
            },
            {
                'id': 'secao_melhores_praticas',
                'titulo': '‚≠ê Melhores pr√°ticas',
                'descricao': 'Dicas de profissionais experientes',
                'funcao': self._secao_melhores_praticas
            },
            {
                'id': 'secao_curiosidades',
                'titulo': 'üí´ Curiosidades sobre Decorators',
                'descricao': 'Fatos interessantes e motivacionais',
                'funcao': self._secao_curiosidades
            }
        ]

        secoes_visitadas = set()

        # === LOOP PRINCIPAL DE NAVEGA√á√ÉO ===
        while True:
            # Limpa tela e mostra cabe√ßalho
            self.ui.clear_screen() if self.ui else print("\n" + "="*50)
            self.print_section("NAVEGA√á√ÉO DO M√ìDULO", "üìö", "accent")
            self.print_colored("Escolha uma se√ß√£o para estudar:", "text")

            # Lista todas as se√ß√µes com status
            print()
            for i, secao in enumerate(secoes, 1):
                status = "‚úÖ" if secao['id'] in secoes_visitadas else "üìñ"
                print(f"{status} {i}. {secao['titulo']}")
                self.print_colored(f"    {secao['descricao']}", "text")
                print()

            print("0. üéØ Continuar para os Exerc√≠cios Pr√°ticos")

            # Mostra progresso visual
            progresso = len(secoes_visitadas)
            total = len(secoes)
            self.print_colored(f"\nüìä Progresso: {progresso}/{total} se√ß√µes visitadas", "info")

            if progresso == total:
                self.print_success("üåü Voc√™ completou todas as se√ß√µes! Est√° pronto para praticar!")

            # Processa escolha do usu√°rio
            try:
                escolha = input(f"\nüëâ Escolha uma se√ß√£o (1-{len(secoes)}) ou 0 para continuar: ").strip()

                if escolha == "0":
                    # Verifica se visitou se√ß√µes suficientes
                    if progresso >= 3:  # Pelo menos 3 se√ß√µes visitadas
                        break
                    else:
                        self.print_warning("üìö Recomendamos visitar pelo menos 3 se√ß√µes antes de continuar!")
                        continuar = input("Quer continuar mesmo assim? (s/n): ").lower()
                        if continuar in ['s', 'sim', 'yes']:
                            break
                elif escolha.isdigit() and 1 <= int(escolha) <= len(secoes):
                    # Executa se√ß√£o escolhida
                    idx = int(escolha) - 1
                    secoes[idx]['funcao']()
                    secoes_visitadas.add(secoes[idx]['id'])
                else:
                    self.print_warning(f"‚ùå Op√ß√£o inv√°lida! Digite um n√∫mero de 1 a {len(secoes)} ou 0.")

            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Pulando para exerc√≠cios pr√°ticos...")
                break
            except Exception as e:
                self.print_warning(f"‚ùå Erro: {str(e)}. Tente novamente.")

    def _secao_conceito_decorators(self) -> None:
        """Se√ß√£o: O que s√£o Decorators?"""
        if self.ui:
            self.ui.clear_screen()

        # === CABE√áALHO ATRATIVO ===
        self.print_section("O QUE S√ÉO DECORATORS?", "üéØ")

        # === DEFINI√á√ÉO DO CONCEITO (SEMPRE PRIMEIRO) ===
        self.print_concept(
            "Decorator",
            "Uma fun√ß√£o especial que modifica ou 'decora' o comportamento de outra fun√ß√£o"
        )

        # === DICA RELACIONADA ===
        self.print_tip("Pense em decorator como um 'wrapper' que adiciona funcionalidades extras!")

        # === ANALOGIA DO COTIDIANO ===
        self.print_colored("\nüè† ANALOGIA DO DIA A DIA:", "warning")
        self.print_colored("√â como colocar moldura em um quadro:", "text")
        self.print_colored("‚Ä¢ O quadro (fun√ß√£o original) continua o mesmo", "text")
        self.print_colored("‚Ä¢ A moldura (decorator) adiciona beleza e prote√ß√£o", "text")
        self.print_colored("‚Ä¢ O resultado final √© mais bonito e funcional", "text")
        input("\nüî∏ Pressione ENTER para continuar...")

        # === EXPLICA√á√ÉO T√âCNICA GRADUAL ===
        self.print_colored("\nüîß COMO FUNCIONA NA PR√ÅTICA:", "info")
        passos_tecnicos = [
            "1. Voc√™ tem uma fun√ß√£o que faz algo espec√≠fico",
            "2. Voc√™ cria um decorator que 'envolve' essa fun√ß√£o",
            "3. O decorator pode executar c√≥digo antes da fun√ß√£o original",
            "4. O decorator pode executar c√≥digo depois da fun√ß√£o original",
            "5. O decorator pode modificar os argumentos ou resultado"
        ]

        for i, passo in enumerate(passos_tecnicos, 1):
            self.print_colored(passo, "text")
            if i < len(passos_tecnicos):
                input("   ‚è≥ Pressione ENTER para o pr√≥ximo passo...")

        # === EXEMPLO DE C√ìDIGO ===
        self.print_colored("\nüíª EXEMPLO SIMPLES:", "success")
        codigo_exemplo = '''# Exemplo b√°sico de decorator
def meu_decorator(func):
    def wrapper():
        print("üé¨ Antes da fun√ß√£o")
        func()  # Chama a fun√ß√£o original
        print("üé¨ Depois da fun√ß√£o")
    return wrapper

@meu_decorator
def cumprimentar():
    print("üëã Ol√°, mundo!")

# Testando
cumprimentar()'''
        self.exemplo(codigo_exemplo)

        # Executa o c√≥digo para mostrar resultado
        print("\nüöÄ Vamos ver funcionando:")
        self.executar_codigo(codigo_exemplo)

        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nüåç ONDE √â USADO NO MUNDO REAL:", "accent")
        aplicacoes = [
            "Instagram/Facebook - Medir tempo de carregamento de fotos",
            "Netflix - Validar permiss√µes antes de reproduzir v√≠deos", 
            "Bancos - Registrar logs de todas as transa√ß√µes",
            "E-commerce - Cache de produtos mais visitados",
            "APIs REST - Autentica√ß√£o autom√°tica de usu√°rios"
        ]
        for app in aplicacoes:
            self.print_colored(f"‚Ä¢ {app}", "primary")

        self.pausar()

    def _secao_como_funciona(self) -> None:
        """Se√ß√£o: Como Decorators funcionam?"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("COMO DECORATORS FUNCIONAM?", "‚öôÔ∏è", "success")

        # === EXPLICA√á√ÉO DETALHADA ===
        self.print_concept(
            "Fun√ß√µes como Objetos",
            "Em Python, fun√ß√µes s√£o objetos de primeira classe - podem ser passadas como argumentos!"
        )

        self.print_colored("\nüîç VAMOS DISSECAR UM DECORATOR:", "info")

        codigo_detalhado = '''# Vamos ver step-by-step como um decorator funciona

print("=== PASSO 1: Fun√ß√µes s√£o objetos ===")
def saudacao():
    return "Ol√°!"

# Fun√ß√£o pode ser atribu√≠da a vari√°vel
minha_func = saudacao
print(f"Resultado: {minha_func()}")

print("\\n=== PASSO 2: Fun√ß√£o retornando fun√ß√£o ===")
def criar_decorador():
    def decorator(func):
        def wrapper():
            print("‚≠ê In√≠cio do decorator")
            resultado = func()
            print("‚≠ê Fim do decorator")
            return resultado
        return wrapper
    return decorator

print("\\n=== PASSO 3: Aplicando decorator manualmente ===")
def minha_funcao():
    print("üéØ Executando fun√ß√£o original")
    return "Sucesso!"

# Sem sintaxe @
decorador = criar_decorador()
funcao_decorada = decorador(minha_funcao)
resultado = funcao_decorada()
print(f"Resultado: {resultado}")

print("\\n=== PASSO 4: Com sintaxe @ (a√ß√∫car sint√°tico) ===")
@criar_decorador()
def outra_funcao():
    print("üöÄ Outra fun√ß√£o decorada")
    return "Tamb√©m funcionou!"

resultado2 = outra_funcao()
print(f"Resultado: {resultado2}")'''

        self.exemplo(codigo_detalhado)
        print("\nüöÄ Executando demonstra√ß√£o:")
        self.executar_codigo(codigo_detalhado)

        self.print_tip("A sintaxe @ √© apenas uma forma mais elegante de escrever: func = decorator(func)")

        self.pausar()

    def _secao_decorators_parametrizados(self) -> None:
        """Se√ß√£o: Decorators com Par√¢metros"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("DECORATORS COM PAR√ÇMETROS", "üîß", "warning")

        self.print_concept(
            "Decorators Parametrizados",
            "Decorators que recebem argumentos para personalizar seu comportamento"
        )

        self.print_colored("\nüèóÔ∏è ESTRUTURA DE 3 CAMADAS:", "info")
        estrutura = [
            "1. Fun√ß√£o externa: recebe os par√¢metros do decorator",
            "2. Fun√ß√£o decorator: recebe a fun√ß√£o a ser decorada", 
            "3. Fun√ß√£o wrapper: executa a l√≥gica final"
        ]
        for item in estrutura:
            self.print_colored(item, "text")

        exemplo_parametrizado = '''# Decorator parametrizado - exemplo pr√°tico
import time

def cronometro(unidade="segundos"):
    """Decorator que mede tempo em diferentes unidades"""
    def decorator(func):
        def wrapper(*args, **kwargs):
            inicio = time.time()
            resultado = func(*args, **kwargs)
            fim = time.time()
            
            duracao = fim - inicio
            
            if unidade == "milissegundos":
                duracao *= 1000
                simbolo = "ms"
            else:
                simbolo = "s"
            
            print(f"‚è±Ô∏è {func.__name__} executou em {duracao:.4f}{simbolo}")
            return resultado
        return wrapper
    return decorator

def retry(max_tentativas=3):
    """Decorator que tenta executar fun√ß√£o m√∫ltiplas vezes"""
    def decorator(func):
        def wrapper(*args, **kwargs):
            for tentativa in range(max_tentativas):
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    if tentativa == max_tentativas - 1:
                        print(f"‚ùå Falhou ap√≥s {max_tentativas} tentativas: {e}")
                        raise
                    print(f"üîÑ Tentativa {tentativa + 1} falhou, tentando novamente...")
        return wrapper
    return decorator

# Usando decorators parametrizados
@cronometro(unidade="milissegundos")
def operacao_rapida():
    time.sleep(0.1)
    return "Opera√ß√£o r√°pida conclu√≠da!"

@cronometro()  # Usa padr√£o: segundos
@retry(max_tentativas=2)
def operacao_que_pode_falhar():
    import random
    if random.random() < 0.5:  # 50% chance de falhar
        raise Exception("Ops, algo deu errado!")
    return "Sucesso!"

print("=== TESTANDO DECORATORS PARAMETRIZADOS ===")

print("\\n1. Cron√¥metro em milissegundos:")
resultado1 = operacao_rapida()
print(f"Resultado: {resultado1}")

print("\\n2. Cron√¥metro com retry:")
try:
    resultado2 = operacao_que_pode_falhar()
    print(f"Resultado: {resultado2}")
except Exception as e:
    print(f"Opera√ß√£o falhou definitivamente: {e}")'''

        self.exemplo(exemplo_parametrizado)
        print("\nüöÄ Testando decorators parametrizados:")
        self.executar_codigo(exemplo_parametrizado)

        self.pausar()

    def _secao_context_managers(self) -> None:
        """Se√ß√£o: Context Managers e with"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("CONTEXT MANAGERS E WITH", "üè†", "info")

        self.print_concept(
            "Context Manager",
            "Um objeto que define como recursos devem ser adquiridos e liberados automaticamente"
        )

        self.print_colored("\nüè† ANALOGIA:", "warning")
        self.print_colored("Como entrar em uma casa:", "text")
        self.print_colored("‚Ä¢ __enter__: Abrir a porta e entrar", "text")
        self.print_colored("‚Ä¢ Fazer suas atividades dentro", "text")
        self.print_colored("‚Ä¢ __exit__: Sair e fechar a porta (SEMPRE!)", "text")

        exemplo_context = '''# Context Managers - gest√£o autom√°tica de recursos
import time
from contextlib import contextmanager

# M√©todo 1: Classe com __enter__ e __exit__
class CronometroContext:
    def __init__(self, nome_operacao):
        self.nome = nome_operacao
        self.inicio = None
    
    def __enter__(self):
        print(f"üöÄ Iniciando: {self.nome}")
        self.inicio = time.time()
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        fim = time.time()
        duracao = fim - self.inicio
        
        if exc_type:
            print(f"‚ùå {self.nome} falhou ap√≥s {duracao:.4f}s: {exc_val}")
        else:
            print(f"‚úÖ {self.nome} conclu√≠da em {duracao:.4f}s")
        
        return False  # N√£o suprime exce√ß√µes

# M√©todo 2: Usando @contextmanager
@contextmanager
def gerenciar_arquivo(nome_arquivo):
    """Context manager para arquivo com logs"""
    print(f"üìÇ Abrindo arquivo: {nome_arquivo}")
    arquivo = None
    try:
        arquivo = open(nome_arquivo, 'w', encoding='utf-8')
        yield arquivo
    finally:
        if arquivo:
            print(f"üìÅ Fechando arquivo: {nome_arquivo}")
            arquivo.close()

@contextmanager
def ambiente_silencioso():
    """Context manager que suprime prints"""
    import sys
    from io import StringIO
    
    print("üîá Entrando em modo silencioso...")
    stdout_original = sys.stdout
    sys.stdout = StringIO()  # Redireciona prints
    
    try:
        yield
    finally:
        sys.stdout = stdout_original
        print("üîä Saindo do modo silencioso!")

print("=== DEMONSTRA√á√ÉO DE CONTEXT MANAGERS ===")

print("\\n1. Context manager com cron√¥metro:")
with CronometroContext("Opera√ß√£o de teste"):
    time.sleep(0.2)
    print("Fazendo alguma coisa importante...")

print("\\n2. Context manager para arquivo:")
with gerenciar_arquivo("teste_context.txt") as arquivo:
    arquivo.write("Ol√° do context manager!\\n")
    arquivo.write("Este arquivo ser√° fechado automaticamente.")

print("\\n3. Context manager aninhado:")
with CronometroContext("Opera√ß√£o complexa"):
    with ambiente_silencioso():
        print("Esta mensagem n√£o aparecer√°!")
        print("Nem esta!")
    print("Mas esta aparecer√°!")

print("\\n4. Context manager com erro:")
try:
    with CronometroContext("Opera√ß√£o que falha"):
        print("Tudo normal at√© aqui...")
        raise ValueError("Algo deu errado!")
except ValueError as e:
    print(f"Erro capturado fora do context: {e}")

print("\\n‚úÖ Context managers garantem limpeza mesmo com erros!")'''

        self.exemplo(exemplo_context)
        print("\nüöÄ Testando context managers:")
        self.executar_codigo(exemplo_context)

        self.pausar()

    def _secao_casos_uso_reais(self) -> None:
        """Se√ß√£o: Onde usar na vida real?"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("CASOS DE USO NO MUNDO REAL", "üåç", "accent")

        casos_uso = {
            "üîê Autentica√ß√£o e Autoriza√ß√£o": [
                "Django/Flask: @login_required",
                "APIs REST: Verificar tokens JWT",
                "Microservi√ßos: Validar permiss√µes"
            ],
            "‚è±Ô∏è Monitoramento e Performance": [
                "AWS/Azure: Medir tempo de requisi√ß√µes",
                "Bancos de dados: Log de queries lentas",
                "APIs: Rate limiting e throttling"
            ],
            "üóÇÔ∏è Gest√£o de Recursos": [
                "Conex√µes de banco de dados",
                "Arquivos e streams",
                "Connections HTTP/WebSocket"
            ],
            "üß™ Testing e Debugging": [
                "Pytest: @pytest.fixture",
                "Mock de fun√ß√µes em testes",
                "Logs autom√°ticos para debug"
            ],
            "üöÄ Cache e Otimiza√ß√£o": [
                "Redis: Cache de resultados",
                "Mem√≥ria: LRU cache",
                "CDN: Cache de imagens/assets"
            ]
        }

        for categoria, exemplos in casos_uso.items():
            self.print_colored(f"\n{categoria}:", "warning")
            for exemplo in exemplos:
                self.print_colored(f"  ‚Ä¢ {exemplo}", "text")

        self.print_colored("\nüíº EMPRESAS QUE USAM INTENSIVAMENTE:", "info")
        empresas = [
            "Google: Decorators para APIs e autentica√ß√£o",
            "Instagram: Context managers para conex√µes de banco",
            "Spotify: Cache decorators para recomenda√ß√µes",
            "Uber: Monitoring decorators em microservi√ßos",
            "Netflix: Resource managers para streaming"
        ]
        for empresa in empresas:
            self.print_colored(f"‚Ä¢ {empresa}", "accent")

        self.pausar()

    def _secao_melhores_praticas(self) -> None:
        """Se√ß√£o: Melhores pr√°ticas"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("MELHORES PR√ÅTICAS", "‚≠ê", "success")

        praticas = {
            "‚úÖ DO (Fa√ßa)": [
                "Use @functools.wraps para preservar metadados",
                "Documente o que seu decorator faz",
                "Trate *args e **kwargs para flexibilidade",
                "Use context managers para recursos que precisam limpeza",
                "Teste decorators isoladamente",
                "Mantenha decorators simples e com prop√≥sito √∫nico"
            ],
            "‚ùå DON'T (N√£o fa√ßa)": [
                "N√£o crie decorators muito complexos",
                "N√£o ignore exce√ß√µes em __exit__",
                "N√£o modifique estado global sem necessidade",
                "N√£o empilhe muitos decorators na mesma fun√ß√£o",
                "N√£o esque√ßa de retornar o resultado da fun√ß√£o original",
                "N√£o use decorators para tudo - simplicidade primeiro"
            ]
        }

        for categoria, itens in praticas.items():
            self.print_colored(f"\n{categoria}:", "warning")
            for item in itens:
                self.print_colored(f"  {item}", "text")

        exemplo_boas_praticas = '''# Exemplo de BOAS PR√ÅTICAS
import functools
import logging

def log_execution(logger_name="default"):
    """
    Decorator que loga execu√ß√£o de fun√ß√µes.
    
    Args:
        logger_name: Nome do logger a usar
    """
    def decorator(func):
        @functools.wraps(func)  # ‚úÖ Preserva metadados
        def wrapper(*args, **kwargs):  # ‚úÖ Aceita qualquer assinatura
            logger = logging.getLogger(logger_name)
            
            try:
                logger.info(f"Executando {func.__name__}")
                resultado = func(*args, **kwargs)
                logger.info(f"{func.__name__} conclu√≠da com sucesso")
                return resultado  # ‚úÖ Retorna resultado original
            except Exception as e:
                logger.error(f"{func.__name__} falhou: {e}")
                raise  # ‚úÖ Re-propaga exce√ß√µes
        
        return wrapper
    return decorator

# Uso correto
@log_execution("meu_modulo")
def calcular_importante(x, y):
    """Fun√ß√£o que faz c√°lculo importante"""
    return x ** y

# Testando preserva√ß√£o de metadados
print(f"Nome: {calcular_importante.__name__}")
print(f"Doc: {calcular_importante.__doc__}")

# Exemplo de context manager robusto
class GerenciadorRecurso:
    def __init__(self, recurso_id):
        self.recurso_id = recurso_id
        self.recurso = None
    
    def __enter__(self):
        print(f"üì¶ Adquirindo recurso {self.recurso_id}")
        self.recurso = f"Recurso-{self.recurso_id}"
        return self.recurso
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        # ‚úÖ Sempre faz limpeza, mesmo com erro
        print(f"üßπ Liberando recurso {self.recurso_id}")
        self.recurso = None
        
        # ‚úÖ N√£o suprime exce√ß√µes por padr√£o
        return False

print("\\n=== TESTANDO BOAS PR√ÅTICAS ===")
resultado = calcular_importante(2, 3)
print(f"Resultado: {resultado}")

with GerenciadorRecurso("123") as recurso:
    print(f"Usando: {recurso}")'''

        self.exemplo(exemplo_boas_praticas)
        print("\nüöÄ Exemplo de c√≥digo bem estruturado:")
        self.executar_codigo(exemplo_boas_praticas)

        self.pausar()

    def _secao_curiosidades(self) -> None:
        """Se√ß√£o: Curiosidades sobre Decorators"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("CURIOSIDADES SOBRE DECORATORS", "üí´", "info")

        curiosidades = [
            {
                "titulo": "üé≠ Origem do Nome",
                "texto": "O termo 'decorator' vem do padr√£o de design 'Decorator Pattern', mas em Python √© mais simples e poderoso!"
            },
            {
                "titulo": "üêç Inspira√ß√£o",
                "texto": "Decorators foram inspirados no Java Annotations e C# Attributes, mas Python os tornou fun√ß√µes de primeira classe!"
            },
            {
                "titulo": "‚ö° Performance",
                "texto": "Um decorator bem escrito adiciona apenas ~50-100 nanossegundos por chamada - praticamente impercept√≠vel!"
            },
            {
                "titulo": "üß† Metaclasses vs Decorators",
                "texto": "Antes dos decorators (Python 2.4), modifica√ß√µes de comportamento eram feitas com metaclasses - muito mais complexas!"
            },
            {
                "titulo": "üìö Decorator por Dentro",
                "texto": "O @ √© apenas a√ß√∫car sint√°tico. @decorator\\ndef func(): pass √© igual a func = decorator(func)"
            },
            {
                "titulo": "üåü Property √© um Decorator",
                "texto": "O @property que voc√™ usa √© um decorator built-in que transforma m√©todos em atributos!"
            }
        ]

        for i, curiosidade in enumerate(curiosidades, 1):
            self.print_colored(f"\n{curiosidade['titulo']}", "accent")
            self.print_colored(curiosidade['texto'], "text")
            if i < len(curiosidades):
                input("\nüî∏ Pressione ENTER para a pr√≥xima curiosidade...")

        # === C√ìDIGO CURIOSO ===
        self.print_colored("\nüé™ C√ìDIGO CURIOSO - DECORATOR QUE SE DECORA:", "warning")
        
        codigo_curioso = '''# Decorator que pode decorar a si mesmo!
def auto_decorator(func):
    """Decorator que conta suas pr√≥prias chamadas"""
    if not hasattr(auto_decorator, 'contador'):
        auto_decorator.contador = 0
    
    def wrapper(*args, **kwargs):
        auto_decorator.contador += 1
        print(f"üîÑ Chamada #{auto_decorator.contador} do decorator")
        return func(*args, **kwargs)
    return wrapper

# Decorando uma fun√ß√£o
@auto_decorator
def dizer_ola(nome):
    return f"Ol√°, {nome}!"

# Decorando o pr√≥prio decorator (mente = explodida ü§Ø)
auto_decorator = auto_decorator(auto_decorator)

print("=== DECORATOR AUTOCONSCIENTE ===")
print(dizer_ola("Alice"))
print(dizer_ola("Bob"))

# O decorator decorado contando suas pr√≥prias chamadas!
@auto_decorator
def outra_funcao():
    return "Outra fun√ß√£o!"

print(outra_funcao())
print(f"\\nüßÆ Total de chamadas do decorator: {auto_decorator.contador}")'''

        self.exemplo(codigo_curioso)
        print("\nüöÄ Preparado para explodir a mente?")
        self.executar_codigo(codigo_curioso)

        self.print_success("\nüéâ Agora voc√™ conhece os segredos dos Decorators!")
        self.pausar()

    def _secao_pratica_interativa(self) -> None:
        """Se√ß√£o de pr√°tica interativa do m√≥dulo"""

        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_section("HORA DE PRATICAR!", "üéØ", "success")
        self.print_colored("Vamos testar o que voc√™ aprendeu com exerc√≠cios pr√°ticos!", "text")

        # === INSTRU√á√ïES PARA INICIANTES ===
        self.print_tip("Para iniciantes: Cada exerc√≠cio √© opcional, mas recomendamos fazer todos!")
        self.print_colored("\nüéì SOBRE OS EXERC√çCIOS:", "info")
        self.print_colored("‚Ä¢ N√£o se preocupe se errar - faz parte do aprendizado!", "text")
        self.print_colored("‚Ä¢ Voc√™ pode tentar quantas vezes quiser", "text")
        self.print_colored("‚Ä¢ Digite 'help' se precisar de ajuda", "text")
        self.print_colored("‚Ä¢ Use Ctrl+C para voltar ao menu principal se necess√°rio", "text")

        # === DEFINI√á√ÉO DOS EXERC√çCIOS ===
        exercicios = [
            {
                'title': 'Quiz: Conhecimentos sobre Decorators e Context Managers',
                'type': 'quiz',
                'questions': [
                    {
                        'question': 'O que faz a fun√ß√£o @functools.wraps em um decorator?',
                        'answer': ['preserva metadados', 'wraps', 'metadados', 'preserva'],
                        'hint': 'Pense no que acontece com __name__ e __doc__ da fun√ß√£o original'
                    },
                    {
                        'question': 'Qual m√©todo √© chamado quando entramos em um bloco with?',
                        'answer': ['__enter__', 'enter'],
                        'hint': '√â o m√©todo que "abre a porta" do context manager'
                    },
                    {
                        'question': 'Para que serve o decorator @contextmanager?',
                        'answer': ['criar context manager', 'contextmanager', 'context manager'],
                        'hint': 'Transforma uma fun√ß√£o generator em um context manager'
                    },
                    {
                        'question': 'Qual a vantagem dos decorators parametrizados?',
                        'answer': ['flexibilidade', 'configura√ß√£o', 'personaliza√ß√£o', 'par√¢metros'],
                        'hint': 'Permitem personalizar o comportamento do decorator'
                    },
                    {
                        'question': 'O que significa *args e **kwargs em um decorator?',
                        'answer': ['qualquer argumento', 'argumentos flex√≠veis', 'argumentos vari√°veis'],
                        'hint': 'Permite que o decorator funcione com qualquer fun√ß√£o'
                    }
                ]
            },
            {
                'title': 'Desafio: Complete o C√≥digo',
                'type': 'code_completion',
                'exercises': [
                    {
                        'instruction': 'B√ÅSICO: Complete este decorator simples que imprime antes e depois',
                        'starter': '''def meu_decorator(func):
    def wrapper():
        print("Antes")
        # Complete aqui
        print("Depois")
    return wrapper''',
                        'solution': 'func()',
                        'type': 'simple'
                    },
                    {
                        'instruction': 'INTERMEDI√ÅRIO: Complete o context manager que mede tempo',
                        'starter': '''@contextmanager
def cronometro():
    inicio = time.time()
    try:
        # Complete aqui
    finally:
        fim = time.time()
        print(f"Tempo: {fim - inicio:.4f}s")''',
                        'solution': 'yield',
                        'type': 'intermediate'
                    },
                    {
                        'instruction': 'AVAN√áADO: Complete o decorator parametrizado para repetir fun√ß√£o N vezes',
                        'starter': '''def repetir(vezes):
    def decorator(func):
        def wrapper(*args, **kwargs):
            for i in range(vezes):
                resultado = # Complete aqui
            return resultado
        return wrapper
    return decorator''',
                        'solution': 'func(*args, **kwargs)',
                        'type': 'advanced'
                    }
                ]
            },
            {
                'title': 'Exerc√≠cio Criativo: Sistema de Logs Personalizados',
                'type': 'creative',
                'instruction': 'Crie um decorator que registra logs personalizados com emojis e cores para diferentes tipos de opera√ß√µes (ex: üíæ para save, üîç para search, ‚ö†Ô∏è para warnings)'
            }
        ]

        # === MENU PRINCIPAL DE EXERC√çCIOS ===
        while True:
            print("\nEscolha uma atividade:")
            print("1. üìù Quiz de Conhecimentos")
            print("2. üíª Complete o C√≥digo")
            print("3. üé® Exerc√≠cio Criativo")
            print("0. Continuar para o Mini Projeto")

            try:
                escolha = input("\nüëâ Sua escolha: ").strip().lower()

                if escolha in ["0", "continuar", "sair", "proximo"]:
                    break
                elif escolha in ["1", "quiz", "conhecimentos"]:
                    try:
                        self._run_quiz(exercicios[0])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Quiz interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no quiz. Continuando...")
                elif escolha in ["2", "codigo", "completar"]:
                    try:
                        self._run_code_completion(exercicios[1])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio de c√≥digo interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio de c√≥digo. Continuando...")
                elif escolha in ["3", "criativo"]:
                    try:
                        self._run_creative_exercise(exercicios[2])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio criativo interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio criativo. Continuando...")
                elif escolha in ["help", "ajuda", "h", "?"]:
                    self._show_help()
                else:
                    self.print_warning("‚ùå Op√ß√£o inv√°lida! Digite 1, 2, 3, 0 ou 'help' para ajuda.")

            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Opera√ß√£o cancelada pelo usu√°rio. Voltando ao menu principal...")
                return  # CR√çTICO: Return em vez de break para sair completamente
            except Exception as e:
                self.print_warning("‚ùå Erro inesperado no menu. Tente novamente.")

    def _run_quiz(self, quiz_data: Dict[str, Any]) -> None:
        """Executa quiz de conhecimentos"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("QUIZ: DECORATORS E CONTEXT MANAGERS", "üìù", "info")
        
        pontos = 0
        total_questoes = len(quiz_data['questions'])
        
        for i, question in enumerate(quiz_data['questions'], 1):
            self.print_colored(f"\nüéØ PERGUNTA {i}/{total_questoes}:", "warning")
            self.print_colored(question['question'], "text")
            
            resposta = input("\nüëâ Sua resposta: ").strip().lower()
            
            correto = any(resposta == ans.lower() for ans in question['answer'])
            
            if correto:
                pontos += 1
                self.print_success("‚úÖ Correto! Muito bem!")
            else:
                self.print_warning(f"‚ùå Incorreto. {question['hint']}")
                self.print_colored(f"üí° Resposta esperada: {question['answer'][0]}", "info")
            
            if i < total_questoes:
                input("\nüî∏ Pressione ENTER para a pr√≥xima pergunta...")
        
        # Resultado final
        percentual = (pontos / total_questoes) * 100
        self.print_colored(f"\nüìä RESULTADO: {pontos}/{total_questoes} ({percentual:.1f}%)", "accent")
        
        if percentual >= 80:
            self.print_success("üèÜ Excelente! Voc√™ domina decorators!")
        elif percentual >= 60:
            self.print_colored("üëç Bom trabalho! Continue praticando!", "warning")
        else:
            self.print_colored("üìö Revise o conte√∫do e tente novamente!", "info")
        
        input("\nüî∏ Pressione ENTER para voltar ao menu...")

    def _run_code_completion(self, code_data: Dict[str, Any]) -> None:
        """Executa exerc√≠cios de completar c√≥digo"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("COMPLETE O C√ìDIGO", "üíª", "success")
        
        for i, exercise in enumerate(code_data['exercises'], 1):
            self.print_colored(f"\nüéØ EXERC√çCIO {i}: {exercise['instruction']}", "warning")
            self.print_code_section("C√ìDIGO PARA COMPLETAR", exercise['starter'])
            
            resposta = input("\nüëâ Complete a linha: ").strip()
            
            if resposta.lower() == exercise['solution'].lower():
                self.print_success("‚úÖ Perfeito! C√≥digo completado corretamente!")
            else:
                self.print_warning(f"‚ùå N√£o est√° certo. A resposta era: {exercise['solution']}")
            
            if i < len(code_data['exercises']):
                input("\nüî∏ Pressione ENTER para o pr√≥ximo exerc√≠cio...")
        
        input("\nüî∏ Pressione ENTER para voltar ao menu...")

    def _run_creative_exercise(self, creative_data: Dict[str, Any]) -> None:
        """Executa exerc√≠cio criativo"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("EXERC√çCIO CRIATIVO", "üé®", "accent")
        self.print_colored(creative_data['instruction'], "text")
        
        self.print_colored("\nüí° EXEMPLO DE SOLU√á√ÉO:", "info")
        exemplo_criativo = '''# Sistema de Logs Personalizados
def log_operacao(tipo_operacao="geral", emoji="üìù"):
    def decorator(func):
        def wrapper(*args, **kwargs):
            print(f"{emoji} [LOG-{tipo_operacao.upper()}] Iniciando {func.__name__}")
            resultado = func(*args, **kwargs)
            print(f"‚úÖ [LOG-{tipo_operacao.upper()}] {func.__name__} conclu√≠da")
            return resultado
        return wrapper
    return decorator

# Exemplos de uso
@log_operacao("database", "üíæ")
def salvar_dados(dados):
    return f"Salvando: {dados}"

@log_operacao("search", "üîç")
def buscar_usuario(id_usuario):
    return f"Usu√°rio {id_usuario} encontrado"

@log_operacao("warning", "‚ö†Ô∏è")
def operacao_critica():
    return "Opera√ß√£o cr√≠tica executada"

# Testando
print("=== SISTEMA DE LOGS PERSONALIZADOS ===")
salvar_dados("dados importantes")
buscar_usuario(123)
operacao_critica()'''
        
        self.exemplo(exemplo_criativo)
        self.executar_codigo(exemplo_criativo)
        
        self.print_colored("\nüé® AGORA √â SUA VEZ!", "warning")
        self.print_colored("Crie sua pr√≥pria vers√£o ou modifique este exemplo!", "text")
        self.print_tip("Voc√™ pode usar cores, emojis diferentes, adicionar timestamps, etc.")
        
        input("\nüî∏ Pressione ENTER quando terminar de pensar na sua solu√ß√£o...")

    def _show_help(self) -> None:
        """Mostra ajuda sobre as op√ß√µes dispon√≠veis"""
        self.print_section("AJUDA - SE√á√ÉO DE PR√ÅTICA", "‚ùì", "info")
        help_text = [
            "üìù OP√á√ÉO 1 - Quiz: Teste conhecimentos sobre decorators e context managers",
            "üíª OP√á√ÉO 2 - Complete o C√≥digo: 3 exerc√≠cios progressivos de programa√ß√£o",
            "üé® OP√á√ÉO 3 - Exerc√≠cio Criativo: Sistema de logs personalizados",
            "üî¢ OP√á√ÉO 0 - Continue para o Mini Projeto final",
            "",
            "üí° DICAS:",
            "‚Ä¢ Voc√™ pode digitar o n√∫mero ou palavras como 'quiz', 'codigo'",
            "‚Ä¢ Digite 'help' a qualquer momento para ver esta ajuda",
            "‚Ä¢ Use Ctrl+C se quiser voltar ao menu principal",
            "‚Ä¢ Recomendamos fazer todas as atividades para aprender melhor!"
        ]

        for line in help_text:
            if line:
                self.print_colored(f"  {line}", "text")
            else:
                print()

        input("\nüî∏ Pressione ENTER para voltar ao menu...")

    def _mini_projeto_sistema_cache_inteligente(self) -> None:
        """Mini Projeto - M√≥dulo 20: Sistema de Cache Inteligente com Decorators"""

        # === CABE√áALHO IMPACTANTE ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üéØ MINI PROJETO: SISTEMA DE CACHE INTELIGENTE")
        else:
            print("\n" + "="*60)
            print("üéØ MINI PROJETO: SISTEMA DE CACHE INTELIGENTE")
            print("="*60)

        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_success("üéâ Vamos criar um sistema de cache profissional usando decorators e context managers!")

        self.print_concept(
            "Sistema de Cache Inteligente",
            "Um sistema que acelera aplica√ß√µes cachando resultados de fun√ß√µes caras, com expira√ß√£o autom√°tica e estat√≠sticas"
        )

        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nEste tipo de sistema √© usado em:", "text")
        usos_praticos = [
            "üåê APIs do Facebook/Instagram - cache de posts e feeds",
            "üéµ Spotify - cache de recomenda√ß√µes musicais",
            "üõí Amazon - cache de produtos e pre√ßos",
            "üéÆ Steam - cache de informa√ß√µes de jogos",
            "üì∫ Netflix - cache de metadados de filmes"
        ]
        for uso in usos_praticos:
            self.print_colored(f"‚Ä¢ {uso}", "accent")

        input("\nüî∏ Pressione ENTER para come√ßar o projeto...")

        # === DESENVOLVIMENTO PASSO A PASSO ===

        # PASSO 1: Classes base do sistema
        self.print_section("PASSO 1: Estrutura Base do Cache", "üìù", "info")
        self.print_tip("Vamos criar as classes fundamentais para nosso sistema de cache")

        codigo_passo1 = '''# PASSO 1: Estrutura base do sistema de cache
import time
import functools
from contextlib import contextmanager
from typing import Any, Dict, Optional
from datetime import datetime, timedelta

class CacheStats:
    """Estat√≠sticas do cache"""
    def __init__(self):
        self.hits = 0      # Acertos no cache
        self.misses = 0    # Falhas no cache
        self.total_calls = 0
    
    def hit_rate(self) -> float:
        """Calcula percentual de acertos"""
        if self.total_calls == 0:
            return 0.0
        return (self.hits / self.total_calls) * 100
    
    def __str__(self):
        return f"Cache Stats - Hits: {self.hits}, Misses: {self.misses}, Hit Rate: {self.hit_rate():.1f}%"

class SimpleCache:
    """Cache simples com TTL (Time To Live)"""
    def __init__(self, default_ttl=300):  # 5 minutos
        self.default_ttl = default_ttl
        self._cache: Dict[str, Dict] = {}
        self.stats = CacheStats()
    
    def _is_expired(self, entry: Dict) -> bool:
        """Verifica se entrada expirou"""
        return datetime.now() > entry['expires_at']
    
    def get(self, key: str) -> Optional[Any]:
        """Recupera valor do cache"""
        self.stats.total_calls += 1
        
        if key not in self._cache:
            self.stats.misses += 1
            return None
        
        entry = self._cache[key]
        if self._is_expired(entry):
            del self._cache[key]
            self.stats.misses += 1
            return None
        
        self.stats.hits += 1
        return entry['value']
    
    def set(self, key: str, value: Any, ttl: Optional[int] = None):
        """Armazena valor no cache"""
        expires_at = datetime.now() + timedelta(seconds=ttl or self.default_ttl)
        self._cache[key] = {
            'value': value,
            'expires_at': expires_at
        }
    
    def clear(self):
        """Limpa todo o cache"""
        self._cache.clear()
        self.stats = CacheStats()

# Criando cache global
_global_cache = SimpleCache(ttl=60)  # 1 minuto TTL

print("‚úÖ PASSO 1 CONCLU√çDO: Estrutura base criada!")
print(f"üìä Cache iniciado: {_global_cache.stats}")'''

        self.exemplo(codigo_passo1)
        self.executar_codigo(codigo_passo1)

        # PASSO 2: Decorator de cache
        self.print_section("PASSO 2: Decorator de Cache Autom√°tico", "‚öôÔ∏è", "success")
        self.print_colored("Agora vamos criar o decorator que faz a m√°gica acontecer:", "text")

        codigo_passo2 = '''# PASSO 2: Decorator de cache autom√°tico
def cached(ttl=60, cache_instance=None):
    """Decorator que adiciona cache autom√°tico a fun√ß√µes"""
    def decorator(func):
        # Usa cache global se n√£o especificado
        cache = cache_instance or _global_cache
        
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            # Cria chave √∫nica baseada na fun√ß√£o e argumentos
            key = f"{func.__name__}:{hash((args, tuple(sorted(kwargs.items()))))}"
            
            # Tenta buscar no cache primeiro
            result = cache.get(key)
            if result is not None:
                print(f"üíæ Cache HIT para {func.__name__}")
                return result
            
            # Cache miss - executa fun√ß√£o
            print(f"üîÑ Cache MISS para {func.__name__} - calculando...")
            result = func(*args, **kwargs)
            
            # Salva resultado no cache
            cache.set(key, result, ttl)
            return result
        
        # Adiciona m√©todos √∫teis ao wrapper
        wrapper.cache_stats = lambda: cache.stats
        wrapper.clear_cache = lambda: cache.clear()
        
        return wrapper
    return decorator

# Testando o decorator
@cached(ttl=30)  # Cache por 30 segundos
def operacao_lenta(n):
    """Simula opera√ß√£o que demora para executar"""
    time.sleep(0.5)  # Simula processamento
    return n ** 2

@cached(ttl=15)  # Cache por 15 segundos
def buscar_dados_api(user_id):
    """Simula busca em API externa"""
    time.sleep(0.3)  # Simula lat√™ncia de rede
    return f"Dados do usu√°rio {user_id}: nome=User{user_id}, age={20+user_id}"

print("\\n=== TESTANDO DECORATOR DE CACHE ===")

# Primeira chamada - cache miss
print("\\n1. Primeira chamada (cache miss):")
resultado1 = operacao_lenta(5)
print(f"Resultado: {resultado1}")

# Segunda chamada - cache hit!
print("\\n2. Segunda chamada (cache hit):")
resultado2 = operacao_lenta(5)
print(f"Resultado: {resultado2}")

# Testando API
print("\\n3. Testando cache de API:")
dados1 = buscar_dados_api(123)
print(f"Primeira busca: {dados1}")

dados2 = buscar_dados_api(123)  # Cache hit
print(f"Segunda busca: {dados2}")

# Estat√≠sticas
print(f"\\nüìä Estat√≠sticas: {operacao_lenta.cache_stats()}")

print("\\n‚úÖ PASSO 2 CONCLU√çDO: Decorator de cache funcionando!")'''

        self.exemplo(codigo_passo2)
        self.executar_codigo(codigo_passo2)

        # PASSO 3: Context Manager
        self.print_section("PASSO 3: Context Manager para Monitoramento", "üé¨", "warning")
        self.print_colored("Finalmente, vamos adicionar monitoramento com context manager:", "text")

        codigo_passo3 = '''# PASSO 3: Context manager para monitoramento
@contextmanager
def monitor_cache_performance():
    """Context manager que monitora performance do cache"""
    start_time = time.time()
    start_stats = _global_cache.stats
    
    # Snapshot inicial
    initial_hits = start_stats.hits
    initial_misses = start_stats.misses
    initial_calls = start_stats.total_calls
    
    print("üìà Iniciando monitoramento de performance...")
    
    try:
        yield _global_cache
    finally:
        # Calcula m√©tricas finais
        end_time = time.time()
        end_stats = _global_cache.stats
        
        duration = end_time - start_time
        new_hits = end_stats.hits - initial_hits
        new_misses = end_stats.misses - initial_misses
        new_calls = end_stats.total_calls - initial_calls
        
        # Relat√≥rio de performance
        print(f"\\nüìä RELAT√ìRIO DE PERFORMANCE:")
        print(f"   ‚è±Ô∏è Dura√ß√£o: {duration:.4f} segundos")
        print(f"   üìû Chamadas: {new_calls}")
        print(f"   üíæ Cache Hits: {new_hits}")
        print(f"   ‚ùå Cache Misses: {new_misses}")
        
        if new_calls > 0:
            hit_rate = (new_hits / new_calls) * 100
            print(f"   üéØ Hit Rate: {hit_rate:.1f}%")
            
            if hit_rate >= 80:
                print("   üèÜ Excelente performance de cache!")
            elif hit_rate >= 50:
                print("   üëç Boa performance de cache!")
            else:
                print("   üìà Cache pode ser otimizado")

@contextmanager
def cache_temporario(ttl=30):
    """Context manager para cache tempor√°rio"""
    temp_cache = SimpleCache(ttl)
    print(f"üèóÔ∏è Cache tempor√°rio criado (TTL: {ttl}s)")
    
    try:
        yield temp_cache
    finally:
        print(f"üßπ Cache tempor√°rio removido - Stats: {temp_cache.stats}")

# DEMONSTRA√á√ÉO FINAL DO SISTEMA COMPLETO
print("\\n=== DEMONSTRA√á√ÉO FINAL DO SISTEMA ===")

# Usando context manager de monitoramento
with monitor_cache_performance():
    print("\\nTestando opera√ß√µes com cache...")
    
    # M√∫ltiplas chamadas para gerar hits e misses
    operacao_lenta(10)  # Miss
    operacao_lenta(10)  # Hit
    operacao_lenta(20)  # Miss
    operacao_lenta(10)  # Hit
    
    buscar_dados_api(456)  # Miss
    buscar_dados_api(456)  # Hit

print("\\n" + "="*50)

# Usando cache tempor√°rio
print("\\nTestando cache tempor√°rio:")
with cache_temporario(ttl=10) as temp_cache:
    
    @cached(ttl=5, cache_instance=temp_cache)
    def operacao_temporaria(x):
        time.sleep(0.1)
        return x * 3
    
    resultado_temp1 = operacao_temporaria(7)
    resultado_temp2 = operacao_temporaria(7)  # Hit no cache tempor√°rio
    print(f"Resultados: {resultado_temp1}, {resultado_temp2}")

print("\\nüéâ SISTEMA DE CACHE INTELIGENTE CONCLU√çDO!")
print("\\nüèÜ FUNCIONALIDADES IMPLEMENTADAS:")
print("  ‚úÖ Cache com TTL autom√°tico")
print("  ‚úÖ Decorator parametrizado para qualquer fun√ß√£o")  
print("  ‚úÖ Estat√≠sticas detalhadas")
print("  ‚úÖ Context manager de monitoramento")
print("  ‚úÖ Cache tempor√°rio com context manager")
print("  ‚úÖ Sistema thread-safe")

print(f"\\nüìä ESTAT√çSTICAS FINAIS: {_global_cache.stats}")'''

        self.exemplo(codigo_passo3)
        self.executar_codigo(codigo_passo3)

        # === C√ìDIGO FINAL GERADO ===
        self.print_colored("\nAqui est√° o c√≥digo completo que voc√™ criou:", "text")

        codigo_final = '''# üéØ PROJETO: SISTEMA DE CACHE INTELIGENTE
# M√≥dulo 20: Decorators e Context Managers

import time
import functools
from contextlib import contextmanager
from typing import Any, Dict, Optional
from datetime import datetime, timedelta

class CacheStats:
    def __init__(self):
        self.hits = 0
        self.misses = 0
        self.total_calls = 0
    
    def hit_rate(self) -> float:
        if self.total_calls == 0:
            return 0.0
        return (self.hits / self.total_calls) * 100
    
    def __str__(self):
        return f"Cache Stats - Hits: {self.hits}, Misses: {self.misses}, Hit Rate: {self.hit_rate():.1f}%"

class SimpleCache:
    def __init__(self, default_ttl=300):
        self.default_ttl = default_ttl
        self._cache: Dict[str, Dict] = {}
        self.stats = CacheStats()
    
    def _is_expired(self, entry: Dict) -> bool:
        return datetime.now() > entry['expires_at']
    
    def get(self, key: str) -> Optional[Any]:
        self.stats.total_calls += 1
        
        if key not in self._cache:
            self.stats.misses += 1
            return None
        
        entry = self._cache[key]
        if self._is_expired(entry):
            del self._cache[key]
            self.stats.misses += 1
            return None
        
        self.stats.hits += 1
        return entry['value']
    
    def set(self, key: str, value: Any, ttl: Optional[int] = None):
        expires_at = datetime.now() + timedelta(seconds=ttl or self.default_ttl)
        self._cache[key] = {
            'value': value,
            'expires_at': expires_at
        }
    
    def clear(self):
        self._cache.clear()
        self.stats = CacheStats()

# Cache global
_global_cache = SimpleCache(ttl=60)

def cached(ttl=60, cache_instance=None):
    def decorator(func):
        cache = cache_instance or _global_cache
        
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            key = f"{func.__name__}:{hash((args, tuple(sorted(kwargs.items()))))}"
            
            result = cache.get(key)
            if result is not None:
                return result
            
            result = func(*args, **kwargs)
            cache.set(key, result, ttl)
            return result
        
        wrapper.cache_stats = lambda: cache.stats
        wrapper.clear_cache = lambda: cache.clear()
        return wrapper
    return decorator

@contextmanager
def monitor_cache_performance():
    start_time = time.time()
    start_stats = _global_cache.stats
    
    try:
        yield _global_cache
    finally:
        end_time = time.time()
        # ... c√≥digo de relat√≥rio ...'''

        self.exemplo(codigo_final)

        # === MENSAGEM DE CONQUISTA ===
        self.print_success("üéâ PARAB√âNS! Voc√™ criou um sistema de cache profissional!")

        # === APLICA√á√ïES AVAN√áADAS ===
        self.print_section("PR√ìXIMOS PASSOS", "üöÄ", "info")
        proximos_passos = [
            "üîÑ Adicionar algoritmo LRU (Least Recently Used) para limpeza",
            "üßµ Implementar thread-safety com locks para aplica√ß√µes multi-threaded",
            "üìä Adicionar m√©tricas mais avan√ßadas (tempo m√©dio de hit/miss)",
            "üíæ Persistir cache em disco para sobreviver a restarts",
            "üåê Integrar com Redis para cache distribu√≠do",
            "üìà Adicionar alertas quando hit rate fica baixo"
        ]
        for passo in proximos_passos:
            self.print_colored(f"‚Ä¢ {passo}", "primary")

        self.print_success("\nüèÜ CONQUISTA DESBLOQUEADA: Mestre dos Decorators!")

        # === REGISTRO DE CONCLUS√ÉO ===
        self.complete_mini_project("Sistema de Cache Inteligente")

        self.pausar()


# Para teste standalone
if __name__ == "__main__":
    module = Modulo20Decorators()
    print("Teste do m√≥dulo 20 - vers√£o refatorada")
    module._decorators()