#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
M√≥dulo 17: JSON e CSV
Aprenda a trabalhar com dados estruturados em JSON e CSV
"""

from ..shared.base_module import BaseModule


class Modulo17JsonCsv(BaseModule):
    """M√≥dulo 17: JSON e CSV - Processamento de Dados Estruturados"""
    
    def __init__(self):
        super().__init__("modulo_17", "JSON e CSV")
        self.has_mini_project = True
        self.mini_project_points = 85
    
    def execute(self) -> None:
        """Executa o m√≥dulo JSON e CSV"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return

        try:
            self._json_csv_moderno()
        except Exception as e:
            self.error_handler(lambda: None)

    def _json_csv_moderno(self) -> None:
        """Conte√∫do principal do m√≥dulo JSON e CSV"""
        # === CABE√áALHO VISUAL ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üìä M√ìDULO 17: JSON E CSV - PROCESSAMENTO DE DADOS")
        else:
            print("\n" + "="*50)
            print("üìä M√ìDULO 17: JSON E CSV - PROCESSAMENTO DE DADOS")
            print("="*50)

        # === MENSAGENS MOTIVACIONAIS ===
        self.print_success("üéâ Bem-vindo ao mundo do processamento de dados estruturados!")
        self.print_tip("Este m√≥dulo est√° dividido em se√ß√µes interativas. Voc√™ controla o ritmo!")

        # === FLUXO PRINCIPAL COM TRATAMENTO DE CTRL+C ===

        # 1. Sistema de navega√ß√£o por se√ß√µes
        try:
            self._navegacao_secoes_interativas()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Navega√ß√£o interrompida pelo usu√°rio. Voltando ao menu principal...")
            return

        # 2. Se√ß√£o de Pr√°tica Interativa
        try:
            self._secao_pratica_interativa()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è M√≥dulo interrompido pelo usu√°rio. Voltando ao menu principal...")
            return

        # 3. Mini Projeto Pr√°tico
        try:
            self._mini_projeto_dashboard_dados()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Mini projeto interrompido. Voltando ao menu principal...")
            return

        # 4. Marcar m√≥dulo como completo
        self.complete_module()

    def _navegacao_secoes_interativas(self) -> None:
        """Sistema de navega√ß√£o por se√ß√µes do m√≥dulo"""

        # === DEFINI√á√ÉO DAS SE√á√ïES ===
        secoes = [
            {
                'id': 'secao_conceito_principal',
                'titulo': 'üéØ O que s√£o JSON e CSV?',
                'descricao': 'Entenda os formatos de dados mais usados no mundo',
                'funcao': self._secao_conceito_principal
            },
            {
                'id': 'secao_como_funciona',
                'titulo': '‚öôÔ∏è Como JSON e CSV funcionam?',
                'descricao': 'Veja a estrutura e sintaxe de cada formato',
                'funcao': self._secao_como_funciona
            },
            {
                'id': 'secao_exemplos_praticos',
                'titulo': 'üí° Exemplos pr√°ticos',
                'descricao': 'Veja JSON e CSV em a√ß√£o com c√≥digo real',
                'funcao': self._secao_exemplos_praticos
            },
            {
                'id': 'secao_casos_uso',
                'titulo': 'üåç Onde usar na vida real?',
                'descricao': 'APIs, bancos de dados, an√°lise de dados e mais',
                'funcao': self._secao_casos_uso
            },
            {
                'id': 'secao_melhores_praticas',
                'titulo': '‚≠ê Melhores pr√°ticas',
                'descricao': 'Dicas de profissionais experientes',
                'funcao': self._secao_melhores_praticas
            },
            {
                'id': 'secao_erros_comuns',
                'titulo': '‚ö†Ô∏è Erros comuns e como evitar',
                'descricao': 'Aprenda com os erros mais frequentes',
                'funcao': self._secao_erros_comuns
            },
            {
                'id': 'secao_curiosidades',
                'titulo': 'üí´ Curiosidades sobre dados',
                'descricao': 'Fatos interessantes sobre JSON e CSV',
                'funcao': self._secao_curiosidades
            }
        ]

        secoes_visitadas = set()

        # === LOOP PRINCIPAL DE NAVEGA√á√ÉO ===
        while True:
            # Limpa tela e mostra cabe√ßalho
            self.ui.clear_screen() if self.ui else print("\n" + "="*50)
            self.print_section("NAVEGA√á√ÉO DO M√ìDULO", "üìö", "accent")
            self.print_colored("Escolha uma se√ß√£o para estudar:", "text")

            # Lista todas as se√ß√µes com status
            print()
            for i, secao in enumerate(secoes, 1):
                status = "‚úÖ" if secao['id'] in secoes_visitadas else "üìñ"
                print(f"{status} {i}. {secao['titulo']}")
                self.print_colored(f"    {secao['descricao']}", "text")
                print()

            print("0. üéØ Continuar para os Exerc√≠cios Pr√°ticos")

            # Mostra progresso visual
            progresso = len(secoes_visitadas)
            total = len(secoes)
            self.print_colored(f"\nüìä Progresso: {progresso}/{total} se√ß√µes visitadas", "info")

            if progresso == total:
                self.print_success("üåü Voc√™ completou todas as se√ß√µes! Est√° pronto para praticar!")

            # Processa escolha do usu√°rio
            try:
                escolha = input(f"\nüëâ Escolha uma se√ß√£o (1-{len(secoes)}) ou 0 para continuar: ").strip()

                if escolha == "0":
                    # Verifica se visitou se√ß√µes suficientes
                    if progresso >= 3:  # Pelo menos 3 se√ß√µes visitadas
                        break
                    else:
                        self.print_warning("üìö Recomendamos visitar pelo menos 3 se√ß√µes antes de continuar!")
                        continuar = input("Quer continuar mesmo assim? (s/n): ").lower()
                        if continuar in ['s', 'sim', 'yes']:
                            break
                elif escolha.isdigit() and 1 <= int(escolha) <= len(secoes):
                    # Executa se√ß√£o escolhida
                    idx = int(escolha) - 1
                    secoes[idx]['funcao']()
                    secoes_visitadas.add(secoes[idx]['id'])
                else:
                    self.print_warning(f"‚ùå Op√ß√£o inv√°lida! Digite um n√∫mero de 1 a {len(secoes)} ou 0.")

            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Pulando para exerc√≠cios pr√°ticos...")
                break
            except Exception as e:
                self.print_warning(f"‚ùå Erro: {str(e)}. Tente novamente.")

    def _secao_conceito_principal(self) -> None:
        """Se√ß√£o: O que s√£o JSON e CSV?"""
        if self.ui:
            self.ui.clear_screen()

        # === CABE√áALHO ATRATIVO ===
        self.print_section("O QUE S√ÉO JSON E CSV?", "üéØ")

        # === DEFINI√á√ÉO DO CONCEITO ===
        self.print_concept(
            "JSON (JavaScript Object Notation)",
            "Formato leve para troca de dados, f√°cil de ler e escrever"
        )

        self.print_concept(
            "CSV (Comma-Separated Values)",
            "Formato simples para dados tabulares, como planilhas"
        )

        # === DICA RELACIONADA ===
        self.print_tip("JSON √© como um dicion√°rio Python, CSV √© como uma tabela Excel!")

        # === ANALOGIA DO COTIDIANO ===
        self.print_colored("\nüè† ANALOGIA DO DIA A DIA:", "warning")
        self.print_colored("JSON √© como uma agenda telef√¥nica digital - cada pessoa tem seus dados organizados", "text")
        self.print_colored("CSV √© como uma lista de compras - itens em linhas e colunas", "text")
        input("\nüî∏ Pressione ENTER para continuar...")

        # === EXPLICA√á√ÉO T√âCNICA GRADUAL ===
        self.print_colored("\nüîß COMO FUNCIONA NA PR√ÅTICA:", "info")
        passos_tecnicos = [
            "1. JSON organiza dados como dicion√°rios e listas Python",
            "2. CSV organiza dados em linhas e colunas separadas por v√≠rgulas",
            "3. Ambos s√£o formatos de texto simples, leg√≠veis por humanos"
        ]

        for i, passo in enumerate(passos_tecnicos, 1):
            self.print_colored(passo, "text")
            if i < len(passos_tecnicos):
                input("   ‚è≥ Pressione ENTER para o pr√≥ximo passo...")

        # === EXEMPLO DE C√ìDIGO ===
        self.print_colored("\nüíª EXEMPLO PR√ÅTICO:", "success")
        codigo_exemplo = '''# Exemplo simples de JSON e CSV
import json
import csv

# Dados de exemplo
pessoa = {
    "nome": "Ana Silva",
    "idade": 28,
    "cidade": "S√£o Paulo"
}

# JSON - Como dicion√°rio
print("JSON:")
print(json.dumps(pessoa, indent=2, ensure_ascii=False))

# CSV - Como tabela
print("\\nCSV:")
print("nome,idade,cidade")
print("Ana Silva,28,S√£o Paulo")'''
        
        self.exemplo(codigo_exemplo)

        # Executa o c√≥digo para mostrar resultado
        print("\nüöÄ Vamos ver funcionando:")
        self.executar_codigo(codigo_exemplo)

        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nüåç ONDE √â USADO NO MUNDO REAL:", "accent")
        aplicacoes = [
            "APIs do Twitter, Instagram, YouTube usam JSON",
            "Bancos exportam relat√≥rios em CSV",
            "Sistemas de e-commerce trocam dados via JSON",
            "Excel e Google Sheets salvam em CSV"
        ]
        for app in aplicacoes:
            self.print_colored(f"‚Ä¢ {app}", "primary")

        self.pausar()

    def _secao_como_funciona(self) -> None:
        """Se√ß√£o: Como JSON e CSV funcionam?"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("COMO JSON E CSV FUNCIONAM?", "‚öôÔ∏è", "info")

        # JSON primeiro
        self.print_colored("\nüìã ESTRUTURA DO JSON:", "warning")
        self.print_colored("JSON usa chaves e valores, como dicion√°rios Python:", "text")
        
        exemplo_json = '''{
  "produto": "Notebook",
  "preco": 2500.99,
  "disponivel": true,
  "categorias": ["eletr√¥nicos", "inform√°tica"],
  "fabricante": {
    "nome": "TechCorp",
    "pais": "Brasil"
  }
}'''
        
        print("\nüíª Exemplo de JSON:")
        self.print_colored(exemplo_json, "accent")
        input("\nüî∏ Pressione ENTER para ver CSV...")

        # CSV depois
        self.print_colored("\nüìä ESTRUTURA DO CSV:", "success")
        self.print_colored("CSV usa v√≠rgulas para separar dados em colunas:", "text")
        
        exemplo_csv = '''produto,preco,disponivel,categoria
Notebook,2500.99,true,eletr√¥nicos
Mouse,89.90,true,perif√©ricos
Monitor,1200.00,false,eletr√¥nicos'''
        
        print("\nüìã Exemplo de CSV:")
        self.print_colored(exemplo_csv, "info")
        input("\nüî∏ Pressione ENTER para ver as diferen√ßas...")

        # Compara√ß√£o
        self.print_colored("\n‚öñÔ∏è PRINCIPAIS DIFEREN√áAS:", "warning")
        diferencas = [
            ("JSON", "Hier√°rquico (aninhado)", "Mais flex√≠vel"),
            ("CSV", "Tabular (planilha)", "Mais simples")
        ]
        
        for formato, estrutura, caracteristica in diferencas:
            self.print_colored(f"\n{formato}:", "accent")
            self.print_colored(f"  ‚Ä¢ Estrutura: {estrutura}", "text")
            self.print_colored(f"  ‚Ä¢ Vantagem: {caracteristica}", "text")

        self.pausar()

    def _secao_exemplos_praticos(self) -> None:
        """Se√ß√£o: Exemplos pr√°ticos de JSON e CSV"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("EXEMPLOS PR√ÅTICOS", "üí°", "success")

        exemplos = [
            {
                'titulo': 'EXEMPLO 1: Salvando dados pessoais em JSON',
                'descricao': 'Como organizar informa√ß√µes complexas',
                'codigo': '''import json

# Dados de um usu√°rio
usuario = {
    "id": 1001,
    "nome": "Maria Santos",
    "email": "maria@email.com",
    "enderecos": [
        {"tipo": "casa", "cidade": "S√£o Paulo"},
        {"tipo": "trabalho", "cidade": "S√£o Paulo"}
    ],
    "ativo": True
}

# Salvando em JSON
with open("usuario.json", "w", encoding="utf-8") as arquivo:
    json.dump(usuario, arquivo, indent=2, ensure_ascii=False)

print("‚úÖ Dados salvos em usuario.json")

# Carregando de volta
with open("usuario.json", "r", encoding="utf-8") as arquivo:
    usuario_carregado = json.load(arquivo)

print(f"Nome: {usuario_carregado['nome']}")
print(f"Endere√ßos: {len(usuario_carregado['enderecos'])}")''',
                'explicacao': 'JSON √© perfeito para dados complexos com hierarquia'
            },
            {
                'titulo': 'EXEMPLO 2: Processando vendas em CSV',
                'descricao': 'Como trabalhar com dados tabulares',
                'codigo': '''import csv
from datetime import datetime

# Dados de vendas
vendas = [
    ["2024-01-15", "Notebook", 2, 2500.00],
    ["2024-01-15", "Mouse", 5, 50.00],
    ["2024-01-16", "Teclado", 3, 150.00]
]

# Salvando CSV
with open("vendas.csv", "w", newline="", encoding="utf-8") as arquivo:
    writer = csv.writer(arquivo)
    # Cabe√ßalho
    writer.writerow(["data", "produto", "quantidade", "preco"])
    # Dados
    writer.writerows(vendas)

print("‚úÖ Vendas salvas em vendas.csv")

# Lendo CSV
with open("vendas.csv", "r", encoding="utf-8") as arquivo:
    reader = csv.DictReader(arquivo)
    total = 0
    for linha in reader:
        subtotal = int(linha["quantidade"]) * float(linha["preco"])
        total += subtotal
        print(f"{linha['produto']}: R$ {subtotal:.2f}")
    
print(f"\\nTotal geral: R$ {total:.2f}")''',
                'explicacao': 'CSV √© ideal para dados simples em formato de tabela'
            },
            {
                'titulo': 'EXEMPLO 3: Convertendo entre formatos',
                'descricao': 'Como transformar CSV em JSON e vice-versa',
                'codigo': '''import json
import csv

# Fun√ß√£o para converter CSV para JSON
def csv_para_json(arquivo_csv, arquivo_json):
    dados = []
    with open(arquivo_csv, "r", encoding="utf-8") as csv_file:
        reader = csv.DictReader(csv_file)
        for linha in reader:
            dados.append(linha)
    
    with open(arquivo_json, "w", encoding="utf-8") as json_file:
        json.dump(dados, json_file, indent=2, ensure_ascii=False)
    
    return len(dados)

# Convertendo
if True:  # Simulando exist√™ncia do arquivo
    # Criamos dados de exemplo primeiro
    dados_exemplo = [
        {"nome": "Jo√£o", "idade": "30", "cidade": "Rio de Janeiro"},
        {"nome": "Ana", "idade": "25", "cidade": "S√£o Paulo"}
    ]
    
    # Salvando como JSON
    with open("pessoas.json", "w", encoding="utf-8") as f:
        json.dump(dados_exemplo, f, indent=2, ensure_ascii=False)
    
    print("‚úÖ Convers√£o simulada com sucesso!")
    print("JSON pode conter arrays e objetos complexos")
    print("CSV √© melhor para dados simples e planos")''',
                'explicacao': 'Convers√£o entre formatos √© comum em projetos reais'
            }
        ]

        for i, exemplo in enumerate(exemplos, 1):
            self.print_colored(f"\n{exemplo['titulo']}", "warning")
            self.print_colored(f"üìù {exemplo['descricao']}", "text")

            self.print_code_section("C√ìDIGO", exemplo['codigo'])

            print("\nüöÄ Executando exemplo:")
            self.executar_codigo(exemplo['codigo'])

            if exemplo['explicacao']:
                self.print_colored(f"\nüí° EXPLICA√á√ÉO: {exemplo['explicacao']}", "info")

            if i < len(exemplos):
                input("\nüî∏ Pressione ENTER para o pr√≥ximo exemplo...")

        self.print_success("\nüéâ Agora voc√™ viu JSON e CSV em a√ß√£o! Vamos praticar!")
        self.pausar()

    def _secao_casos_uso(self) -> None:
        """Se√ß√£o: Onde usar JSON e CSV na vida real?"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("CASOS DE USO NO MUNDO REAL", "üåç", "accent")

        # JSON Cases
        self.print_colored("\nüìã QUANDO USAR JSON:", "warning")
        casos_json = [
            ("üåê APIs e Web Services", "Twitter, Instagram, GitHub APIs"),
            ("‚öôÔ∏è Configura√ß√µes de Apps", "VS Code, Chrome Extensions"),
            ("üì± Apps Mobile", "Dados entre frontend e backend"),
            ("üéÆ Jogos", "Save games, configura√ß√µes de personagem"),
            ("ü§ñ IoT e Sensores", "Dados de temperatura, umidade, etc.")
        ]

        for caso, exemplo in casos_json:
            self.print_colored(f"\n{caso}", "accent")
            self.print_colored(f"   Exemplo: {exemplo}", "text")
            input("   üî∏ Pressione ENTER para o pr√≥ximo...")

        # CSV Cases
        self.print_colored("\nüìä QUANDO USAR CSV:", "success")
        casos_csv = [
            ("üìà Relat√≥rios Financeiros", "Bancos, fintechs, contabilidade"),
            ("üìã Planilhas e An√°lises", "Excel, Google Sheets, BI"),
            ("üìä Big Data", "Pandas, an√°lise de dados cient√≠ficos"),
            ("üì§ Exporta√ß√£o de Dados", "Sistemas ERP, CRM"),
            ("üîÑ Migra√ß√£o de Dados", "Entre diferentes sistemas")
        ]

        for caso, exemplo in casos_csv:
            self.print_colored(f"\n{caso}", "success")
            self.print_colored(f"   Exemplo: {exemplo}", "text")
            input("   üî∏ Pressione ENTER para o pr√≥ximo...")

        # Empresas que usam
        self.print_colored("\nüè¢ EMPRESAS QUE USAM:", "info")
        empresas = [
            "Netflix: JSON para streaming de dados",
            "Amazon: CSV para relat√≥rios de vendas",
            "Google: JSON em todas as APIs",
            "Microsoft: CSV no Excel e Power BI"
        ]

        for empresa in empresas:
            self.print_colored(f"‚Ä¢ {empresa}", "primary")

        self.pausar()

    def _secao_melhores_praticas(self) -> None:
        """Se√ß√£o: Melhores pr√°ticas com JSON e CSV"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("MELHORES PR√ÅTICAS", "‚≠ê", "warning")

        # Pr√°ticas para JSON
        self.print_colored("\nüìã BOAS PR√ÅTICAS - JSON:", "accent")
        praticas_json = [
            "‚úÖ Use indent=2 para deixar leg√≠vel",
            "‚úÖ Sempre use ensure_ascii=False para acentos",
            "‚úÖ Valide dados antes de salvar",
            "‚úÖ Use try/except para capturar erros",
            "‚ùå Evite JSON muito aninhado (complexo demais)"
        ]

        for pratica in praticas_json:
            self.print_colored(pratica, "text")
            input("   üî∏ Pressione ENTER para a pr√≥xima...")

        # Pr√°ticas para CSV
        self.print_colored("\nüìä BOAS PR√ÅTICAS - CSV:", "success")
        praticas_csv = [
            "‚úÖ Sempre use encoding='utf-8'",
            "‚úÖ Use DictReader/DictWriter quando poss√≠vel",
            "‚úÖ Inclua cabe√ßalhos informativos",
            "‚úÖ Valide dados num√©ricos",
            "‚ùå Evite v√≠rgulas nos dados (escape adequadamente)"
        ]

        for pratica in praticas_csv:
            self.print_colored(pratica, "text")
            input("   üî∏ Pressione ENTER para a pr√≥xima...")

        # Exemplo de c√≥digo com boas pr√°ticas
        self.print_colored("\nüíª EXEMPLO COM BOAS PR√ÅTICAS:", "info")
        codigo_boas_praticas = '''import json
import csv
from typing import Dict, List, Any

def salvar_json_seguro(dados: Dict[str, Any], arquivo: str) -> bool:
    """Salva JSON com tratamento de erro"""
    try:
        with open(arquivo, "w", encoding="utf-8") as f:
            json.dump(dados, f, indent=2, ensure_ascii=False)
        return True
    except Exception as e:
        print(f"‚ùå Erro ao salvar JSON: {e}")
        return False

def ler_csv_seguro(arquivo: str) -> List[Dict[str, str]]:
    """L√™ CSV com tratamento de erro"""
    try:
        dados = []
        with open(arquivo, "r", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            for linha in reader:
                dados.append(linha)
        return dados
    except FileNotFoundError:
        print(f"‚ùå Arquivo {arquivo} n√£o encontrado")
        return []
    except Exception as e:
        print(f"‚ùå Erro ao ler CSV: {e}")
        return []

# Exemplo de uso
dados_teste = {"nome": "Jo√£o", "idade": 30}
sucesso = salvar_json_seguro(dados_teste, "teste.json")
print(f"Salvou JSON: {sucesso}")'''

        self.exemplo(codigo_boas_praticas)
        self.executar_codigo(codigo_boas_praticas)

        self.pausar()

    def _secao_erros_comuns(self) -> None:
        """Se√ß√£o: Erros comuns e como evitar"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("ERROS COMUNS E COMO EVITAR", "‚ö†Ô∏è", "warning")

        erros = [
            {
                'tipo': 'JSON - Encoding Problem',
                'problema': 'UnicodeDecodeError com acentos',
                'solucao': 'Sempre use encoding="utf-8"',
                'codigo_erro': '''# ‚ùå ERRADO
with open("dados.json", "w") as f:
    json.dump({"nome": "Jo√£o"}, f)''',
                'codigo_correto': '''# ‚úÖ CORRETO
with open("dados.json", "w", encoding="utf-8") as f:
    json.dump({"nome": "Jo√£o"}, f, ensure_ascii=False)'''
            },
            {
                'tipo': 'CSV - Delimiter Confusion',
                'problema': 'Dados com v√≠rgulas quebram o CSV',
                'solucao': 'Use quotechar ou delimiter diferente',
                'codigo_erro': '''# ‚ùå ERRADO - dados com v√≠rgulas
dados = ["Jo√£o Silva, Jr.", "30", "S√£o Paulo"]
writer.writerow(dados)  # Quebra o CSV''',
                'codigo_correto': '''# ‚úÖ CORRETO - protege v√≠rgulas
dados = ["Jo√£o Silva, Jr.", "30", "S√£o Paulo"]
writer = csv.writer(arquivo, quoting=csv.QUOTE_ALL)
writer.writerow(dados)'''
            },
            {
                'tipo': 'JSON - Type Error',
                'problema': 'Tentar serializar objetos n√£o JSON',
                'solucao': 'Converter para tipos b√°sicos primeiro',
                'codigo_erro': '''# ‚ùå ERRADO
from datetime import datetime
dados = {"agora": datetime.now()}
json.dumps(dados)  # Erro!''',
                'codigo_correto': '''# ‚úÖ CORRETO
from datetime import datetime
dados = {"agora": datetime.now().isoformat()}
json.dumps(dados)  # Funciona!'''
            }
        ]

        for i, erro in enumerate(erros, 1):
            self.print_colored(f"\nüö® ERRO COMUM {i}: {erro['tipo']}", "warning")
            self.print_colored(f"Problema: {erro['problema']}", "text")
            
            self.print_colored("\n‚ùå C√ìDIGO COM ERRO:", "warning")
            self.print_colored(erro['codigo_erro'], "text")
            
            input("\nüî∏ Pressione ENTER para ver a solu√ß√£o...")
            
            self.print_colored(f"\nüí° SOLU√á√ÉO: {erro['solucao']}", "success")
            self.print_colored("\n‚úÖ C√ìDIGO CORRETO:", "success")
            self.print_colored(erro['codigo_correto'], "text")
            
            if i < len(erros):
                input("\nüî∏ Pressione ENTER para o pr√≥ximo erro...")

        self.print_success("\nüéØ Conhecendo esses erros, voc√™ evita horas de debug!")
        self.pausar()

    def _secao_curiosidades(self) -> None:
        """Se√ß√£o: Curiosidades sobre JSON e CSV"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("CURIOSIDADES SOBRE DADOS", "üí´", "accent")

        curiosidades = [
            {
                'titulo': 'JSON foi criado em 2001',
                'detalhe': 'Douglas Crockford inventou JSON como alternativa mais simples ao XML',
                'fato': 'Hoje JSON √© usado em 99% das APIs web!'
            },
            {
                'titulo': 'CSV existe desde 1972',
                'detalhe': '√â mais antigo que o Python! Criado para mainframes IBM',
                'fato': 'Excel ainda usa CSV como formato padr√£o de export'
            },
            {
                'titulo': 'Netflix processa 1 trilh√£o de eventos JSON por dia',
                'detalhe': 'Cada clique, pause, play gera dados JSON',
                'fato': 'Isso d√° 11 milh√µes de eventos por segundo!'
            },
            {
                'titulo': 'O maior arquivo CSV j√° processado tinha 100GB',
                'detalhe': 'Dados de telesc√≥pio espacial da NASA',
                'fato': 'Pandas conseguiu processar usando chunks!'
            },
            {
                'titulo': 'JSON √© mais r√°pido que XML',
                'detalhe': 'JSON √© 30% menor e 50% mais r√°pido para parse',
                'fato': 'Por isso APIs modernas abandonaram XML'
            }
        ]

        for i, curiosidade in enumerate(curiosidades, 1):
            self.print_colored(f"\nüí´ CURIOSIDADE {i}: {curiosidade['titulo']}", "accent")
            self.print_colored(f"   {curiosidade['detalhe']}", "text")
            self.print_colored(f"   üéØ Fato: {curiosidade['fato']}", "info")
            
            if i < len(curiosidades):
                input("\nüî∏ Pressione ENTER para a pr√≥xima curiosidade...")

        self.print_success("\nüåü JSON e CSV s√£o realmente incr√≠veis!")
        self.pausar()

    def _secao_pratica_interativa(self) -> None:
        """Se√ß√£o de pr√°tica interativa do m√≥dulo"""

        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_section("HORA DE PRATICAR!", "üéØ", "success")
        self.print_colored("Vamos testar o que voc√™ aprendeu com exerc√≠cios pr√°ticos!", "text")

        # === INSTRU√á√ïES PARA INICIANTES ===
        self.print_tip("Para iniciantes: Cada exerc√≠cio √© opcional, mas recomendamos fazer todos!")
        self.print_colored("\nüéì SOBRE OS EXERC√çCIOS:", "info")
        self.print_colored("‚Ä¢ N√£o se preocupe se errar - faz parte do aprendizado!", "text")
        self.print_colored("‚Ä¢ Voc√™ pode tentar quantas vezes quiser", "text")
        self.print_colored("‚Ä¢ Digite 'help' se precisar de ajuda", "text")
        self.print_colored("‚Ä¢ Use Ctrl+C para voltar ao menu principal se necess√°rio", "text")

        # === DEFINI√á√ÉO DOS EXERC√çCIOS ===
        exercicios = [
            {
                'title': 'Quiz: Conhecimentos sobre JSON e CSV',
                'type': 'quiz',
                'questions': [
                    {
                        'question': 'Qual biblioteca Python √© usada para trabalhar com JSON?',
                        'answer': ['json', 'biblioteca json'],
                        'hint': '√â uma biblioteca nativa do Python'
                    },
                    {
                        'question': 'O que significa CSV?',
                        'answer': ['comma-separated values', 'comma separated values', 'valores separados por v√≠rgula'],
                        'hint': 'Tem a ver com v√≠rgulas separando dados'
                    },
                    {
                        'question': 'Qual m√©todo converte dict Python para string JSON?',
                        'answer': ['json.dumps', 'dumps'],
                        'hint': 'O "s" no final indica string'
                    },
                    {
                        'question': 'Qual encoding deve sempre usar com JSON e CSV em Python?',
                        'answer': ['utf-8', 'utf8'],
                        'hint': 'Padr√£o universal para caracteres especiais'
                    },
                    {
                        'question': 'JSON suporta coment√°rios? (sim/n√£o)',
                        'answer': ['n√£o', 'nao', 'no'],
                        'hint': 'JSON √© mais restrito que JavaScript'
                    }
                ]
            },
            {
                'title': 'Desafio: Complete o C√≥digo',
                'type': 'code_completion',
                'exercises': [
                    {
                        'instruction': 'B√ÅSICO: Complete o c√≥digo para salvar um dicion√°rio em JSON',
                        'starter': 'import json\ndados = {"nome": "Ana", "idade": 25}\nwith open("pessoa.json", "w", encoding="utf-8") as f:\n    # Complete aqui\nprint("Arquivo salvo!")',
                        'solution': 'json.dump(dados, f, ensure_ascii=False)',
                        'type': 'simple'
                    },
                    {
                        'instruction': 'INTERMEDI√ÅRIO: Complete o c√≥digo para ler CSV com DictReader',
                        'starter': 'import csv\nwith open("dados.csv", "r", encoding="utf-8") as f:\n    # Complete aqui\n    for linha in reader:\n        print(linha)',
                        'solution': 'reader = csv.DictReader(f)',
                        'type': 'intermediate'
                    },
                    {
                        'instruction': 'AVAN√áADO: Complete a convers√£o de JSON para CSV',
                        'starter': 'import json, csv\nwith open("dados.json", "r") as jf:\n    dados = json.load(jf)\nwith open("dados.csv", "w", newline="") as cf:\n    writer = csv.DictWriter(cf, fieldnames=dados[0].keys())\n    writer.writeheader()\n    # Complete aqui',
                        'solution': 'writer.writerows(dados)',
                        'type': 'advanced'
                    }
                ]
            },
            {
                'title': 'Exerc√≠cio Criativo: API de Dados Pessoais',
                'type': 'creative',
                'instruction': 'Crie um sistema que salva seus dados pessoais em JSON e exporta relat√≥rio em CSV!'
            }
        ]

        # === MENU PRINCIPAL DE EXERC√çCIOS ===
        while True:
            print("\nEscolha uma atividade:")
            print("1. üìù Quiz de Conhecimentos")
            print("2. üíª Complete o C√≥digo")
            print("3. üé® Exerc√≠cio Criativo")
            print("0. Continuar para o Mini Projeto")

            try:
                escolha = input("\nüëâ Sua escolha: ").strip().lower()

                if escolha in ["0", "continuar", "sair", "proximo"]:
                    break
                elif escolha in ["1", "quiz", "conhecimentos"]:
                    try:
                        self._run_quiz(exercicios[0])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Quiz interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no quiz. Continuando...")
                elif escolha in ["2", "codigo", "completar"]:
                    try:
                        self._run_code_completion(exercicios[1])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio de c√≥digo interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio de c√≥digo. Continuando...")
                elif escolha in ["3", "criativo"]:
                    try:
                        self._run_creative_exercise(exercicios[2])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio criativo interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio criativo. Continuando...")
                elif escolha in ["help", "ajuda", "h", "?"]:
                    self._show_help()
                else:
                    self.print_warning("‚ùå Op√ß√£o inv√°lida! Digite 1, 2, 3, 0 ou 'help' para ajuda.")

            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Opera√ß√£o cancelada pelo usu√°rio. Voltando ao menu principal...")
                return  # CR√çTICO: Return em vez de break para sair completamente
            except Exception as e:
                self.print_warning("‚ùå Erro inesperado no menu. Tente novamente.")

    def _show_help(self) -> None:
        """Mostra ajuda sobre as op√ß√µes dispon√≠veis"""
        self.print_section("AJUDA - SE√á√ÉO DE PR√ÅTICA", "‚ùì", "info")
        help_text = [
            "üìù OP√á√ÉO 1 - Quiz: Teste seus conhecimentos sobre JSON e CSV",
            "üíª OP√á√ÉO 2 - Complete o C√≥digo: 3 exerc√≠cios progressivos",
            "üé® OP√á√ÉO 3 - Exerc√≠cio Criativo: Sistema de dados pessoais",
            "üî¢ OP√á√ÉO 0 - Continue para o Mini Projeto final",
            "",
            "üí° DICAS:",
            "‚Ä¢ Voc√™ pode digitar o n√∫mero ou palavras como 'quiz', 'codigo'",
            "‚Ä¢ Digite 'help' a qualquer momento para ver esta ajuda",
            "‚Ä¢ Use Ctrl+C se quiser voltar ao menu principal",
            "‚Ä¢ Recomendamos fazer todas as atividades para aprender melhor!"
        ]

        for line in help_text:
            if line:
                self.print_colored(f"  {line}", "text")
            else:
                print()

        input("\nüî∏ Pressione ENTER para voltar ao menu...")

    def _run_quiz(self, quiz_data: dict) -> None:
        """Executa um quiz interativo sobre JSON e CSV"""
        self.print_section(quiz_data['title'], "üìù")
        score = 0
        total_questions = len(quiz_data['questions'])
        
        for i, q in enumerate(quiz_data['questions'], 1):
            print(f"\nüìù Pergunta {i} de {total_questions}:")
            correto = self.exercicio(
                q['question'],
                q['answer'],
                q['hint']
            )
            if correto:
                score += 1
        
        # Feedback detalhado baseado na pontua√ß√£o
        percentage = (score / total_questions) * 100
        
        self.print_success(f"\nüèÜ RESULTADO: {score} de {total_questions} perguntas corretas ({percentage:.0f}%)")
        
        if percentage == 100:
            self.print_success("üåü PERFEITO! Voc√™ dominou JSON e CSV!")
        elif percentage >= 80:
            self.print_success("üéâ MUITO BEM! Voc√™ tem um bom entendimento dos formatos de dados!")
        elif percentage >= 60:
            self.print_colored("üòä BOM TRABALHO! Revise alguns conceitos sobre JSON e CSV.", "warning")
        else:
            self.print_colored("üìö Continue estudando! Releia o conte√∫do e tente mais tarde.", "info")
            
        self.pausar()
    
    def _run_code_completion(self, exercise_data: dict) -> None:
        """Executa exerc√≠cio de completar c√≥digo JSON/CSV"""
        self.print_section(exercise_data['title'], "üíª")
        
        for i, ex in enumerate(exercise_data['exercises'], 1):
            print(f"\nüéØ EXERC√çCIO {i} de {len(exercise_data['exercises'])}:")
            print(f"üìù {ex['instruction']}")
            self.print_code_section("C√≥digo para Completar", ex['starter'])
            
            # Diferentes tipos de exerc√≠cios
            exercise_type = ex.get('type', 'simple')
            
            if exercise_type == 'simple':
                print("\n‚úçÔ∏è Complete a linha que falta:")
                print("üí° Dica: Pense na fun√ß√£o que salva dados no arquivo JSON")
                user_input = input(">>> ").strip()
                if user_input:
                    user_code = user_input
                else:
                    user_code = ex['solution']
                    self.print_tip("Usando solu√ß√£o padr√£o.")
                    
            elif exercise_type == 'intermediate':
                print("\n‚úçÔ∏è Complete o c√≥digo para ler CSV:")
                print("üí° Dica: Use DictReader para ler CSV como dicion√°rios")
                user_input = input(">>> ").strip()
                if user_input:
                    user_code = user_input
                else:
                    user_code = ex['solution']
                    self.print_tip("Usando solu√ß√£o padr√£o.")
                    
            elif exercise_type == 'advanced':
                print("\n‚úçÔ∏è Complete a convers√£o de dados:")
                print("üí° Dica: Use um m√©todo que escreve m√∫ltiplas linhas de uma vez")
                user_input = input(">>> ").strip()
                if user_input:
                    user_code = user_input
                else:
                    user_code = ex['solution']
                    self.print_tip("Usando solu√ß√£o padr√£o.")
            else:
                # Tipo padr√£o
                print("\n‚úçÔ∏è Digite a linha que falta:")
                user_input = input(">>> ").strip()
                user_code = user_input if user_input else ex['solution']
            
            # Substitui a linha que cont√©m o coment√°rio
            lines = ex['starter'].split('\n')
            for j, line in enumerate(lines):
                if '# Complete aqui' in line:
                    lines[j] = f"    {user_code}"
                    break
            complete_code = '\n'.join(lines)
            
            print("\nüöÄ Executando seu c√≥digo completo:")
            self.executar_codigo(complete_code)
            
            # Verifica se a resposta est√° correta
            if user_input and user_input.strip() == ex['solution'].strip():
                self.print_success("‚úÖ PERFEITO! Voc√™ acertou a solu√ß√£o!")
            else:
                print(f"\nüí° Solu√ß√£o correta: {ex['solution']}")
                self.print_colored("üìö N√£o se preocupe! O importante √© aprender.", "info")
            
            if i < len(exercise_data['exercises']):
                input("\nüî∏ Pressione ENTER para o pr√≥ximo exerc√≠cio...")
        
        self.pausar()
    
    def _run_creative_exercise(self, exercise_data: dict) -> None:
        """Executa exerc√≠cio criativo de API de dados pessoais"""
        self.print_section(exercise_data['title'], "üé®")
        print(f"\n{exercise_data['instruction']}")
        print("\nüí° IDEIAS PARA SEU SISTEMA:")
        print("‚Ä¢ Sistema de perfil pessoal com hobbies e habilidades")
        print("‚Ä¢ Lista de contatos com informa√ß√µes detalhadas")
        print("‚Ä¢ Registro de atividades di√°rias com categorias")
        print("‚Ä¢ Cole√ß√£o pessoal (livros, filmes, jogos)")
        
        self.print_tip("Vamos criar passo a passo!")
        
        print("\nüìù PASSO 1: Defina o tema do seu sistema")
        tema = input("üéØ Qual tema voc√™ quer (perfil/contatos/atividades/colecao): ").strip().lower()
        if not tema or tema not in ['perfil', 'contatos', 'atividades', 'colecao']:
            tema = 'perfil'
            print("üìã Usando tema padr√£o: perfil pessoal")
        
        print(f"\nüìä PASSO 2: Dados para sistema de {tema}")
        dados = {}
        
        if tema == 'perfil':
            dados = {
                "nome": input("üë§ Seu nome: ").strip() or "Jo√£o Silva",
                "idade": input("üìÖ Sua idade: ").strip() or "25",
                "profissao": input("üíº Sua profiss√£o: ").strip() or "Desenvolvedor",
                "hobbies": input("üéÆ Hobbies (separados por v√≠rgula): ").strip().split(',') or ["programa√ß√£o", "jogos"],
                "habilidades": input("‚≠ê Habilidades (separadas por v√≠rgula): ").strip().split(',') or ["Python", "JavaScript"]
            }
        elif tema == 'contatos':
            dados = {
                "contatos": [
                    {
                        "nome": input("üë§ Nome do contato 1: ").strip() or "Ana Santos",
                        "telefone": input("üìû Telefone: ").strip() or "(11) 99999-9999",
                        "email": input("üìß Email: ").strip() or "ana@email.com"
                    }
                ]
            }
        elif tema == 'atividades':
            dados = {
                "atividades": [
                    {
                        "data": input("üìÖ Data da atividade (YYYY-MM-DD): ").strip() or "2024-01-15",
                        "tipo": input("üìù Tipo de atividade: ").strip() or "Estudo",
                        "descricao": input("üìñ Descri√ß√£o: ").strip() or "Estudei Python",
                        "duracao": input("‚è∞ Dura√ß√£o em minutos: ").strip() or "60"
                    }
                ]
            }
        else:  # colecao
            dados = {
                "colecao": [
                    {
                        "item": input("üìö Nome do item: ").strip() or "Clean Code",
                        "categoria": input("üè∑Ô∏è Categoria: ").strip() or "Livro",
                        "status": input("‚úÖ Status (lido/n√£o lido): ").strip() or "lido",
                        "nota": input("‚≠ê Nota (1-5): ").strip() or "5"
                    }
                ]
            }
        
        print(f"\nüöÄ PASSO 3: Gerando sistema completo de {tema}")
        
        # Cria o c√≥digo do sistema
        codigo_sistema = f'''# üêç SISTEMA DE {tema.upper()} PESSOAL
# Criado com JSON e CSV - M√≥dulo 17

import json
import csv
from datetime import datetime

# Dados do sistema
dados = {dados}

print("=" * 50)
print(f"üéØ SISTEMA DE {tema.upper()} PESSOAL")
print("=" * 50)

# 1. SALVANDO EM JSON
print("\\nüìã Salvando dados em JSON...")
with open("{tema}_dados.json", "w", encoding="utf-8") as arquivo_json:
    json.dump(dados, arquivo_json, indent=2, ensure_ascii=False)
print("‚úÖ Dados salvos em {tema}_dados.json")

# 2. CONVERTENDO PARA CSV
print("\\nüìä Convertendo para CSV...")
if "{tema}" == "perfil":
    # Para perfil, criar CSV simples
    with open("{tema}_relatorio.csv", "w", newline="", encoding="utf-8") as arquivo_csv:
        writer = csv.writer(arquivo_csv)
        writer.writerow(["campo", "valor"])
        for chave, valor in dados.items():
            if isinstance(valor, list):
                writer.writerow([chave, "; ".join(valor)])
            else:
                writer.writerow([chave, valor])
else:
    # Para outros tipos, usar estrutura mais complexa
    with open("{tema}_relatorio.csv", "w", newline="", encoding="utf-8") as arquivo_csv:
        if dados:
            first_key = list(dados.keys())[0]
            if isinstance(dados[first_key], list) and dados[first_key]:
                # Dados s√£o lista de dicion√°rios
                fieldnames = dados[first_key][0].keys()
                writer = csv.DictWriter(arquivo_csv, fieldnames=fieldnames)
                writer.writeheader()
                writer.writerows(dados[first_key])

print("‚úÖ Relat√≥rio CSV criado!")

# 3. LENDO E EXIBINDO DADOS
print("\\nüîç CARREGANDO E EXIBINDO DADOS:")
with open("{tema}_dados.json", "r", encoding="utf-8") as arquivo:
    dados_carregados = json.load(arquivo)

print("JSON carregado:")
print(json.dumps(dados_carregados, indent=2, ensure_ascii=False))

print("\\nüìÅ ARQUIVOS CRIADOS:")
print(f"‚Ä¢ {tema}_dados.json (dados completos)")
print(f"‚Ä¢ {tema}_relatorio.csv (relat√≥rio)")

print("\\nüéâ SISTEMA FUNCIONANDO PERFEITAMENTE!")
print("üí° Voc√™ pode expandir adicionando mais dados e funcionalidades!")'''
        
        print(f"\nüé® Aqui est√° seu sistema de {tema} personalizado:")
        self.exemplo(codigo_sistema)
        
        print(f"\nüöÄ Executando seu Sistema de {tema.title()}:")
        self.executar_codigo(codigo_sistema)
        
        self.print_success(f"\nüèÜ PARAB√âNS! Voc√™ criou um sistema completo de {tema}!")
        self.print_colored("üí° DICAS PARA EXPANDIR:", "info")
        print("‚Ä¢ Adicione mais campos aos dados")
        print("‚Ä¢ Crie fun√ß√µes para buscar e filtrar")
        print("‚Ä¢ Implemente valida√ß√£o de dados")
        print("‚Ä¢ Adicione interface web com Flask")
        
        self.pausar()

    def _mini_projeto_dashboard_dados(self) -> None:
        """Mini Projeto - M√≥dulo 17: Dashboard de An√°lise de Dados Integrado"""

        # === CABE√áALHO IMPACTANTE ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üéØ MINI PROJETO: DASHBOARD DE AN√ÅLISE DE DADOS")
        else:
            print("\n" + "="*50)
            print("üéØ MINI PROJETO: DASHBOARD DE AN√ÅLISE DE DADOS")
            print("="*50)

        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_success("üéâ Vamos criar um sistema completo de an√°lise de dados com JSON e CSV!")

        self.print_concept(
            "Dashboard de An√°lise de Dados",
            "Sistema que processa dados em diferentes formatos e gera relat√≥rios inteligentes"
        )

        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nEste tipo de programa √© √∫til para:", "text")
        usos_praticos = [
            "An√°lise de vendas em e-commerce",
            "Relat√≥rios financeiros em fintechs",
            "Dashboard de m√©tricas em startups",
            "An√°lise de dados cient√≠ficos em pesquisa"
        ]
        for uso in usos_praticos:
            self.print_colored(f"‚Ä¢ {uso}", "accent")

        # === DESENVOLVIMENTO PASSO A PASSO ===

        # PASSO 1: Coleta de informa√ß√µes do dashboard
        self.print_section("PASSO 1: Configure seu Dashboard", "üìù", "info")
        self.print_tip("Vamos personalizar o dashboard para sua √°rea de interesse")

        try:
            if self.ui:
                input_color = self.ui.get_color("warning")
                reset = self.ui.get_color("reset")
                
                empresa = input(f"{input_color}üè¢ Nome da sua empresa/projeto: {reset}").strip()
                if not empresa:
                    empresa = "TechCorp Analytics"
                
                area = input(f"{input_color}üìä √Årea de an√°lise (vendas/marketing/financeiro): {reset}").strip()
                if not area:
                    area = "vendas"
                
                periodo = input(f"{input_color}üìÖ Per√≠odo de an√°lise (exemplo: Janeiro 2024): {reset}").strip()
                if not periodo:
                    periodo = "Janeiro 2024"
            else:
                empresa = input("üè¢ Nome da sua empresa/projeto: ").strip()
                if not empresa:
                    empresa = "TechCorp Analytics"
                
                area = input("üìä √Årea de an√°lise (vendas/marketing/financeiro): ").strip()
                if not area:
                    area = "vendas"
                
                periodo = input("üìÖ Per√≠odo de an√°lise (exemplo: Janeiro 2024): ").strip()
                if not periodo:
                    periodo = "Janeiro 2024"

        except KeyboardInterrupt:
            self.print_warning("Projeto cancelado pelo usu√°rio")
            return

        # PASSO 2: Processamento/L√≥gica
        self.print_section("PASSO 2: Gerando dados e processando", "‚öôÔ∏è", "success")
        self.print_colored("Agora vamos criar um sistema completo de an√°lise:", "text")

        # PASSO 3: Resultado/Output
        self.print_section("PASSO 3: Sistema em funcionamento", "üé¨", "warning")

        # === C√ìDIGO FINAL GERADO ===
        self.print_colored("Aqui est√° o dashboard completo que voc√™ criou:", "text")

        codigo_final = f'''# üêç PROJETO: DASHBOARD DE AN√ÅLISE DE DADOS
# M√≥dulo 17: JSON e CSV
# Empresa: {empresa}
# √Årea: {area.title()}
# Per√≠odo: {periodo}

import json
import csv
import os
from datetime import datetime, timedelta
from collections import defaultdict, Counter
import statistics

class DashboardAnalytics:
    """Dashboard completo para an√°lise de dados JSON/CSV"""
    
    def __init__(self, empresa: str, area: str, periodo: str):
        self.empresa = empresa
        self.area = area
        self.periodo = periodo
        self.dados_json = []
        self.dados_csv = []
        self.relatorios = {{}}
        
        print(f"üöÄ Dashboard iniciado para {{self.empresa}}")
        print(f"üìä √Årea: {{self.area}} | Per√≠odo: {{self.periodo}}")
    
    def gerar_dados_exemplo(self):
        """Gera dados de exemplo para demonstra√ß√£o"""
        print("\\nüìù Gerando dados de exemplo...")
        
        # Dados JSON - Perfil detalhado de clientes
        self.dados_json = [
            {{
                "id": 1001,
                "nome": "Ana Silva",
                "email": "ana@email.com",
                "idade": 28,
                "cidade": "S√£o Paulo",
                "compras": [
                    {{"produto": "Notebook", "valor": 2500.00, "data": "2024-01-15"}},
                    {{"produto": "Mouse", "valor": 89.90, "data": "2024-01-20"}}
                ],
                "total_gasto": 2589.90,
                "categoria": "Premium"
            }},
            {{
                "id": 1002,
                "nome": "Jo√£o Santos",
                "email": "joao@email.com",
                "idade": 35,
                "cidade": "Rio de Janeiro",
                "compras": [
                    {{"produto": "Teclado", "valor": 150.00, "data": "2024-01-18"}}
                ],
                "total_gasto": 150.00,
                "categoria": "B√°sico"
            }},
            {{
                "id": 1003,
                "nome": "Maria Costa",
                "email": "maria@email.com",
                "idade": 42,
                "cidade": "Belo Horizonte",
                "compras": [
                    {{"produto": "Monitor", "valor": 800.00, "data": "2024-01-22"}},
                    {{"produto": "Webcam", "valor": 200.00, "data": "2024-01-25"}}
                ],
                "total_gasto": 1000.00,
                "categoria": "Intermedi√°rio"
            }}
        ]
        
        # Dados CSV - Transa√ß√µes simples
        self.dados_csv = [
            {{"data": "2024-01-15", "produto": "Notebook", "quantidade": 1, "preco": 2500.00, "vendedor": "Ana"}},
            {{"data": "2024-01-15", "produto": "Mouse", "quantidade": 2, "preco": 89.90, "vendedor": "Jo√£o"}},
            {{"data": "2024-01-18", "produto": "Teclado", "quantidade": 1, "preco": 150.00, "vendedor": "Maria"}},
            {{"data": "2024-01-20", "produto": "Mouse", "quantidade": 1, "preco": 89.90, "vendedor": "Ana"}},
            {{"data": "2024-01-22", "produto": "Monitor", "quantidade": 1, "preco": 800.00, "vendedor": "Pedro"}},
            {{"data": "2024-01-25", "produto": "Webcam", "quantidade": 3, "preco": 200.00, "vendedor": "Maria"}}
        ]
        
        print("‚úÖ Dados de exemplo gerados!")
    
    def salvar_dados(self):
        """Salva dados em arquivos JSON e CSV"""
        print("\\nüíæ Salvando dados...")
        
        # Salvar JSON
        with open("clientes.json", "w", encoding="utf-8") as f:
            json.dump(self.dados_json, f, indent=2, ensure_ascii=False)
        
        # Salvar CSV
        with open("transacoes.csv", "w", newline="", encoding="utf-8") as f:
            if self.dados_csv:
                writer = csv.DictWriter(f, fieldnames=self.dados_csv[0].keys())
                writer.writeheader()
                writer.writerows(self.dados_csv)
        
        print("‚úÖ Dados salvos em clientes.json e transacoes.csv")
    
    def analisar_json(self):
        """An√°lise avan√ßada dos dados JSON"""
        print("\\nüîç AN√ÅLISE DOS CLIENTES (JSON):")
        
        total_clientes = len(self.dados_json)
        idade_media = statistics.mean([cliente["idade"] for cliente in self.dados_json])
        gasto_total = sum([cliente["total_gasto"] for cliente in self.dados_json])
        gasto_medio = gasto_total / total_clientes
        
        # An√°lise por categoria
        categorias = Counter([cliente["categoria"] for cliente in self.dados_json])
        
        # An√°lise por cidade
        cidades = Counter([cliente["cidade"] for cliente in self.dados_json])
        
        print(f"üë• Total de clientes: {{total_clientes}}")
        print(f"üìä Idade m√©dia: {{idade_media:.1f}} anos")
        print(f"üí∞ Gasto total: R$ {{gasto_total:.2f}}")
        print(f"üíµ Gasto m√©dio por cliente: R$ {{gasto_medio:.2f}}")
        
        print("\\nüìà Por categoria:")
        for categoria, qtd in categorias.items():
            print(f"  {{categoria}}: {{qtd}} clientes")
        
        print("\\nüåç Por cidade:")
        for cidade, qtd in cidades.items():
            print(f"  {{cidade}}: {{qtd}} clientes")
        
        return {{
            "total_clientes": total_clientes,
            "idade_media": idade_media,
            "gasto_total": gasto_total,
            "gasto_medio": gasto_medio,
            "categorias": dict(categorias),
            "cidades": dict(cidades)
        }}
    
    def analisar_csv(self):
        """An√°lise dos dados transacionais CSV"""
        print("\\nüìä AN√ÅLISE DE TRANSA√á√ïES (CSV):")
        
        total_transacoes = len(self.dados_csv)
        
        # An√°lise de vendas
        vendas_por_produto = defaultdict(lambda: {{"quantidade": 0, "receita": 0}})
        vendas_por_vendedor = defaultdict(float)
        
        for transacao in self.dados_csv:
            produto = transacao["produto"]
            qtd = int(transacao["quantidade"])
            preco = float(transacao["preco"])
            vendedor = transacao["vendedor"]
            receita = qtd * preco
            
            vendas_por_produto[produto]["quantidade"] += qtd
            vendas_por_produto[produto]["receita"] += receita
            vendas_por_vendedor[vendedor] += receita
        
        receita_total = sum([dados["receita"] for dados in vendas_por_produto.values()])
        
        print(f"üõí Total de transa√ß√µes: {{total_transacoes}}")
        print(f"üí∞ Receita total: R$ {{receita_total:.2f}}")
        print(f"üíµ Receita m√©dia por transa√ß√£o: R$ {{receita_total/total_transacoes:.2f}}")
        
        print("\\nüèÜ Top produtos:")
        top_produtos = sorted(vendas_por_produto.items(), 
                            key=lambda x: x[1]["receita"], reverse=True)
        for produto, dados in top_produtos[:3]:
            print(f"  {{produto}}: {{dados['quantidade']}} unidades, R$ {{dados['receita']:.2f}}")
        
        print("\\nüëë Top vendedores:")
        top_vendedores = sorted(vendas_por_vendedor.items(), 
                              key=lambda x: x[1], reverse=True)
        for vendedor, receita in top_vendedores[:3]:
            print(f"  {{vendedor}}: R$ {{receita:.2f}}")
        
        return {{
            "total_transacoes": total_transacoes,
            "receita_total": receita_total,
            "vendas_por_produto": dict(vendas_por_produto),
            "vendas_por_vendedor": dict(vendas_por_vendedor)
        }}
    
    def gerar_relatorio_integrado(self):
        """Gera relat√≥rio final integrando JSON e CSV"""
        print("\\nüìã RELAT√ìRIO INTEGRADO:")
        print("=" * 50)
        
        analise_json = self.analisar_json()
        analise_csv = self.analisar_csv()
        
        # M√©tricas integradas
        roi = (analise_csv["receita_total"] / analise_json["gasto_total"]) * 100 if analise_json["gasto_total"] > 0 else 0
        
        print(f"\\nüéØ M√âTRICAS INTEGRADAS:")
        print(f"üíº Empresa: {{self.empresa}}")
        print(f"üìä √Årea: {{self.area}}")
        print(f"üìÖ Per√≠odo: {{self.periodo}}")
        print(f"üë• Clientes ativos: {{analise_json['total_clientes']}}")
        print(f"üõí Transa√ß√µes processadas: {{analise_csv['total_transacoes']}}")
        print(f"üí∞ Receita total: R$ {{analise_csv['receita_total']:.2f}}")
        print(f"üìà ROI: {{roi:.1f}}%")
        
        # Salvar relat√≥rio final
        relatorio_final = {{
            "empresa": self.empresa,
            "area": self.area,
            "periodo": self.periodo,
            "timestamp": datetime.now().isoformat(),
            "metricas": {{
                "clientes": analise_json,
                "transacoes": analise_csv,
                "roi": roi
            }}
        }}
        
        with open("relatorio_final.json", "w", encoding="utf-8") as f:
            json.dump(relatorio_final, f, indent=2, ensure_ascii=False)
        
        print("\\n‚úÖ Relat√≥rio salvo em relatorio_final.json")
        
        return relatorio_final
    
    def executar_dashboard(self):
        """Executa todo o processo do dashboard"""
        print(f"\\nüöÄ EXECUTANDO DASHBOARD - {{self.empresa.upper()}}")
        print("=" * 60)
        
        self.gerar_dados_exemplo()
        self.salvar_dados()
        relatorio = self.gerar_relatorio_integrado()
        
        print("\\nüéâ DASHBOARD EXECUTADO COM SUCESSO!")
        print("\\nüìÅ Arquivos gerados:")
        print("  ‚Ä¢ clientes.json (dados detalhados)")
        print("  ‚Ä¢ transacoes.csv (dados transacionais)")
        print("  ‚Ä¢ relatorio_final.json (an√°lise integrada)")
        
        return relatorio

# === EXECU√á√ÉO DO DASHBOARD ===
print("üéØ DASHBOARD DE AN√ÅLISE DE DADOS")
print("=" * 40)

# Criar inst√¢ncia do dashboard
dashboard = DashboardAnalytics("{empresa}", "{area}", "{periodo}")

# Executar an√°lise completa
resultado = dashboard.executar_dashboard()

print("\\nüèÜ SUCESSO! Seu dashboard est√° funcionando!")
print("\\nüí° APLICA√á√ïES REAIS:")
print("  ‚Ä¢ An√°lise de vendas em tempo real")
print("  ‚Ä¢ Relat√≥rios autom√°ticos para gest√£o")
print("  ‚Ä¢ Integra√ß√£o com sistemas ERP/CRM")
print("  ‚Ä¢ Business Intelligence empresarial")'''

        self.exemplo(codigo_final)

        # === EXECU√á√ÉO DO RESULTADO ===
        self.print_section("RESULTADO FINAL", "üé¨", "warning")
        self.executar_codigo(codigo_final)

        # === MENSAGEM DE CONQUISTA ===
        self.print_success("üéâ PARAB√âNS! Voc√™ criou um dashboard completo de an√°lise de dados!")

        # === APLICA√á√ïES AVAN√áADAS ===
        self.print_section("PR√ìXIMOS PASSOS", "üöÄ", "info")
        proximos_passos = [
            "Conectar com APIs reais (Twitter, Instagram)",
            "Integrar com bancos de dados (PostgreSQL, MongoDB)",
            "Criar dashboards web com Flask/Django",
            "Implementar machine learning para predi√ß√µes",
            "Automatizar relat√≥rios com schedule/cron"
        ]
        for passo in proximos_passos:
            self.print_colored(f"‚Ä¢ {passo}", "primary")

        self.print_success("\nüèÜ CONQUISTA DESBLOQUEADA: Master de Dados!")

        # === REGISTRO DE CONCLUS√ÉO ===
        self.complete_mini_project("Dashboard de An√°lise de Dados Integrado")

        self.pausar()


# Para teste standalone
if __name__ == "__main__":
    module = Modulo17JsonCsv()
    print("Teste do m√≥dulo 17 - vers√£o refatorada")
    module._json_csv_moderno()