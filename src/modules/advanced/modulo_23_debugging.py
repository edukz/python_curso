#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
M√≥dulo 23: Debugging e Profiling
VERS√ÉO REFATORADA seguindo o padr√£o pedag√≥gico estabelecido
Aprenda t√©cnicas avan√ßadas de debugging de forma interativa e pr√°tica
"""

from ..shared.base_module import BaseModule
import cProfile
import pstats
import time
import sys
import functools
import traceback
import logging
import pdb
import os
import threading
import psutil
import random
from typing import Dict, List, Optional, Any, Callable, Generator
from collections import defaultdict, deque
from datetime import datetime
from io import StringIO
import json


class Modulo23Debugging(BaseModule):
    """M√≥dulo 23: Debugging e Profiling - Encontrando e Corrigindo Problemas"""
    
    def __init__(self):
        super().__init__("modulo_23", "Debugging e Profiling")
        self.has_mini_project = True
        self.mini_project_points = 140
    
    def execute(self) -> None:
        """Executa o m√≥dulo Debugging e Profiling"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return

        try:
            self._debugging()
        except Exception as e:
            self.error_handler(lambda: None)
    
    def _debugging(self) -> None:
        """Conte√∫do principal do m√≥dulo Debugging e Profiling"""
        # === CABE√áALHO VISUAL ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üêõ M√ìDULO 23: DEBUGGING E PROFILING")
        else:
            print("\n" + "="*60)
            print("üêõ M√ìDULO 23: DEBUGGING E PROFILING")
            print("="*60)

        # === MENSAGENS MOTIVACIONAIS ===
        self.print_success("üéâ Bem-vindo ao mundo do Debugging e Profiling!")
        self.print_tip("Este m√≥dulo est√° dividido em se√ß√µes interativas. Voc√™ controla o ritmo!")

        # === FLUXO PRINCIPAL COM TRATAMENTO DE CTRL+C ===

        # 1. Sistema de navega√ß√£o por se√ß√µes
        try:
            self._navegacao_secoes_interativas()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Navega√ß√£o interrompida pelo usu√°rio. Voltando ao menu principal...")
            return

        # 2. Se√ß√£o de Pr√°tica Interativa
        try:
            self._secao_pratica_interativa()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è M√≥dulo interrompido pelo usu√°rio. Voltando ao menu principal...")
            return

        # 3. Mini Projeto Pr√°tico
        try:
            self._mini_projeto_sistema_debugging_avancado()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Mini projeto interrompido. Voltando ao menu principal...")
            return

        # 4. Marcar m√≥dulo como completo
        self.complete_module()
    
    def _navegacao_secoes_interativas(self) -> None:
        """Sistema de navega√ß√£o por se√ß√µes do m√≥dulo"""

        # === DEFINI√á√ÉO DAS SE√á√ïES (6 SE√á√ïES) ===
        secoes = [
            {
                'id': 'secao_conceito_debugging',
                'titulo': 'üéØ O que √© Debugging?',
                'descricao': 'Entenda a arte de encontrar e corrigir bugs',
                'funcao': self._secao_conceito_debugging
            },
            {
                'id': 'secao_tecnicas_basicas',
                'titulo': 'üîß T√©cnicas B√°sicas de Debugging',
                'descricao': 'M√©todos fundamentais para identificar problemas',
                'funcao': self._secao_tecnicas_basicas
            },
            {
                'id': 'secao_debugger_pdb',
                'titulo': 'üêû Debugger Interativo (PDB)',
                'descricao': 'Domine o debugger nativo do Python',
                'funcao': self._secao_debugger_pdb
            },
            {
                'id': 'secao_profiling_performance',
                'titulo': '‚ö° Profiling de Performance',
                'descricao': 'Me√ßa e otimize a performance do seu c√≥digo',
                'funcao': self._secao_profiling_performance
            },
            {
                'id': 'secao_monitoramento_recursos',
                'titulo': 'üìä Monitoramento de Recursos',
                'descricao': 'Monitore mem√≥ria, CPU e outros recursos',
                'funcao': self._secao_monitoramento_recursos
            },
            {
                'id': 'secao_debugging_avancado',
                'titulo': 'üöÄ Debugging Avan√ßado',
                'descricao': 'T√©cnicas profissionais e ferramentas avan√ßadas',
                'funcao': self._secao_debugging_avancado
            }
        ]

        # === INTRODU√á√ÉO GERAL ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üìö GUIA DE NAVEGA√á√ÉO")
        else:
            print("\n" + "="*50)
            print("üìö GUIA DE NAVEGA√á√ÉO")
            print("="*50)

        self.print_concept("üó∫Ô∏è Este m√≥dulo cont√©m 6 se√ß√µes principais sobre debugging:")
        print()
        
        for i, secao in enumerate(secoes, 1):
            self.print_colored(f"{i}. {secao['titulo']}", "cyan")
            self.print_tip(f"   {secao['descricao']}")
            print()

        self.print_warning("üí° DICA: Voc√™ pode interromper qualquer se√ß√£o com Ctrl+C e voltar ao menu")
        self.print_success("üéÆ Vamos come√ßar! Pressione ENTER em cada se√ß√£o para avan√ßar no seu ritmo")
        
        try:
            input("\nüöÄ Pressione ENTER para come√ßar a jornada...")
        except KeyboardInterrupt:
            raise

        # === EXECU√á√ÉO DAS SE√á√ïES ===
        secoes_completadas = 0
        
        for i, secao in enumerate(secoes, 1):
            try:
                # Cabe√ßalho da se√ß√£o
                if self.ui:
                    self.ui.clear_screen()
                    self.ui.header(f"SE√á√ÉO {i}/6: {secao['titulo']}")
                else:
                    print(f"\n{'='*60}")
                    print(f"SE√á√ÉO {i}/6: {secao['titulo']}")
                    print('='*60)
                
                self.print_concept(f"üìñ {secao['descricao']}")
                
                # Progresso visual
                progresso = "üü¢" * secoes_completadas + "‚ö™" * (len(secoes) - secoes_completadas)
                self.print_tip(f"Progresso: {progresso} ({secoes_completadas}/{len(secoes)} conclu√≠das)")
                
                try:
                    input(f"\n‚ñ∂Ô∏è Pressione ENTER para come√ßar: {secao['titulo']}")
                except KeyboardInterrupt:
                    raise
                
                # Executar se√ß√£o
                secao['funcao']()
                secoes_completadas += 1
                
                # Feedback de conclus√£o
                if secoes_completadas < len(secoes):
                    self.print_success(f"‚úÖ Se√ß√£o {i} conclu√≠da! Preparando pr√≥xima se√ß√£o...")
                    try:
                        input("\n‚è≠Ô∏è Pressione ENTER para continuar para a pr√≥xima se√ß√£o...")
                    except KeyboardInterrupt:
                        raise
                        
            except KeyboardInterrupt:
                self.print_warning(f"\n\n‚ö†Ô∏è Se√ß√£o '{secao['titulo']}' interrompida pelo usu√°rio")
                raise

        # === CONCLUS√ÉO DAS SE√á√ïES ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üéä SE√á√ïES CONCLU√çDAS!")
        else:
            print("\n" + "="*50)
            print("üéä SE√á√ïES CONCLU√çDAS!")
            print("="*50)

        self.print_success("üéâ Parab√©ns! Voc√™ concluiu todas as 6 se√ß√µes sobre debugging!")
        self.print_concept("üß† Agora voc√™ conhece:")
        self.print_tip("‚úÖ Conceitos fundamentais de debugging")
        self.print_tip("‚úÖ T√©cnicas b√°sicas e avan√ßadas")
        self.print_tip("‚úÖ Uso do debugger PDB")
        self.print_tip("‚úÖ Profiling de performance")
        self.print_tip("‚úÖ Monitoramento de recursos")
        self.print_tip("‚úÖ Debugging avan√ßado")
        
        try:
            input("\nüéØ Pressione ENTER para continuar para a se√ß√£o de pr√°tica...")
        except KeyboardInterrupt:
            raise

    def _show_help(self) -> None:
        """Mostra ajuda sobre navega√ß√£o e controles"""
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("‚ùì SISTEMA DE AJUDA")
        else:
            print("\n" + "="*40)
            print("‚ùì SISTEMA DE AJUDA")
            print("="*40)

        self.print_concept("üó∫Ô∏è NAVEGA√á√ÉO:")
        self.print_tip("‚Ä¢ Use ENTER para avan√ßar entre se√ß√µes")
        self.print_tip("‚Ä¢ Pressione Ctrl+C para voltar ao menu principal")
        self.print_tip("‚Ä¢ Cada se√ß√£o tem exemplos interativos")

        self.print_concept("\nüéØ ESTRUTURA DO M√ìDULO:")
        self.print_tip("‚Ä¢ 6 se√ß√µes conceituais")
        self.print_tip("‚Ä¢ Se√ß√£o de pr√°tica com exerc√≠cios")
        self.print_tip("‚Ä¢ Mini projeto final")

        self.print_concept("\nüí° DICAS:")
        self.print_tip("‚Ä¢ Pratique os exemplos de c√≥digo")
        self.print_tip("‚Ä¢ Teste os comandos do debugger")
        self.print_tip("‚Ä¢ Experimente as ferramentas de profiling")

        try:
            input("\nüìö Pressione ENTER para voltar...")
        except KeyboardInterrupt:
            pass

    def _secao_conceito_debugging(self) -> None:
        """Se√ß√£o 1: O que √© Debugging?"""
        
        self.print_concept("üéØ DEBUGGING √© a arte de encontrar e corrigir bugs no c√≥digo")
        self.print_tip("üêõ Bug = comportamento inesperado ou incorreto do programa")
        
        self.print_colored("\nüí° Tipos de bugs mais comuns:", "cyan")
        self.print_tip("üîπ Erros de sintaxe (SyntaxError)")
        self.print_tip("üîπ Erros de l√≥gica (comportamento incorreto)")
        self.print_tip("üîπ Erros de runtime (exce√ß√µes durante execu√ß√£o)")
        self.print_tip("üîπ Erros de performance (c√≥digo lento)")
        self.print_tip("üîπ Vazamentos de mem√≥ria")
        
        try:
            input("\n‚ñ∂Ô∏è Pressione ENTER para ver exemplos pr√°ticos...")
        except KeyboardInterrupt:
            raise

        codigo_exemplo = '''# üêõ EXEMPLOS DE BUGS COMUNS

print("=== EXEMPLO 1: Bug de L√≥gica ===")

def calcular_media_bugada(numeros):
    """Fun√ß√£o com bug de l√≥gica"""
    total = 0
    for numero in numeros:
        total += numero
    # BUG: Divis√£o por zero n√£o tratada!
    return total / len(numeros)

# Teste que funciona
print("M√©dia de [1,2,3,4,5]:", calcular_media_bugada([1,2,3,4,5]))

# Teste que quebra
try:
    print("M√©dia de lista vazia:", calcular_media_bugada([]))
except ZeroDivisionError as e:
    print(f"‚ùå Bug encontrado: {e}")

print("\\n=== EXEMPLO 2: Bug de √çndice ===")

def buscar_elemento_bugado(lista, indice):
    """Fun√ß√£o com bug de √≠ndice"""
    # BUG: N√£o verifica se √≠ndice √© v√°lido!
    return lista[indice]

dados = [10, 20, 30]
print("Elemento no √≠ndice 1:", buscar_elemento_bugado(dados, 1))

try:
    print("Elemento no √≠ndice 10:", buscar_elemento_bugado(dados, 10))
except IndexError as e:
    print(f"‚ùå Bug encontrado: {e}")

print("\\n=== EXEMPLO 3: Bug de Performance ===")

def fibonacci_lento(n):
    """Vers√£o ineficiente do Fibonacci"""
    if n <= 1:
        return n
    # BUG: Algoritmo exponencial muito lento!
    return fibonacci_lento(n-1) + fibonacci_lento(n-2)

import time

print("Calculando Fibonacci(30) - vers√£o lenta...")
inicio = time.time()
resultado = fibonacci_lento(30)
fim = time.time()
print(f"Resultado: {resultado}")
print(f"‚è±Ô∏è Tempo: {fim - inicio:.4f} segundos (muito lento!)")

print("\\n=== VERS√ÉO CORRIGIDA ===")

def fibonacci_rapido(n, memo={}):
    """Vers√£o otimizada com memoiza√ß√£o"""
    if n in memo:
        return memo[n]
    if n <= 1:
        return n
    memo[n] = fibonacci_rapido(n-1, memo) + fibonacci_rapido(n-2, memo)
    return memo[n]

print("Calculando Fibonacci(30) - vers√£o r√°pida...")
inicio = time.time()
resultado = fibonacci_rapido(30)
fim = time.time()
print(f"Resultado: {resultado}")
print(f"‚è±Ô∏è Tempo: {fim - inicio:.6f} segundos (super r√°pido!)")'''

        self.exemplo_interativo(codigo_exemplo, "Exemplos de Bugs Comuns")
        
        self.print_success("\nüéØ PROCESSO DE DEBUGGING:")
        self.print_tip("1Ô∏è‚É£ Identificar que existe um problema")
        self.print_tip("2Ô∏è‚É£ Reproduzir o problema consistentemente")
        self.print_tip("3Ô∏è‚É£ Isolar a causa do problema")
        self.print_tip("4Ô∏è‚É£ Formular hip√≥tese sobre a causa")
        self.print_tip("5Ô∏è‚É£ Testar a hip√≥tese")
        self.print_tip("6Ô∏è‚É£ Corrigir o problema")
        self.print_tip("7Ô∏è‚É£ Verificar que a corre√ß√£o funciona")
        
        try:
            input("\n‚úÖ Se√ß√£o 1 conclu√≠da! Pressione ENTER para continuar...")
        except KeyboardInterrupt:
            raise

    def _secao_tecnicas_basicas(self) -> None:
        """Se√ß√£o 2: T√©cnicas B√°sicas de Debugging"""
        
        self.print_concept("üîß T√âCNICAS FUNDAMENTAIS para encontrar bugs")
        
        self.print_colored("\nüîç 1. PRINT DEBUGGING", "yellow")
        self.print_tip("T√©cnica mais simples: adicionar prints para ver valores")
        
        codigo_print = '''# üñ®Ô∏è PRINT DEBUGGING - T√©cnica b√°sica mas eficaz

def calcular_desconto(preco, percentual):
    """Calcula desconto com debugging"""
    print(f"üîç DEBUG: preco={preco}, percentual={percentual}")
    
    desconto = preco * percentual / 100
    print(f"üîç DEBUG: desconto calculado={desconto}")
    
    preco_final = preco - desconto
    print(f"üîç DEBUG: preco_final={preco_final}")
    
    return preco_final

# Teste
produto_preco = 100
produto_desconto = 15
resultado = calcular_desconto(produto_preco, produto_desconto)
print(f"\\n‚úÖ Pre√ßo com desconto: R$ {resultado:.2f}")

print("\\n" + "="*50)
print("üîß DEBUGGING COM LOGGING - Mais profissional")

import logging

# Configurar logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def processar_pedido(itens):
    """Processa pedido com logging"""
    logging.info(f"Iniciando processamento de {len(itens)} itens")
    
    total = 0
    for i, item in enumerate(itens):
        logging.debug(f"Processando item {i+1}: {item}")
        
        preco = item.get('preco', 0)
        quantidade = item.get('quantidade', 1)
        
        logging.debug(f"  Pre√ßo: {preco}, Quantidade: {quantidade}")
        
        subtotal = preco * quantidade
        total += subtotal
        
        logging.debug(f"  Subtotal: {subtotal}, Total acumulado: {total}")
    
    logging.info(f"Processamento conclu√≠do. Total: R$ {total:.2f}")
    return total

# Teste com logging
pedido = [
    {'nome': 'Produto A', 'preco': 25.50, 'quantidade': 2},
    {'nome': 'Produto B', 'preco': 15.00, 'quantidade': 1},
    {'nome': 'Produto C', 'preco': 45.99, 'quantidade': 3}
]

total_pedido = processar_pedido(pedido)
print(f"\\nüõí Total do pedido: R$ {total_pedido:.2f}")'''

        self.exemplo_interativo(codigo_print, "Print Debugging e Logging")
        
        try:
            input("\n‚ñ∂Ô∏è Pressione ENTER para ver mais t√©cnicas...")
        except KeyboardInterrupt:
            raise

        self.print_colored("\nüß™ 2. ASSERT STATEMENTS", "yellow")
        self.print_tip("Verifica√ß√µes autom√°ticas para validar suposi√ß√µes")
        
        codigo_assert = '''# ‚úÖ ASSERT DEBUGGING - Verifica√ß√µes autom√°ticas

def dividir_numeros(a, b):
    """Divis√£o com verifica√ß√µes assert"""
    # Verificar tipos
    assert isinstance(a, (int, float)), f"'a' deve ser n√∫mero, recebido {type(a)}"
    assert isinstance(b, (int, float)), f"'b' deve ser n√∫mero, recebido {type(b)}"
    
    # Verificar divis√£o por zero
    assert b != 0, "Divis√£o por zero n√£o √© permitida"
    
    resultado = a / b
    
    # Verificar se resultado √© v√°lido
    assert not (resultado != resultado), "Resultado √© NaN"  # Verifica NaN
    
    return resultado

print("=== TESTES COM ASSERT ===")

# Teste v√°lido
try:
    resultado = dividir_numeros(10, 2)
    print(f"‚úÖ 10 / 2 = {resultado}")
except AssertionError as e:
    print(f"‚ùå Erro: {e}")

# Teste com divis√£o por zero
try:
    resultado = dividir_numeros(10, 0)
    print(f"‚úÖ 10 / 0 = {resultado}")
except AssertionError as e:
    print(f"‚ùå Erro capturado: {e}")

# Teste com tipo inv√°lido
try:
    resultado = dividir_numeros("10", 2)
    print(f"‚úÖ '10' / 2 = {resultado}")
except AssertionError as e:
    print(f"‚ùå Erro capturado: {e}")

print("\\nüîß ASSERT em estruturas de dados:")

def processar_lista_numeros(numeros):
    """Processa lista com valida√ß√µes"""
    assert isinstance(numeros, list), "Entrada deve ser uma lista"
    assert len(numeros) > 0, "Lista n√£o pode estar vazia"
    assert all(isinstance(n, (int, float)) for n in numeros), "Todos elementos devem ser n√∫meros"
    
    # Processamento
    media = sum(numeros) / len(numeros)
    maximo = max(numeros)
    minimo = min(numeros)
    
    return {
        'media': media,
        'maximo': maximo,
        'minimo': minimo,
        'total': len(numeros)
    }

# Testes
listas_teste = [
    [1, 2, 3, 4, 5],           # V√°lida
    [],                         # Vazia (erro)
    "n√£o √© lista",             # Tipo errado (erro)
    [1, 2, "tr√™s", 4]          # Elemento inv√°lido (erro)
]

for i, lista in enumerate(listas_teste):
    try:
        resultado = processar_lista_numeros(lista)
        print(f"‚úÖ Lista {i+1}: {resultado}")
    except AssertionError as e:
        print(f"‚ùå Lista {i+1} falhou: {e}")'''

        self.exemplo_interativo(codigo_assert, "Assert Statements")
        
        self.print_colored("\nüéØ 3. DIVIDE E CONQUISTE", "yellow")
        self.print_tip("Isole partes do c√≥digo para encontrar onde est√° o problema")
        
        codigo_divide = '''# üîç DIVIDE E CONQUISTE - Isolando problemas

def sistema_complexo_bugado():
    """Sistema com m√∫ltiplas opera√ß√µes - onde est√° o bug?"""
    
    # Etapa 1: Carregar dados
    print("üìä Carregando dados...")
    dados = carregar_dados()
    print(f"   Dados carregados: {len(dados)} registros")
    
    # Etapa 2: Processar dados
    print("‚öôÔ∏è Processando dados...")
    dados_processados = processar_dados(dados)
    print(f"   Dados processados: {len(dados_processados)} registros")
    
    # Etapa 3: Calcular resultados
    print("üßÆ Calculando resultados...")
    resultados = calcular_resultados(dados_processados)
    print(f"   Resultados: {resultados}")
    
    # Etapa 4: Gerar relat√≥rio
    print("üìã Gerando relat√≥rio...")
    relatorio = gerar_relatorio(resultados)
    print(f"   Relat√≥rio gerado: {len(relatorio)} linhas")
    
    return relatorio

def carregar_dados():
    """Simula carregamento de dados"""
    return [
        {'id': 1, 'valor': 100, 'tipo': 'A'},
        {'id': 2, 'valor': 200, 'tipo': 'B'},
        {'id': 3, 'valor': 150, 'tipo': 'A'},
        {'id': 4, 'valor': 300, 'tipo': 'C'},
        {'id': 5, 'valor': None, 'tipo': 'B'}  # üêõ Dado problem√°tico!
    ]

def processar_dados(dados):
    """Processa dados - BUG AQUI!"""
    processados = []
    for item in dados:
        # üêõ BUG: N√£o verifica se valor √© None
        item_processado = {
            'id': item['id'],
            'valor_dobrado': item['valor'] * 2,  # Falha se valor √© None!
            'tipo': item['tipo']
        }
        processados.append(item_processado)
    return processados

def calcular_resultados(dados_processados):
    """Calcula resultados"""
    total = sum(item['valor_dobrado'] for item in dados_processados)
    media = total / len(dados_processados)
    return {'total': total, 'media': media}

def gerar_relatorio(resultados):
    """Gera relat√≥rio"""
    linhas = [
        f"Total: {resultados['total']:.2f}",
        f"M√©dia: {resultados['media']:.2f}"
    ]
    return linhas

print("=== EXECUTANDO SISTEMA COMPLEXO ===")
try:
    relatorio = sistema_complexo_bugado()
    print("‚úÖ Sistema executado com sucesso!")
    for linha in relatorio:
        print(f"  {linha}")
except Exception as e:
    print(f"‚ùå Erro no sistema: {e}")
    print(f"   Tipo do erro: {type(e).__name__}")

print("\\n=== VERS√ÉO CORRIGIDA ===")

def processar_dados_corrigido(dados):
    """Vers√£o corrigida com valida√ß√£o"""
    processados = []
    for item in dados:
        # ‚úÖ CORRE√á√ÉO: Verificar se valor √© v√°lido
        if item['valor'] is None:
            print(f"‚ö†Ô∏è Aviso: Item {item['id']} tem valor None, usando 0")
            valor = 0
        else:
            valor = item['valor']
        
        item_processado = {
            'id': item['id'],
            'valor_dobrado': valor * 2,
            'tipo': item['tipo']
        }
        processados.append(item_processado)
    return processados

def sistema_complexo_corrigido():
    """Vers√£o corrigida do sistema"""
    dados = carregar_dados()
    dados_processados = processar_dados_corrigido(dados)  # Usando vers√£o corrigida
    resultados = calcular_resultados(dados_processados)
    relatorio = gerar_relatorio(resultados)
    return relatorio

print("Executando vers√£o corrigida...")
try:
    relatorio = sistema_complexo_corrigido()
    print("‚úÖ Sistema corrigido executado com sucesso!")
    for linha in relatorio:
        print(f"  {linha}")
except Exception as e:
    print(f"‚ùå Erro: {e}")'''

        self.exemplo_interativo(codigo_divide, "Divide e Conquiste")
        
        try:
            input("\n‚úÖ Se√ß√£o 2 conclu√≠da! Pressione ENTER para continuar...")
        except KeyboardInterrupt:
            raise

    def _secao_debugger_pdb(self) -> None:
        """Se√ß√£o 3: Debugger Interativo (PDB)"""
        
        self.print_concept("üêû PDB √© o debugger interativo nativo do Python")
        self.print_tip("üéØ Permite pausar a execu√ß√£o e inspecionar vari√°veis em tempo real")
        
        self.print_colored("\nüìã COMANDOS PRINCIPAIS DO PDB:", "cyan")
        self.print_tip("‚Ä¢ n (next) - executa pr√≥xima linha")
        self.print_tip("‚Ä¢ s (step) - entra dentro de fun√ß√µes")
        self.print_tip("‚Ä¢ c (continue) - continua execu√ß√£o")
        self.print_tip("‚Ä¢ l (list) - mostra c√≥digo atual")
        self.print_tip("‚Ä¢ p <vari√°vel> - mostra valor de vari√°vel")
        self.print_tip("‚Ä¢ pp <vari√°vel> - pretty print de vari√°vel")
        self.print_tip("‚Ä¢ w (where) - mostra stack trace")
        self.print_tip("‚Ä¢ q (quit) - sair do debugger")
        
        try:
            input("\n‚ñ∂Ô∏è Pressione ENTER para ver exemplos do PDB...")
        except KeyboardInterrupt:
            raise

        codigo_pdb = '''# üêû DEBUGGER PDB - Debugging interativo

import pdb

def fibonacci_com_debug(n):
    """Fibonacci com pontos de debug"""
    print(f"üîç Calculando fibonacci({n})")
    
    # Breakpoint condicional
    if n > 10:
        print("üõë N√∫mero grande detectado - ativando debugger")
        # pdb.set_trace()  # Descomentaria para debugar
    
    if n <= 1:
        resultado = n
    else:
        print(f"  Calculando fibonacci({n-1}) + fibonacci({n-2})")
        resultado = fibonacci_com_debug(n-1) + fibonacci_com_debug(n-2)
    
    print(f"  fibonacci({n}) = {resultado}")
    return resultado

def debug_lista_operacoes():
    """Demonstra debugging de opera√ß√µes em lista"""
    numeros = [1, 5, 3, 8, 2, 7, 4, 6]
    print(f"Lista original: {numeros}")
    
    # Ponto de debug antes do processamento
    # pdb.set_trace()  # Pausaria aqui para inspecionar
    
    # Opera√ß√µes que podem ter bugs
    pares = []
    impares = []
    
    for i, numero in enumerate(numeros):
        print(f"  Processando √≠ndice {i}: {numero}")
        
        # Breakpoint condicional
        if numero > 5:
            print(f"    üîç N√∫mero alto encontrado: {numero}")
            # pdb.set_trace()  # Pausaria para n√∫meros > 5
        
        if numero % 2 == 0:
            pares.append(numero)
        else:
            impares.append(numero)
    
    print(f"Pares: {pares}")
    print(f"√çmpares: {impares}")
    
    return pares, impares

print("=== EXEMPLO DE DEBUGGING COM PDB ===")
print()

# Exemplo sem pausar (para demonstra√ß√£o)
print("1. Fibonacci pequeno:")
resultado = fibonacci_com_debug(5)
print(f"Resultado: {resultado}")

print("\\n2. Opera√ß√µes em lista:")
pares, impares = debug_lista_operacoes()

print("\\nüí° COMO USAR O PDB:")
print("1. Descomente as linhas 'pdb.set_trace()'")
print("2. Execute o c√≥digo")
print("3. Quando pausar, use os comandos:")
print("   - 'l' para ver c√≥digo")
print("   - 'p vari√°vel' para ver valores")
print("   - 'n' para pr√≥xima linha")
print("   - 'c' para continuar")
print("   - 'q' para sair")

print("\\nüîß DEBUGGING AVAN√áADO COM BREAKPOINTS:")

def funcao_com_bug_complexo(dados):
    """Fun√ß√£o com l√≥gica complexa para debugar"""
    resultado = {}
    
    for categoria, items in dados.items():
        print(f"Processando categoria: {categoria}")
        
        # Breakpoint para categoria espec√≠fica
        if categoria == "problematica":
            print("üö® Categoria problem√°tica detectada!")
            # pdb.set_trace()  # Pausaria aqui
        
        total = 0
        count = 0
        
        for item in items:
            # Verificar se item √© v√°lido
            if isinstance(item, dict) and 'valor' in item:
                valor = item['valor']
                if isinstance(valor, (int, float)) and valor > 0:
                    total += valor
                    count += 1
                else:
                    print(f"  ‚ö†Ô∏è Valor inv√°lido ignorado: {valor}")
            else:
                print(f"  ‚ö†Ô∏è Item inv√°lido ignorado: {item}")
        
        if count > 0:
            media = total / count
            resultado[categoria] = {
                'total': total,
                'count': count,
                'media': media
            }
        else:
            print(f"  ‚ùå Nenhum item v√°lido em {categoria}")
            resultado[categoria] = None
    
    return resultado

# Dados de teste com problemas
dados_teste = {
    'valida': [
        {'valor': 100},
        {'valor': 200},
        {'valor': 150}
    ],
    'problematica': [
        {'valor': 50},
        {'valor': -10},    # Valor negativo
        {'valor': None},   # Valor None
        {'nome': 'sem valor'},  # Sem campo valor
        300                # N√£o √© dict
    ],
    'vazia': []
}

print("\\n3. Debugging de fun√ß√£o complexa:")
resultado = funcao_com_bug_complexo(dados_teste)

print("\\nResultado final:")
for categoria, stats in resultado.items():
    if stats:
        print(f"  {categoria}: Total={stats['total']}, M√©dia={stats['media']:.2f}")
    else:
        print(f"  {categoria}: Sem dados v√°lidos")'''

        self.exemplo_interativo(codigo_pdb, "Debugger PDB")
        
        self.print_colored("\nüéØ DICAS AVAN√áADAS DO PDB:", "yellow")
        self.print_tip("üí° Use breakpoints condicionais para problemas espec√≠ficos")
        self.print_tip("üí° Combine 'l' + 'p' para ver c√≥digo e valores")
        self.print_tip("üí° Use 'w' para entender a stack de chamadas")
        self.print_tip("üí° Experimente 'pp' para objetos complexos")
        
        try:
            input("\n‚úÖ Se√ß√£o 3 conclu√≠da! Pressione ENTER para continuar...")
        except KeyboardInterrupt:
            raise

    def _secao_profiling_performance(self) -> None:
        """Se√ß√£o 4: Profiling de Performance"""
        
        self.print_concept("‚ö° PROFILING √© a medi√ß√£o detalhada de performance do c√≥digo")
        self.print_tip("üìä Identifica gargalos e otimiza o c√≥digo onde realmente importa")
        
        self.print_colored("\nüîß Ferramentas de Profiling:", "cyan")
        self.print_tip("üîπ cProfile - profiler nativo do Python")
        self.print_tip("üîπ timeit - medi√ß√£o precisa de pequenos trechos")
        self.print_tip("üîπ line_profiler - profiling linha por linha")
        self.print_tip("üîπ memory_profiler - monitoramento de mem√≥ria")
        
        try:
            input("\n‚ñ∂Ô∏è Pressione ENTER para ver profiling em a√ß√£o...")
        except KeyboardInterrupt:
            raise

        codigo_profiling = '''# ‚ö° PROFILING DE PERFORMANCE

import cProfile
import pstats
import time
import timeit
from io import StringIO

def algoritmo_lento(n):
    """Algoritmo ineficiente para demonstra√ß√£o"""
    resultado = 0
    for i in range(n):
        for j in range(1000):  # Loop desnecess√°rio
            resultado += i * j
    return resultado

def algoritmo_rapido(n):
    """Vers√£o otimizada"""
    return sum(i * sum(range(1000)) for i in range(n))

def ordenacao_bubble(lista):
    """Bubble sort - O(n¬≤)"""
    n = len(lista)
    for i in range(n):
        for j in range(0, n-i-1):
            if lista[j] > lista[j+1]:
                lista[j], lista[j+1] = lista[j+1], lista[j]
    return lista

def ordenacao_rapida(lista):
    """Usando sorted() built-in"""
    return sorted(lista)

print("=== PROFILING COM cProfile ===")

# Executar profiling
profiler = cProfile.Profile()
profiler.enable()

# C√≥digo a ser analisado
lista_teste = list(range(1000, 0, -1))  # Lista reversa
resultado_lento = algoritmo_lento(500)
lista_ordenada = ordenacao_bubble(lista_teste.copy())

profiler.disable()

# Analisar resultados
stream = StringIO()
stats = pstats.Stats(profiler, stream=stream)
stats.sort_stats('cumulative')
stats.print_stats(10)

print("üìä RELAT√ìRIO DE PROFILING:")
print("="*50)
output = stream.getvalue()
print(output[:1000] + "..." if len(output) > 1000 else output)

print("\\n=== COMPARA√á√ÉO DE PERFORMANCE ===")

# Medi√ß√£o com timeit
tempo_lento = timeit.timeit(
    lambda: algoritmo_lento(100), 
    number=5
)

tempo_rapido = timeit.timeit(
    lambda: algoritmo_rapido(100), 
    number=5
)

print(f"Algoritmo lento (5x): {tempo_lento:.4f}s")
print(f"Algoritmo r√°pido (5x): {tempo_rapido:.4f}s")
print(f"Speedup: {tempo_lento/tempo_rapido:.2f}x mais r√°pido")

# Compara√ß√£o de ordena√ß√£o
import random
lista_grande = list(range(5000))
random.shuffle(lista_grande)

print(f"\\nTestando ordena√ß√£o de {len(lista_grande)} elementos:")

tempo_bubble = timeit.timeit(
    lambda: ordenacao_bubble(lista_grande.copy()), 
    number=1
)

tempo_builtin = timeit.timeit(
    lambda: ordenacao_rapida(lista_grande.copy()), 
    number=100
) / 100  # M√©dia de 100 execu√ß√µes

print(f"Bubble sort: {tempo_bubble:.4f}s")
print(f"Sorted built-in: {tempo_builtin:.6f}s")
print(f"Speedup: {tempo_bubble/tempo_builtin:.0f}x mais r√°pido")

print("\\nüéØ DICAS DE PROFILING:")
print("‚Ä¢ Use cProfile para vis√£o geral")
print("‚Ä¢ Use timeit para compara√ß√µes precisas")
print("‚Ä¢ Foque nas fun√ß√µes que consomem mais tempo")
print("‚Ä¢ Otimize apenas depois de medir!")'''

        self.exemplo_interativo(codigo_profiling, "Profiling de Performance")
        
        try:
            input("\n‚úÖ Se√ß√£o 4 conclu√≠da! Pressione ENTER para continuar...")
        except KeyboardInterrupt:
            raise

    def _secao_monitoramento_recursos(self) -> None:
        """Se√ß√£o 5: Monitoramento de Recursos"""
        
        self.print_concept("üìä MONITORAMENTO permite acompanhar uso de CPU, mem√≥ria e I/O")
        self.print_tip("‚ö†Ô∏è Essencial para identificar vazamentos e gargalos de recursos")
        
        try:
            input("\n‚ñ∂Ô∏è Pressione ENTER para ver monitoramento em a√ß√£o...")
        except KeyboardInterrupt:
            raise

        codigo_monitoramento = '''# üìä MONITORAMENTO DE RECURSOS

import sys
import time
import threading
from collections import deque
import gc

# Simular psutil se n√£o dispon√≠vel
try:
    import psutil
    PSUTIL_AVAILABLE = True
except ImportError:
    PSUTIL_AVAILABLE = False
    print("‚ö†Ô∏è psutil n√£o dispon√≠vel - usando alternativas b√°sicas")

def medir_memoria_basico():
    """Medi√ß√£o b√°sica de mem√≥ria usando sys"""
    return sys.getsizeof

def monitorar_memoria_funcao(func):
    """Decorator para monitorar uso de mem√≥ria"""
    def wrapper(*args, **kwargs):
        # For√ßar garbage collection
        gc.collect()
        
        # Medi√ß√£o inicial b√°sica
        mem_antes = sum(sys.getsizeof(obj) for obj in gc.get_objects())
        
        start_time = time.time()
        resultado = func(*args, **kwargs)
        end_time = time.time()
        
        # Medi√ß√£o final
        gc.collect()
        mem_depois = sum(sys.getsizeof(obj) for obj in gc.get_objects())
        
        delta_mem = mem_depois - mem_antes
        tempo_exec = end_time - start_time
        
        print(f"üìä {func.__name__}:")
        print(f"   ‚è±Ô∏è Tempo: {tempo_exec:.4f}s")
        print(f"   üíæ Œî Mem√≥ria: {delta_mem:,} bytes")
        
        return resultado
    return wrapper

class MonitorRecursos:
    """Monitor simples de recursos"""
    
    def __init__(self):
        self.historico_memoria = deque(maxlen=100)
        self.historico_tempo = deque(maxlen=100)
        self.monitorando = False
        self.thread_monitor = None
    
    def iniciar_monitoramento(self, intervalo=1.0):
        """Inicia monitoramento cont√≠nuo"""
        if self.monitorando:
            return
        
        self.monitorando = True
        self.thread_monitor = threading.Thread(
            target=self._loop_monitoramento, 
            args=(intervalo,)
        )
        self.thread_monitor.daemon = True
        self.thread_monitor.start()
        print(f"üìà Monitoramento iniciado (intervalo: {intervalo}s)")
    
    def parar_monitoramento(self):
        """Para monitoramento"""
        self.monitorando = False
        if self.thread_monitor:
            self.thread_monitor.join(timeout=2)
        print("üìâ Monitoramento parado")
    
    def _loop_monitoramento(self, intervalo):
        """Loop de monitoramento"""
        while self.monitorando:
            timestamp = time.time()
            
            # Mem√≥ria b√°sica
            num_objetos = len(gc.get_objects())
            memoria_aprox = sum(sys.getsizeof(obj) for obj in gc.get_objects()[:1000])
            
            self.historico_tempo.append(timestamp)
            self.historico_memoria.append(memoria_aprox)
            
            time.sleep(intervalo)
    
    def relatorio(self):
        """Gera relat√≥rio de recursos"""
        if not self.historico_memoria:
            print("‚ùå Nenhum dado de monitoramento dispon√≠vel")
            return
        
        mem_min = min(self.historico_memoria)
        mem_max = max(self.historico_memoria)
        mem_media = sum(self.historico_memoria) / len(self.historico_memoria)
        
        print("üìä RELAT√ìRIO DE RECURSOS:")
        print(f"   üìù Amostras coletadas: {len(self.historico_memoria)}")
        print(f"   üíæ Mem√≥ria m√≠n: {mem_min:,} bytes")
        print(f"   üíæ Mem√≥ria m√°x: {mem_max:,} bytes")
        print(f"   üíæ Mem√≥ria m√©dia: {mem_media:,.0f} bytes")
        print(f"   üìà Varia√ß√£o: {mem_max - mem_min:,} bytes")

# Fun√ß√µes de teste para monitoramento
@monitorar_memoria_funcao
def criar_lista_grande():
    """Cria lista que consome mem√≥ria"""
    lista = []
    for i in range(100000):
        lista.append(f"item_{i}")
    return lista

@monitorar_memoria_funcao
def processar_dados_memoria():
    """Processamento que usa mem√≥ria tempor√°ria"""
    dados = {}
    for i in range(10000):
        dados[f"chave_{i}"] = {
            'valor': i * 2,
            'texto': f"texto_longo_para_item_{i}" * 10,
            'lista': list(range(i % 100))
        }
    
    # Processamento
    resultado = []
    for chave, valor in dados.items():
        resultado.append(valor['valor'] * 2)
    
    return sum(resultado)

def vazamento_memoria_simulado():
    """Simula vazamento de mem√≥ria"""
    vazamento = []
    for i in range(50000):
        vazamento.append([0] * 1000)  # Listas que "vazam"
    return len(vazamento)

print("=== MONITORAMENTO DE RECURSOS ===")

# Teste 1: Monitoramento de fun√ß√£o
print("\\n1. Testando fun√ß√µes com monitoramento:")
lista = criar_lista_grande()
print(f"   Lista criada com {len(lista)} elementos")

resultado = processar_dados_memoria()
print(f"   Resultado do processamento: {resultado}")

# Teste 2: Monitor cont√≠nuo
print("\\n2. Monitor cont√≠nuo de recursos:")
monitor = MonitorRecursos()

try:
    monitor.iniciar_monitoramento(0.5)
    
    print("   Executando opera√ß√µes monitoradas...")
    time.sleep(1)
    
    # Opera√ß√£o que consome mem√≥ria
    print("   Criando dados tempor√°rios...")
    temp_data = vazamento_memoria_simulado()
    print(f"   Vazamento simulado: {temp_data} listas criadas")
    
    time.sleep(1)
    
    # Limpar mem√≥ria
    del temp_data
    gc.collect()
    print("   Mem√≥ria limpa")
    
    time.sleep(1)
    
finally:
    monitor.parar_monitoramento()

monitor.relatorio()

print("\\nüí° DICAS DE MONITORAMENTO:")
print("‚Ä¢ Use psutil para monitoramento completo do sistema")
print("‚Ä¢ Monitore continuamente em produ√ß√£o")
print("‚Ä¢ Observe padr√µes de crescimento de mem√≥ria")
print("‚Ä¢ Configure alertas para limites de recursos")

if PSUTIL_AVAILABLE:
    print("\\nüîß Informa√ß√µes do sistema (psutil):")
    try:
        cpu_percent = psutil.cpu_percent(interval=1)
        memoria = psutil.virtual_memory()
        print(f"   üñ•Ô∏è CPU: {cpu_percent}%")
        print(f"   üíæ Mem√≥ria: {memoria.percent}% ({memoria.used/1024/1024/1024:.1f}GB/{memoria.total/1024/1024/1024:.1f}GB)")
    except:
        print("   ‚ùå Erro ao obter informa√ß√µes do sistema")'''

        self.exemplo_interativo(codigo_monitoramento, "Monitoramento de Recursos")
        
        try:
            input("\n‚úÖ Se√ß√£o 5 conclu√≠da! Pressione ENTER para continuar...")
        except KeyboardInterrupt:
            raise

    def _secao_debugging_avancado(self) -> None:
        """Se√ß√£o 6: Debugging Avan√ßado"""
        
        self.print_concept("üöÄ DEBUGGING AVAN√áADO combina m√∫ltiplas t√©cnicas para problemas complexos")
        self.print_tip("üéØ Estrat√©gias profissionais para bugs dif√≠ceis de reproduzir")
        
        try:
            input("\n‚ñ∂Ô∏è Pressione ENTER para ver t√©cnicas avan√ßadas...")
        except KeyboardInterrupt:
            raise

        codigo_avancado = '''# üöÄ DEBUGGING AVAN√áADO - T√©cnicas profissionais

import functools
import traceback
import logging
import time
import threading
from datetime import datetime
from collections import defaultdict, deque
import json

# Configurar logging avan√ßado
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

class DebugProfiler:
    """Profiler avan√ßado para debugging"""
    
    def __init__(self):
        self.call_stack = []
        self.performance_data = defaultdict(list)
        self.error_log = []
        self.call_count = defaultdict(int)
    
    def debug_function(self, include_args=True, track_performance=True):
        """Decorator avan√ßado para debugging"""
        def decorator(func):
            @functools.wraps(func)
            def wrapper(*args, **kwargs):
                func_name = f"{func.__module__}.{func.__name__}"
                
                # Incrementar contador
                self.call_count[func_name] += 1
                call_id = self.call_count[func_name]
                
                # Preparar informa√ß√µes de entrada
                entrada_info = {
                    'function': func_name,
                    'call_id': call_id,
                    'timestamp': datetime.now().isoformat(),
                    'thread_id': threading.get_ident()
                }
                
                if include_args:
                    entrada_info['args'] = str(args)[:200]  # Limitar tamanho
                    entrada_info['kwargs'] = str(kwargs)[:200]
                
                # Adicionar √† pilha de chamadas
                self.call_stack.append(entrada_info)
                
                start_time = time.time()
                
                try:
                    logging.debug(f"üîç ENTRADA {func_name} (#{call_id})")
                    resultado = func(*args, **kwargs)
                    
                    end_time = time.time()
                    execution_time = end_time - start_time
                    
                    # Registrar performance
                    if track_performance:
                        self.performance_data[func_name].append(execution_time)
                    
                    logging.debug(f"‚úÖ SA√çDA {func_name} (#{call_id}) - {execution_time:.4f}s")
                    
                    return resultado
                    
                except Exception as e:
                    end_time = time.time()
                    execution_time = end_time - start_time
                    
                    # Registrar erro
                    error_info = {
                        'function': func_name,
                        'call_id': call_id,
                        'error': str(e),
                        'error_type': type(e).__name__,
                        'execution_time': execution_time,
                        'timestamp': datetime.now().isoformat(),
                        'traceback': traceback.format_exc()
                    }
                    
                    self.error_log.append(error_info)
                    
                    logging.error(f"‚ùå ERRO {func_name} (#{call_id}): {e}")
                    raise
                    
                finally:
                    # Remover da pilha
                    if self.call_stack:
                        self.call_stack.pop()
            
            return wrapper
        return decorator
    
    def get_call_stack(self):
        """Retorna pilha atual de chamadas"""
        return self.call_stack.copy()
    
    def get_performance_summary(self):
        """Resumo de performance"""
        summary = {}
        for func_name, times in self.performance_data.items():
            if times:
                summary[func_name] = {
                    'calls': len(times),
                    'total_time': sum(times),
                    'avg_time': sum(times) / len(times),
                    'min_time': min(times),
                    'max_time': max(times)
                }
        return summary
    
    def get_error_summary(self):
        """Resumo de erros"""
        error_counts = defaultdict(int)
        for error in self.error_log:
            error_counts[error['error_type']] += 1
        
        return {
            'total_errors': len(self.error_log),
            'error_types': dict(error_counts),
            'recent_errors': self.error_log[-5:] if self.error_log else []
        }
    
    def export_debug_data(self, filename='debug_report.json'):
        """Exporta dados de debugging"""
        data = {
            'performance': self.get_performance_summary(),
            'errors': self.get_error_summary(),
            'call_counts': dict(self.call_count),
            'export_time': datetime.now().isoformat()
        }
        
        with open(filename, 'w') as f:
            json.dump(data, f, indent=2)
        
        print(f"üíæ Relat√≥rio de debug exportado para {filename}")

# Inst√¢ncia global do profiler
debug_profiler = DebugProfiler()

# Fun√ß√µes de exemplo com debugging avan√ßado
@debug_profiler.debug_function(include_args=True, track_performance=True)
def operacao_complexa(dados, opcoes=None):
    """Opera√ß√£o complexa que pode falhar"""
    if opcoes is None:
        opcoes = {}
    
    # Simular processamento complexo
    if not isinstance(dados, list):
        raise TypeError("Dados devem ser uma lista")
    
    if len(dados) == 0:
        raise ValueError("Lista n√£o pode estar vazia")
    
    resultado = []
    for i, item in enumerate(dados):
        if opcoes.get('slow_mode'):
            time.sleep(0.01)  # Simular opera√ß√£o lenta
        
        if isinstance(item, (int, float)):
            processado = item ** 2
        elif isinstance(item, str):
            processado = len(item)
        else:
            raise TypeError(f"Tipo n√£o suportado no √≠ndice {i}: {type(item)}")
        
        resultado.append(processado)
    
    return resultado

@debug_profiler.debug_function()
def funcao_recursiva(n, depth=0):
    """Fun√ß√£o recursiva para testar pilha de chamadas"""
    if depth > 10:
        raise RecursionError("Profundidade m√°xima atingida")
    
    if n <= 1:
        return 1
    
    return n * funcao_recursiva(n-1, depth+1)

@debug_profiler.debug_function()
def funcao_com_bug_intermitente():
    """Fun√ß√£o que falha aleatoriamente"""
    import random
    
    if random.random() < 0.3:  # 30% chance de erro
        raise RuntimeError("Erro intermitente!")
    
    return "Sucesso!"

print("=== DEBUGGING AVAN√áADO ===")

# Teste 1: Opera√ß√µes bem-sucedidas
print("\\n1. Testando opera√ß√µes normais:")
try:
    resultado1 = operacao_complexa([1, 2, 3, "hello", 5.5])
    print(f"   ‚úÖ Resultado: {resultado1}")
    
    resultado2 = operacao_complexa([10, 20], {'slow_mode': False})
    print(f"   ‚úÖ Resultado: {resultado2}")
    
except Exception as e:
    print(f"   ‚ùå Erro: {e}")

# Teste 2: Opera√ß√µes com erros
print("\\n2. Testando cen√°rios de erro:")
cenarios_erro = [
    ("lista vazia", []),
    ("tipo inv√°lido", "n√£o √© lista"),
    ("item inv√°lido", [1, 2, {}]),
]

for desc, dados in cenarios_erro:
    try:
        resultado = operacao_complexa(dados)
        print(f"   ‚úÖ {desc}: {resultado}")
    except Exception as e:
        print(f"   ‚ùå {desc}: {type(e).__name__}: {e}")

# Teste 3: Fun√ß√£o recursiva
print("\\n3. Testando recurs√£o:")
try:
    resultado = funcao_recursiva(5)
    print(f"   ‚úÖ Fatorial de 5: {resultado}")
    
    # Teste com erro
    resultado = funcao_recursiva(20)  # Vai dar erro
except Exception as e:
    print(f"   ‚ùå Erro na recurs√£o: {e}")

# Teste 4: Bug intermitente
print("\\n4. Testando bug intermitente (10 tentativas):")
sucessos = 0
for i in range(10):
    try:
        resultado = funcao_com_bug_intermitente()
        sucessos += 1
        print(f"   ‚úÖ Tentativa {i+1}: {resultado}")
    except Exception as e:
        print(f"   ‚ùå Tentativa {i+1}: {e}")

print(f"   üìä Taxa de sucesso: {sucessos}/10 ({sucessos*10}%)")

# Teste 5: Relat√≥rios de debugging
print("\\n5. Relat√≥rios de debugging:")

print("\\nüìä Pilha atual de chamadas:")
pilha = debug_profiler.get_call_stack()
if pilha:
    for nivel, chamada in enumerate(pilha):
        print(f"   {nivel}: {chamada['function']} (#{chamada['call_id']})")
else:
    print("   (vazia)")

print("\\n‚ö° Resumo de performance:")
perf_summary = debug_profiler.get_performance_summary()
for func, stats in perf_summary.items():
    print(f"   {func.split('.')[-1]}:")
    print(f"     Chamadas: {stats['calls']}")
    print(f"     Tempo total: {stats['total_time']:.4f}s")
    print(f"     Tempo m√©dio: {stats['avg_time']:.4f}s")

print("\\n‚ùå Resumo de erros:")
error_summary = debug_profiler.get_error_summary()
print(f"   Total de erros: {error_summary['total_errors']}")
print(f"   Tipos de erro: {error_summary['error_types']}")

# Exportar relat√≥rio
debug_profiler.export_debug_data()

print("\\nüéØ T√âCNICAS AVAN√áADAS DEMONSTRADAS:")
print("‚Ä¢ Profiler customizado com decorators")
print("‚Ä¢ Rastreamento de pilha de chamadas")
print("‚Ä¢ An√°lise de performance autom√°tica")
print("‚Ä¢ Log estruturado de erros")
print("‚Ä¢ Exporta√ß√£o de dados para an√°lise")
print("‚Ä¢ Debugging de bugs intermitentes")'''

        self.exemplo_interativo(codigo_avancado, "Debugging Avan√ßado")
        
        try:
            input("\n‚úÖ Se√ß√£o 6 conclu√≠da! Pressione ENTER para continuar...")
        except KeyboardInterrupt:
            raise

    def _secao_pratica_interativa(self) -> None:
        """Se√ß√£o de Pr√°tica Interativa com exerc√≠cios"""
        
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üéØ SE√á√ÉO DE PR√ÅTICA - DEBUGGING E PROFILING")
        else:
            print("\n" + "="*60)
            print("üéØ SE√á√ÉO DE PR√ÅTICA - DEBUGGING E PROFILING")
            print("="*60)

        self.print_success("üéâ Hora de praticar seus conhecimentos!")
        self.print_concept("üìö Esta se√ß√£o cont√©m: Quiz, Exerc√≠cios de C√≥digo e Desafio Criativo")
        
        try:
            input("\nüöÄ Pressione ENTER para come√ßar a pr√°tica...")
        except KeyboardInterrupt:
            raise

        # === QUIZ INTERATIVO ===
        self._quiz_debugging()
        
        # === EXERC√çCIOS DE C√ìDIGO ===
        self._exercicios_codigo_debugging()
        
        # === DESAFIO CRIATIVO ===
        self._desafio_criativo_debugging()

    def _quiz_debugging(self) -> None:
        """Quiz sobre debugging e profiling"""
        
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üìù QUIZ: DEBUGGING E PROFILING")
        else:
            print("\n" + "="*50)
            print("üìù QUIZ: DEBUGGING E PROFILING")
            print("="*50)

        perguntas = [
            {
                'pergunta': 'Qual comando do PDB executa a pr√≥xima linha sem entrar em fun√ß√µes?',
                'opcoes': ['a) s (step)', 'b) n (next)', 'c) c (continue)', 'd) l (list)'],
                'resposta': 'b',
                'explicacao': 'O comando "n" (next) executa a pr√≥xima linha sem entrar em fun√ß√µes chamadas.'
            },
            {
                'pergunta': 'Qual ferramenta √© melhor para identificar fun√ß√µes que consomem mais tempo?',
                'opcoes': ['a) print debugging', 'b) assert statements', 'c) cProfile', 'd) logging'],
                'resposta': 'c',
                'explicacao': 'cProfile √© o profiler nativo do Python, ideal para an√°lise de performance.'
            },
            {
                'pergunta': 'O que significa um "vazamento de mem√≥ria" em Python?',
                'opcoes': ['a) Erro de sintaxe', 'b) Mem√≥ria n√£o liberada pelo GC', 'c) C√≥digo muito lento', 'd) Exce√ß√£o n√£o tratada'],
                'resposta': 'b',
                'explicacao': 'Vazamento de mem√≥ria ocorre quando objetos n√£o s√£o liberados pelo Garbage Collector.'
            },
            {
                'pergunta': 'Qual √© a primeira etapa do processo de debugging?',
                'opcoes': ['a) Corrigir o problema', 'b) Usar o debugger', 'c) Identificar que existe problema', 'd) Escrever testes'],
                'resposta': 'c',
                'explicacao': 'Primeiro precisamos identificar e reconhecer que existe um problema no c√≥digo.'
            },
            {
                'pergunta': 'Para que serve o comando "pp" no PDB?',
                'opcoes': ['a) Pausar programa', 'b) Pretty print de vari√°veis', 'c) Sair do debugger', 'd) Mostrar c√≥digo'],
                'resposta': 'b',
                'explicacao': 'O comando "pp" faz pretty print, formatando a sa√≠da de forma mais leg√≠vel.'
            }
        ]

        acertos = 0
        total = len(perguntas)

        for i, pergunta in enumerate(perguntas, 1):
            try:
                self.print_colored(f"\n‚ùì PERGUNTA {i}/{total}:", "cyan")
                self.print_concept(pergunta['pergunta'])
                print()
                for opcao in pergunta['opcoes']:
                    self.print_tip(opcao)
                
                while True:
                    try:
                        resposta = input("\nü§î Sua resposta (a/b/c/d): ").lower().strip()
                        if resposta in ['a', 'b', 'c', 'd']:
                            break
                        self.print_warning("Digite apenas a, b, c ou d")
                    except KeyboardInterrupt:
                        raise
                
                if resposta == pergunta['resposta']:
                    self.print_success("‚úÖ Correto!")
                    acertos += 1
                else:
                    self.print_warning(f"‚ùå Incorreto. A resposta certa √©: {pergunta['resposta']}")
                
                self.print_tip(f"üí° {pergunta['explicacao']}")
                
                if i < total:
                    try:
                        input("\n‚è≠Ô∏è Pressione ENTER para pr√≥xima pergunta...")
                    except KeyboardInterrupt:
                        raise
                        
            except KeyboardInterrupt:
                self.print_warning("\n‚ö†Ô∏è Quiz interrompido!")
                raise

        # Resultado final
        porcentagem = (acertos / total) * 100
        self.print_colored(f"\nüéØ RESULTADO FINAL: {acertos}/{total} ({porcentagem:.0f}%)", "cyan")
        
        if porcentagem >= 80:
            self.print_success("üèÜ Excelente! Voc√™ domina debugging!")
        elif porcentagem >= 60:
            self.print_success("üëç Bom trabalho! Continue praticando!")
        else:
            self.print_warning("üìö Revise os conceitos e tente novamente!")

        if self.progress:
            self.progress.add_points(acertos * 5)
            self.print_tip(f"üéÅ +{acertos * 5} pontos pelo quiz!")

    def _exercicios_codigo_debugging(self) -> None:
        """Exerc√≠cios pr√°ticos de debugging"""
        
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üíª EXERC√çCIOS DE C√ìDIGO")
        else:
            print("\n" + "="*50)
            print("üíª EXERC√çCIOS DE C√ìDIGO")
            print("="*50)

        self.print_concept("üõ†Ô∏è Vamos praticar debugging com c√≥digo real!")
        
        exercicios = [
            {
                'titulo': 'Corrigir Bug de Divis√£o',
                'codigo_bugado': '''def calcular_media(numeros):
    total = sum(numeros)
    return total / len(numeros)

# Teste
print(calcular_media([1, 2, 3, 4, 5]))
print(calcular_media([]))  # BUG: Divis√£o por zero!''',
                'solucao': '''def calcular_media(numeros):
    if not numeros:  # Verificar lista vazia
        return 0
    total = sum(numeros)
    return total / len(numeros)'''
            },
            {
                'titulo': 'Otimizar Performance',
                'codigo_bugado': '''def buscar_duplicatas_lento(lista):
    duplicatas = []
    for i in range(len(lista)):
        for j in range(i + 1, len(lista)):
            if lista[i] == lista[j] and lista[i] not in duplicatas:
                duplicatas.append(lista[i])
    return duplicatas

# Muito lento para listas grandes!''',
                'solucao': '''def buscar_duplicatas_rapido(lista):
    vistos = set()
    duplicatas = set()
    for item in lista:
        if item in vistos:
            duplicatas.add(item)
        else:
            vistos.add(item)
    return list(duplicatas)'''
            },
            {
                'titulo': 'Adicionar Logging',
                'codigo_bugado': '''def processar_arquivo(filename):
    with open(filename, 'r') as f:
        lines = f.readlines()
    
    processed = []
    for line in lines:
        if line.strip():
            processed.append(line.upper())
    
    return processed

# Sem informa√ß√µes de debug!''',
                'solucao': '''import logging

def processar_arquivo(filename):
    logging.info(f"Iniciando processamento de {filename}")
    
    with open(filename, 'r') as f:
        lines = f.readlines()
    
    logging.debug(f"Lidas {len(lines)} linhas")
    
    processed = []
    for i, line in enumerate(lines):
        if line.strip():
            processed.append(line.upper())
            logging.debug(f"Linha {i+1} processada")
    
    logging.info(f"Processamento conclu√≠do: {len(processed)} linhas v√°lidas")
    return processed'''
            }
        ]

        for i, exercicio in enumerate(exercicios, 1):
            try:
                self.print_colored(f"\nüîß EXERC√çCIO {i}: {exercicio['titulo']}", "yellow")
                
                self.print_tip("C√≥digo com problema:")
                self.exemplo_interativo(exercicio['codigo_bugado'], f"Exerc√≠cio {i} - Problema")
                
                try:
                    input(f"\nü§î Analise o c√≥digo e pressione ENTER para ver a solu√ß√£o...")
                except KeyboardInterrupt:
                    raise
                
                self.print_success("‚úÖ Solu√ß√£o:")
                self.exemplo_interativo(exercicio['solucao'], f"Exerc√≠cio {i} - Solu√ß√£o")
                
                if i < len(exercicios):
                    try:
                        input("\n‚è≠Ô∏è Pressione ENTER para pr√≥ximo exerc√≠cio...")
                    except KeyboardInterrupt:
                        raise
                        
            except KeyboardInterrupt:
                self.print_warning("\n‚ö†Ô∏è Exerc√≠cios interrompidos!")
                raise

        if self.progress:
            self.progress.add_points(30)
            self.print_success("üéÅ +30 pontos pelos exerc√≠cios!")

    def _desafio_criativo_debugging(self) -> None:
        """Desafio criativo de debugging"""
        
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üé® DESAFIO CRIATIVO")
        else:
            print("\n" + "="*50)
            print("üé® DESAFIO CRIATIVO")
            print("="*50)

        self.print_concept("üöÄ DESAFIO: Crie um sistema de debugging personalizado!")
        
        desafio_codigo = '''# üé® DESAFIO CRIATIVO: Sistema de Debugging Personalizado
# 
# Sua miss√£o: Criar um decorator que combine:
# 1. Medi√ß√£o de tempo de execu√ß√£o
# 2. Captura de erros com stack trace
# 3. Log de entrada e sa√≠da de fun√ß√µes
# 4. Contagem de chamadas
# 5. An√°lise de argumentos
#
# Exemplo de uso desejado:
#
# @meu_debug_decorator
# def funcao_exemplo(x, y):
#     return x + y
#
# Sa√≠da esperada:
# [DEBUG] Entrada: funcao_exemplo(x=1, y=2) - Chamada #1
# [DEBUG] Sa√≠da: funcao_exemplo -> 3 (0.0001s) - Sucesso
#
# Implemente seu decorator aqui:

import functools
import time
from collections import defaultdict

# Sua implementa√ß√£o aqui:
def meu_debug_decorator(func):
    # TODO: Implementar decorator completo
    pass

# Teste suas fun√ß√µes:
@meu_debug_decorator
def somar(a, b):
    return a + b

@meu_debug_decorator  
def dividir(a, b):
    if b == 0:
        raise ValueError("Divis√£o por zero!")
    return a / b

# Testes
print("=== TESTANDO SISTEMA DE DEBUG ===")
resultado1 = somar(5, 3)
resultado2 = dividir(10, 2)

try:
    resultado3 = dividir(10, 0)  # Deve capturar erro
except ValueError as e:
    print(f"Erro capturado: {e}")

print("\\nüéØ REQUISITOS DO DESAFIO:")
print("‚úÖ Medi√ß√£o de tempo")
print("‚úÖ Log de entrada/sa√≠da")  
print("‚úÖ Captura de erros")
print("‚úÖ Contagem de chamadas")
print("‚úÖ An√°lise de argumentos")'''

        self.exemplo_interativo(desafio_codigo, "Desafio Criativo")
        
        self.print_colored("\nüèÜ IMPLEMENTA√á√ÉO SUGERIDA:", "green")
        
        solucao_desafio = '''# ‚úÖ SOLU√á√ÉO DO DESAFIO

import functools
import time
import traceback
from collections import defaultdict

# Contador global de chamadas
call_counter = defaultdict(int)

def meu_debug_decorator(func):
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        func_name = func.__name__
        
        # Incrementar contador
        call_counter[func_name] += 1
        call_num = call_counter[func_name]
        
        # Preparar argumentos para log
        args_str = ', '.join(map(str, args))
        kwargs_str = ', '.join(f"{k}={v}" for k, v in kwargs.items())
        all_args = ', '.join(filter(None, [args_str, kwargs_str]))
        
        # Log de entrada
        print(f"[DEBUG] Entrada: {func_name}({all_args}) - Chamada #{call_num}")
        
        start_time = time.time()
        
        try:
            # Executar fun√ß√£o
            resultado = func(*args, **kwargs)
            
            # Calcular tempo
            end_time = time.time()
            exec_time = end_time - start_time
            
            # Log de sa√≠da (sucesso)
            print(f"[DEBUG] Sa√≠da: {func_name} -> {resultado} ({exec_time:.4f}s) - Sucesso")
            
            return resultado
            
        except Exception as e:
            # Calcular tempo mesmo com erro
            end_time = time.time()
            exec_time = end_time - start_time
            
            # Log de erro
            print(f"[DEBUG] Erro: {func_name} -> {type(e).__name__}: {e} ({exec_time:.4f}s)")
            print(f"[DEBUG] Stack: {traceback.format_exc().strip()}")
            
            # Re-lan√ßar exce√ß√£o
            raise
    
    return wrapper

# Exemplo completo de uso:
@meu_debug_decorator
def somar(a, b):
    """Soma dois n√∫meros"""
    time.sleep(0.01)  # Simular processamento
    return a + b

@meu_debug_decorator  
def dividir(a, b):
    """Divide dois n√∫meros"""
    if b == 0:
        raise ValueError("Divis√£o por zero n√£o permitida!")
    return a / b

@meu_debug_decorator
def fibonacci(n):
    """Calcula Fibonacci recursivo"""
    if n <= 1:
        return n
    return fibonacci(n-1) + fibonacci(n-2)

# Demonstra√ß√£o
print("=== SISTEMA DE DEBUG EM A√á√ÉO ===")

# Testes bem-sucedidos
print("\\n1. Opera√ß√µes normais:")
resultado1 = somar(5, 3)
resultado2 = dividir(10, 2)
resultado3 = somar(1.5, 2.5)

# Teste com erro
print("\\n2. Teste de erro:")
try:
    resultado_erro = dividir(10, 0)
except ValueError:
    print("   (Erro tratado pelo c√≥digo principal)")

# Teste recursivo
print("\\n3. Teste recursivo:")
fib_resultado = fibonacci(5)

# Estat√≠sticas
print("\\nüìä ESTAT√çSTICAS:")
for func_name, count in call_counter.items():
    print(f"   {func_name}: {count} chamadas")

print("\\nüéâ Sistema de debugging personalizado funcionando!")'''

        self.exemplo_interativo(solucao_desafio, "Solu√ß√£o do Desafio")
        
        self.print_success("\nüèÜ PARAB√âNS! Voc√™ completou o desafio criativo!")
        self.print_tip("üí° Este tipo de decorator √© muito √∫til em projetos reais")
        
        if self.progress:
            self.progress.add_points(50)
            self.print_success("üéÅ +50 pontos pelo desafio criativo!")

        try:
            input("\nüéØ Pressione ENTER para continuar para o mini projeto...")
        except KeyboardInterrupt:
            raise

    def _mini_projeto_sistema_debugging_avancado(self) -> None:
        """Mini Projeto: Sistema de Debugging Avan√ßado"""
        
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üöÄ MINI PROJETO: SISTEMA DE DEBUGGING AVAN√áADO")
        else:
            print("\n" + "="*60)
            print("üöÄ MINI PROJETO: SISTEMA DE DEBUGGING AVAN√áADO")
            print("="*60)

        self.print_success("üéâ Projeto Final: Sistema Completo de Debugging e Profiling!")
        self.print_concept("üõ†Ô∏è Vamos criar um sistema profissional que combina todas as t√©cnicas aprendidas")
        
        self.print_colored("\nüéØ FUNCIONALIDADES DO SISTEMA:", "cyan")
        self.print_tip("‚úÖ Profiling autom√°tico de fun√ß√µes")
        self.print_tip("‚úÖ Detec√ß√£o de vazamentos de mem√≥ria")
        self.print_tip("‚úÖ An√°lise de performance em tempo real")
        self.print_tip("‚úÖ Sistema de alertas para problemas")
        self.print_tip("‚úÖ Dashboard de monitoramento")
        self.print_tip("‚úÖ Exporta√ß√£o de relat√≥rios")
        
        try:
            input("\nüöÄ Pressione ENTER para come√ßar o desenvolvimento...")
        except KeyboardInterrupt:
            raise

        projeto_codigo = '''# üöÄ MINI PROJETO: SISTEMA DE DEBUGGING AVAN√áADO
# Sistema completo para debugging e profiling em produ√ß√£o

import time
import functools
import threading
import traceback
import json
import gc
import sys
from datetime import datetime, timedelta
from collections import defaultdict, deque
from typing import Dict, List, Any, Optional, Callable
from dataclasses import dataclass, asdict

@dataclass
class PerformanceMetrics:
    """M√©tricas de performance de uma fun√ß√£o"""
    function_name: str
    total_calls: int = 0
    total_time: float = 0.0
    avg_time: float = 0.0
    min_time: float = float('inf')
    max_time: float = 0.0
    error_count: int = 0
    last_called: Optional[str] = None
    memory_usage: List[int] = None
    
    def __post_init__(self):
        if self.memory_usage is None:
            self.memory_usage = []
    
    def update_timing(self, execution_time: float):
        """Atualiza m√©tricas de tempo"""
        self.total_calls += 1
        self.total_time += execution_time
        self.avg_time = self.total_time / self.total_calls
        self.min_time = min(self.min_time, execution_time)
        self.max_time = max(self.max_time, execution_time)
        self.last_called = datetime.now().isoformat()
    
    def add_error(self):
        """Registra um erro"""
        self.error_count += 1
    
    def add_memory_usage(self, memory_bytes: int):
        """Adiciona medi√ß√£o de mem√≥ria"""
        self.memory_usage.append(memory_bytes)
        # Manter apenas √∫ltimas 100 medi√ß√µes
        if len(self.memory_usage) > 100:
            self.memory_usage.pop(0)

class AdvancedDebugSystem:
    """Sistema avan√ßado de debugging e profiling"""
    
    def __init__(self):
        self.metrics: Dict[str, PerformanceMetrics] = {}
        self.active_calls: Dict[int, Dict] = {}  # Thread ID -> call info
        self.alerts: List[Dict] = []
        self.monitoring_active = False
        self.monitor_thread = None
        self.performance_thresholds = {
            'slow_function_time': 1.0,  # segundos
            'high_error_rate': 0.1,     # 10%
            'memory_growth_rate': 1024*1024*10  # 10MB
        }
        self.lock = threading.RLock()
    
    def profile_function(self, 
                        monitor_memory: bool = True,
                        alert_on_slow: bool = True,
                        alert_on_errors: bool = True):
        """Decorator principal para profiling autom√°tico"""
        def decorator(func: Callable) -> Callable:
            func_name = f"{func.__module__}.{func.__name__}"
            
            # Inicializar m√©tricas se necess√°rio
            if func_name not in self.metrics:
                self.metrics[func_name] = PerformanceMetrics(func_name)
            
            @functools.wraps(func)
            def wrapper(*args, **kwargs):
                thread_id = threading.get_ident()
                
                # Preparar informa√ß√µes da chamada
                call_info = {
                    'function': func_name,
                    'start_time': time.time(),
                    'thread_id': thread_id,
                    'args_count': len(args),
                    'kwargs_count': len(kwargs)
                }
                
                # Medi√ß√£o de mem√≥ria inicial
                if monitor_memory:
                    gc.collect()
                    call_info['start_memory'] = sum(sys.getsizeof(obj) for obj in gc.get_objects()[:1000])
                
                # Registrar chamada ativa
                with self.lock:
                    self.active_calls[thread_id] = call_info
                
                try:
                    # Executar fun√ß√£o
                    resultado = func(*args, **kwargs)
                    
                    # Calcular m√©tricas
                    end_time = time.time()
                    execution_time = end_time - call_info['start_time']
                    
                    # Atualizar estat√≠sticas
                    with self.lock:
                        metrics = self.metrics[func_name]
                        metrics.update_timing(execution_time)
                        
                        # Medi√ß√£o de mem√≥ria final
                        if monitor_memory:
                            gc.collect()
                            end_memory = sum(sys.getsizeof(obj) for obj in gc.get_objects()[:1000])
                            memory_delta = end_memory - call_info['start_memory']
                            metrics.add_memory_usage(memory_delta)
                        
                        # Verificar alertas
                        if alert_on_slow and execution_time > self.performance_thresholds['slow_function_time']:
                            self._add_alert('slow_function', {
                                'function': func_name,
                                'execution_time': execution_time,
                                'threshold': self.performance_thresholds['slow_function_time']
                            })
                    
                    return resultado
                    
                except Exception as e:
                    # Registrar erro
                    with self.lock:
                        self.metrics[func_name].add_error()
                        
                        if alert_on_errors:
                            error_rate = (self.metrics[func_name].error_count / 
                                        max(1, self.metrics[func_name].total_calls))
                            
                            if error_rate > self.performance_thresholds['high_error_rate']:
                                self._add_alert('high_error_rate', {
                                    'function': func_name,
                                    'error_rate': error_rate,
                                    'threshold': self.performance_thresholds['high_error_rate'],
                                    'error': str(e)
                                })
                    
                    raise
                    
                finally:
                    # Remover chamada ativa
                    with self.lock:
                        if thread_id in self.active_calls:
                            del self.active_calls[thread_id]
            
            return wrapper
        return decorator
    
    def _add_alert(self, alert_type: str, details: Dict):
        """Adiciona alerta ao sistema"""
        alert = {
            'type': alert_type,
            'timestamp': datetime.now().isoformat(),
            'details': details
        }
        
        self.alerts.append(alert)
        
        # Manter apenas √∫ltimos 1000 alertas
        if len(self.alerts) > 1000:
            self.alerts.pop(0)
        
        # Log do alerta
        print(f"üö® ALERTA [{alert_type}]: {details}")
    
    def start_monitoring(self, interval: float = 5.0):
        """Inicia monitoramento cont√≠nuo"""
        if self.monitoring_active:
            return
        
        self.monitoring_active = True
        self.monitor_thread = threading.Thread(
            target=self._monitoring_loop,
            args=(interval,)
        )
        self.monitor_thread.daemon = True
        self.monitor_thread.start()
        
        print(f"üìà Monitoramento iniciado (intervalo: {interval}s)")
    
    def stop_monitoring(self):
        """Para monitoramento"""
        self.monitoring_active = False
        if self.monitor_thread:
            self.monitor_thread.join(timeout=2)
        print("üìâ Monitoramento parado")
    
    def _monitoring_loop(self, interval: float):
        """Loop de monitoramento cont√≠nuo"""
        while self.monitoring_active:
            try:
                self._check_system_health()
                time.sleep(interval)
            except Exception as e:
                print(f"‚ùå Erro no monitoramento: {e}")
    
    def _check_system_health(self):
        """Verifica sa√∫de geral do sistema"""
        with self.lock:
            # Verificar fun√ß√µes ativas h√° muito tempo
            current_time = time.time()
            for thread_id, call_info in self.active_calls.items():
                duration = current_time - call_info['start_time']
                if duration > 30:  # 30 segundos
                    self._add_alert('long_running_function', {
                        'function': call_info['function'],
                        'duration': duration,
                        'thread_id': thread_id
                    })
    
    def get_dashboard_data(self) -> Dict[str, Any]:
        """Retorna dados para dashboard"""
        with self.lock:
            # Estat√≠sticas gerais
            total_functions = len(self.metrics)
            total_calls = sum(m.total_calls for m in self.metrics.values())
            total_errors = sum(m.error_count for m in self.metrics.values())
            
            # Top 5 fun√ß√µes mais chamadas
            top_called = sorted(
                self.metrics.values(),
                key=lambda m: m.total_calls,
                reverse=True
            )[:5]
            
            # Top 5 fun√ß√µes mais lentas
            top_slow = sorted(
                self.metrics.values(),
                key=lambda m: m.avg_time,
                reverse=True
            )[:5]
            
            # Fun√ß√µes com mais erros
            top_errors = sorted(
                [m for m in self.metrics.values() if m.error_count > 0],
                key=lambda m: m.error_count,
                reverse=True
            )[:5]
            
            return {
                'summary': {
                    'total_functions': total_functions,
                    'total_calls': total_calls,
                    'total_errors': total_errors,
                    'active_calls': len(self.active_calls),
                    'recent_alerts': len([a for a in self.alerts 
                                        if datetime.fromisoformat(a['timestamp']) > 
                                        datetime.now() - timedelta(minutes=5)])
                },
                'top_called': [asdict(m) for m in top_called],
                'top_slow': [asdict(m) for m in top_slow],
                'top_errors': [asdict(m) for m in top_errors],
                'recent_alerts': self.alerts[-10:],
                'active_calls': list(self.active_calls.values())
            }
    
    def print_dashboard(self):
        """Exibe dashboard no console"""
        data = self.get_dashboard_data()
        
        print("\\n" + "="*80)
        print("                    DASHBOARD DE DEBUGGING AVAN√áADO")
        print("="*80)
        
        # Resumo
        summary = data['summary']
        print(f"üìä RESUMO GERAL:")
        print(f"   Fun√ß√µes monitoradas: {summary['total_functions']}")
        print(f"   Total de chamadas: {summary['total_calls']:,}")
        print(f"   Total de erros: {summary['total_errors']:,}")
        print(f"   Chamadas ativas: {summary['active_calls']}")
        print(f"   Alertas recentes (5min): {summary['recent_alerts']}")
        
        # Top fun√ß√µes
        if data['top_called']:
            print(f"\\nüîù TOP FUN√á√ïES MAIS CHAMADAS:")
            for i, metrics in enumerate(data['top_called'], 1):
                print(f"   {i}. {metrics['function_name'].split('.')[-1]}: "
                      f"{metrics['total_calls']:,} calls, "
                      f"{metrics['avg_time']*1000:.2f}ms avg")
        
        if data['top_slow']:
            print(f"\\nüêå TOP FUN√á√ïES MAIS LENTAS:")
            for i, metrics in enumerate(data['top_slow'], 1):
                print(f"   {i}. {metrics['function_name'].split('.')[-1]}: "
                      f"{metrics['avg_time']*1000:.2f}ms avg, "
                      f"{metrics['total_calls']} calls")
        
        if data['top_errors']:
            print(f"\\n‚ùå FUN√á√ïES COM MAIS ERROS:")
            for i, metrics in enumerate(data['top_errors'], 1):
                error_rate = metrics['error_count'] / max(1, metrics['total_calls']) * 100
                print(f"   {i}. {metrics['function_name'].split('.')[-1]}: "
                      f"{metrics['error_count']} erros ({error_rate:.1f}%)")
        
        # Alertas recentes
        if data['recent_alerts']:
            print(f"\\nüö® ALERTAS RECENTES:")
            for alert in data['recent_alerts'][-5:]:
                timestamp = datetime.fromisoformat(alert['timestamp']).strftime('%H:%M:%S')
                print(f"   [{timestamp}] {alert['type']}: {alert['details']}")
    
    def export_report(self, filename: str = None):
        """Exporta relat√≥rio completo"""
        if filename is None:
            filename = f"debug_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        data = self.get_dashboard_data()
        data['export_timestamp'] = datetime.now().isoformat()
        data['metrics'] = {name: asdict(metrics) for name, metrics in self.metrics.items()}
        
        with open(filename, 'w') as f:
            json.dump(data, f, indent=2)
        
        print(f"üíæ Relat√≥rio exportado para {filename}")
        return filename

# Inst√¢ncia global do sistema
debug_system = AdvancedDebugSystem()

# DEMONSTRA√á√ÉO COMPLETA DO SISTEMA

# Fun√ß√µes de exemplo para teste
@debug_system.profile_function(monitor_memory=True, alert_on_slow=True)
def operacao_rapida(n):
    """Opera√ß√£o r√°pida para teste"""
    return sum(range(n))

@debug_system.profile_function(monitor_memory=True, alert_on_slow=True)
def operacao_lenta(n):
    """Opera√ß√£o lenta que vai gerar alerta"""
    time.sleep(1.5)  # Mais que o threshold de 1.0s
    return n ** 2

@debug_system.profile_function(alert_on_errors=True)
def operacao_instavel():
    """Opera√ß√£o que falha frequentemente"""
    import random
    if random.random() < 0.4:  # 40% chance de erro
        raise RuntimeError("Erro simulado!")
    return "Sucesso"

@debug_system.profile_function()
def processamento_memoria(tamanho):
    """Opera√ß√£o que consome mem√≥ria"""
    dados = []
    for i in range(tamanho):
        dados.append([0] * 1000)
    return len(dados)

def demonstrar_sistema():
    """Demonstra√ß√£o completa do sistema"""
    print("=== SISTEMA DE DEBUGGING AVAN√áADO ===")
    
    # Iniciar monitoramento
    debug_system.start_monitoring(interval=2.0)
    
    try:
        print("\\nüß™ EXECUTANDO TESTES...")
        
        # Teste 1: Opera√ß√µes normais
        print("\\n1. Opera√ß√µes r√°pidas:")
        for i in range(10):
            resultado = operacao_rapida(1000 + i * 100)
            print(f"   Opera√ß√£o {i+1}: {resultado}")
        
        # Teste 2: Opera√ß√£o lenta (vai gerar alerta)
        print("\\n2. Opera√ß√£o lenta (gerar√° alerta):")
        resultado_lento = operacao_lenta(5)
        print(f"   Resultado: {resultado_lento}")
        
        # Teste 3: Opera√ß√µes inst√°veis
        print("\\n3. Opera√ß√µes inst√°veis:")
        sucessos = 0
        for i in range(15):
            try:
                resultado = operacao_instavel()
                sucessos += 1
                print(f"   ‚úÖ Tentativa {i+1}: {resultado}")
            except RuntimeError:
                print(f"   ‚ùå Tentativa {i+1}: Falhou")
        print(f"   Taxa de sucesso: {sucessos}/15 ({sucessos/15*100:.1f}%)")
        
        # Teste 4: Opera√ß√£o com mem√≥ria
        print("\\n4. Opera√ß√µes que consomem mem√≥ria:")
        for tamanho in [1000, 5000, 10000]:
            resultado = processamento_memoria(tamanho)
            print(f"   Processado {tamanho} -> {resultado} itens")
        
        # Aguardar um pouco para o monitoramento coletar dados
        time.sleep(3)
        
        # Exibir dashboard
        debug_system.print_dashboard()
        
        # Exportar relat√≥rio
        arquivo = debug_system.export_report()
        
    finally:
        # Parar monitoramento
        debug_system.stop_monitoring()
    
    print("\\nüéâ DEMONSTRA√á√ÉO CONCLU√çDA!")
    print("\\nüéØ FUNCIONALIDADES DEMONSTRADAS:")
    print("‚Ä¢ ‚úÖ Profiling autom√°tico de performance")
    print("‚Ä¢ ‚úÖ Monitoramento de mem√≥ria")
    print("‚Ä¢ ‚úÖ Sistema de alertas inteligente")
    print("‚Ä¢ ‚úÖ Dashboard em tempo real")
    print("‚Ä¢ ‚úÖ Detec√ß√£o de fun√ß√µes lentas")
    print("‚Ä¢ ‚úÖ An√°lise de taxa de erro")
    print("‚Ä¢ ‚úÖ Exporta√ß√£o de relat√≥rios")
    print("‚Ä¢ ‚úÖ Monitoramento de threads")
    
    return arquivo

# Executar demonstra√ß√£o
if __name__ == "__main__":
    arquivo_relatorio = demonstrar_sistema()
    print(f"\\nüìä Relat√≥rio completo salvo em: {arquivo_relatorio}")'''

        self.exemplo_interativo(projeto_codigo, "Sistema de Debugging Avan√ßado")
        
        self.print_success("\nüèÜ PARAB√âNS! Voc√™ criou um sistema completo de debugging!")
        
        self.print_colored("\nüéØ CARACTER√çSTICAS DO SEU SISTEMA:", "green")
        self.print_tip("üîß Profiling autom√°tico com decorators")
        self.print_tip("üìä Monitoramento de performance em tempo real")
        self.print_tip("üö® Sistema inteligente de alertas")
        self.print_tip("üìà Dashboard interativo")
        self.print_tip("üíæ Exporta√ß√£o de relat√≥rios detalhados")
        self.print_tip("üßµ Suporte a multi-threading")
        self.print_tip("üîç Detec√ß√£o de vazamentos de mem√≥ria")
        
        self.print_colored("\nüí° APLICA√á√ïES REAIS:", "yellow")
        self.print_tip("üåê Monitoramento de APIs em produ√ß√£o")
        self.print_tip("üì± Debugging de aplica√ß√µes m√≥veis")
        self.print_tip("üéÆ Otimiza√ß√£o de jogos")
        self.print_tip("üè≠ Sistemas industriais cr√≠ticos")
        self.print_tip("ü§ñ Debugging de sistemas de IA")
        
        # Registrar conclus√£o do mini projeto
        if self.progress:
            self.progress.add_points(self.mini_project_points)
            self.print_success(f"üéÅ +{self.mini_project_points} pontos pelo mini projeto!")
            
        self.complete_mini_project("Sistema de Debugging Avan√ßado")
        
        try:
            input("\nüèÅ Pressione ENTER para finalizar o m√≥dulo...")
        except KeyboardInterrupt:
            pass

    def exemplo_interativo(self, codigo: str, titulo: str) -> None:
        """Executa exemplo de c√≥digo de forma interativa"""
        if self.ui:
            self.ui.code_block(codigo, titulo)
        else:
            print(f"\n{'='*50}")
            print(f"C√ìDIGO: {titulo}")
            print('='*50)
            print(codigo)
        
        try:
            exec(codigo)
        except Exception as e:
            self.print_warning(f"Erro na execu√ß√£o do exemplo: {e}", "‚ùå")