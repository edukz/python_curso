#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
M√≥dulo 12: Dicion√°rios e Sets
Aprenda sobre estruturas de dados avan√ßadas: dicion√°rios e conjuntos
"""

from ..shared.base_module import BaseModule


class Modulo12Dicionarios(BaseModule):
    """M√≥dulo 12: Dicion√°rios e Sets - Estruturas Avan√ßadas"""
    
    def __init__(self):
        super().__init__("modulo_12", "Dicion√°rios e Sets")
        self.has_mini_project = True
        self.mini_project_points = 70
    
    def execute(self) -> None:
        """Executa o m√≥dulo sobre dicion√°rios e sets"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return
        
        try:
            self._dicionarios_sets()
        except Exception as e:
            self.error_handler(lambda: None)
    
    def _dicionarios_sets(self) -> None:
        """Conte√∫do principal sobre dicion√°rios e sets"""
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üîë M√ìDULO 12: DICION√ÅRIOS E SETS - ESTRUTURAS AVAN√áADAS")
        else:
            print("\n" + "="*50)
            print("üîë M√ìDULO 12: DICION√ÅRIOS E SETS - ESTRUTURAS AVAN√áADAS")
            print("="*50)
        
        print("üìö Vamos aprender sobre Dicion√°rios e Sets!")
        print("üîë Estruturas de dados fundamentais para programa√ß√£o avan√ßada!")
        
        print("\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        print("        DICION√ÅRIOS - CHAVE:VALOR")
        print("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        
        print("\nüéØ Dicion√°rio = cole√ß√£o de pares chave:valor")
        print("üìã Caracter√≠sticas:")
        print("‚Ä¢ üîë Chaves √∫nicas")
        print("‚Ä¢ üì¶ Valores podem ser qualquer tipo")
        print("‚Ä¢ üöÄ Busca muito r√°pida")
        print("‚Ä¢ üîÑ Mut√°vel (pode ser modificado)")
        
        self.pausar()
        
        codigo1 = '''# Criando e usando dicion√°rios
# Diferentes formas de criar
dicionario1 = {"nome": "Jo√£o", "idade": 25, "cidade": "S√£o Paulo"}
dicionario2 = dict(nome="Maria", idade=30, cidade="Rio de Janeiro")
dicionario3 = {}  # Dicion√°rio vazio

print("Dicion√°rio 1:", dicionario1)
print("Dicion√°rio 2:", dicionario2)

# Acessando valores
print("\\nNome:", dicionario1["nome"])
print("Idade:", dicionario1["idade"])

# M√©todo get() - mais seguro
print("Cidade:", dicionario1.get("cidade"))
print("Pa√≠s:", dicionario1.get("pais", "Brasil"))  # Valor padr√£o

# Adicionando/modificando
dicionario1["profissao"] = "Programador"
dicionario1["idade"] = 26  # Modifica valor existente

print("\\nDicion√°rio atualizado:", dicionario1)'''
        
        self.exemplo(codigo1)
        self.executar_codigo(codigo1)
        
        self.pausar()
        
        print("\nüõ†Ô∏è M√©todos de Dicion√°rios:")
        
        codigo2 = '''# M√©todos importantes de dicion√°rios
pessoa = {
    "nome": "Ana Silva",
    "idade": 28,
    "profissao": "Engenheira",
    "salario": 8000,
    "hobbies": ["leitura", "nata√ß√£o", "culin√°ria"]
}

print("=== M√âTODOS DE DICION√ÅRIOS ===")

# keys(), values(), items()
print("Chaves:", list(pessoa.keys()))
print("Valores:", list(pessoa.values()))
print("Itens:", list(pessoa.items()))

# Iterando sobre dicion√°rio
print("\\n=== ITERA√á√ÉO ===")
for chave in pessoa:
    print(f"{chave}: {pessoa[chave]}")

print("\\n=== ITERA√á√ÉO COM ITEMS ===")
for chave, valor in pessoa.items():
    print(f"{chave} -> {valor}")

# Removendo elementos
print("\\n=== REMO√á√ÉO ===")
# pop() - remove e retorna valor
salario = pessoa.pop("salario")
print(f"Sal√°rio removido: {salario}")

# del - remove chave
del pessoa["hobbies"]
print("Ap√≥s remo√ß√µes:", pessoa)

# clear() - remove tudo
copia = pessoa.copy()
copia.clear()
print("Dicion√°rio limpo:", copia)'''
        
        self.exemplo(codigo2)
        self.executar_codigo(codigo2)
        
        self.pausar()
        
        print("\nüì¶ SETS - Conjuntos:")
        
        codigo3 = '''# Sets - conjuntos √∫nicos
# Criando sets
set1 = {1, 2, 3, 4, 5}
set2 = set([2, 3, 4, 5, 6])
set3 = set("python")  # Set de caracteres

print("Set 1:", set1)
print("Set 2:", set2)
print("Set 3:", set3)

# Sets removem duplicatas automaticamente
numeros_duplicados = [1, 2, 2, 3, 3, 3, 4, 4, 5]
set_unicos = set(numeros_duplicados)
print("\\nN√∫meros √∫nicos:", set_unicos)

# Opera√ß√µes de conjuntos
print("\\n=== OPERA√á√ïES DE CONJUNTOS ===")
A = {1, 2, 3, 4, 5}
B = {4, 5, 6, 7, 8}

print(f"A: {A}")
print(f"B: {B}")

# Uni√£o
print(f"A ‚à™ B (uni√£o): {A | B}")
print(f"A ‚à™ B (union): {A.union(B)}")

# Interse√ß√£o
print(f"A ‚à© B (interse√ß√£o): {A & B}")
print(f"A ‚à© B (intersection): {A.intersection(B)}")

# Diferen√ßa
print(f"A - B (diferen√ßa): {A - B}")
print(f"B - A (diferen√ßa): {B - A}")

# Diferen√ßa sim√©trica
print(f"A ‚ñ≥ B (dif. sim√©trica): {A ^ B}")

# Verifica√ß√µes
print(f"\\n4 est√° em A? {4 in A}")
print(f"9 est√° em B? {9 in B}")'''
        
        self.exemplo(codigo3)
        self.executar_codigo(codigo3)
        
        self.exercicio(
            "Como acessar um valor de dicion√°rio com seguran√ßa?",
            ["get()", "m√©todo get", ".get()"],
            "Use o m√©todo get() que retorna None se a chave n√£o existir"
        )
        
        # Mini Projeto do M√≥dulo 12
        self._mini_projeto_sistema_contatos()
        
        # Marcar m√≥dulo como completo
        self.complete_module()
    
    def _mini_projeto_sistema_contatos(self) -> None:
        """Mini Projeto - M√≥dulo 12: Sistema de Gerenciamento de Contatos"""
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üéØ MINI PROJETO: SISTEMA DE CONTATOS")
        else:
            print("\n" + "="*50)
            print("üéØ MINI PROJETO: SISTEMA DE CONTATOS")
            print("="*50)
            
        print("üì± Vamos criar um sistema completo de gerenciamento de contatos!")
        print("üõ†Ô∏è Usando: Dicion√°rios, Sets e Manipula√ß√£o de Dados")
        
        self.pausar()
        
        codigo_projeto = '''# üì± SISTEMA DE GERENCIAMENTO DE CONTATOS
# Projeto pr√°tico usando dicion√°rios e sets

import json
from datetime import datetime

class SistemaContatos:
    def __init__(self):
        self.contatos = {}  # Dicion√°rio principal
        self.grupos = {}    # Grupos de contatos
        self.historico = [] # Hist√≥rico de opera√ß√µes
    
    def adicionar_contato(self, nome, telefone, email=None, grupo="Geral"):
        """Adiciona um novo contato"""
        if nome in self.contatos:
            print(f"‚ùå Contato {nome} j√° existe!")
            return False
        
        # Criando contato como dicion√°rio
        contato = {
            "telefone": telefone,
            "email": email or "N√£o informado",
            "grupo": grupo,
            "data_criacao": datetime.now().strftime("%d/%m/%Y %H:%M"),
            "tags": set()  # Set para tags √∫nicas
        }
        
        self.contatos[nome] = contato
        
        # Adiciona ao grupo
        if grupo not in self.grupos:
            self.grupos[grupo] = set()
        self.grupos[grupo].add(nome)
        
        # Registra no hist√≥rico
        self.historico.append(f"Adicionado: {nome} em {contato['data_criacao']}")
        
        print(f"‚úÖ Contato {nome} adicionado com sucesso!")
        return True
    
    def buscar_contato(self, termo):
        """Busca contatos por nome, telefone ou email"""
        resultados = []
        termo_lower = termo.lower()
        
        for nome, dados in self.contatos.items():
            if (termo_lower in nome.lower() or 
                termo in dados["telefone"] or 
                termo_lower in dados["email"].lower()):
                resultados.append((nome, dados))
        
        return resultados
    
    def listar_por_grupo(self, grupo):
        """Lista contatos de um grupo espec√≠fico"""
        if grupo not in self.grupos:
            return []
        
        contatos_grupo = []
        for nome in self.grupos[grupo]:
            if nome in self.contatos:
                contatos_grupo.append((nome, self.contatos[nome]))
        
        return contatos_grupo
    
    def adicionar_tag(self, nome, tag):
        """Adiciona tag a um contato (usando set)"""
        if nome in self.contatos:
            self.contatos[nome]["tags"].add(tag)
            print(f"üè∑Ô∏è Tag '{tag}' adicionada ao contato {nome}")
            return True
        return False
    
    def buscar_por_tags(self, tags_buscadas):
        """Busca contatos que tenham todas as tags especificadas"""
        tags_set = set(tags_buscadas)
        resultados = []
        
        for nome, dados in self.contatos.items():
            if tags_set.issubset(dados["tags"]):
                resultados.append((nome, dados))
        
        return resultados
    
    def estatisticas(self):
        """Mostra estat√≠sticas do sistema"""
        total_contatos = len(self.contatos)
        total_grupos = len(self.grupos)
        
        # Conta contatos por grupo
        contatos_por_grupo = {}
        for grupo, nomes in self.grupos.items():
            contatos_por_grupo[grupo] = len(nomes)
        
        # Todas as tags √∫nicas
        todas_tags = set()
        for dados in self.contatos.values():
            todas_tags.update(dados["tags"])
        
        return {
            "total_contatos": total_contatos,
            "total_grupos": total_grupos,
            "contatos_por_grupo": contatos_por_grupo,
            "tags_disponiveis": todas_tags,
            "total_operacoes": len(self.historico)
        }

# DEMONSTRA√á√ÉO DO SISTEMA
print("=== DEMONSTRA√á√ÉO: SISTEMA DE CONTATOS ===\\n")

# Criando inst√¢ncia
sistema = SistemaContatos()

# Adicionando contatos
print("üìù ADICIONANDO CONTATOS:")
sistema.adicionar_contato("Jo√£o Silva", "(11) 99999-1111", "joao@email.com", "Trabalho")
sistema.adicionar_contato("Maria Santos", "(11) 88888-2222", "maria@email.com", "Fam√≠lia")
sistema.adicionar_contato("Pedro Costa", "(11) 77777-3333", "pedro@email.com", "Amigos")
sistema.adicionar_contato("Ana Lima", "(11) 66666-4444", "ana@email.com", "Trabalho")

print("\\nüè∑Ô∏è ADICIONANDO TAGS:")
sistema.adicionar_tag("Jo√£o Silva", "programador")
sistema.adicionar_tag("Jo√£o Silva", "python")
sistema.adicionar_tag("Maria Santos", "fam√≠lia")
sistema.adicionar_tag("Pedro Costa", "faculdade")
sistema.adicionar_tag("Ana Lima", "gerente")
sistema.adicionar_tag("Ana Lima", "programador")

print("\\nüîç BUSCANDO CONTATOS:")
resultados = sistema.buscar_contato("Jo√£o")
for nome, dados in resultados:
    print(f"‚úÖ Encontrado: {nome} - {dados['telefone']}")

print("\\nüë• CONTATOS DO GRUPO 'Trabalho':")
trabalho = sistema.listar_por_grupo("Trabalho")
for nome, dados in trabalho:
    print(f"üíº {nome}: {dados['telefone']} ({dados['email']})")

print("\\nüè∑Ô∏è BUSCA POR TAGS 'programador':")
programadores = sistema.buscar_por_tags(["programador"])
for nome, dados in programadores:
    tags = ", ".join(dados["tags"])
    print(f"üë®‚Äçüíª {nome}: Tags [{tags}]")

print("\\nüìä ESTAT√çSTICAS DO SISTEMA:")
stats = sistema.estatisticas()
print(f"üì± Total de contatos: {stats['total_contatos']}")
print(f"üë• Total de grupos: {stats['total_grupos']}")
print(f"üè∑Ô∏è Tags dispon√≠veis: {', '.join(stats['tags_disponiveis'])}")

print("\\nüéâ Sistema de Contatos funcionando perfeitamente!")
print("üí° Conceitos aplicados:")
print("  ‚Ä¢ Dicion√°rios para estruturar dados")
print("  ‚Ä¢ Sets para tags √∫nicas e opera√ß√µes de conjunto")
print("  ‚Ä¢ M√©todos de busca e filtragem")
print("  ‚Ä¢ Manipula√ß√£o de dados complexos")'''
        
        self.exemplo(codigo_projeto)
        self.executar_codigo(codigo_projeto)
        
        print("\nüèÜ PARAB√âNS! Voc√™ criou um sistema completo de contatos!")
        print("üéØ Aplica√ß√£o real: CRM, agenda pessoal, sistema corporativo")
        
        # Registra conclus√£o do mini projeto
        self.complete_mini_project("Sistema de Contatos Inteligente")
        
        self.pausar()


# Para teste standalone
if __name__ == "__main__":
    module = Modulo12Dicionarios()
    print("Teste do m√≥dulo 12 - vers√£o standalone")
    module._dicionarios_sets()