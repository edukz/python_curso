#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Sistema de Carregamento Din√¢mico de M√≥dulos
Carrega m√≥dulos sob demanda para melhor performance
"""

import importlib
import os
from typing import Dict, Any, Optional, Type
from pathlib import Path

from .shared.base_module import BaseModule


class ModuleLoader:
    """Carregador din√¢mico de m√≥dulos do curso"""
    
    def __init__(self):
        self._loaded_modules: Dict[str, Type[BaseModule]] = {}
        self._module_cache: Dict[str, BaseModule] = {}
        self.base_path = Path(__file__).parent
        
        # Mapeamento de m√≥dulos para seus arquivos
        self._module_mapping = {
            # M√≥dulos B√°sicos (1-11)
            "modulo_1": ("basic.modulo_01_introducao", "Modulo01Introducao"),
            "modulo_2": ("basic.modulo_02_primeiro_programa", "Modulo02PrimeiroPrograma"),
            "modulo_3": ("basic.modulo_03_variaveis", "Modulo03Variaveis"),
            "modulo_4": ("basic.modulo_04_tipos_dados", "Modulo04TiposDados"),
            "modulo_5": ("basic.modulo_05_entrada_dados", "Modulo05EntradaDados"),
            "modulo_6": ("basic.modulo_06_operacoes", "Modulo06Operacoes"),
            "modulo_7": ("basic.modulo_07_condicoes", "Modulo07Condicoes"),
            "modulo_8": ("basic.modulo_08_loops", "Modulo08Loops"),
            "modulo_9": ("basic.modulo_09_listas", "Modulo09Listas"),
            "modulo_10": ("basic.modulo_10_funcoes", "Modulo10Funcoes"),
            "modulo_11": ("basic.modulo_11_projeto_final", "Modulo11ProjetoFinal"),
            
            # M√≥dulos Avan√ßados (12-23)
            "modulo_12": ("advanced.modulo_12_dicionarios", "Modulo12Dicionarios"),
            "modulo_13": ("advanced.modulo_13_funcoes_avancadas", "Modulo13FuncoesAvancadas"),
            "modulo_14": ("advanced.modulo_14_modulos_pacotes", "Modulo14ModulosPacotes"),
            "modulo_15": ("advanced.modulo_15_datetime", "Modulo15Datetime"),
            "modulo_16": ("advanced.modulo_16_excecoes", "Modulo16Excecoes"),
            "modulo_17": ("advanced.modulo_17_json_csv", "Modulo17JsonCsv"),
            "modulo_18": ("advanced.modulo_18_oop_basico", "Modulo18OopBasico"),
            "modulo_19": ("advanced.modulo_19_oop_avancado", "Modulo19OopAvancado"),
            "modulo_20": ("advanced.modulo_20_decorators", "Modulo20Decorators"),
            "modulo_21": ("advanced.modulo_21_geradores", "Modulo21Geradores"),
            "modulo_22": ("advanced.modulo_22_regex", "Modulo22Regex"),
            "modulo_23": ("advanced.modulo_23_debugging", "Modulo23Debugging"),
            
            # M√≥dulos Essenciais (24-30) - seguindo numera√ß√£o do main.py
            "modulo_24": ("essential.modulo_24_git_github", "Modulo24GitGithub"),
            "modulo_25": ("essential.modulo_25_terminal_cli", "Modulo25TerminalCli"),
            "modulo_26": ("essential.modulo_26_ambientes_virtuais", "Modulo26AmbientesVirtuais"),
            "modulo_27": ("essential.modulo_27_testes_tdd", "Modulo27TestesTdd"),
            "modulo_28": ("essential.modulo_28_estrutura_projetos", "Modulo28EstruturaProjetos"),
            "modulo_29": ("essential.modulo_29_apis_web", "Modulo29ApisWeb"),
            "modulo_30": ("essential.modulo_30_seguranca", "Modulo30Seguranca"),
            
            # M√≥dulos Enterprise (31-35) - Arquitetura e Padr√µes Avan√ßados
            "modulo_31": ("enterprise.modulo_31_design_patterns", "Modulo31DesignPatterns"),
            "modulo_32": ("enterprise.modulo_32_clean_architecture", "Modulo32CleanArchitecture"),
            "modulo_33": ("enterprise.modulo_33_devops", "Modulo33DevOps"),
            "modulo_34": ("enterprise.modulo_34_database_design", "Modulo34DatabaseDesign"),
            "modulo_35": ("enterprise.modulo_35_capstone", "Modulo35Capstone"),
        }
    
    def get_module(self, module_id: str) -> Optional[BaseModule]:
        """
        Carrega e retorna inst√¢ncia do m√≥dulo
        
        Args:
            module_id: ID do m√≥dulo (ex: "modulo_1")
            
        Returns:
            Inst√¢ncia do m√≥dulo ou None se n√£o encontrado
        """
        # Verifica cache primeiro
        if module_id in self._module_cache:
            return self._module_cache[module_id]
        
        # Carrega m√≥dulo se n√£o estiver em cache
        module_class = self._load_module_class(module_id)
        if module_class:
            instance = module_class()
            self._module_cache[module_id] = instance
            return instance
        
        return None
    
    def _load_module_class(self, module_id: str) -> Optional[Type[BaseModule]]:
        """
        Carrega classe do m√≥dulo dinamicamente
        
        Args:
            module_id: ID do m√≥dulo
            
        Returns:
            Classe do m√≥dulo ou None se n√£o encontrado
        """
        # Verifica se j√° foi carregado
        if module_id in self._loaded_modules:
            return self._loaded_modules[module_id]
        
        # Verifica se m√≥dulo existe no mapeamento
        if module_id not in self._module_mapping:
            print(f"‚ö†Ô∏è M√≥dulo {module_id} n√£o encontrado no mapeamento")
            return None
        
        module_path, class_name = self._module_mapping[module_id]
        
        try:
            # Importa o m√≥dulo dinamicamente
            full_module_path = f"src.modules.{module_path}"
            module = importlib.import_module(full_module_path)
            
            # Obt√©m a classe
            module_class = getattr(module, class_name)
            
            # Verifica se √© subclasse de BaseModule
            if not issubclass(module_class, BaseModule):
                print(f"‚ö†Ô∏è {class_name} n√£o √© subclasse de BaseModule")
                return None
            
            # Armazena no cache
            self._loaded_modules[module_id] = module_class
            
            return module_class
            
        except ImportError as e:
            print(f"‚ùå Erro ao importar m√≥dulo {module_id}: {e}")
            return None
        except AttributeError as e:
            print(f"‚ùå Classe {class_name} n√£o encontrada no m√≥dulo {module_path}: {e}")
            return None
        except Exception as e:
            print(f"‚ùå Erro inesperado ao carregar m√≥dulo {module_id}: {e}")
            return None
    
    def preload_modules(self, module_ids: list[str]) -> None:
        """
        Pre-carrega m√≥dulos especificados
        
        Args:
            module_ids: Lista de IDs de m√≥dulos para pre-carregar
        """
        print(f"üîÑ Pre-carregando {len(module_ids)} m√≥dulos...")
        
        for module_id in module_ids:
            try:
                self._load_module_class(module_id)
                print(f"‚úÖ {module_id} carregado")
            except Exception as e:
                print(f"‚ùå Erro ao pre-carregar {module_id}: {e}")
    
    def unload_module(self, module_id: str) -> None:
        """
        Remove m√≥dulo do cache para liberar mem√≥ria
        
        Args:
            module_id: ID do m√≥dulo para descarregar
        """
        if module_id in self._module_cache:
            del self._module_cache[module_id]
        
        if module_id in self._loaded_modules:
            del self._loaded_modules[module_id]
    
    def get_loaded_modules(self) -> list[str]:
        """
        Retorna lista de m√≥dulos carregados
        
        Returns:
            Lista de IDs de m√≥dulos carregados
        """
        return list(self._loaded_modules.keys())
    
    def get_cached_instances(self) -> list[str]:
        """
        Retorna lista de inst√¢ncias em cache
        
        Returns:
            Lista de IDs de m√≥dulos com inst√¢ncias em cache
        """
        return list(self._module_cache.keys())
    
    def clear_cache(self) -> None:
        """Limpa todo o cache de m√≥dulos"""
        self._module_cache.clear()
        self._loaded_modules.clear()
        print("üßπ Cache de m√≥dulos limpo")
    
    def get_module_info(self, module_id: str) -> Dict[str, Any]:
        """
        Retorna informa√ß√µes sobre um m√≥dulo
        
        Args:
            module_id: ID do m√≥dulo
            
        Returns:
            Dicion√°rio com informa√ß√µes do m√≥dulo
        """
        info = {
            'id': module_id,
            'exists': module_id in self._module_mapping,
            'loaded': module_id in self._loaded_modules,
            'cached': module_id in self._module_cache,
        }
        
        if info['exists']:
            module_path, class_name = self._module_mapping[module_id]
            info.update({
                'path': module_path,
                'class_name': class_name,
                'file_path': str(self.base_path / (module_path.replace('.', '/') + '.py'))
            })
        
        return info
    
    def list_all_modules(self) -> Dict[str, Dict[str, Any]]:
        """
        Lista todos os m√≥dulos dispon√≠veis
        
        Returns:
            Dicion√°rio com informa√ß√µes de todos os m√≥dulos
        """
        return {
            module_id: self.get_module_info(module_id)
            for module_id in self._module_mapping.keys()
        }
    
    def health_check(self) -> Dict[str, Any]:
        """
        Verifica sa√∫de do sistema de m√≥dulos
        
        Returns:
            Relat√≥rio de sa√∫de
        """
        total_modules = len(self._module_mapping)
        loaded_count = len(self._loaded_modules)
        cached_count = len(self._module_cache)
        
        # Verifica se arquivos existem
        existing_files = 0
        missing_files = []
        
        for module_id, (module_path, class_name) in self._module_mapping.items():
            file_path = self.base_path / (module_path.replace('.', '/') + '.py')
            if file_path.exists():
                existing_files += 1
            else:
                missing_files.append(f"{module_id} -> {file_path}")
        
        return {
            'total_modules': total_modules,
            'loaded_modules': loaded_count,
            'cached_instances': cached_count,
            'existing_files': existing_files,
            'missing_files': missing_files,
            'memory_efficiency': f"{cached_count}/{total_modules} ({cached_count/total_modules*100:.1f}%)",
            'status': 'healthy' if len(missing_files) == 0 else 'warning'
        }


# Inst√¢ncia global do loader
module_loader = ModuleLoader()


# Fun√ß√µes de conveni√™ncia
def load_module(module_id: str) -> Optional[BaseModule]:
    """Fun√ß√£o de conveni√™ncia para carregar m√≥dulo"""
    return module_loader.get_module(module_id)


def preload_basic_modules():
    """Pre-carrega m√≥dulos b√°sicos"""
    basic_modules = [f"modulo_{i}" for i in range(1, 12)]
    module_loader.preload_modules(basic_modules)


def preload_project_modules():
    """Pre-carrega m√≥dulos de projetos"""
    project_modules = [f"modulo_{i}" for i in range(24, 27)]
    module_loader.preload_modules(project_modules)


def preload_essential_modules():
    """Pre-carrega m√≥dulos essenciais"""
    essential_modules = [f"modulo_{i}" for i in range(27, 31)]
    module_loader.preload_modules(essential_modules)


def preload_enterprise_modules():
    """Pre-carrega m√≥dulos enterprise"""
    enterprise_modules = [f"modulo_{i}" for i in range(31, 36)]
    module_loader.preload_modules(enterprise_modules)


def preload_all_modules():
    """Pre-carrega todos os m√≥dulos do curso"""
    all_modules = [f"modulo_{i}" for i in range(1, 36)]
    module_loader.preload_modules(all_modules)