#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
M√≥dulo 25: Terminal e Command Line Interface
VERS√ÉO REFATORADA seguindo o padr√£o pedag√≥gico estabelecido
Aprenda a dominar o terminal e criar CLIs profissionais de forma interativa
"""

from ..shared.base_module import BaseModule
import subprocess
import os
import sys
import shlex
import time
import random
from typing import Dict, List, Optional, Any
from pathlib import Path


class Modulo25TerminalCli(BaseModule):
    """M√≥dulo 25: Terminal e Command Line Interface - Dominando a Linha de Comando"""
    
    def __init__(self):
        super().__init__("modulo_25", "Terminal e Command Line Interface")
        self.has_mini_project = True
        self.mini_project_points = 120
    
    def execute(self) -> None:
        """Executa o m√≥dulo Terminal e CLI"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return

        try:
            self._terminal_cli()
        except Exception as e:
            self.error_handler(lambda: None)
    
    def _terminal_cli(self) -> None:
        """Conte√∫do principal do m√≥dulo Terminal e CLI"""
        # === CABE√áALHO VISUAL ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üêß M√ìDULO 25: TERMINAL E COMMAND LINE INTERFACE")
        else:
            print("\n" + "="*60)
            print("üêß M√ìDULO 25: TERMINAL E COMMAND LINE INTERFACE")
            print("="*60)

        # === MENSAGENS MOTIVACIONAIS ===
        self.print_success("üéâ Bem-vindo ao mundo do Terminal e CLIs!")
        self.print_tip("Este m√≥dulo est√° dividido em se√ß√µes interativas. Voc√™ controla o ritmo!")

        # === FLUXO PRINCIPAL COM TRATAMENTO DE CTRL+C ===

        # 1. Sistema de navega√ß√£o por se√ß√µes
        try:
            self._navegacao_secoes_interativas()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Navega√ß√£o interrompida pelo usu√°rio. Voltando ao menu principal...")
            return

        # 2. Se√ß√£o de Pr√°tica Interativa
        try:
            self._secao_pratica_interativa()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è M√≥dulo interrompido pelo usu√°rio. Voltando ao menu principal...")
            return

        # 3. Mini Projeto Pr√°tico
        try:
            self._mini_projeto_sistema_cli_profissional()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Mini projeto interrompido. Voltando ao menu principal...")
            return

        # 4. Marcar m√≥dulo como completo
        self.complete_module()
    
    def _navegacao_secoes_interativas(self) -> None:
        """Sistema de navega√ß√£o por se√ß√µes do m√≥dulo"""

        # === DEFINI√á√ÉO DAS SE√á√ïES (6 SE√á√ïES) ===
        secoes = [
            {
                'id': 'secao_conceito_terminal',
                'titulo': 'üéØ O que √© o Terminal?',
                'descricao': 'Entenda o poder da linha de comando',
                'funcao': self._secao_conceito_terminal
            },
            {
                'id': 'secao_comandos_essenciais',
                'titulo': '‚ö° Comandos Essenciais',
                'descricao': 'Domine os comandos b√°sicos para produtividade',
                'funcao': self._secao_comandos_essenciais
            },
            {
                'id': 'secao_navegacao_arquivos',
                'titulo': 'üìÅ Navega√ß√£o e Arquivos',
                'descricao': 'Manipule arquivos como um profissional',
                'funcao': self._secao_navegacao_arquivos
            },
            {
                'id': 'secao_pipes_automacao',
                'titulo': 'üîÑ Pipes e Automa√ß√£o',
                'descricao': 'Conecte comandos e automatize tarefas',
                'funcao': self._secao_pipes_automacao
            },
            {
                'id': 'secao_cli_python',
                'titulo': 'üêç CLIs com Python',
                'descricao': 'Crie ferramentas de linha de comando em Python',
                'funcao': self._secao_cli_python
            },
            {
                'id': 'secao_ferramentas_avancadas',
                'titulo': 'üöÄ Ferramentas Avan√ßadas',
                'descricao': 'Click, argumentos e CLIs profissionais',
                'funcao': self._secao_ferramentas_avancadas
            }
        ]

        secoes_visitadas = set()

        # === LOOP PRINCIPAL DE NAVEGA√á√ÉO ===
        while True:
            # Limpa tela e mostra cabe√ßalho
            self.ui.clear_screen() if self.ui else print("\n" + "="*50)
            self.print_section("NAVEGA√á√ÉO DO M√ìDULO", "üìö", "accent")
            self.print_colored("Escolha uma se√ß√£o para estudar:", "text")

            # Lista todas as se√ß√µes com status
            print()
            for i, secao in enumerate(secoes, 1):
                status = "‚úÖ" if secao['id'] in secoes_visitadas else "üìñ"
                print(f"{status} {i}. {secao['titulo']}")
                self.print_colored(f"    {secao['descricao']}", "text")
                print()

            print("0. üéØ Continuar para os Exerc√≠cios Pr√°ticos")

            # Mostra progresso visual
            progresso = len(secoes_visitadas)
            total = len(secoes)
            self.print_colored(f"\nüìä Progresso: {progresso}/{total} se√ß√µes visitadas", "info")

            if progresso == total:
                self.print_success("üåü Voc√™ completou todas as se√ß√µes! Est√° pronto para praticar!")

            # Processa escolha do usu√°rio
            try:
                escolha = input(f"\nüëâ Escolha uma se√ß√£o (1-{len(secoes)}) ou 0 para continuar: ").strip()

                if escolha == "0":
                    # Verifica se visitou se√ß√µes suficientes
                    if progresso >= 3:  # Pelo menos 3 se√ß√µes visitadas
                        break
                    else:
                        self.print_warning("üìö Recomendamos visitar pelo menos 3 se√ß√µes antes de continuar!")
                        continuar = input("Quer continuar mesmo assim? (s/n): ").lower()
                        if continuar in ['s', 'sim', 'yes']:
                            break
                elif escolha.isdigit() and 1 <= int(escolha) <= len(secoes):
                    # Executa se√ß√£o escolhida
                    idx = int(escolha) - 1
                    secoes[idx]['funcao']()
                    secoes_visitadas.add(secoes[idx]['id'])
                else:
                    self.print_warning(f"‚ùå Op√ß√£o inv√°lida! Digite um n√∫mero de 1 a {len(secoes)} ou 0.")

            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Pulando para exerc√≠cios pr√°ticos...")
                break
            except Exception as e:
                self.print_warning(f"‚ùå Erro: {str(e)}. Tente novamente.")

    def _secao_conceito_terminal(self) -> None:
        """Se√ß√£o: O que √© o Terminal?"""
        if self.ui:
            self.ui.clear_screen()

        # === CABE√áALHO ATRATIVO ===
        self.print_section("O QUE √â O TERMINAL?", "üéØ")

        # === DEFINI√á√ÉO DO CONCEITO (SEMPRE PRIMEIRO) ===
        self.print_concept(
            "Terminal",
            "Uma interface de texto onde voc√™ pode dar comandos diretamente ao computador, como uma conversa com o sistema operacional"
        )

        # === DICA RELACIONADA ===
        self.print_tip("O terminal √© mais r√°pido que interfaces gr√°ficas para muitas tarefas!")

        # === ANALOGIA DO COTIDIANO ===
        self.print_colored("\nüè† ANALOGIA DO DIA A DIA:", "warning")
        self.print_colored("Imagine que voc√™ tem dois jeitos de pedir pizza:", "text")
        self.print_colored("‚Ä¢ üñ±Ô∏è Interface gr√°fica = aplicativo com bot√µes (f√°cil, mas limitado)", "text")
        self.print_colored("‚Ä¢ ‚å®Ô∏è Terminal = telefonar direto (mais r√°pido, mais op√ß√µes)", "text")
        input("\nüî∏ Pressione ENTER para continuar...")

        # === EXPLICA√á√ÉO T√âCNICA GRADUAL ===
        self.print_colored("\nüîß COMO FUNCIONA NA PR√ÅTICA:", "info")
        passos_tecnicos = [
            "1. Voc√™ digita um comando (ex: 'ls' para listar arquivos)",
            "2. O terminal envia o comando para o sistema operacional",
            "3. O sistema executa a a√ß√£o solicitada",
            "4. O resultado √© mostrado na tela em texto"
        ]

        for i, passo in enumerate(passos_tecnicos, 1):
            self.print_colored(passo, "text")
            if i < len(passos_tecnicos):
                input("   ‚è≥ Pressione ENTER para o pr√≥ximo passo...")

        # === EXEMPLO DE C√ìDIGO (SE APLIC√ÅVEL) ===
        self.print_colored("\nüíª EXEMPLO PR√ÅTICO:", "success")
        sistema = "Windows" if os.name == 'nt' else "Unix/Linux/macOS"
        self.print_colored(f"Sistema detectado: {sistema}", "info")
        
        if sistema == "Windows":
            exemplo_cmd = """# No Windows (Command Prompt)
dir                    # Lista arquivos
cd pasta              # Entra em uma pasta  
mkdir nova_pasta      # Cria pasta
type arquivo.txt      # Mostra conte√∫do do arquivo
"""
        else:
            exemplo_cmd = """# No Linux/macOS (Bash)
ls                    # Lista arquivos
cd pasta             # Entra em uma pasta
mkdir nova_pasta     # Cria pasta  
cat arquivo.txt      # Mostra conte√∫do do arquivo
"""
        
        self.exemplo(exemplo_cmd)

        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nüåç ONDE √â USADO NO MUNDO REAL:", "accent")
        aplicacoes = [
            "üöÄ NASA - controla miss√µes espaciais via terminal",
            "üè¶ Bancos - sistemas financeiros cr√≠ticos",
            "üéÆ Gaming - servidores de jogos online",
            "üì± Smartphones - Android e iOS usam terminal internamente",
            "‚òÅÔ∏è Cloud - AWS, Google Cloud, Azure"
        ]
        for app in aplicacoes:
            self.print_colored(f"‚Ä¢ {app}", "primary")

        self.pausar()

    def _secao_comandos_essenciais(self) -> None:
        """Se√ß√£o: Comandos Essenciais"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("COMANDOS ESSENCIAIS DO TERMINAL", "‚ö°", "success")

        self.print_concept(
            "Comandos B√°sicos",
            "Ferramentas fundamentais que todo programador precisa dominar para ser produtivo"
        )

        # Detectar sistema operacional
        sistema = "Windows" if os.name == 'nt' else "Unix/Linux/macOS"
        self.print_colored(f"\nüñ•Ô∏è Sistema detectado: {sistema}", "info")

        # === COMANDOS POR CATEGORIA ===
        categorias = [
            {
                'nome': 'üìÅ NAVEGA√á√ÉO',
                'comandos': [
                    ("ls / dir", "Lista arquivos e pastas", "ls -la", "dir /w"),
                    ("cd", "Muda de pasta", "cd /home/user", "cd C:\\Users"),
                    ("pwd / cd", "Mostra pasta atual", "pwd", "cd"),
                    ("ls .. / dir ..", "Lista pasta anterior", "ls ..", "dir ..")
                ]
            },
            {
                'nome': 'üìù ARQUIVOS',
                'comandos': [
                    ("touch / echo", "Cria arquivo", "touch arquivo.txt", "echo. > arquivo.txt"),
                    ("cat / type", "Mostra conte√∫do", "cat arquivo.txt", "type arquivo.txt"),
                    ("cp / copy", "Copia arquivo", "cp orig.txt copia.txt", "copy orig.txt copia.txt"),
                    ("rm / del", "Remove arquivo", "rm arquivo.txt", "del arquivo.txt")
                ]
            },
            {
                'nome': 'üóÇÔ∏è PASTAS',
                'comandos': [
                    ("mkdir", "Cria pasta", "mkdir nova_pasta", "mkdir nova_pasta"),
                    ("rmdir / rm -r", "Remove pasta", "rm -rf pasta", "rmdir /s pasta"),
                    ("mv / move", "Move/renomeia", "mv old.txt new.txt", "move old.txt new.txt")
                ]
            }
        ]

        for categoria in categorias:
            self.print_colored(f"\n{categoria['nome']}", "warning")
            
            for comando, descricao, exemplo_unix, exemplo_win in categoria['comandos']:
                self.print_colored(f"\nüî∏ {comando}", "cyan")
                self.print_colored(f"   {descricao}", "text")
                
                if sistema == "Windows":
                    self.print_colored(f"   üí° Exemplo: {exemplo_win}", "accent")
                else:
                    self.print_colored(f"   üí° Exemplo: {exemplo_unix}", "accent")
            
            input("\n‚è≠Ô∏è Pressione ENTER para pr√≥xima categoria...")

        # === DICAS DE PRODUTIVIDADE ===
        self.print_colored("\nüöÄ DICAS DE PRODUTIVIDADE:", "success")
        dicas = [
            "‚å®Ô∏è Use Tab para autocompletar nomes",
            "üîÑ Ctrl+C cancela comando atual",
            "‚¨ÜÔ∏è Use setas ‚Üë‚Üì para navegar no hist√≥rico", 
            "üìã Ctrl+A seleciona toda a linha",
            "‚úÇÔ∏è Ctrl+U apaga linha inteira",
            "üîç Use wildcards: *.txt para todos os .txt"
        ]
        
        for dica in dicas:
            self.print_colored(f"‚Ä¢ {dica}", "primary")

        self.pausar()

    def _secao_navegacao_arquivos(self) -> None:
        """Se√ß√£o: Navega√ß√£o e Arquivos"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("NAVEGA√á√ÉO E MANIPULA√á√ÉO DE ARQUIVOS", "üìÅ", "info")

        self.print_concept(
            "Sistema de Arquivos",
            "A estrutura hier√°rquica onde todos os arquivos e pastas do computador s√£o organizados, como uma √°rvore gigante"
        )

        # === ANALOGIA ===
        self.print_colored("\nüè† ANALOGIA:", "warning")
        self.print_colored("O sistema de arquivos √© como um pr√©dio de apartamentos:", "text")
        self.print_colored("‚Ä¢ üè¢ Raiz (/) = T√©rreo do pr√©dio", "text") 
        self.print_colored("‚Ä¢ üìÅ Pastas = Andares do pr√©dio", "text")
        self.print_colored("‚Ä¢ üìÑ Arquivos = Apartamentos", "text")
        self.print_colored("‚Ä¢ üó∫Ô∏è Caminho = Endere√ßo completo", "text")
        input("\nüî∏ Pressione ENTER para continuar...")

        # === NAVEGA√á√ÉO EFICIENTE ===
        self.print_colored("\nüß≠ NAVEGA√á√ÉO EFICIENTE:", "info")
        
        navegacao_exemplos = [
            {
                'titulo': 'ATALHOS ESPECIAIS',
                'codigo': '''# S√≠mbolos especiais para navega√ß√£o
~         # Sua pasta home (/home/usuario)
.         # Pasta atual (onde voc√™ est√° agora)
..        # Pasta pai (uma acima)
-         # Pasta anterior (onde voc√™ estava antes)

# Exemplos pr√°ticos:
cd ~          # Vai para sua pasta home
cd ..         # Sobe um n√≠vel
cd ../..      # Sobe dois n√≠veis  
cd -          # Volta para pasta anterior'''
            },
            {
                'titulo': 'LISTAGEM AVAN√áADA',
                'codigo': '''# Op√ß√µes do comando ls (Linux/Mac):
ls -l         # Lista detalhada (permiss√µes, tamanho, data)
ls -a         # Inclui arquivos ocultos (come√ßam com .)
ls -la        # Combina√ß√£o: detalhada + ocultos
ls -lh        # Tamanhos leg√≠veis (KB, MB, GB)
ls -lt        # Ordenar por data de modifica√ß√£o
ls -lS        # Ordenar por tamanho

# No Windows (comando dir):
dir /w        # Lista em colunas
dir /a        # Inclui arquivos ocultos
dir /s        # Lista recursivamente (subpastas)'''
            },
            {
                'titulo': 'BUSCA DE ARQUIVOS',
                'codigo': '''# Comando find (Linux/Mac) - muito poderoso:
find . -name "*.py"           # Busca arquivos .py na pasta atual
find . -type f -size +1M      # Arquivos maiores que 1MB
find . -mtime -7              # Modificados nos √∫ltimos 7 dias
find /home -name "config*"    # Busca por nome na pasta /home

# No Windows:
where python                  # Localiza o execut√°vel python
dir *.txt /s                  # Busca todos .txt recursivamente'''
            }
        ]

        for exemplo in navegacao_exemplos:
            self.print_colored(f"\n{exemplo['titulo']}", "warning")
            self.exemplo(exemplo['codigo'])
            input("\n‚è≠Ô∏è Pressione ENTER para pr√≥ximo exemplo...")

        # === MANIPULA√á√ÉO PR√ÅTICA ===
        self.print_colored("\n‚úÇÔ∏è MANIPULA√á√ÉO PR√ÅTICA DE ARQUIVOS:", "success")
        
        manipulacao = '''# CRIAR arquivos e pastas
echo "Ol√° mundo" > arquivo.txt    # Cria arquivo com conte√∫do
mkdir -p pasta/subpasta          # Cria estrutura de pastas

# COPIAR de forma inteligente  
cp -r pasta_origem/ backup/      # Copia pasta inteira
cp *.jpg fotos/                  # Copia todas as imagens JPG

# MOVER e RENOMEAR
mv arquivo.txt documentos/       # Move arquivo para pasta
mv nome_antigo.txt nome_novo.txt # Renomeia arquivo

# REMOVER com seguran√ßa
rm -i arquivo.txt               # Pergunta antes de remover
rm -rf pasta_vazia/             # Remove pasta e todo conte√∫do'''

        self.exemplo(manipulacao)
        
        # === APLICA√á√ïES REAIS ===
        self.print_colored("\nüåç APLICA√á√ïES NO MUNDO REAL:", "accent")
        aplicacoes = [
            "üìä Analistas de dados - organizam datasets gigantes",
            "üéÆ Game developers - gerenciam assets de jogos", 
            "üé¨ Editores de v√≠deo - manipulam arquivos de m√≠dia",
            "‚òÅÔ∏è DevOps - deployam aplica√ß√µes em servidores",
            "üî¨ Cientistas - processam dados de experimentos"
        ]
        for app in aplicacoes:
            self.print_colored(f"‚Ä¢ {app}", "primary")

        self.pausar()

    def _secao_pipes_automacao(self) -> None:
        """Se√ß√£o: Pipes e Automa√ß√£o"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("PIPES E AUTOMA√á√ÉO", "üîÑ", "warning")

        self.print_concept(
            "Pipes",
            "Uma forma de conectar comandos como pe√ßas de LEGO, onde a sa√≠da de um comando vira entrada do pr√≥ximo"
        )

        # === ANALOGIA ===
        self.print_colored("\nüè≠ ANALOGIA DA F√ÅBRICA:", "warning")
        self.print_colored("Pipes s√£o como uma linha de produ√ß√£o na f√°brica:", "text")
        self.print_colored("‚Ä¢ üè≠ Esta√ß√£o 1: comando1 (processa mat√©ria-prima)", "text")
        self.print_colored("‚Ä¢ üîÑ Esteira: | (pipe - transporta resultado)", "text") 
        self.print_colored("‚Ä¢ üè≠ Esta√ß√£o 2: comando2 (refina o produto)", "text")
        self.print_colored("‚Ä¢ üì¶ Resultado: produto final", "text")
        input("\nüî∏ Pressione ENTER para continuar...")

        # === EXEMPLOS PROGRESSIVOS ===
        exemplos_pipes = [
            {
                'nivel': 'B√ÅSICO',
                'titulo': 'Conectando 2 comandos',
                'codigo': '''# Sintaxe: comando1 | comando2
# A sa√≠da do comando1 vira entrada do comando2

ls -la | grep ".py"          # Lista arquivos, depois filtra s√≥ .py
cat arquivo.txt | head -5    # Mostra arquivo, depois s√≥ 5 primeiras linhas
ps aux | grep python         # Lista processos, depois s√≥ os que t√™m python''',
                'explicacao': 'O pipe (|) √© como um cano que conecta dois comandos'
            },
            {
                'nivel': 'INTERMEDI√ÅRIO', 
                'titulo': 'Contagem e estat√≠sticas',
                'codigo': '''# Contar elementos
ls | wc -l                   # Conta quantos arquivos tem na pasta
cat arquivo.txt | wc -w      # Conta palavras no arquivo
grep "fun√ß√£o" *.py | wc -l   # Conta quantas vezes "fun√ß√£o" aparece

# Ordenar resultados
ls -la | sort -k5 -n         # Lista arquivos ordenados por tamanho
cat nomes.txt | sort         # Ordena lista de nomes alfabeticamente''',
                'explicacao': 'wc = word count (contador), sort = ordenador'
            },
            {
                'nivel': 'AVAN√áADO',
                'titulo': 'An√°lise de dados complexa',
                'codigo': '''# Pipeline completo de an√°lise
cat access.log | grep "404" | cut -d' ' -f1 | sort | uniq -c | sort -nr
# 1. L√™ log de servidor
# 2. Filtra apenas erros 404  
# 3. Extrai s√≥ o IP (coluna 1)
# 4. Ordena os IPs
# 5. Conta IPs √∫nicos
# 6. Ordena por quantidade (maior primeiro)
# RESULTADO: IPs que mais geraram erro 404!''',
                'explicacao': 'Pipeline real usado para an√°lise de logs de servidor'
            }
        ]

        for exemplo in exemplos_pipes:
            self.print_colored(f"\nüéØ N√çVEL {exemplo['nivel']}: {exemplo['titulo']}", "info")
            self.exemplo(exemplo['codigo'])
            self.print_colored(f"üí° {exemplo['explicacao']}", "accent")
            input("\n‚è≠Ô∏è Pressione ENTER para pr√≥ximo n√≠vel...")

        # === REDIRECIONAMENTO ===
        self.print_colored("\nüì§ REDIRECIONAMENTO DE SA√çDA:", "success")
        
        redirecionamento = '''# Salvar resultados em arquivos
comando > arquivo.txt        # Sobrescreve arquivo
comando >> arquivo.txt       # Adiciona ao final do arquivo
comando 2> erros.txt         # Salva apenas erros
comando > saida.txt 2>&1     # Salva sa√≠da normal E erros

# Exemplos pr√°ticos:
ls -la > listagem.txt                    # Salva listagem de arquivos
python script.py > log.txt 2>&1         # Captura tudo do script
echo "Backup $(date)" >> backup.log     # Adiciona timestamp ao log'''

        self.exemplo(redirecionamento)

        # === AUTOMA√á√ÉO ===
        self.print_colored("\nü§ñ AUTOMA√á√ÉO COM SHELL SCRIPT:", "warning")
        
        script_exemplo = '''#!/bin/bash
# Script para backup autom√°tico de arquivos Python

# Vari√°veis
BACKUP_DIR="$HOME/backup_python"
DATA=$(date +%Y%m%d_%H%M%S)

# Criar pasta de backup se n√£o existir
mkdir -p "$BACKUP_DIR"

# Encontrar e copiar todos arquivos .py
echo "üîç Procurando arquivos Python..."
find . -name "*.py" -type f | while read arquivo; do
    echo "üìã Copiando: $arquivo"
    cp "$arquivo" "$BACKUP_DIR/$(basename $arquivo)_$DATA"
done

echo "‚úÖ Backup conclu√≠do em: $BACKUP_DIR"
echo "üìä $(ls $BACKUP_DIR | wc -l) arquivos salvos"'''

        self.exemplo(script_exemplo)

        self.print_colored("\nüåç ONDE PIPES S√ÉO USADOS:", "accent")
        aplicacoes = [
            "üìä An√°lise de big data - processar terabytes de logs",
            "üîç Cybersecurity - detectar ataques em tempo real", 
            "üìà Monitoramento - alertas autom√°ticos de sistema",
            "üß¨ Bioinform√°tica - an√°lise de sequ√™ncias de DNA",
            "üí∞ Finan√ßas - an√°lise de transa√ß√µes e fraudes"
        ]
        for app in aplicacoes:
            self.print_colored(f"‚Ä¢ {app}", "primary")

        self.pausar()

    def _secao_cli_python(self) -> None:
        """Se√ß√£o: CLIs com Python"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("CRIANDO CLIS COM PYTHON", "üêç", "info")

        self.print_concept(
            "CLI (Command Line Interface)",
            "Um programa que voc√™ executa no terminal passando argumentos, como uma ferramenta profissional"
        )

        # === ANALOGIA ===
        self.print_colored("\nüõ†Ô∏è ANALOGIA DA FERRAMENTA:", "warning")
        self.print_colored("Uma CLI √© como uma chave de fenda profissional:", "text")
        self.print_colored("‚Ä¢ üîß Ferramenta principal: seu programa Python", "text")
        self.print_colored("‚Ä¢ üéõÔ∏è Configura√ß√µes: argumentos que voc√™ passa", "text")
        self.print_colored("‚Ä¢ üìã Manual: help autom√°tico", "text")
        self.print_colored("‚Ä¢ ‚öôÔ∏è Resultado: a√ß√£o executada", "text")
        input("\nüî∏ Pressione ENTER para continuar...")

        # === ARGPARSE B√ÅSICO ===
        self.print_colored("\nüìö ARGPARSE - BIBLIOTECA NATIVA DO PYTHON:", "info")
        
        exemplo_basico = '''#!/usr/bin/env python3
import argparse
import sys

def main():
    # Criar o parser (analisador de argumentos)
    parser = argparse.ArgumentParser(
        description='üìù Contador de linhas em arquivos',
        epilog='Exemplo: python contador.py arquivo.txt --palavras'
    )
    
    # Argumentos posicionais (obrigat√≥rios)
    parser.add_argument('arquivo', 
                       help='üìÑ Arquivo para analisar')
    
    # Argumentos opcionais
    parser.add_argument('-l', '--linhas', 
                       action='store_true',
                       help='üî¢ Contar linhas')
    
    parser.add_argument('-p', '--palavras',
                       action='store_true', 
                       help='üìù Contar palavras')
    
    parser.add_argument('-v', '--verbose',
                       action='store_true',
                       help='üí¨ Modo verboso')
    
    # Processar argumentos
    args = parser.parse_args()
    
    # Usar os argumentos
    if args.verbose:
        print(f"üîç Analisando arquivo: {args.arquivo}")
    
    try:
        with open(args.arquivo, 'r', encoding='utf-8') as f:
            conteudo = f.read()
            linhas = conteudo.split('\\n')
            palavras = conteudo.split()
        
        if args.linhas:
            print(f"üìè Linhas: {len(linhas)}")
        
        if args.palavras:
            print(f"üìù Palavras: {len(palavras)}")
            
        if not args.linhas and not args.palavras:
            print(f"üìè Linhas: {len(linhas)}")
            print(f"üìù Palavras: {len(palavras)}")
            
    except FileNotFoundError:
        print(f"‚ùå Arquivo '{args.arquivo}' n√£o encontrado")
        sys.exit(1)

if __name__ == '__main__':
    main()'''

        self.print_colored("üéØ CLI B√ÅSICA COM ARGPARSE:", "warning")
        self.exemplo(exemplo_basico)
        
        self.print_colored("\nüí° Como usar esta CLI:", "accent")
        uso_basico = '''# Exemplos de uso:
python contador.py documento.txt              # Conta linhas e palavras
python contador.py documento.txt --linhas     # S√≥ linhas
python contador.py documento.txt -p           # S√≥ palavras  
python contador.py documento.txt -v -l -p     # Verboso + tudo
python contador.py --help                     # Mostra ajuda'''
        
        self.exemplo(uso_basico)
        input("\n‚è≠Ô∏è Pressione ENTER para ver exemplo avan√ßado...")

        # === ARGPARSE AVAN√áADO ===
        self.print_colored("\nüöÄ CLI AVAN√áADA COM SUBCOMANDOS:", "success")
        
        exemplo_avancado = '''#!/usr/bin/env python3
import argparse
import json
import csv
from pathlib import Path

def processar_arquivo(arquivo, formato, filtro=None):
    """Processa arquivo de dados"""
    if formato == 'json':
        with open(arquivo, 'r') as f:
            dados = json.load(f)
    elif formato == 'csv':
        with open(arquivo, 'r') as f:
            reader = csv.DictReader(f)
            dados = list(reader)
    
    if filtro:
        dados = [item for item in dados 
                if filtro.lower() in str(item).lower()]
    
    return dados

def main():
    # Parser principal
    parser = argparse.ArgumentParser(description='üîß Processador de Dados')
    parser.add_argument('--config', type=Path,
                       help='üìã Arquivo de configura√ß√£o')
    parser.add_argument('-v', '--verbose', action='count', default=0,
                       help='üí¨ N√≠vel de verbosidade (-v, -vv)')
    
    # Subcomandos
    subparsers = parser.add_subparsers(dest='comando', 
                                     help='üéØ Comandos dispon√≠veis')
    
    # Comando 'processar'
    proc_parser = subparsers.add_parser('processar', 
                                       help='‚öôÔ∏è Processar arquivo')
    proc_parser.add_argument('arquivo', type=Path, 
                           help='üìÑ Arquivo de entrada')
    proc_parser.add_argument('--formato', 
                           choices=['json', 'csv'], required=True,
                           help='üìã Formato do arquivo')
    proc_parser.add_argument('--filtro', 
                           help='üîç Filtro para aplicar')
    proc_parser.add_argument('--saida', type=Path,
                           help='üíæ Arquivo de sa√≠da')
    
    # Comando 'info'
    info_parser = subparsers.add_parser('info', 
                                       help='‚ÑπÔ∏è Info sobre arquivo')
    info_parser.add_argument('arquivo', type=Path,
                           help='üìÑ Arquivo para analisar')
    
    args = parser.parse_args()
    
    # Configurar verbosidade
    if args.verbose >= 2:
        print("üîß Modo debug ativado")
    elif args.verbose >= 1:
        print("üí¨ Modo verboso ativado")
    
    # Executar comando
    if args.comando == 'processar':
        if not args.arquivo.exists():
            print(f"‚ùå Arquivo {args.arquivo} n√£o existe")
            return 1
        
        dados = processar_arquivo(args.arquivo, args.formato, args.filtro)
        
        if args.verbose:
            print(f"üìä {len(dados)} registros processados")
        
        if args.saida:
            with open(args.saida, 'w') as f:
                json.dump(dados, f, indent=2)
            print(f"üíæ Dados salvos em {args.saida}")
        else:
            print(json.dumps(dados, indent=2))
    
    elif args.comando == 'info':
        if args.arquivo.exists():
            stat = args.arquivo.stat()
            print(f"üìÅ Arquivo: {args.arquivo}")
            print(f"üìè Tamanho: {stat.st_size:,} bytes")
        else:
            print(f"‚ùå Arquivo {args.arquivo} n√£o existe")
    
    else:
        parser.print_help()
        return 1
    
    return 0

if __name__ == '__main__':
    exit(main())'''

        self.exemplo(exemplo_avancado)
        
        self.print_colored("\nüí° Como usar a CLI avan√ßada:", "accent")
        uso_avancado = '''# Exemplos de uso:
python processador.py processar dados.csv --formato csv --filtro "python"
python processador.py processar dados.json --formato json --saida resultado.json
python processador.py info dados.csv
python processador.py --help
python processador.py processar --help'''
        
        self.exemplo(uso_avancado)

        # === DICAS PROFISSIONAIS ===
        self.print_colored("\nüéØ DICAS PARA CLIS PROFISSIONAIS:", "warning")
        dicas = [
            "üìù Sempre adicione help= para cada argumento",
            "üîß Use type= para valida√ß√£o autom√°tica (int, Path, etc)",
            "‚úÖ choices= limita op√ß√µes v√°lidas", 
            "üö© action='store_true' para flags booleanas",
            "üìä action='count' para n√≠veis (-v, -vv, -vvv)",
            "‚ö†Ô∏è Sempre trate erros com try/except",
            "üé® Use emojis para deixar a sa√≠da mais amig√°vel",
            "üìã epilog= adiciona exemplos de uso"
        ]
        
        for dica in dicas:
            self.print_colored(f"‚Ä¢ {dica}", "primary")

        self.pausar()

    def _secao_ferramentas_avancadas(self) -> None:
        """Se√ß√£o: Ferramentas Avan√ßadas"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("FERRAMENTAS AVAN√áADAS PARA CLI", "üöÄ", "accent")

        self.print_concept(
            "Framework Click",
            "Uma biblioteca moderna que torna a cria√ß√£o de CLIs Python mais f√°cil e elegante, como um upgrade do argparse"
        )

        # === POR QUE CLICK? ===
        self.print_colored("\n‚≠ê POR QUE USAR CLICK?", "warning")
        vantagens = [
            "üé® Sintaxe mais limpa com decorators",
            "üåà Cores autom√°ticas no terminal",
            "üìä Progress bars integradas",
            "‚ùì Prompts interativos",
            "üß™ Sistema de testes inclu√≠do",
            "üîå Extens√≠vel com plugins",
            "üìö Documenta√ß√£o excelente"
        ]
        
        for vantagem in vantagens:
            self.print_colored(f"‚Ä¢ {vantagem}", "primary")

        input("\nüî∏ Pressione ENTER para ver Click em a√ß√£o...")

        # === CLICK B√ÅSICO ===
        self.print_colored("\nüì¶ INSTALA√á√ÉO DO CLICK:", "info")
        self.exemplo("pip install click")
        
        self.print_colored("\nüéØ CLI B√ÅSICA COM CLICK:", "warning")
        
        click_basico = '''#!/usr/bin/env python3
import click
import os
from pathlib import Path

@click.command()
@click.argument('arquivo', type=click.Path(exists=True))
@click.option('--saida', '-o', default='resultado.txt',
              help='üìÑ Arquivo de sa√≠da')
@click.option('--linhas', '-n', default=10, type=int,
              help='üî¢ N√∫mero de linhas')
@click.option('--verbose', '-v', is_flag=True,
              help='üí¨ Modo verboso')
@click.option('--formato', type=click.Choice(['txt', 'json']),
              default='txt', help='üìã Formato de sa√≠da')
def processar(arquivo, saida, linhas, verbose, formato):
    """üîß Processa arquivo e gera sa√≠da formatada."""
    
    if verbose:
        click.echo(f"üîÑ Processando {arquivo}...")
        click.echo(f"üìã Formato: {formato}")
        click.echo(f"üìä Linhas: {linhas}")
    
    try:
        with open(arquivo, 'r') as f:
            conteudo = f.readlines()[:linhas]
        
        if formato == 'json':
            import json
            dados = {'linhas': [linha.strip() for linha in conteudo]}
            with open(saida, 'w') as f:
                json.dump(dados, f, indent=2)
        else:
            with open(saida, 'w') as f:
                f.writelines(conteudo)
        
        # Click colorido autom√°tico!
        click.echo(f"‚úÖ Processamento conclu√≠do: {saida}", fg='green')
        
    except Exception as e:
        click.echo(f"‚ùå Erro: {e}", fg='red')
        raise click.Abort()

if __name__ == '__main__':
    processar()'''

        self.exemplo(click_basico)

        input("\n‚è≠Ô∏è Pressione ENTER para ver Click avan√ßado...")

        # === CLICK AVAN√áADO ===
        self.print_colored("\nüöÄ CLI PROFISSIONAL COM CLICK:", "success")
        
        click_avancado = '''#!/usr/bin/env python3
import click
import time
import json
from pathlib import Path

@click.group()
@click.option('--debug', is_flag=True, help='üêõ Modo debug')
@click.pass_context
def cli(ctx, debug):
    """üéØ Minha ferramenta CLI profissional"""
    ctx.ensure_object(dict)
    ctx.obj['DEBUG'] = debug
    
    if debug:
        click.echo("üêõ Modo debug ativado", fg='yellow')

@cli.command()
@click.argument('diretorio', type=click.Path(exists=True, file_okay=False))
@click.option('--extensao', '-e', default='.py',
              help='üìÑ Extens√£o dos arquivos')
@click.pass_context
def contar(ctx, diretorio, extensao):
    """üìä Conta arquivos em diret√≥rio."""
    
    if ctx.obj['DEBUG']:
        click.echo(f"üîç Procurando {extensao} em {diretorio}")
    
    path = Path(diretorio)
    arquivos = list(path.rglob(f'*{extensao}'))
    
    # Progress bar autom√°tica!
    with click.progressbar(arquivos, label='Contando arquivos') as bar:
        total_linhas = 0
        for arquivo in bar:
            if arquivo.is_file():
                try:
                    with open(arquivo, 'r', encoding='utf-8') as f:
                        total_linhas += len(f.readlines())
                except:
                    pass
    
    click.echo(f"üìä Encontrados: {len(arquivos)} arquivos {extensao}")
    click.echo(f"üìù Total de linhas: {total_linhas:,}")

@cli.command()
@click.option('--nome', prompt='Seu nome', help='üë§ Nome do usu√°rio')
@click.option('--idade', type=int, help='üéÇ Sua idade')
@click.option('--senha', prompt=True, hide_input=True, 
              confirmation_prompt=True, help='üîí Senha')
def cadastro(nome, idade, senha):
    """üìã Cadastro interativo."""
    
    if not idade:
        idade = click.prompt('Sua idade', type=int)
    
    # Confirma√ß√£o interativa
    if click.confirm(f'Cadastrar {nome}, {idade} anos?'):
        # Simula√ß√£o de salvamento
        with click.progressbar(range(3), label='Salvando') as bar:
            for i in bar:
                time.sleep(0.5)
        
        click.echo(f"‚úÖ {nome} cadastrado com sucesso!", fg='green')
    else:
        click.echo("‚ùå Cadastro cancelado", fg='red')

@cli.command()
def cores():
    """üé® Demonstra√ß√£o de cores."""
    click.echo(click.style('Texto verde', fg='green'))
    click.echo(click.style('Texto vermelho bold', fg='red', bold=True))
    click.echo(click.style('Fundo azul', bg='blue'))
    click.echo(click.style('Texto sublinhado', underline=True))

@cli.command()
@click.argument('arquivo', type=click.File('w'))
def temp(arquivo):
    """üìÑ Demonstra√ß√£o de arquivo tempor√°rio."""
    dados = {
        'timestamp': time.time(),
        'mensagem': 'Dados de exemplo'
    }
    
    json.dump(dados, arquivo, indent=2)
    click.echo(f"üíæ Dados salvos em: {arquivo.name}")

if __name__ == '__main__':
    cli()'''

        self.exemplo(click_avancado)

        # === FUNCIONALIDADES ESPECIAIS ===
        self.print_colored("\n‚ú® FUNCIONALIDADES ESPECIAIS DO CLICK:", "accent")
        
        funcionalidades = '''# Testing autom√°tico
from click.testing import CliRunner

def test_comando():
    runner = CliRunner()
    result = runner.invoke(cores, [])
    assert result.exit_code == 0
    assert 'verde' in result.output

# Valida√ß√£o customizada
def validar_email(ctx, param, value):
    if '@' not in value:
        raise click.BadParameter('Email deve conter @')
    return value

@click.option('--email', callback=validar_email)
def usuario(email):
    click.echo(f"Email v√°lido: {email}")

# Pagina√ß√£o autom√°tica para texto longo
@click.command()
def docs():
    texto_longo = "\\n".join([f"Linha {i}" for i in range(100)])
    click.echo_via_pager(texto_longo)'''

        self.exemplo(funcionalidades)

        # === COMPARA√á√ÉO ===
        self.print_colored("\n‚öñÔ∏è ARGPARSE vs CLICK:", "warning")
        comparacao = [
            "üìù Sintaxe: argparse (verbosa) vs click (decorators)",
            "üé® Cores: argparse (manual) vs click (autom√°tica)",
            "üìä Progress: argparse (externa) vs click (integrada)",
            "üß™ Testes: argparse (manual) vs click (framework)",
            "üìö Curva: argparse (steep) vs click (gentle)",
            "‚ö° Performance: argparse (r√°pido) vs click (elegante)"
        ]
        
        for comp in comparacao:
            self.print_colored(f"‚Ä¢ {comp}", "primary")

        self.print_colored("\nüåç FERRAMENTAS CLI FAMOSAS FEITAS COM CLICK:", "accent")
        ferramentas = [
            "üåê Flask - framework web Python",
            "üì¶ Pip - gerenciador de pacotes Python", 
            "‚òÅÔ∏è AWS CLI - interface da Amazon Web Services",
            "üêã Docker Compose - orquestra√ß√£o de containers",
            "üìä Jupyter - notebooks interativos"
        ]
        
        for ferramenta in ferramentas:
            self.print_colored(f"‚Ä¢ {ferramenta}", "primary")

        self.pausar()

    def _secao_pratica_interativa(self) -> None:
        """Se√ß√£o de pr√°tica interativa do m√≥dulo"""

        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_section("HORA DE PRATICAR!", "üéØ", "success")
        self.print_colored("Vamos testar o que voc√™ aprendeu sobre Terminal e CLIs!", "text")

        # === INSTRU√á√ïES PARA INICIANTES ===
        self.print_tip("Para iniciantes: Cada exerc√≠cio √© opcional, mas recomendamos fazer todos!")
        self.print_colored("\nüéì SOBRE OS EXERC√çCIOS:", "info")
        self.print_colored("‚Ä¢ N√£o se preocupe se errar - faz parte do aprendizado!", "text")
        self.print_colored("‚Ä¢ Voc√™ pode tentar quantas vezes quiser", "text")
        self.print_colored("‚Ä¢ Digite 'help' se precisar de ajuda", "text")
        self.print_colored("‚Ä¢ Use Ctrl+C para voltar ao menu principal se necess√°rio", "text")

        # === MENU PRINCIPAL DE EXERC√çCIOS ===
        while True:
            print("\nEscolha uma atividade:")
            print("1. üìù Quiz de Conhecimentos sobre Terminal")
            print("2. üíª Complete o C√≥digo CLI")
            print("3. üé® Exerc√≠cio Criativo: CLI Personalizada")
            print("0. Continuar para o Mini Projeto")

            try:
                escolha = input("\nüëâ Sua escolha: ").strip().lower()

                if escolha in ["0", "continuar", "sair", "proximo"]:
                    break
                elif escolha in ["1", "quiz", "conhecimentos"]:
                    try:
                        self._run_quiz_terminal()
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Quiz interrompido. Voltando ao menu principal...")
                        return
                elif escolha in ["2", "codigo", "completar"]:
                    try:
                        self._run_code_completion_cli()
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio de c√≥digo interrompido. Voltando ao menu principal...")
                        return
                elif escolha in ["3", "criativo"]:
                    try:
                        self._run_creative_cli_exercise()
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio criativo interrompido. Voltando ao menu principal...")
                        return
                elif escolha in ["help", "ajuda", "h", "?"]:
                    self._show_help()
                else:
                    self.print_warning("‚ùå Op√ß√£o inv√°lida! Digite 1, 2, 3, 0 ou 'help' para ajuda.")

            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Opera√ß√£o cancelada pelo usu√°rio. Voltando ao menu principal...")
                return
            except Exception as e:
                self.print_warning("‚ùå Erro inesperado no menu. Tente novamente.")

    def _run_quiz_terminal(self) -> None:
        """Executa quiz sobre terminal e CLI"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("QUIZ: TERMINAL E CLI", "üìù", "info")
        
        perguntas = [
            {
                'pergunta': 'Qual comando lista arquivos em um diret√≥rio no Linux?',
                'opcoes': ['a) list', 'b) ls', 'c) dir', 'd) show'],
                'resposta': 'b',
                'explicacao': 'ls √© o comando padr√£o para listar arquivos no Linux/macOS'
            },
            {
                'pergunta': 'O que faz o pipe (|) em comandos do terminal?',
                'opcoes': ['a) Lista arquivos', 'b) Conecta a sa√≠da de um comando √† entrada de outro', 'c) Copia arquivos', 'd) Remove arquivos'],
                'resposta': 'b', 
                'explicacao': 'O pipe conecta comandos, passando a sa√≠da do primeiro como entrada do segundo'
            },
            {
                'pergunta': 'Qual s√≠mbolo representa a pasta home do usu√°rio?',
                'opcoes': ['a) /', 'b) .', 'c) ~', 'd) ..'],
                'resposta': 'c',
                'explicacao': 'O til (~) √© um atalho para a pasta home do usu√°rio atual'
            },
            {
                'pergunta': 'Para que serve o argparse em Python?',
                'opcoes': ['a) Criar interfaces gr√°ficas', 'b) Processar argumentos de linha de comando', 'c) Conectar ao banco de dados', 'd) Fazer requisi√ß√µes HTTP'],
                'resposta': 'b',
                'explicacao': 'argparse √© a biblioteca padr√£o do Python para criar CLIs'
            },
            {
                'pergunta': 'Qual vantagem do Click sobre argparse?',
                'opcoes': ['a) √â mais r√°pido', 'b) Sintaxe mais limpa com decorators', 'c) Usa menos mem√≥ria', 'd) √â mais antigo'],
                'resposta': 'b',
                'explicacao': 'Click oferece sintaxe mais elegante usando decorators'
            }
        ]

        acertos = 0
        for i, pergunta in enumerate(perguntas, 1):
            try:
                self.print_colored(f"\n‚ùì PERGUNTA {i}/5:", "cyan")
                self.print_concept(pergunta['pergunta'])
                print()
                for opcao in pergunta['opcoes']:
                    self.print_tip(opcao)
                
                while True:
                    try:
                        resposta = input("\nü§î Sua resposta (a/b/c/d): ").lower().strip()
                        if resposta in ['a', 'b', 'c', 'd']:
                            break
                        self.print_warning("Digite apenas a, b, c ou d")
                    except KeyboardInterrupt:
                        raise
                
                if resposta == pergunta['resposta']:
                    self.print_success("‚úÖ Correto!")
                    acertos += 1
                else:
                    self.print_warning(f"‚ùå Incorreto. A resposta certa √©: {pergunta['resposta']}")
                
                self.print_tip(f"üí° {pergunta['explicacao']}")
                
                if i < len(perguntas):
                    try:
                        input("\n‚è≠Ô∏è Pressione ENTER para pr√≥xima pergunta...")
                    except KeyboardInterrupt:
                        raise
                        
            except KeyboardInterrupt:
                self.print_warning("\n‚ö†Ô∏è Quiz interrompido!")
                raise

        # Resultado final
        porcentagem = (acertos / len(perguntas)) * 100
        self.print_colored(f"\nüéØ RESULTADO: {acertos}/{len(perguntas)} ({porcentagem:.0f}%)", "cyan")
        
        if porcentagem >= 80:
            self.print_success("üèÜ Excelente! Voc√™ domina o terminal!")
        elif porcentagem >= 60:
            self.print_success("üëç Bom trabalho! Continue praticando!")
        else:
            self.print_warning("üìö Revise os conceitos e tente novamente!")

        if self.progress:
            self.progress.add_points(acertos * 3)
            self.print_tip(f"üéÅ +{acertos * 3} pontos pelo quiz!")

    def _run_code_completion_cli(self) -> None:
        """Executa exerc√≠cios de completar c√≥digo CLI"""
        if self.ui:
            self.ui.clear_screen()
            
        self.print_section("COMPLETE O C√ìDIGO CLI", "üíª", "warning")
        
        exercicios = [
            {
                'nivel': 'B√ÅSICO',
                'instrucao': 'Complete o c√≥digo para criar uma CLI que aceita um nome como argumento',
                'codigo_inicial': '''import argparse

def main():
    parser = argparse.ArgumentParser(description='Sauda√ß√£o CLI')
    
    # COMPLETE: adicionar argumento 'nome'
    parser.add_argument(_____)
    
    args = parser.parse_args()
    print(f"Ol√°, {args.nome}!")

if __name__ == '__main__':
    main()''',
                'solucao': "parser.add_argument('nome', help='Seu nome')",
                'explicacao': 'Argumentos posicionais s√£o obrigat√≥rios e definidos apenas pelo nome'
            },
            {
                'nivel': 'INTERMEDI√ÅRIO', 
                'instrucao': 'Complete para adicionar uma flag opcional --verbose',
                'codigo_inicial': '''import argparse

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('arquivo')
    
    # COMPLETE: adicionar flag --verbose
    parser.add_argument(_____)
    
    args = parser.parse_args()
    
    if args.verbose:
        print(f"Processando {args.arquivo}...")

if __name__ == '__main__':
    main()''',
                'solucao': "parser.add_argument('--verbose', action='store_true', help='Modo verboso')",
                'explicacao': 'action="store_true" cria uma flag booleana'
            },
            {
                'nivel': 'AVAN√áADO',
                'instrucao': 'Complete o decorator Click para aceitar um arquivo e op√ß√£o de formato',
                'codigo_inicial': '''import click

# COMPLETE: decorator click.command
_____
# COMPLETE: argumento arquivo
_____
# COMPLETE: op√ß√£o formato com choices
_____
def processar(arquivo, formato):
    """Processa arquivo no formato especificado"""
    click.echo(f"Processando {arquivo} como {formato}")

if __name__ == '__main__':
    processar()''',
                'solucao': '''@click.command()
@click.argument('arquivo')
@click.option('--formato', type=click.Choice(['txt', 'json']), default='txt')''',
                'explicacao': 'Click usa decorators para definir argumentos e op√ß√µes'
            }
        ]

        for i, exercicio in enumerate(exercicios, 1):
            try:
                self.print_colored(f"\nüéØ EXERC√çCIO {i} - N√çVEL {exercicio['nivel']}", "cyan")
                self.print_colored(exercicio['instrucao'], "text")
                
                self.print_colored("\nüìù C√ìDIGO PARA COMPLETAR:", "warning")
                self.exemplo(exercicio['codigo_inicial'])
                
                try:
                    resposta = input(f"\nüí≠ Sua resposta (ou 'help' para dica): ").strip()
                    
                    if resposta.lower() == 'help':
                        self.print_tip(f"üí° Dica: {exercicio['explicacao']}")
                        resposta = input("üí≠ Agora sua resposta: ").strip()
                    
                    # Verifica√ß√£o simples (cont√©m elementos chave)
                    solucao_elementos = exercicio['solucao'].lower().split()
                    resposta_elementos = resposta.lower().split()
                    
                    acertou = any(elem in resposta_elementos for elem in solucao_elementos)
                    
                    if acertou:
                        self.print_success("‚úÖ Correto! Bem feito!")
                    else:
                        self.print_warning("‚ùå N√£o est√° correto. Veja a solu√ß√£o:")
                    
                    self.print_colored("\n‚úÖ SOLU√á√ÉO:", "success")
                    self.exemplo(exercicio['solucao'])
                    self.print_tip(f"üí° {exercicio['explicacao']}")
                    
                except KeyboardInterrupt:
                    raise
                
                if i < len(exercicios):
                    try:
                        input("\n‚è≠Ô∏è Pressione ENTER para pr√≥ximo exerc√≠cio...")
                    except KeyboardInterrupt:
                        raise
                        
            except KeyboardInterrupt:
                self.print_warning("\n‚ö†Ô∏è Exerc√≠cios interrompidos!")
                raise

        if self.progress:
            self.progress.add_points(20)
            self.print_success("üéÅ +20 pontos pelos exerc√≠cios de c√≥digo!")

    def _run_creative_cli_exercise(self) -> None:
        """Executa exerc√≠cio criativo de CLI"""
        if self.ui:
            self.ui.clear_screen()
            
        self.print_section("EXERC√çCIO CRIATIVO: CLI PESSOAL", "üé®", "accent")
        
        self.print_concept(
            "Desafio Criativo",
            "Vamos criar uma CLI personalizada que reflita sua personalidade e interesses!"
        )

        # === COLETA DE INFORMA√á√ïES ===
        try:
            self.print_colored("\nüéØ PRIMEIRA ETAPA: Planejamento", "warning")
            nome = input("üë§ Qual seu nome? ").strip()
            if not nome:
                nome = "Programador"
            
            interesse = input("üéØ Qual seu hobby favorito? ").strip()
            if not interesse:
                interesse = "programa√ß√£o"
            
            funcionalidade = input("üîß Que funcionalidade sua CLI teria? (ex: calculadora, gerador de senhas): ").strip()
            if not funcionalidade:
                funcionalidade = "calculadora"
            
            self.print_colored(f"\n‚ú® Perfeito! Vamos criar a CLI '{nome.upper()}_TOOL' para {interesse}!", "success")
            
        except KeyboardInterrupt:
            raise

        # === GERA√á√ÉO DO C√ìDIGO ===
        self.print_colored("\nüéØ SEGUNDA ETAPA: Implementa√ß√£o", "warning")
        
        codigo_personalizado = f'''#!/usr/bin/env python3
"""
{nome.upper()}_TOOL - CLI Personalizada
Uma ferramenta criada por {nome} para {interesse}
"""

import click
import random
import time
from datetime import datetime

@click.group()
@click.version_option(version='1.0.0')
def cli():
    """üéØ {nome.upper()}_TOOL - Sua CLI personalizada para {interesse}"""
    click.echo(f"üéâ Bem-vindo √† ferramenta de {nome}!")

@cli.command()
@click.option('--nome', default='{nome}', help='üë§ Seu nome')
def saudar(nome):
    """üëã Sauda√ß√£o personalizada"""
    hora = datetime.now().hour
    
    if hora < 12:
        periodo = "Bom dia"
    elif hora < 18:
        periodo = "Boa tarde"
    else:
        periodo = "Boa noite"
    
    click.echo(f"{periodo}, {{nome}}! üåü")
    click.echo(f"Pronto para trabalhar com {interesse}? üöÄ")

@cli.command()
@click.argument('texto')
def animar(texto):
    """‚ú® Anima um texto com efeitos"""
    cores = ['red', 'green', 'blue', 'yellow', 'magenta', 'cyan']
    
    click.echo("üé¨ Animando texto...")
    for i in range(3):
        cor = random.choice(cores)
        click.echo(click.style(f"   {texto}", fg=cor, bold=True))
        time.sleep(0.5)
    
    click.echo("‚ú® Anima√ß√£o conclu√≠da!")

@cli.command()
def motivar():
    """üí™ Frases motivacionais para {interesse}"""
    frases = [
        f"üåü Voc√™ √© incr√≠vel em {interesse}!",
        f"üöÄ Continue praticando {interesse}, voc√™ est√° evoluindo!",
        f"üí™ {nome}, voc√™ tem potencial ilimitado!",
        f"üéØ Foque em {interesse} e alcance seus objetivos!",
        f"‚ú® Cada dia de pr√°tica em {interesse} te torna melhor!"
    ]
    
    frase = random.choice(frases)
    click.echo(click.style(frase, fg='green', bold=True))

@cli.command()
@click.option('--dificuldade', type=click.Choice(['facil', 'medio', 'dificil']),
              default='medio', help='üéØ N√≠vel de dificuldade')
def {funcionalidade.lower().replace(' ', '_')}(dificuldade):
    """üîß {funcionalidade.title()} personalizada"""
    click.echo(f"üîß Executando {funcionalidade} no n√≠vel {{dificuldade}}...")
    
    # Simula√ß√£o de processamento
    with click.progressbar(range(3), label='Processando') as bar:
        for i in bar:
            time.sleep(0.3)
    
    resultado = random.randint(1, 100)
    click.echo(f"‚úÖ Resultado: {{resultado}}")
    click.echo(f"üéâ {funcionalidade.title()} executada com sucesso!")

@cli.command()
def sobre():
    """‚ÑπÔ∏è Informa√ß√µes sobre esta CLI"""
    click.echo("=" * 50)
    click.echo(f"üéØ {nome.upper()}_TOOL v1.0.0")
    click.echo(f"üë§ Criada por: {nome}")
    click.echo(f"üíù Foco em: {interesse}")
    click.echo(f"üîß Funcionalidade: {funcionalidade}")
    click.echo(f"üìÖ Criada em: {{datetime.now().strftime('%d/%m/%Y')}}")
    click.echo("=" * 50)
    click.echo("üöÄ Feito com muito ‚ù§Ô∏è e Python!")

if __name__ == '__main__':
    cli()'''

        self.print_colored("üé® SUA CLI PERSONALIZADA:", "success")
        self.exemplo(codigo_personalizado)
        
        # === DEMONSTRA√á√ÉO ===
        self.print_colored("\nüéØ TERCEIRA ETAPA: Como usar", "warning")
        
        exemplos_uso = f'''# Como usar sua CLI personalizada:
python {nome.lower()}_tool.py --help                    # Ver ajuda
python {nome.lower()}_tool.py saudar                    # Sauda√ß√£o
python {nome.lower()}_tool.py saudar --nome "Amigo"     # Sauda√ß√£o personalizada
python {nome.lower()}_tool.py animar "Ol√° Mundo"       # Animar texto
python {nome.lower()}_tool.py motivar                   # Frase motivacional
python {nome.lower()}_tool.py {funcionalidade.lower().replace(' ', '_')} --dificuldade facil  # Sua funcionalidade
python {nome.lower()}_tool.py sobre                     # Info sobre a CLI'''

        self.exemplo(exemplos_uso)
        
        # === FEEDBACK ===
        self.print_colored("\nüéâ QUARTA ETAPA: Expans√£o", "success")
        self.print_colored("Ideias para expandir sua CLI:", "text")
        expansoes = [
            f"üìä Adicionar estat√≠sticas de uso",
            f"üíæ Salvar configura√ß√µes pessoais",
            f"üîó Integrar com APIs relacionadas a {interesse}",
            f"üì± Notifica√ß√µes personalizadas",
            f"üé® Mais temas e cores",
            f"üîê Sistema de login",
            f"üìà Gr√°ficos e relat√≥rios"
        ]
        
        for expansao in expansoes:
            self.print_colored(f"‚Ä¢ {expansao}", "primary")

        if self.progress:
            self.progress.add_points(25)
            self.print_success("üéÅ +25 pontos pelo exerc√≠cio criativo!")

    def _show_help(self) -> None:
        """Mostra ajuda sobre as op√ß√µes dispon√≠veis"""
        self.print_section("AJUDA - SE√á√ÉO DE PR√ÅTICA", "‚ùì", "info")
        help_text = [
            "üìù OP√á√ÉO 1 - Quiz: Teste conhecimentos sobre terminal e CLI",
            "üíª OP√á√ÉO 2 - Complete o C√≥digo: 3 exerc√≠cios progressivos de CLI",
            "üé® OP√á√ÉO 3 - Exerc√≠cio Criativo: Crie sua pr√≥pria CLI personalizada",
            "üî¢ OP√á√ÉO 0 - Continue para o Mini Projeto final",
            "",
            "üí° DICAS:",
            "‚Ä¢ Voc√™ pode digitar o n√∫mero ou palavras como 'quiz', 'codigo'",
            "‚Ä¢ Digite 'help' a qualquer momento para ver esta ajuda",
            "‚Ä¢ Use Ctrl+C se quiser voltar ao menu principal",
            "‚Ä¢ Recomendamos fazer todas as atividades para aprender melhor!"
        ]

        for line in help_text:
            if line:
                self.print_colored(f"  {line}", "text")
            else:
                print()

        input("\nüî∏ Pressione ENTER para voltar ao menu...")

    def _mini_projeto_sistema_cli_profissional(self) -> None:
        """Mini Projeto: Sistema CLI Profissional Completo"""

        # === CABE√áALHO IMPACTANTE ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üéØ MINI PROJETO: TASKMANAGER CLI")
        else:
            print("\n" + "="*50)
            print("üéØ MINI PROJETO: TASKMANAGER CLI")
            print("="*50)

        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_success("üéâ Vamos criar um gerenciador de tarefas profissional via linha de comando!")

        self.print_concept(
            "TaskManager CLI",
            "Uma ferramenta completa de produtividade que permite gerenciar tarefas, categorias, prioridades e estat√≠sticas, tudo via terminal"
        )

        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nEste tipo de ferramenta √© √∫til para:", "text")
        usos_praticos = [
            "üìä Gerentes de projeto - acompanhar tarefas da equipe",
            "üíª Desenvolvedores - organizar features e bugs",
            "üìö Estudantes - controlar atividades acad√™micas",
            "üè¢ Profissionais - gest√£o pessoal de produtividade"
        ]
        for uso in usos_praticos:
            self.print_colored(f"‚Ä¢ {uso}", "accent")

        input("\nüî∏ Pressione ENTER para come√ßar o desenvolvimento...")

        # === DESENVOLVIMENTO PASSO A PASSO ===

        # PASSO 1: Estrutura base
        self.print_section("PASSO 1: Estrutura Base da CLI", "üìù", "info")
        self.print_tip("Vamos criar a base com Click framework e gerenciamento de dados")

        codigo_estrutura = '''#!/usr/bin/env python3
"""
TaskManager CLI - Gerenciador Profissional de Tarefas
Uma ferramenta completa para produtividade via linha de comando
"""

import click
import json
import os
from datetime import datetime, date
from pathlib import Path
from typing import List, Dict, Any

# Arquivo de dados
DATA_FILE = Path.home() / '.taskmanager.json'

class TaskManager:
    """Gerenciador principal de tarefas"""
    
    def __init__(self):
        self.tasks = self.load_tasks()
    
    def load_tasks(self) -> List[Dict[str, Any]]:
        """Carrega tarefas do arquivo JSON"""
        if DATA_FILE.exists():
            try:
                with open(DATA_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except json.JSONDecodeError:
                return []
        return []
    
    def save_tasks(self):
        """Salva tarefas no arquivo JSON"""
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(self.tasks, f, indent=2, ensure_ascii=False, default=str)
    
    def get_next_id(self) -> int:
        """Retorna pr√≥ximo ID dispon√≠vel"""
        if not self.tasks:
            return 1
        return max(task.get('id', 0) for task in self.tasks) + 1

# Inst√¢ncia global
task_manager = TaskManager()'''

        self.exemplo(codigo_estrutura)
        input("\n‚è≠Ô∏è Pressione ENTER para o pr√≥ximo passo...")

        # PASSO 2: Comandos principais
        self.print_section("PASSO 2: Comandos de Gerenciamento", "‚öôÔ∏è", "success")
        self.print_colored("Agora vamos implementar os comandos principais:", "text")

        codigo_comandos = '''@click.group()
@click.version_option(version='2.0.0')
def cli():
    """
    üöÄ TaskManager CLI - Seu Gerenciador de Tarefas Profissional
    
    Organize suas tarefas de forma eficiente via linha de comando.
    """
    pass

@cli.command()
@click.argument('titulo')
@click.option('--prioridade', '-p', 
              type=click.Choice(['baixa', 'media', 'alta']), 
              default='media', help='üéØ Prioridade da tarefa')
@click.option('--categoria', '-c', default='geral', 
              help='üìÅ Categoria da tarefa')
@click.option('--prazo', '-d', help='üìÖ Prazo (YYYY-MM-DD)')
def add(titulo, prioridade, categoria, prazo):
    """‚ûï Adiciona uma nova tarefa."""
    
    task_id = task_manager.get_next_id()
    
    # Validar prazo se fornecido
    prazo_obj = None
    if prazo:
        try:
            prazo_obj = datetime.strptime(prazo, '%Y-%m-%d').date()
        except ValueError:
            click.echo("‚ùå Formato de data inv√°lido. Use YYYY-MM-DD", fg='red')
            return
    
    nova_tarefa = {
        'id': task_id,
        'titulo': titulo,
        'prioridade': prioridade,
        'categoria': categoria,
        'status': 'pendente',
        'criada_em': datetime.now().isoformat(),
        'prazo': prazo_obj.isoformat() if prazo_obj else None,
        'concluida_em': None
    }
    
    task_manager.tasks.append(nova_tarefa)
    task_manager.save_tasks()
    
    # Feedback colorido
    cores_prioridade = {
        'baixa': 'green',
        'media': 'yellow',
        'alta': 'red'
    }
    
    click.echo(f"‚úÖ Tarefa #{task_id} adicionada com sucesso!")
    click.echo(f"üìã T√≠tulo: {titulo}")
    click.echo(f"üéØ Prioridade: " + 
              click.style(prioridade.title(), fg=cores_prioridade[prioridade]))
    click.echo(f"üìÅ Categoria: {categoria}")
    if prazo_obj:
        click.echo(f"üìÖ Prazo: {prazo_obj.strftime('%d/%m/%Y')}")

@cli.command()
@click.option('--status', '-s', 
              type=click.Choice(['todas', 'pendente', 'concluida']),
              default='todas', help='üîç Filtrar por status')
@click.option('--categoria', '-c', help='üìÅ Filtrar por categoria')
@click.option('--formato', type=click.Choice(['tabela', 'json', 'csv']),
              default='tabela', help='üìä Formato de sa√≠da')
def list(status, categoria, formato):
    """üìã Lista tarefas com filtros opcionais."""
    
    # Filtrar tarefas
    tarefas_filtradas = task_manager.tasks
    
    if status != 'todas':
        tarefas_filtradas = [t for t in tarefas_filtradas if t['status'] == status]
    
    if categoria:
        tarefas_filtradas = [t for t in tarefas_filtradas if t['categoria'].lower() == categoria.lower()]
    
    if not tarefas_filtradas:
        click.echo("üì≠ Nenhuma tarefa encontrada com os filtros especificados")
        return
    
    # Ordenar por prioridade e data
    def priority_key(task):
        priority_order = {'alta': 3, 'media': 2, 'baixa': 1}
        return (priority_order.get(task['prioridade'], 0), task['id'])
    
    tarefas_filtradas.sort(key=priority_key, reverse=True)
    
    if formato == 'json':
        click.echo(json.dumps(tarefas_filtradas, indent=2, ensure_ascii=False, default=str))
        return
    
    if formato == 'csv':
        import csv
        import sys
        writer = csv.DictWriter(sys.stdout, fieldnames=['id', 'titulo', 'prioridade', 'categoria', 'status'])
        writer.writeheader()
        writer.writerows(tarefas_filtradas)
        return
    
    # Formato tabela
    click.echo("\\nüìã Lista de Tarefas:")
    click.echo("=" * 80)
    
    for task in tarefas_filtradas:
        # √çcones de status
        status_icon = "‚úÖ" if task['status'] == 'concluida' else "‚è≥"
        
        # Cores por prioridade
        cores_prioridade = {
            'baixa': 'green',
            'media': 'yellow', 
            'alta': 'red'
        }
        
        prioridade_colorida = click.style(
            f"[{task['prioridade'].upper()}]",
            fg=cores_prioridade[task['prioridade']]
        )
        
        # Formata√ß√£o principal
        click.echo(f"{status_icon} #{task['id']} {prioridade_colorida} {task['titulo']}")
        click.echo(f"   üìÅ {task['categoria']} | üìÖ {task['criada_em'][:10]}")
        
        # Prazo
        if task.get('prazo'):
            prazo_data = datetime.fromisoformat(task['prazo']).date()
            hoje = date.today()
            
            if prazo_data < hoje:
                click.echo(f"   ‚ö†Ô∏è Prazo vencido: {prazo_data.strftime('%d/%m/%Y')}", fg='red')
            elif prazo_data == hoje:
                click.echo(f"   üî• Prazo hoje: {prazo_data.strftime('%d/%m/%Y')}", fg='yellow')
            else:
                click.echo(f"   üìÖ Prazo: {prazo_data.strftime('%d/%m/%Y')}")
        
        # Data de conclus√£o
        if task['status'] == 'concluida' and task.get('concluida_em'):
            click.echo(f"   ‚úÖ Conclu√≠da: {task['concluida_em'][:10]}")
        
        click.echo()

@cli.command()
@click.argument('task_id', type=int)
def done(task_id):
    """‚úÖ Marca tarefa como conclu√≠da."""
    
    for task in task_manager.tasks:
        if task['id'] == task_id:
            if task['status'] == 'concluida':
                click.echo(f"‚ÑπÔ∏è Tarefa #{task_id} j√° est√° conclu√≠da", fg='yellow')
                return
            
            task['status'] = 'concluida'
            task['concluida_em'] = datetime.now().isoformat()
            task_manager.save_tasks()
            
            click.echo(f"‚úÖ Tarefa #{task_id} marcada como conclu√≠da!", fg='green')
            click.echo(f"üéâ Parab√©ns! Voc√™ completou: {task['titulo']}")
            return
    
    click.echo(f"‚ùå Tarefa #{task_id} n√£o encontrada", fg='red')

@cli.command()
@click.argument('task_id', type=int)
@click.confirmation_option(prompt='üóëÔ∏è Tem certeza que deseja deletar esta tarefa?')
def delete(task_id):
    """üóëÔ∏è Remove uma tarefa permanentemente."""
    
    tarefas_originais = len(task_manager.tasks)
    task_manager.tasks = [t for t in task_manager.tasks if t['id'] != task_id]
    
    if len(task_manager.tasks) < tarefas_originais:
        task_manager.save_tasks()
        click.echo(f"üóëÔ∏è Tarefa #{task_id} removida com sucesso!", fg='yellow')
    else:
        click.echo(f"‚ùå Tarefa #{task_id} n√£o encontrada", fg='red')'''

        self.exemplo(codigo_comandos)
        input("\n‚è≠Ô∏è Pressione ENTER para o pr√≥ximo passo...")

        # PASSO 3: Funcionalidades avan√ßadas
        self.print_section("PASSO 3: Funcionalidades Avan√ßadas", "üé¨", "warning")

        codigo_avancado = '''@cli.command()
def stats():
    """üìä Mostra estat√≠sticas detalhadas das tarefas."""
    
    if not task_manager.tasks:
        click.echo("üì≠ Nenhuma tarefa cadastrada ainda")
        return
    
    # Estat√≠sticas gerais
    total = len(task_manager.tasks)
    pendentes = len([t for t in task_manager.tasks if t['status'] == 'pendente'])
    concluidas = len([t for t in task_manager.tasks if t['status'] == 'concluida'])
    
    # Estat√≠sticas por categoria
    categorias = {}
    for task in task_manager.tasks:
        cat = task['categoria']
        if cat not in categorias:
            categorias[cat] = {'pendentes': 0, 'concluidas': 0}
        categorias[cat][task['status'] + 's'] += 1
    
    # Estat√≠sticas por prioridade (apenas pendentes)
    prioridades = {'baixa': 0, 'media': 0, 'alta': 0}
    for task in task_manager.tasks:
        if task['status'] == 'pendente':
            prioridades[task['prioridade']] += 1
    
    # Tarefas vencidas
    hoje = date.today()
    vencidas = 0
    for task in task_manager.tasks:
        if (task['status'] == 'pendente' and 
            task.get('prazo') and 
            datetime.fromisoformat(task['prazo']).date() < hoje):
            vencidas += 1
    
    # Exibir estat√≠sticas
    click.echo("\\nüìä ESTAT√çSTICAS DETALHADAS:")
    click.echo("=" * 50)
    
    click.echo(f"üìã Total de tarefas: {total}")
    click.echo(f"‚è≥ Pendentes: " + click.style(str(pendentes), fg='yellow'))
    click.echo(f"‚úÖ Conclu√≠das: " + click.style(str(concluidas), fg='green'))
    
    if total > 0:
        taxa_conclusao = (concluidas / total) * 100
        click.echo(f"üìà Taxa de conclus√£o: {taxa_conclusao:.1f}%")
    
    if vencidas > 0:
        click.echo(f"‚ö†Ô∏è Tarefas vencidas: " + click.style(str(vencidas), fg='red'))
    
    # Por categoria
    click.echo("\\nüìÅ POR CATEGORIA:")
    for categoria, stats in categorias.items():
        total_cat = stats['pendentes'] + stats['concluidas']
        click.echo(f"   {categoria}: {total_cat} total "
                  f"({stats['pendentes']} pendentes, {stats['concluidas']} conclu√≠das)")
    
    # Por prioridade
    click.echo("\\nüéØ PRIORIDADES PENDENTES:")
    for prioridade, count in prioridades.items():
        if count > 0:
            cores = {'baixa': 'green', 'media': 'yellow', 'alta': 'red'}
            click.echo(f"   {prioridade.title()}: " + 
                      click.style(str(count), fg=cores[prioridade]))

@cli.command()
@click.option('--categoria', help='üìÅ Limpar apenas uma categoria')
@click.confirmation_option(prompt='üßπ Deseja remover todas as tarefas conclu√≠das?')
def clean(categoria):
    """üßπ Remove todas as tarefas conclu√≠das."""
    
    tarefas_originais = len(task_manager.tasks)
    
    if categoria:
        task_manager.tasks = [
            t for t in task_manager.tasks 
            if not (t['status'] == 'concluida' and t['categoria'] == categoria)
        ]
        tipo = f"da categoria '{categoria}'"
    else:
        task_manager.tasks = [
            t for t in task_manager.tasks 
            if t['status'] != 'concluida'
        ]
        tipo = "de todas as categorias"
    
    removidas = tarefas_originais - len(task_manager.tasks)
    
    if removidas > 0:
        task_manager.save_tasks()
        click.echo(f"üßπ {removidas} tarefas conclu√≠das removidas {tipo}!", fg='green')
    else:
        click.echo(f"üì≠ Nenhuma tarefa conclu√≠da encontrada {tipo}")

@cli.command()
def today():
    """üìÖ Mostra tarefas com prazo para hoje."""
    
    hoje = date.today()
    tarefas_hoje = []
    
    for task in task_manager.tasks:
        if (task['status'] == 'pendente' and 
            task.get('prazo') and 
            datetime.fromisoformat(task['prazo']).date() == hoje):
            tarefas_hoje.append(task)
    
    if not tarefas_hoje:
        click.echo("üéâ Nenhuma tarefa com prazo para hoje!")
        return
    
    click.echo(f"üî• TAREFAS PARA HOJE ({hoje.strftime('%d/%m/%Y')}):")
    click.echo("=" * 50)
    
    for task in tarefas_hoje:
        cores_prioridade = {
            'baixa': 'green',
            'media': 'yellow',
            'alta': 'red'
        }
        
        prioridade_colorida = click.style(
            f"[{task['prioridade'].upper()}]",
            fg=cores_prioridade[task['prioridade']]
        )
        
        click.echo(f"‚è∞ #{task['id']} {prioridade_colorida} {task['titulo']}")
        click.echo(f"   üìÅ {task['categoria']}")
        click.echo()

@cli.command()
@click.argument('backup_file', type=click.Path())
def backup(backup_file):
    """üíæ Cria backup das tarefas."""
    
    try:
        with open(backup_file, 'w', encoding='utf-8') as f:
            json.dump({
                'backup_date': datetime.now().isoformat(),
                'tasks': task_manager.tasks
            }, f, indent=2, ensure_ascii=False, default=str)
        
        click.echo(f"üíæ Backup criado com sucesso: {backup_file}")
        click.echo(f"üìä {len(task_manager.tasks)} tarefas salvas")
        
    except Exception as e:
        click.echo(f"‚ùå Erro ao criar backup: {e}", fg='red')

@cli.command()
@click.argument('backup_file', type=click.Path(exists=True))
@click.confirmation_option(prompt='‚ö†Ô∏è Isso substituir√° todas as tarefas atuais. Continuar?')
def restore(backup_file):
    """‚ôªÔ∏è Restaura tarefas de um backup."""
    
    try:
        with open(backup_file, 'r', encoding='utf-8') as f:
            backup_data = json.load(f)
        
        task_manager.tasks = backup_data['tasks']
        task_manager.save_tasks()
        
        click.echo(f"‚ôªÔ∏è Backup restaurado com sucesso!")
        click.echo(f"üìä {len(task_manager.tasks)} tarefas restauradas")
        click.echo(f"üìÖ Backup de: {backup_data['backup_date'][:10]}")
        
    except Exception as e:
        click.echo(f"‚ùå Erro ao restaurar backup: {e}", fg='red')

if __name__ == '__main__':
    cli()'''

        self.exemplo(codigo_avancado)

        # === C√ìDIGO FINAL GERADO ===
        self.print_colored("\nüéØ C√ìDIGO FINAL COMPLETO:", "text")

        codigo_final = '''#!/usr/bin/env python3
"""
TaskManager CLI v2.0 - Gerenciador Profissional de Tarefas
Ferramenta completa para produtividade via linha de comando

Funcionalidades:
- ‚úÖ CRUD completo de tarefas
- üìä Estat√≠sticas e relat√≥rios
- üìÖ Gest√£o de prazos
- üéØ Sistema de prioridades
- üìÅ Organiza√ß√£o por categorias
- üíæ Backup e restore
- üé® Interface colorida
- üìã M√∫ltiplos formatos de sa√≠da
"""

# [C√ìDIGO COMPLETO COMBINADO DOS PASSOS ANTERIORES]
# Total: ~500 linhas de c√≥digo Python profissional'''

        self.exemplo(codigo_final)

        # === EXECU√á√ÉO DO RESULTADO ===
        self.print_section("EXEMPLOS DE USO", "üé¨", "warning")
        
        exemplos_uso = '''# Gerenciamento b√°sico
python taskmanager.py add "Estudar Python" --prioridade alta --categoria estudo
python taskmanager.py add "Comprar leite" --prioridade baixa --prazo 2024-12-31
python taskmanager.py list --status pendente
python taskmanager.py done 1

# Funcionalidades avan√ßadas  
python taskmanager.py stats                              # Estat√≠sticas
python taskmanager.py today                             # Tarefas de hoje
python taskmanager.py list --formato json               # Sa√≠da JSON
python taskmanager.py clean --categoria trabalho        # Limpeza seletiva
python taskmanager.py backup tarefas_backup.json       # Criar backup
python taskmanager.py restore tarefas_backup.json      # Restaurar backup

# Ajuda e documenta√ß√£o
python taskmanager.py --help                           # Ajuda geral
python taskmanager.py add --help                       # Ajuda espec√≠fica'''

        self.exemplo(exemplos_uso)

        # === MENSAGEM DE CONQUISTA ===
        self.print_success("üéâ PARAB√âNS! Voc√™ criou um sistema CLI profissional completo!")

        # === APLICA√á√ïES AVAN√áADAS ===
        self.print_section("PR√ìXIMOS PASSOS", "üöÄ", "info")
        proximos_passos = [
            "üåê Integra√ß√£o com APIs (Trello, Asana, Notion)",
            "üì± Sincroniza√ß√£o com aplicativos m√≥veis",
            "üîî Sistema de notifica√ß√µes por email/SMS",
            "üìä Dashboard web complementar",
            "ü§ñ Automa√ß√£o com IA para sugerir prioridades",
            "üë• Colabora√ß√£o em equipe",
            "üìà An√°lises avan√ßadas de produtividade",
            "üîê Autentica√ß√£o e m√∫ltiplos usu√°rios"
        ]
        for passo in proximos_passos:
            self.print_colored(f"‚Ä¢ {passo}", "primary")

        self.print_success("\nüèÜ CONQUISTA DESBLOQUEADA: Mestre em CLIs Profissionais!")

        # === REGISTRO DE CONCLUS√ÉO ===
        if self.progress:
            self.progress.add_points(self.mini_project_points)
            self.print_success(f"üéÅ +{self.mini_project_points} pontos pelo mini projeto!")
            
        self.complete_mini_project("TaskManager CLI Profissional")

        self.pausar()

    def exemplo(self, codigo: str) -> None:
        """Exibe exemplo de c√≥digo"""
        if self.ui:
            self.ui.code_block(codigo, "C√≥digo")
        else:
            print("\n" + "="*50)
            print("C√ìDIGO:")
            print("="*50)
            print(codigo)

    def pausar(self) -> None:
        """Pausa para o usu√°rio ler"""
        try:
            input("\nüî∏ Pressione ENTER para continuar...")
        except KeyboardInterrupt:
            pass


# Para teste standalone
if __name__ == "__main__":
    module = Modulo25TerminalCli()
    print("Teste do m√≥dulo 25 - vers√£o standalone")
    module._terminal_cli()