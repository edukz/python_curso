#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
M√≥dulo 26: Ambientes Virtuais e Depend√™ncias
Aprenda a gerenciar projetos Python de forma profissional
"""

import subprocess
import os
import sys
import shutil
from pathlib import Path
from ..shared.base_module import BaseModule


class Modulo26AmbientesVirtuais(BaseModule):
    """M√≥dulo 26: Ambientes Virtuais e Depend√™ncias"""
    
    def __init__(self):
        super().__init__("modulo_26", "Ambientes Virtuais e Depend√™ncias")
        self.has_mini_project = True
        self.mini_project_points = 85
    
    def execute(self) -> None:
        """Executa o m√≥dulo Ambientes Virtuais e Depend√™ncias"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return
        
        try:
            self._ambientes_virtuais_module()
        except Exception as e:
            self.error_handler(lambda: None)
    
    def _ambientes_virtuais_module(self) -> None:
        """Conte√∫do principal do m√≥dulo Ambientes Virtuais"""
        # === CABE√áALHO VISUAL ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üéØ M√ìDULO 26: AMBIENTES VIRTUAIS E DEPEND√äNCIAS")
        else:
            print("\n" + "="*50)
            print("üéØ M√ìDULO 26: AMBIENTES VIRTUAIS E DEPEND√äNCIAS")
            print("="*50)
        
        # === MENSAGENS MOTIVACIONAIS ===
        self.print_success("üéâ Bem-vindo ao mundo profissional do Python!")
        self.print_tip("Este m√≥dulo est√° dividido em se√ß√µes interativas. Voc√™ controla o ritmo!")
        
        # === FLUXO PRINCIPAL COM TRATAMENTO DE CTRL+C ===
        
        # 1. Sistema de navega√ß√£o por se√ß√µes
        try:
            self._navegacao_secoes_interativas()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Navega√ß√£o interrompida pelo usu√°rio. Voltando ao menu principal...")
            return
        
        # 2. Se√ß√£o de Pr√°tica Interativa
        try:
            self._secao_pratica_interativa()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è M√≥dulo interrompido pelo usu√°rio. Voltando ao menu principal...")
            return
        
        # 3. Mini Projeto Pr√°tico
        try:
            self._mini_projeto_setup_profissional()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Mini projeto interrompido. Voltando ao menu principal...")
            return
        
        # 4. Marcar m√≥dulo como completo
        self.complete_module()
    
    def _navegacao_secoes_interativas(self) -> None:
        """Sistema de navega√ß√£o por se√ß√µes do m√≥dulo"""
        
        # === DEFINI√á√ÉO DAS SE√á√ïES ===
        secoes = [
            {
                'id': 'secao_por_que_ambientes',
                'titulo': 'üéØ Por que usar Ambientes Virtuais?',
                'descricao': 'Entenda os problemas que eles resolvem',
                'funcao': self._secao_por_que_ambientes
            },
            {
                'id': 'secao_como_funciona',
                'titulo': '‚öôÔ∏è Como funcionam os ambientes virtuais?',
                'descricao': 'Veja a m√°gica por tr√°s do isolamento',
                'funcao': self._secao_como_funciona
            },
            {
                'id': 'secao_venv_pratica',
                'titulo': 'üí° venv na pr√°tica',
                'descricao': 'Aprenda a criar e usar ambientes virtuais',
                'funcao': self._secao_venv_pratica
            },
            {
                'id': 'secao_pip_maestro',
                'titulo': 'üì¶ pip - O maestro dos pacotes',
                'descricao': 'Domine o gerenciador de pacotes do Python',
                'funcao': self._secao_pip_maestro
            },
            {
                'id': 'secao_requirements',
                'titulo': 'üìã requirements.txt - A receita do projeto',
                'descricao': 'Garanta que todos usem as mesmas vers√µes',
                'funcao': self._secao_requirements
            },
            {
                'id': 'secao_ferramentas_modernas',
                'titulo': 'üöÄ Ferramentas modernas',
                'descricao': 'Poetry, Pipenv e outras maravilhas',
                'funcao': self._secao_ferramentas_modernas
            },
            {
                'id': 'secao_dicas_pro',
                'titulo': '‚≠ê Dicas profissionais',
                'descricao': 'Segredos dos desenvolvedores experientes',
                'funcao': self._secao_dicas_pro
            }
        ]
        
        secoes_visitadas = set()
        
        # === LOOP PRINCIPAL DE NAVEGA√á√ÉO ===
        while True:
            # Limpa tela e mostra cabe√ßalho
            self.ui.clear_screen() if self.ui else print("\n" + "="*50)
            self.print_section("NAVEGA√á√ÉO DO M√ìDULO", "üìö", "accent")
            self.print_colored("Escolha uma se√ß√£o para estudar:", "text")
            
            # Lista todas as se√ß√µes com status
            print()
            for i, secao in enumerate(secoes, 1):
                status = "‚úÖ" if secao['id'] in secoes_visitadas else "üìñ"
                print(f"{status} {i}. {secao['titulo']}")
                self.print_colored(f"    {secao['descricao']}", "text")
                print()
            
            print("0. üéØ Continuar para os Exerc√≠cios Pr√°ticos")
            
            # Mostra progresso visual
            progresso = len(secoes_visitadas)
            total = len(secoes)
            self.print_colored(f"\nüìä Progresso: {progresso}/{total} se√ß√µes visitadas", "info")
            
            if progresso == total:
                self.print_success("üåü Voc√™ completou todas as se√ß√µes! Est√° pronto para praticar!")
            
            # Processa escolha do usu√°rio
            try:
                escolha = input(f"\nüëâ Escolha uma se√ß√£o (1-{len(secoes)}) ou 0 para continuar: ").strip()
                
                if escolha == "0":
                    # Verifica se visitou se√ß√µes suficientes
                    if progresso >= 3:  # Pelo menos 3 se√ß√µes visitadas
                        break
                    else:
                        self.print_warning("üìö Recomendamos visitar pelo menos 3 se√ß√µes antes de continuar!")
                        continuar = input("Quer continuar mesmo assim? (s/n): ").lower()
                        if continuar in ['s', 'sim', 'yes']:
                            break
                elif escolha.isdigit() and 1 <= int(escolha) <= len(secoes):
                    # Executa se√ß√£o escolhida
                    idx = int(escolha) - 1
                    secoes[idx]['funcao']()
                    secoes_visitadas.add(secoes[idx]['id'])
                else:
                    self.print_warning(f"‚ùå Op√ß√£o inv√°lida! Digite um n√∫mero de 1 a {len(secoes)} ou 0.")
                    
            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Pulando para exerc√≠cios pr√°ticos...")
                break
            except Exception as e:
                self.print_warning(f"‚ùå Erro: {str(e)}. Tente novamente.")
    
    def _secao_por_que_ambientes(self) -> None:
        """Se√ß√£o: Por que usar Ambientes Virtuais?"""
        if self.ui:
            self.ui.clear_screen()
        
        # === CABE√áALHO ATRATIVO ===
        self.print_section("POR QUE USAR AMBIENTES VIRTUAIS?", "üéØ")
        
        # === DEFINI√á√ÉO DO CONCEITO ===
        self.print_concept(
            "Ambiente Virtual",
            "Um espa√ßo isolado onde cada projeto Python tem suas pr√≥prias depend√™ncias, sem conflitos com outros projetos"
        )
        
        # === DICA RELACIONADA ===
        self.print_tip("Pense em ambientes virtuais como apartamentos: cada projeto tem seu pr√≥prio espa√ßo!")
        
        # === ANALOGIA DO COTIDIANO ===
        self.print_colored("\nüè† ANALOGIA DO DIA A DIA:", "warning")
        self.print_colored("Imagine que voc√™ mora em uma rep√∫blica com amigos:", "text")
        self.print_colored("‚Ä¢ SEM ambientes virtuais = Todos compartilham a mesma geladeira", "text")
        self.print_colored("  - Jo√£o gosta de leite integral, Maria de desnatado", "text")
        self.print_colored("  - Conflitos inevit√°veis! Quem compra qual?", "text")
        self.print_colored("‚Ä¢ COM ambientes virtuais = Cada um tem sua mini-geladeira", "text")
        self.print_colored("  - Jo√£o tem seu leite integral, Maria seu desnatado", "text")
        self.print_colored("  - Paz e harmonia no lar! üéâ", "text")
        input("\nüî∏ Pressione ENTER para continuar...")
        
        # === PROBLEMAS REAIS ===
        self.print_colored("\nüí• PROBLEMAS SEM AMBIENTES VIRTUAIS:", "error")
        problemas = [
            "1. Projeto A precisa Django 3.0, Projeto B precisa Django 4.0",
            "2. Instalar pacotes globalmente pode quebrar ferramentas do sistema",
            "3. 'Funciona na minha m√°quina' vira pesadelo da equipe",
            "4. Dif√≠cil saber quais pacotes cada projeto usa"
        ]
        
        for i, problema in enumerate(problemas, 1):
            self.print_colored(problema, "text")
            if i < len(problemas):
                input("   ‚è≥ Pressione ENTER para o pr√≥ximo problema...")
        
        # === SOLU√á√ïES COM AMBIENTES ===
        self.print_colored("\n‚úÖ SOLU√á√ïES COM AMBIENTES VIRTUAIS:", "success")
        solucoes = [
            "‚Ä¢ Cada projeto tem suas vers√µes espec√≠ficas",
            "‚Ä¢ Sistema operacional fica protegido e limpo",
            "‚Ä¢ Mesmas vers√µes em desenvolvimento e produ√ß√£o",
            "‚Ä¢ F√°cil deletar e recriar se algo der errado"
        ]
        
        for solucao in solucoes:
            self.print_colored(solucao, "primary")
        
        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nüåç ONDE √â USADO NO MUNDO REAL:", "accent")
        aplicacoes = [
            "Netflix - Diferentes microsservi√ßos com vers√µes espec√≠ficas",
            "Instagram - Times trabalhando em features com depend√™ncias diferentes",
            "Spotify - Experimentos com bibliotecas de machine learning",
            "Startups - M√∫ltiplos MVPs com tecnologias variadas"
        ]
        for app in aplicacoes:
            self.print_colored(f"‚Ä¢ {app}", "primary")
        
        self.pausar()
    
    def _secao_como_funciona(self) -> None:
        """Se√ß√£o: Como funcionam os ambientes virtuais?"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("COMO FUNCIONAM OS AMBIENTES VIRTUAIS?", "‚öôÔ∏è", "info")
        
        # === EXPLICA√á√ÉO T√âCNICA GRADUAL ===
        self.print_colored("\nüîß A M√ÅGICA POR TR√ÅS:", "warning")
        passos = [
            "1. üìÅ Cria uma pasta especial para o projeto",
            "2. üêç Copia o Python para dentro dessa pasta",
            "3. üì¶ Instala pacotes APENAS nessa pasta",
            "4. üîÄ Redireciona comandos para usar essa pasta"
        ]
        
        for i, passo in enumerate(passos, 1):
            self.print_colored(passo, "text")
            if i < len(passos):
                input("   ‚è≥ Pressione ENTER para o pr√≥ximo passo...")
        
        # === ESTRUTURA VISUAL ===
        self.print_colored("\nüìÅ ESTRUTURA DE UM AMBIENTE VIRTUAL:", "success")
        estrutura = '''meu_projeto/
‚îú‚îÄ‚îÄ venv/                    # Pasta do ambiente virtual
‚îÇ   ‚îú‚îÄ‚îÄ bin/                # Execut√°veis (Linux/Mac)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ python         # Python isolado
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pip           # pip isolado
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ activate      # Script de ativa√ß√£o
‚îÇ   ‚îú‚îÄ‚îÄ Scripts/           # Execut√°veis (Windows)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ python.exe    # Python isolado
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pip.exe      # pip isolado
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ activate.bat # Script de ativa√ß√£o
‚îÇ   ‚îî‚îÄ‚îÄ lib/              # Bibliotecas instaladas
‚îÇ       ‚îî‚îÄ‚îÄ site-packages/ # Seus pacotes aqui!
‚îî‚îÄ‚îÄ seu_codigo.py         # Seu projeto'''
        
        self.print_colored(estrutura, "text")
        
        # === DEMONSTRA√á√ÉO PR√ÅTICA ===
        self.print_colored("\nüíª VEJA FUNCIONANDO:", "accent")
        
        # Detectar sistema operacional
        sistema = "Windows" if os.name == 'nt' else "Unix/Linux/macOS"
        
        if sistema == "Windows":
            comandos = '''# Windows
# Antes de ativar:
where python  # C:\\Python39\\python.exe

# Depois de ativar:
venv\\Scripts\\activate
where python  # C:\\projeto\\venv\\Scripts\\python.exe'''
        else:
            comandos = '''# Unix/Linux/macOS
# Antes de ativar:
which python  # /usr/bin/python3

# Depois de ativar:
source venv/bin/activate
which python  # /home/user/projeto/venv/bin/python'''
        
        self.exemplo(comandos)
        
        self.print_success("\nüéâ Agora voc√™ entende a m√°gica! √â simples e poderoso!")
        self.pausar()
    
    def _secao_venv_pratica(self) -> None:
        """Se√ß√£o: venv na pr√°tica"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("VENV NA PR√ÅTICA", "üí°", "success")
        
        self.print_concept(
            "venv",
            "Ferramenta oficial do Python para criar ambientes virtuais. Inclu√≠da desde Python 3.3!"
        )
        
        # === COMANDOS ESSENCIAIS ===
        self.print_colored("\n‚ö° COMANDOS M√ÅGICOS:", "warning")
        
        # Detectar sistema
        sistema = "Windows" if os.name == 'nt' else "Unix/Linux/macOS"
        self.print_colored(f"üìã Sistema detectado: {sistema}", "info")
        
        # === PASSO A PASSO INTERATIVO ===
        self.print_colored("\nüöÄ VAMOS CRIAR SEU PRIMEIRO AMBIENTE:", "accent")
        
        passos = [
            {
                'titulo': 'PASSO 1: Criar o ambiente',
                'comando_win': 'python -m venv meu_ambiente',
                'comando_unix': 'python3 -m venv meu_ambiente',
                'explicacao': 'Cria uma pasta "meu_ambiente" com Python isolado'
            },
            {
                'titulo': 'PASSO 2: Ativar o ambiente',
                'comando_win': 'meu_ambiente\\Scripts\\activate',
                'comando_unix': 'source meu_ambiente/bin/activate',
                'explicacao': 'Agora voc√™ est√° "dentro" do ambiente!'
            },
            {
                'titulo': 'PASSO 3: Instalar pacotes',
                'comando_win': 'pip install requests pandas',
                'comando_unix': 'pip install requests pandas',
                'explicacao': 'Pacotes instalados APENAS neste ambiente'
            },
            {
                'titulo': 'PASSO 4: Ver o que foi instalado',
                'comando_win': 'pip list',
                'comando_unix': 'pip list',
                'explicacao': 'Lista todos os pacotes do ambiente'
            },
            {
                'titulo': 'PASSO 5: Desativar quando terminar',
                'comando_win': 'deactivate',
                'comando_unix': 'deactivate',
                'explicacao': 'Volta ao Python do sistema'
            }
        ]
        
        for i, passo in enumerate(passos, 1):
            self.print_colored(f"\n{passo['titulo']}", "primary")
            
            if sistema == "Windows":
                comando = passo['comando_win']
            else:
                comando = passo['comando_unix']
            
            self.print_code_section("COMANDO", comando)
            self.print_colored(f"üí° {passo['explicacao']}", "info")
            
            if i < len(passos):
                input("\nüî∏ Pressione ENTER para o pr√≥ximo passo...")
        
        # === DICAS PROFISSIONAIS ===
        self.print_colored("\n‚≠ê DICAS DE OURO:", "warning")
        dicas = [
            "Use sempre 'venv' ou '.venv' como nome (padr√£o da comunidade)",
            "Adicione venv/ ao .gitignore (NUNCA commite o ambiente!)",
            "Crie um ambiente por projeto (n√£o compartilhe!)",
            "Documente no README como criar o ambiente"
        ]
        
        for dica in dicas:
            self.print_colored(f"‚Ä¢ {dica}", "accent")
        
        self.pausar()
    
    def _secao_pip_maestro(self) -> None:
        """Se√ß√£o: pip - O maestro dos pacotes"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("PIP - O MAESTRO DOS PACOTES", "üì¶", "info")
        
        self.print_concept(
            "pip",
            "Python Package Installer - sua porta de entrada para 400.000+ pacotes gratuitos!"
        )
        
        # === COMANDOS ESSENCIAIS ===
        self.print_colored("\nüéØ COMANDOS QUE TODO DEV USA:", "warning")
        
        comandos_essenciais = [
            {
                'titulo': 'Instalar pacote',
                'comando': 'pip install requests',
                'descricao': 'Baixa e instala o pacote requests'
            },
            {
                'titulo': 'Instalar vers√£o espec√≠fica',
                'comando': 'pip install django==3.2.0',
                'descricao': 'Instala exatamente a vers√£o 3.2.0'
            },
            {
                'titulo': 'Atualizar pacote',
                'comando': 'pip install --upgrade requests',
                'descricao': 'Atualiza para a vers√£o mais recente'
            },
            {
                'titulo': 'Remover pacote',
                'comando': 'pip uninstall requests',
                'descricao': 'Remove o pacote (pergunta confirma√ß√£o)'
            },
            {
                'titulo': 'Listar pacotes instalados',
                'comando': 'pip list',
                'descricao': 'Mostra todos os pacotes do ambiente'
            },
            {
                'titulo': 'Ver detalhes de um pacote',
                'comando': 'pip show requests',
                'descricao': 'Informa√ß√µes completas sobre o pacote'
            }
        ]
        
        for cmd in comandos_essenciais:
            self.print_colored(f"\nüíª {cmd['titulo']}:", "primary")
            self.print_code_section("", cmd['comando'])
            self.print_colored(f"‚Üí {cmd['descricao']}", "text")
        
        # === EXEMPLO PR√ÅTICO ===
        self.print_colored("\nüöÄ VAMOS VER NA PR√ÅTICA:", "success")
        exemplo_pratico = '''# Criar um projeto de web scraping
pip install requests beautifulsoup4

# Ver o que foi instalado
pip list

# Ops! Preciso de uma vers√£o espec√≠fica
pip install requests==2.28.0

# Verificar informa√ß√µes
pip show requests'''
        
        self.exemplo(exemplo_pratico)
        
        # === DICA IMPORTANTE ===
        self.print_tip("Sempre use pip DENTRO do ambiente virtual ativado!")
        
        self.pausar()
    
    def _secao_requirements(self) -> None:
        """Se√ß√£o: requirements.txt - A receita do projeto"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("REQUIREMENTS.TXT - A RECEITA DO PROJETO", "üìã", "warning")
        
        self.print_concept(
            "requirements.txt",
            "Arquivo que lista todas as depend√™ncias do projeto, como uma receita de bolo!"
        )
        
        # === ANALOGIA ===
        self.print_colored("\nüç∞ ANALOGIA DA RECEITA:", "accent")
        self.print_colored("Imagine compartilhar uma receita de bolo:", "text")
        self.print_colored("‚Ä¢ SEM requirements.txt = 'Use farinha, ovos, a√ß√∫car...'", "text")
        self.print_colored("  - Quanto de cada? Que tipo? Vai dar errado!", "text")
        self.print_colored("‚Ä¢ COM requirements.txt = '2 x√≠caras farinha, 3 ovos grandes...'", "text")
        self.print_colored("  - Receita exata! Todo mundo faz igual! üéâ", "text")
        
        # === COMO CRIAR ===
        self.print_colored("\nüìù CRIANDO SEU REQUIREMENTS.TXT:", "success")
        
        self.print_colored("\n1Ô∏è‚É£ M√©todo autom√°tico (recomendado):", "primary")
        comando_freeze = '''# Depois de instalar todos os pacotes:
pip freeze > requirements.txt

# Isso cria um arquivo com TODAS as vers√µes exatas:
requests==2.28.1
beautifulsoup4==4.11.1
certifi==2022.9.24
...'''
        self.exemplo(comando_freeze)
        
        self.print_colored("\n2Ô∏è‚É£ M√©todo manual (mais controle):", "primary")
        manual_exemplo = '''# requirements.txt
requests>=2.25.0         # Vers√£o 2.25.0 ou maior
django~=3.2.0           # Vers√£o 3.2.x (n√£o 3.3!)
pandas==1.3.5           # Exatamente esta vers√£o
beautifulsoup4          # Qualquer vers√£o (cuidado!)'''
        self.exemplo(manual_exemplo)
        
        # === USANDO REQUIREMENTS ===
        self.print_colored("\nüöÄ INSTALANDO DE REQUIREMENTS.TXT:", "info")
        uso_requirements = '''# Clone um projeto e:
cd projeto
python -m venv venv
source venv/bin/activate  # ou venv\\Scripts\\activate no Windows
pip install -r requirements.txt

# Pronto! Ambiente id√™ntico ao do desenvolvedor!'''
        self.exemplo(uso_requirements)
        
        # === ESTRUTURA PROFISSIONAL ===
        self.print_colored("\nüèóÔ∏è ESTRUTURA PROFISSIONAL:", "warning")
        estrutura_pro = '''projeto/
‚îú‚îÄ‚îÄ requirements.txt          # Depend√™ncias principais
‚îú‚îÄ‚îÄ requirements-dev.txt      # Ferramentas de desenvolvimento
‚îú‚îÄ‚îÄ requirements-test.txt     # Bibliotecas de teste
‚îî‚îÄ‚îÄ requirements-prod.txt     # Vers√µes exatas para produ√ß√£o'''
        
        self.print_colored(estrutura_pro, "text")
        
        self.print_success("\nüéâ Agora voc√™ sabe compartilhar projetos como um profissional!")
        self.pausar()
    
    def _secao_ferramentas_modernas(self) -> None:
        """Se√ß√£o: Ferramentas modernas"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("FERRAMENTAS MODERNAS", "üöÄ", "accent")
        
        self.print_colored("‚ú® O futuro do gerenciamento de depend√™ncias Python!", "text")
        
        # === POETRY ===
        self.print_colored("\nüé≠ POETRY - A estrela em ascens√£o:", "warning")
        self.print_colored("‚Ä¢ Combina pip + venv + build + publish", "text")
        self.print_colored("‚Ä¢ Um comando para tudo: poetry add requests", "text")
        self.print_colored("‚Ä¢ Lock file autom√°tico (como npm)", "text")
        self.print_colored("‚Ä¢ Resolver conflitos inteligentemente", "text")
        
        poetry_exemplo = '''# Iniciar projeto
poetry new meu-projeto

# Adicionar depend√™ncia
poetry add requests

# Instalar tudo
poetry install

# Rodar c√≥digo
poetry run python app.py'''
        self.exemplo(poetry_exemplo)
        
        # === PIPENV ===
        self.print_colored("\nüêç PIPENV - Simplicidade primeiro:", "info")
        self.print_colored("‚Ä¢ pip + venv em um s√≥ comando", "text")
        self.print_colored("‚Ä¢ Pipfile mais leg√≠vel que requirements.txt", "text")
        self.print_colored("‚Ä¢ Separa depend√™ncias de dev e produ√ß√£o", "text")
        
        pipenv_exemplo = '''# Criar ambiente e Pipfile
pipenv install requests

# Depend√™ncia de desenvolvimento
pipenv install --dev pytest

# Ativar shell
pipenv shell'''
        self.exemplo(pipenv_exemplo)
        
        # === CONDA ===
        self.print_colored("\nüî¨ CONDA - Para cientistas de dados:", "success")
        self.print_colored("‚Ä¢ Gerencia Python E outras linguagens", "text")
        self.print_colored("‚Ä¢ √ìtimo para bibliotecas cient√≠ficas", "text")
        self.print_colored("‚Ä¢ Resolve depend√™ncias complexas", "text")
        
        # === RECOMENDA√á√ïES ===
        self.print_colored("\nüéØ QUAL USAR?", "warning")
        recomendacoes = [
            "üìö Aprendendo? ‚Üí pip + venv (b√°sico e essencial)",
            "üé® Projeto novo? ‚Üí Poetry (moderno e completo)",
            "üî¨ Data Science? ‚Üí conda (ecossistema cient√≠fico)",
            "üè¢ Empresa? ‚Üí Siga o padr√£o da equipe!"
        ]
        
        for rec in recomendacoes:
            self.print_colored(f"‚Ä¢ {rec}", "primary")
        
        self.pausar()
    
    def _secao_dicas_pro(self) -> None:
        """Se√ß√£o: Dicas profissionais"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("DICAS PROFISSIONAIS", "‚≠ê", "success")
        
        self.print_colored("üèÜ Segredos dos desenvolvedores experientes!", "text")
        
        # === DICAS DE OURO ===
        dicas = [
            {
                'titulo': 'üéØ SEMPRE use ambientes virtuais',
                'explicacao': 'Mesmo para projetos pequenos. √â um h√°bito que salva vidas!',
                'exemplo': 'python -m venv venv && source venv/bin/activate'
            },
            {
                'titulo': 'üìù .gitignore √© seu amigo',
                'explicacao': 'NUNCA commite a pasta do ambiente virtual',
                'exemplo': '''# .gitignore
venv/
.venv/
env/
__pycache__/
*.pyc
.env'''
            },
            {
                'titulo': 'üîÑ Mantenha requirements.txt atualizado',
                'explicacao': 'Sempre que adicionar/remover pacotes',
                'exemplo': 'pip freeze > requirements.txt'
            },
            {
                'titulo': 'üì¶ Use vers√µes espec√≠ficas em produ√ß√£o',
                'explicacao': 'Evita surpresas desagrad√°veis',
                'exemplo': 'django==3.2.15  # n√£o use django>=3.2'
            },
            {
                'titulo': 'üöÄ Automatize com scripts',
                'explicacao': 'Crie scripts para setup r√°pido',
                'exemplo': '''#!/bin/bash
# setup.sh
python -m venv venv
source venv/bin/activate
pip install -r requirements.txt
echo "‚úÖ Ambiente pronto!"'''
            }
        ]
        
        for i, dica in enumerate(dicas, 1):
            self.print_colored(f"\n{dica['titulo']}", "warning")
            self.print_colored(f"üí° {dica['explicacao']}", "text")
            if dica['exemplo']:
                self.print_code_section("EXEMPLO", dica['exemplo'])
            
            if i < len(dicas):
                input("\nüî∏ Pressione ENTER para a pr√≥xima dica...")
        
        # === TROUBLESHOOTING ===
        self.print_colored("\nüîß PROBLEMAS COMUNS E SOLU√á√ïES:", "error")
        problemas = [
            "‚ùå 'pip: command not found' ‚Üí Ative o ambiente primeiro!",
            "‚ùå 'Permission denied' ‚Üí Use ambiente virtual, n√£o sudo",
            "‚ùå Vers√µes conflitantes ‚Üí Delete venv/ e recrie",
            "‚ùå Import error ‚Üí Pacote n√£o instalado no ambiente atual"
        ]
        
        for problema in problemas:
            self.print_colored(f"‚Ä¢ {problema}", "text")
        
        self.print_success("\nüéâ Agora voc√™ tem o conhecimento dos profissionais!")
        self.pausar()
    
    def _secao_pratica_interativa(self) -> None:
        """Se√ß√£o de pr√°tica interativa do m√≥dulo"""
        
        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_section("HORA DE PRATICAR!", "üéØ", "success")
        self.print_colored("Vamos testar o que voc√™ aprendeu com exerc√≠cios pr√°ticos!", "text")
        
        # === INSTRU√á√ïES PARA INICIANTES ===
        self.print_tip("Para iniciantes: Cada exerc√≠cio √© opcional, mas recomendamos fazer todos!")
        self.print_colored("\nüéì SOBRE OS EXERC√çCIOS:", "info")
        self.print_colored("‚Ä¢ N√£o se preocupe se errar - faz parte do aprendizado!", "text")
        self.print_colored("‚Ä¢ Voc√™ pode tentar quantas vezes quiser", "text")
        self.print_colored("‚Ä¢ Digite 'help' se precisar de ajuda", "text")
        self.print_colored("‚Ä¢ Use Ctrl+C para voltar ao menu principal se necess√°rio", "text")
        
        # === DEFINI√á√ÉO DOS EXERC√çCIOS ===
        exercicios = [
            {
                'title': 'Quiz: Conhecimentos sobre Ambientes Virtuais',
                'type': 'quiz',
                'questions': [
                    {
                        'question': 'Qual comando cria um ambiente virtual chamado "env"?',
                        'answer': ['python -m venv env', 'python3 -m venv env'],
                        'hint': 'Use o m√≥dulo venv do Python'
                    },
                    {
                        'question': 'Como ativar um ambiente virtual no Linux/Mac?',
                        'answer': ['source venv/bin/activate', 'source env/bin/activate', '. venv/bin/activate'],
                        'hint': 'Use o comando source'
                    },
                    {
                        'question': 'Qual comando gera o arquivo requirements.txt?',
                        'answer': ['pip freeze > requirements.txt', 'pip freeze>requirements.txt'],
                        'hint': 'Use pip freeze e redirecione a sa√≠da'
                    },
                    {
                        'question': 'Por que nunca devemos commitar a pasta venv?',
                        'answer': ['muito grande', 'espec√≠fica do sistema', 'pode ser recriada', 'todas'],
                        'hint': 'Pense no tamanho e portabilidade'
                    },
                    {
                        'question': 'Qual ferramenta moderna combina pip + venv + build?',
                        'answer': ['poetry', 'Poetry'],
                        'hint': '√â uma ferramenta com nome art√≠stico'
                    }
                ]
            },
            {
                'title': 'Desafio: Complete o C√≥digo',
                'type': 'code_completion',
                'exercises': [
                    {
                        'instruction': 'B√ÅSICO: Complete o comando para criar um ambiente virtual',
                        'starter': 'python -m ____ meu_projeto',
                        'solution': 'venv',
                        'type': 'simple'
                    },
                    {
                        'instruction': 'INTERMEDI√ÅRIO: Complete o comando para instalar do requirements.txt',
                        'starter': 'pip install ____ requirements.txt',
                        'solution': '-r',
                        'type': 'intermediate'
                    },
                    {
                        'instruction': 'AVAN√áADO: Complete o .gitignore para ignorar ambientes virtuais',
                        'starter': '# .gitignore\n____/\n.____/\nenv/\n__pycache__/',
                        'solution': 'venv\nvenv',
                        'type': 'advanced'
                    }
                ]
            },
            {
                'title': 'Exerc√≠cio Criativo: Crie seu Setup Script',
                'type': 'creative',
                'instruction': 'Crie um script (setup.sh ou setup.bat) que automatize a cria√ß√£o do ambiente virtual e instala√ß√£o de depend√™ncias!'
            }
        ]
        
        # === MENU PRINCIPAL DE EXERC√çCIOS ===
        while True:
            print("\nEscolha uma atividade:")
            print("1. üìù Quiz de Conhecimentos")
            print("2. üíª Complete o C√≥digo")
            print("3. üé® Exerc√≠cio Criativo")
            print("0. Continuar para o Mini Projeto")
            
            try:
                escolha = input("\nüëâ Sua escolha: ").strip().lower()
                
                if escolha in ["0", "continuar", "sair", "proximo"]:
                    break
                elif escolha in ["1", "quiz", "conhecimentos"]:
                    try:
                        self._run_quiz(exercicios[0])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Quiz interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no quiz. Continuando...")
                elif escolha in ["2", "codigo", "completar"]:
                    try:
                        self._run_code_completion(exercicios[1])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio de c√≥digo interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio de c√≥digo. Continuando...")
                elif escolha in ["3", "criativo"]:
                    try:
                        self._run_creative_exercise(exercicios[2])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio criativo interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio criativo. Continuando...")
                elif escolha in ["help", "ajuda", "h", "?"]:
                    self._show_help()
                else:
                    self.print_warning("‚ùå Op√ß√£o inv√°lida! Digite 1, 2, 3, 0 ou 'help' para ajuda.")
                    
            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Opera√ß√£o cancelada pelo usu√°rio. Voltando ao menu principal...")
                return
            except Exception as e:
                self.print_warning("‚ùå Erro inesperado no menu. Tente novamente.")
    
    def _show_help(self) -> None:
        """Mostra ajuda sobre as op√ß√µes dispon√≠veis"""
        self.print_section("AJUDA - SE√á√ÉO DE PR√ÅTICA", "‚ùì", "info")
        help_text = [
            "üìù OP√á√ÉO 1 - Quiz: Teste seus conhecimentos sobre ambientes virtuais",
            "üíª OP√á√ÉO 2 - Complete o C√≥digo: 3 exerc√≠cios progressivos",
            "üé® OP√á√ÉO 3 - Exerc√≠cio Criativo: Crie um script de automa√ß√£o",
            "üî¢ OP√á√ÉO 0 - Continue para o Mini Projeto final",
            "",
            "üí° DICAS:",
            "‚Ä¢ Voc√™ pode digitar o n√∫mero ou palavras como 'quiz', 'codigo'",
            "‚Ä¢ Digite 'help' a qualquer momento para ver esta ajuda",
            "‚Ä¢ Use Ctrl+C se quiser voltar ao menu principal",
            "‚Ä¢ Recomendamos fazer todas as atividades para aprender melhor!"
        ]
        
        for line in help_text:
            if line:
                self.print_colored(f"  {line}", "text")
            else:
                print()
        
        input("\nüî∏ Pressione ENTER para voltar ao menu...")
    
    def _run_quiz(self, quiz_data):
        """Executa o quiz interativo"""
        self.print_section(quiz_data['title'], "üìù", "info")
        
        score = 0
        total = len(quiz_data['questions'])
        
        for i, q in enumerate(quiz_data['questions'], 1):
            self.print_colored(f"\nPergunta {i}/{total}:", "warning")
            self.print_colored(q['question'], "text")
            
            while True:
                try:
                    resposta = input("\nüìù Sua resposta: ").strip().lower()
                    
                    if resposta in ["help", "ajuda", "dica"]:
                        self.print_tip(q['hint'])
                        continue
                    
                    # Verifica se a resposta est√° correta
                    respostas_corretas = [ans.lower() for ans in q['answer']]
                    if resposta in respostas_corretas or any(resposta in ans for ans in respostas_corretas):
                        self.print_success("‚úÖ Correto!")
                        score += 1
                        break
                    else:
                        self.print_warning("‚ùå N√£o est√° certo...")
                        tentar = input("Tentar novamente? (s/n): ").lower()
                        if tentar not in ['s', 'sim', 'yes']:
                            self.print_colored(f"üí° Resposta: {q['answer'][0]}", "info")
                            break
                
                except KeyboardInterrupt:
                    raise
        
        # Resultado final
        self.print_section("RESULTADO DO QUIZ", "üèÜ", "success")
        percentual = (score / total) * 100
        self.print_colored(f"Voc√™ acertou {score} de {total} quest√µes ({percentual:.0f}%)", "text")
        
        if percentual >= 80:
            self.print_success("üåü Excelente! Voc√™ domina o conte√∫do!")
        elif percentual >= 60:
            self.print_colored("üí™ Muito bom! Continue praticando!", "warning")
        else:
            self.print_colored("üìö Revise o conte√∫do e tente novamente!", "info")
        
        input("\nüî∏ Pressione ENTER para continuar...")
    
    def _run_code_completion(self, exercise_data):
        """Executa exerc√≠cios de completar c√≥digo"""
        self.print_section(exercise_data['title'], "üíª", "success")
        
        for i, exercise in enumerate(exercise_data['exercises'], 1):
            nivel = exercise['type'].upper()
            cor = {'SIMPLE': 'info', 'INTERMEDIATE': 'warning', 'ADVANCED': 'error'}.get(exercise['type'], 'text')
            
            self.print_colored(f"\n[{nivel}] {exercise['instruction']}", cor)
            self.print_code_section("C√ìDIGO INICIAL", exercise['starter'])
            
            while True:
                try:
                    resposta = input("\nüíª Complete o c√≥digo: ").strip()
                    
                    if resposta.lower() in ["help", "ajuda"]:
                        self.print_tip("Pense no que est√° faltando para o comando funcionar...")
                        continue
                    
                    if resposta.lower() == exercise['solution'].lower():
                        self.print_success("‚úÖ Perfeito!")
                        # Mostra o c√≥digo completo
                        codigo_completo = exercise['starter'].replace('____', exercise['solution'])
                        self.print_code_section("C√ìDIGO COMPLETO", codigo_completo)
                        break
                    else:
                        self.print_warning("‚ùå N√£o est√° certo...")
                        mostrar = input("Ver a resposta? (s/n): ").lower()
                        if mostrar in ['s', 'sim', 'yes']:
                            self.print_colored(f"üí° Resposta: {exercise['solution']}", "info")
                            break
                
                except KeyboardInterrupt:
                    raise
            
            if i < len(exercise_data['exercises']):
                input("\nüî∏ Pressione ENTER para o pr√≥ximo exerc√≠cio...")
        
        self.print_success("\nüéâ Exerc√≠cios de c√≥digo completados!")
        input("\nüî∏ Pressione ENTER para continuar...")
    
    def _run_creative_exercise(self, exercise_data):
        """Executa exerc√≠cio criativo"""
        self.print_section(exercise_data['title'], "üé®", "accent")
        
        self.print_colored(f"\n{exercise_data['instruction']}", "text")
        
        self.print_colored("\nüí° IDEIAS PARA SEU SCRIPT:", "warning")
        ideias = [
            "‚Ä¢ Criar ambiente virtual automaticamente",
            "‚Ä¢ Detectar sistema operacional (Windows/Linux/Mac)",
            "‚Ä¢ Instalar requirements.txt se existir",
            "‚Ä¢ Criar estrutura de pastas do projeto",
            "‚Ä¢ Mostrar mensagens coloridas de progresso",
            "‚Ä¢ Verificar se Python est√° instalado"
        ]
        
        for ideia in ideias:
            self.print_colored(ideia, "text")
        
        self.print_colored("\nüìù EXEMPLO DE IN√çCIO:", "info")
        exemplo_script = '''#!/bin/bash
echo "üöÄ Configurando projeto Python..."

# Verificar se Python est√° instalado
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python 3 n√£o encontrado!"
    exit 1
fi

# Criar ambiente virtual
echo "üì¶ Criando ambiente virtual..."
python3 -m venv venv

# Continue daqui...'''
        
        self.print_code_section("SCRIPT INICIAL", exemplo_script)
        
        input("\nüé® Use sua criatividade! Pressione ENTER quando terminar...")
        
        self.print_success("üéâ √ìtimo trabalho! Scripts de automa√ß√£o economizam muito tempo!")
        
        # Mostra um exemplo completo
        mostrar = input("\nQuer ver um exemplo completo? (s/n): ").lower()
        if mostrar in ['s', 'sim', 'yes']:
            self._mostrar_script_completo()
        
        input("\nüî∏ Pressione ENTER para continuar...")
    
    def _mostrar_script_completo(self):
        """Mostra exemplo de script completo"""
        script_completo = '''#!/bin/bash
# setup.sh - Script de setup autom√°tico

set -e  # Para se houver erro

echo "üöÄ Configurando projeto Python..."

# Cores para output
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'

# Verificar Python
if ! command -v python3 &> /dev/null; then
    echo -e "${RED}‚ùå Python 3 n√£o encontrado!${NC}"
    exit 1
fi

# Criar ambiente virtual
echo "üì¶ Criando ambiente virtual..."
python3 -m venv venv

# Ativar ambiente
echo "üîë Ativando ambiente..."
source venv/bin/activate

# Atualizar pip
echo "‚¨ÜÔ∏è Atualizando pip..."
pip install --upgrade pip

# Instalar depend√™ncias se existir requirements.txt
if [ -f requirements.txt ]; then
    echo "üìö Instalando depend√™ncias..."
    pip install -r requirements.txt
else
    echo "‚ö†Ô∏è requirements.txt n√£o encontrado"
fi

# Criar estrutura de pastas
echo "üìÅ Criando estrutura do projeto..."
mkdir -p src tests docs

# Criar .gitignore se n√£o existir
if [ ! -f .gitignore ]; then
    echo "üìù Criando .gitignore..."
    cat > .gitignore << EOF
venv/
.venv/
__pycache__/
*.pyc
.env
.DS_Store
.idea/
.vscode/
EOF
fi

echo -e "${GREEN}‚úÖ Setup completo!${NC}"
echo "üéØ Para ativar o ambiente: source venv/bin/activate"'''
        
        self.print_code_section("SCRIPT COMPLETO", script_completo)
    
    def _mini_projeto_setup_profissional(self) -> None:
        """Mini Projeto - Setup Profissional de Projeto Python"""
        
        # === CABE√áALHO IMPACTANTE ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üéØ MINI PROJETO: SETUP PROFISSIONAL DE PROJETO")
        else:
            print("\n" + "="*50)
            print("üéØ MINI PROJETO: SETUP PROFISSIONAL DE PROJETO")
            print("="*50)
        
        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_success("üéâ Vamos criar um setup completo e profissional para seus projetos Python!")
        
        self.print_concept(
            "Setup Profissional",
            "Uma estrutura organizada com ambientes virtuais, depend√™ncias gerenciadas e automa√ß√£o completa"
        )
        
        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nEste tipo de setup √© usado por:", "text")
        usos_praticos = [
            "Netflix - Para padronizar todos os microsservi√ßos",
            "Spotify - Garantir que todos os devs tenham o mesmo ambiente",
            "Instagram - Facilitar onboarding de novos desenvolvedores",
            "Startups - Economizar tempo e evitar problemas de configura√ß√£o"
        ]
        for uso in usos_praticos:
            self.print_colored(f"‚Ä¢ {uso}", "accent")
        
        # === DESENVOLVIMENTO PASSO A PASSO ===
        
        # PASSO 1: Estrutura do projeto
        self.print_section("PASSO 1: ESTRUTURA DO PROJETO", "üìÅ", "info")
        self.print_tip("Uma boa estrutura √© a base de todo projeto profissional!")
        
        try:
            nome_projeto = input("\nüìù Nome do seu projeto (ex: meu_app): ").strip() or "meu_projeto"
            
            estrutura = f'''{nome_projeto}/
‚îú‚îÄ‚îÄ .gitignore              # Arquivos para ignorar no git
‚îú‚îÄ‚îÄ README.md               # Documenta√ß√£o do projeto
‚îú‚îÄ‚îÄ requirements.txt        # Depend√™ncias do projeto
‚îú‚îÄ‚îÄ requirements-dev.txt    # Depend√™ncias de desenvolvimento
‚îú‚îÄ‚îÄ setup.py               # Configura√ß√£o do pacote
‚îú‚îÄ‚îÄ src/                   # C√≥digo fonte
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îî‚îÄ‚îÄ main.py
‚îú‚îÄ‚îÄ tests/                 # Testes
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îî‚îÄ‚îÄ test_main.py
‚îú‚îÄ‚îÄ docs/                  # Documenta√ß√£o
‚îÇ   ‚îî‚îÄ‚îÄ README.md
‚îî‚îÄ‚îÄ scripts/               # Scripts √∫teis
    ‚îî‚îÄ‚îÄ setup.sh          # Script de setup'''
            
            self.print_colored("\nüìÅ Estrutura criada:", "success")
            self.print_colored(estrutura, "text")
            
        except KeyboardInterrupt:
            self.print_warning("Projeto cancelado pelo usu√°rio")
            return
        
        # PASSO 2: Arquivos essenciais
        self.print_section("PASSO 2: ARQUIVOS ESSENCIAIS", "üìù", "success")
        self.print_colored("Vamos criar os arquivos fundamentais:", "text")
        
        # .gitignore
        self.print_colored("\n1Ô∏è‚É£ .gitignore - Para n√£o commitar o que n√£o deve:", "primary")
        gitignore_content = '''# Ambientes virtuais
venv/
.venv/
env/
ENV/

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python

# IDEs
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Env files
.env
.env.local

# Testing
.pytest_cache/
.coverage
htmlcov/

# Distribution
dist/
build/
*.egg-info/'''
        
        self.exemplo(gitignore_content)
        
        # README.md
        self.print_colored("\n2Ô∏è‚É£ README.md - Documenta√ß√£o principal:", "primary")
        readme_content = f'''# {nome_projeto.title()}

Descri√ß√£o breve do que o projeto faz.

## üöÄ Quick Start

```bash
# Clone o reposit√≥rio
git clone https://github.com/seu-usuario/{nome_projeto}.git
cd {nome_projeto}

# Execute o setup autom√°tico
chmod +x scripts/setup.sh
./scripts/setup.sh

# Ou setup manual:
python -m venv venv
source venv/bin/activate  # Linux/Mac
# venv\\Scripts\\activate  # Windows
pip install -r requirements.txt
```

## üìã Requisitos

- Python 3.8+
- pip

## üõ†Ô∏è Desenvolvimento

```bash
# Instalar depend√™ncias de dev
pip install -r requirements-dev.txt

# Executar testes
pytest

# Executar linter
flake8 src/

# Executar formatador
black src/
```

## üì¶ Estrutura

```
{nome_projeto}/
‚îú‚îÄ‚îÄ src/        # C√≥digo fonte
‚îú‚îÄ‚îÄ tests/      # Testes
‚îú‚îÄ‚îÄ docs/       # Documenta√ß√£o
‚îî‚îÄ‚îÄ scripts/    # Scripts √∫teis
```

## ü§ù Contribuindo

1. Fork o projeto
2. Crie sua branch (`git checkout -b feature/MinhaFeature`)
3. Commit suas mudan√ßas (`git commit -m 'Add MinhaFeature'`)
4. Push para a branch (`git push origin feature/MinhaFeature`)
5. Abra um Pull Request

## üìÑ Licen√ßa

Este projeto est√° sob a licen√ßa MIT.'''
        
        self.print_code_section("README.md", readme_content[:500] + "\n...")
        
        # PASSO 3: Script de automa√ß√£o
        self.print_section("PASSO 3: SCRIPT DE AUTOMA√á√ÉO", "üîß", "warning")
        
        self.print_colored("Criando script de setup autom√°tico:", "text")
        
        setup_script = '''#!/bin/bash
# scripts/setup.sh - Setup autom√°tico do projeto

set -e  # Para se houver erro

echo "üöÄ Configurando projeto..."

# Verificar Python
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python 3 n√£o encontrado!"
    exit 1
fi

# Criar ambiente virtual
echo "üì¶ Criando ambiente virtual..."
python3 -m venv venv

# Ativar ambiente
echo "üîë Ativando ambiente..."
if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
    # Windows
    source venv/Scripts/activate
else
    # Unix/Linux/macOS
    source venv/bin/activate
fi

# Atualizar pip
echo "‚¨ÜÔ∏è Atualizando pip..."
python -m pip install --upgrade pip

# Instalar depend√™ncias
if [ -f requirements.txt ]; then
    echo "üìö Instalando depend√™ncias..."
    pip install -r requirements.txt
fi

if [ -f requirements-dev.txt ]; then
    echo "üõ†Ô∏è Instalando depend√™ncias de desenvolvimento..."
    pip install -r requirements-dev.txt
fi

# Criar estrutura se n√£o existir
echo "üìÅ Verificando estrutura..."
mkdir -p src tests docs

echo "‚úÖ Setup completo!"
echo "üéØ Para ativar o ambiente:"
echo "   Linux/Mac: source venv/bin/activate"
echo "   Windows: venv\\Scripts\\activate"'''
        
        self.exemplo(setup_script)
        
        # === C√ìDIGO FINAL GERADO ===
        self.print_colored("\nAqui est√° o c√≥digo completo do arquivo principal:", "text")
        
        codigo_final = f'''# üêç PROJETO: {nome_projeto.upper()}
# src/main.py

"""
{nome_projeto.title()} - Aplica√ß√£o Python profissional
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

# Configura√ß√µes
PROJECT_ROOT = Path(__file__).parent.parent
VERSION = "0.1.0"


def main():
    """Fun√ß√£o principal da aplica√ß√£o"""
    print(f"üöÄ {nome_projeto.title()} v{VERSION}")
    print(f"üìÅ Rodando de: {PROJECT_ROOT}")
    
    # Verificar ambiente
    if os.getenv("DEBUG", "False").lower() == "true":
        print("üîç Modo DEBUG ativado")
    
    # Sua l√≥gica aqui
    print("‚ú® Aplica√ß√£o iniciada com sucesso!")
    

if __name__ == "__main__":
    main()'''
        
        self.exemplo(codigo_final)
        
        # === EXECU√á√ÉO DO RESULTADO ===
        self.print_section("RESULTADO FINAL", "üé¨", "warning")
        
        # Simular execu√ß√£o
        print(f"üöÄ {nome_projeto.title()} v0.1.0")
        print(f"üìÅ Rodando de: /caminho/para/{nome_projeto}")
        print("‚ú® Aplica√ß√£o iniciada com sucesso!")
        
        # === MENSAGEM DE CONQUISTA ===
        self.print_success(f"\nüéâ PARAB√âNS! Voc√™ criou um setup profissional para {nome_projeto}!")
        
        # === APLICA√á√ïES AVAN√áADAS ===
        self.print_section("PR√ìXIMOS PASSOS", "üöÄ", "info")
        proximos_passos = [
            "Adicionar testes automatizados com pytest",
            "Configurar CI/CD com GitHub Actions",
            "Adicionar pre-commit hooks para qualidade",
            "Configurar Docker para deploy",
            "Implementar logging profissional",
            "Adicionar type hints e mypy"
        ]
        for passo in proximos_passos:
            self.print_colored(f"‚Ä¢ {passo}", "primary")
        
        self.print_success("\nüèÜ CONQUISTA DESBLOQUEADA: Arquiteto de Projetos Python!")
        
        # === REGISTRO DE CONCLUS√ÉO ===
        self.complete_mini_project("Setup Profissional de Projeto")
        
        self.pausar()