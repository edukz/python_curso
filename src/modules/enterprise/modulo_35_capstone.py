#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
M√≥dulo 35: Capstone Project - Projeto Final Integrado
O projeto definitivo que integra todos os conceitos do curso em uma aplica√ß√£o enterprise completa
"""

from abc import ABC, abstractmethod
from typing import List, Dict, Optional, Any, Protocol, Union
from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
import uuid
import time
import json
from ..shared.base_module import BaseModule


class Modulo35Capstone(BaseModule):
    """M√≥dulo 35: Capstone Project - Projeto Final Integrado"""
    
    def __init__(self):
        super().__init__("modulo_35", "Capstone Project - Projeto Final")
        self.has_mini_project = True
        self.mini_project_points = 200  # Pontua√ß√£o m√°xima!
    
    def execute(self) -> None:
        """Executa o m√≥dulo Capstone Project"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return
        
        try:
            self._capstone_principal()
        except Exception as e:
            self.error_handler(lambda: None)
    
    def _capstone_principal(self) -> None:
        """Conte√∫do principal do m√≥dulo Capstone Project"""
        # === CABE√áALHO VISUAL ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üéì M√ìDULO 35: CAPSTONE PROJECT - PROJETO FINAL")
        else:
            print("\n" + "="*50)
            print("üéì M√ìDULO 35: CAPSTONE PROJECT - PROJETO FINAL")
            print("="*50)
        
        # === MENSAGENS MOTIVACIONAIS ===
        self.print_success("üéì PARAB√âNS! Voc√™ chegou ao projeto FINAL do curso! Vamos integrar TODOS os conceitos aprendidos!")
        self.print_tip("Este m√≥dulo est√° dividido em se√ß√µes interativas. Voc√™ controla o ritmo!")
        
        # === FLUXO PRINCIPAL COM TRATAMENTO DE CTRL+C ===
        
        # 1. Sistema de navega√ß√£o por se√ß√µes
        try:
            self._navegacao_secoes_interativas()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Navega√ß√£o interrompida pelo usu√°rio. Voltando ao menu principal...")
            return
        
        # 2. Se√ß√£o de Pr√°tica Interativa
        try:
            self._secao_pratica_interativa()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è M√≥dulo interrompido pelo usu√°rio. Voltando ao menu principal...")
            return
        
        # 3. Mini Projeto Pr√°tico
        try:
            self._mini_projeto_cloudcorp_platform()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Mini projeto interrompido. Voltando ao menu principal...")
            return
        
        # 4. Marcar m√≥dulo como completo
        self.complete_module()
    
    def _navegacao_secoes_interativas(self) -> None:
        """Sistema de navega√ß√£o por se√ß√µes do m√≥dulo"""
        
        # === DEFINI√á√ÉO DAS SE√á√ïES ===
        secoes = [
            {
                'id': 'secao_visao_projeto',
                'titulo': 'üéØ Vis√£o Geral do Projeto Final',
                'descricao': 'Conhe√ßa o CloudCorp Enterprise Platform',
                'funcao': self._secao_visao_projeto
            },
            {
                'id': 'secao_arquitetura_enterprise',
                'titulo': 'üèóÔ∏è Arquitetura Enterprise',
                'descricao': 'Clean Architecture + Design Patterns',
                'funcao': self._secao_arquitetura_enterprise
            },
            {
                'id': 'secao_integracao_conceitos',
                'titulo': 'üîó Integra√ß√£o de Todos os Conceitos',
                'descricao': 'Como tudo se conecta no projeto final',
                'funcao': self._secao_integracao_conceitos
            },
            {
                'id': 'secao_desenvolvimento_fases',
                'titulo': 'üìÖ Desenvolvimento em Fases',
                'descricao': 'Roadmap do MVP ao Enterprise',
                'funcao': self._secao_desenvolvimento_fases
            },
            {
                'id': 'secao_tecnologias_stack',
                'titulo': 'üíª Stack Tecnol√≥gico Completo',
                'descricao': 'Todas as tecnologias integradas',
                'funcao': self._secao_tecnologias_stack
            },
            {
                'id': 'secao_devops_deploy',
                'titulo': 'üöÄ DevOps e Deploy Enterprise',
                'descricao': 'Kubernetes, CI/CD e Monitoramento',
                'funcao': self._secao_devops_deploy
            },
            {
                'id': 'secao_resultado_final',
                'titulo': 'üèÜ Resultado Final e Pr√≥ximos Passos',
                'descricao': 'Sua jornada como desenvolvedor expert',
                'funcao': self._secao_resultado_final
            }
        ]
        
        secoes_visitadas = set()
        
        # === LOOP PRINCIPAL DE NAVEGA√á√ÉO ===
        while True:
            # Limpa tela e mostra cabe√ßalho
            self.ui.clear_screen() if self.ui else print("\n" + "="*50)
            self.print_section("NAVEGA√á√ÉO DO CAPSTONE PROJECT", "üéì", "accent")
            self.print_colored("Escolha uma se√ß√£o para estudar:", "text")
            
            # Lista todas as se√ß√µes com status
            print()
            for i, secao in enumerate(secoes, 1):
                status = "‚úÖ" if secao['id'] in secoes_visitadas else "üìñ"
                print(f"{status} {i}. {secao['titulo']}")
                self.print_colored(f"    {secao['descricao']}", "text")
                print()
            
            print("0. üéØ Continuar para os Exerc√≠cios Pr√°ticos")
            
            # Mostra progresso visual
            progresso = len(secoes_visitadas)
            total = len(secoes)
            self.print_colored(f"\nüìä Progresso: {progresso}/{total} se√ß√µes visitadas", "info")
            
            if progresso == total:
                self.print_success("üåü Voc√™ completou todas as se√ß√µes! Est√° pronto para o projeto final!")
            
            # Processa escolha do usu√°rio
            try:
                escolha = input(f"\nüëâ Escolha uma se√ß√£o (1-{len(secoes)}) ou 0 para continuar: ").strip()
                
                if escolha == "0":
                    # Verifica se visitou se√ß√µes suficientes
                    if progresso >= 4:  # Pelo menos 4 se√ß√µes visitadas
                        break
                    else:
                        self.print_warning("üìö Recomendamos visitar pelo menos 4 se√ß√µes antes de continuar!")
                        continuar = input("Quer continuar mesmo assim? (s/n): ").lower()
                        if continuar in ['s', 'sim', 'yes']:
                            break
                elif escolha.isdigit() and 1 <= int(escolha) <= len(secoes):
                    # Executa se√ß√£o escolhida
                    idx = int(escolha) - 1
                    secoes[idx]['funcao']()
                    secoes_visitadas.add(secoes[idx]['id'])
                else:
                    self.print_warning(f"‚ùå Op√ß√£o inv√°lida! Digite um n√∫mero de 1 a {len(secoes)} ou 0.")
            
            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Pulando para exerc√≠cios pr√°ticos...")
                break
            except Exception as e:
                self.print_warning(f"‚ùå Erro: {str(e)}. Tente novamente.")
    
    def _secao_visao_projeto(self) -> None:
        """Se√ß√£o: Vis√£o Geral do Projeto Final"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("VIS√ÉO GERAL DO PROJETO FINAL", "üéØ")
        
        self.print_concept(
            "CloudCorp Enterprise Platform",
            "Uma plataforma SaaS completa que integra TODOS os conceitos aprendidos no curso em uma aplica√ß√£o de n√≠vel enterprise"
        )
        
        self.print_tip("Este projeto demonstra sua evolu√ß√£o de iniciante a desenvolvedor expert!")
        
        self.print_colored("\\nüè† ANALOGIA DO DIA A DIA:", "warning")
        self.print_colored("√â como construir uma cidade completa depois de aprender a fazer tijolos, paredes, portas e janelas - agora voc√™ junta tudo em uma obra-prima!", "text")
        input("\\nüî∏ Pressione ENTER para continuar...")
        
        self.print_colored("\\nüîß COMO FUNCIONA NA PR√ÅTICA:", "info")
        passos_tecnicos = [
            "1. Integra todos os 34 m√≥dulos anteriores em um sistema √∫nico",
            "2. Aplica arquitetura enterprise com Clean Architecture",
            "3. Usa padr√µes de design profissionais em produ√ß√£o",
            "4. Implementa DevOps completo com deploy autom√°tico"
        ]
        
        for i, passo in enumerate(passos_tecnicos, 1):
            self.print_colored(passo, "text")
            if i < len(passos_tecnicos):
                input("   ‚è≥ Pressione ENTER para o pr√≥ximo passo...")
        
        self.print_colored("\\nüåç ONDE √â USADO NO MUNDO REAL:", "accent")
        aplicacoes = [
            "Startups unic√≥rnios como Notion, Slack, Stripe",
            "Empresas Fortune 500 para gest√£o interna",
            "Ag√™ncias digitais para clientes enterprise",
            "Consultores para projetos de transforma√ß√£o digital"
        ]
        for app in aplicacoes:
            self.print_colored(f"‚Ä¢ {app}", "primary")
        
        self.pausar()
    
    def _secao_arquitetura_enterprise(self) -> None:
        """Se√ß√£o: Arquitetura Enterprise"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("ARQUITETURA ENTERPRISE", "üèóÔ∏è")
        
        self.print_concept(
            "Clean Architecture + Hexagonal",
            "Uma arquitetura que separa completamente a l√≥gica de neg√≥cio da infraestrutura, permitindo que o c√≥digo seja test√°vel, flex√≠vel e escal√°vel"
        )
        
        self.print_tip("Esta arquitetura √© usada por gigantes como Netflix, Uber e Amazon!")
        
        self.print_colored("\nüè† ANALOGIA DO DIA A DIA:", "warning")
        self.print_colored("√â como um pr√©dio bem planejado: funda√ß√£o s√≥lida (dom√≠nio), estrutura (casos de uso), acabamento (interface) e instala√ß√µes (infraestrutura) - cada parte tem sua responsabilidade!", "text")
        input("\nüî∏ Pressione ENTER para continuar...")
        
        codigo_exemplo = '''# Exemplo de Clean Architecture em a√ß√£o
from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import List, Optional
import uuid

# === CAMADA DE DOM√çNIO ===
@dataclass
class User:
    """Entidade de dom√≠nio - regras de neg√≥cio puras"""
    id: uuid.UUID
    email: str
    name: str
    
    def is_valid_email(self) -> bool:
        return "@" in self.email and "." in self.email

# === CAMADA DE APLICA√á√ÉO ===
class IUserRepository(ABC):
    """Interface do reposit√≥rio - n√£o depende de infraestrutura"""
    @abstractmethod
    async def save(self, user: User) -> User:
        pass
    
    @abstractmethod
    async def find_by_email(self, email: str) -> Optional[User]:
        pass

class CreateUserUseCase:
    """Caso de uso - orquestra a l√≥gica de neg√≥cio"""
    def __init__(self, user_repo: IUserRepository):
        self.user_repo = user_repo
    
    async def execute(self, email: str, name: str) -> User:
        # Valida√ß√µes de neg√≥cio
        if await self.user_repo.find_by_email(email):
            raise ValueError("Email j√° existe")
        
        # Criar entidade
        user = User(id=uuid.uuid4(), email=email, name=name)
        
        if not user.is_valid_email():
            raise ValueError("Email inv√°lido")
        
        # Persistir
        return await self.user_repo.save(user)

# === CAMADA DE INFRAESTRUTURA ===
class PostgreSQLUserRepository(IUserRepository):
    """Implementa√ß√£o espec√≠fica - pode ser trocada facilmente"""
    async def save(self, user: User) -> User:
        # C√≥digo do PostgreSQL aqui
        return user
    
    async def find_by_email(self, email: str) -> Optional[User]:
        # Query no PostgreSQL aqui
        return None

# === CAMADA DE APRESENTA√á√ÉO ===
# FastAPI, Flask, Django, etc.
from fastapi import FastAPI, HTTPException

app = FastAPI()

@app.post("/users")
async def create_user_endpoint(email: str, name: str):
    # Dependency Injection
    user_repo = PostgreSQLUserRepository()
    use_case = CreateUserUseCase(user_repo)
    
    try:
        user = await use_case.execute(email, name)
        return {"id": str(user.id), "email": user.email, "name": user.name}
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))

print("üèóÔ∏è VANTAGENS DA CLEAN ARCHITECTURE:")
print("‚úÖ Testabilidade - f√°cil de testar cada camada")
print("‚úÖ Flexibilidade - trocar banco sem afetar regras")
print("‚úÖ Manutenibilidade - c√≥digo organizado e limpo")
print("‚úÖ Escalabilidade - f√°cil adicionar novas features")
print("‚úÖ Independ√™ncia - n√£o depende de frameworks")
'''
        
        self.print_code_section("EXEMPLO PR√ÅTICO", codigo_exemplo)
        self.executar_codigo(codigo_exemplo)
        
        self.print_colored("\nüåç ONDE √â USADO NO MUNDO REAL:", "accent")
        aplicacoes = [
            "Netflix - para gerenciar bilh√µes de streams",
            "Uber - para coordenar milh√µes de corridas",
            "Amazon - para processar milh√µes de pedidos",
            "Google - para indexar toda a internet"
        ]
        for app in aplicacoes:
            self.print_colored(f"‚Ä¢ {app}", "primary")
        
        self.pausar()
    
    def _secao_integracao_conceitos(self) -> None:
        """Se√ß√£o: Integra√ß√£o de Todos os Conceitos"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("INTEGRA√á√ÉO DE TODOS OS CONCEITOS", "üîó")
        
        self.print_concept(
            "Sinergismo dos M√≥dulos",
            "Como todos os 34 m√≥dulos anteriores trabalham juntos para criar uma aplica√ß√£o enterprise completa e profissional"
        )
        
        self.print_tip("√â aqui que voc√™ v√™ que Python n√£o √© s√≥ uma linguagem - √© um ecossistema completo!")
        
        # Mapeamento dos m√≥dulos
        modulos_mapeamento = {
            "B√°sicos (1-11)": [
                "Vari√°veis e tipos ‚Üí Estado da aplica√ß√£o",
                "Condi√ß√µes ‚Üí L√≥gica de neg√≥cio",
                "Loops ‚Üí Processamento em lote",
                "Listas ‚Üí Cole√ß√µes de dados",
                "Fun√ß√µes ‚Üí Casos de uso",
                "Dicion√°rios ‚Üí Configura√ß√µes e cache"
            ],
            "Avan√ßados (12-23)": [
                "OOP ‚Üí Modelagem de dom√≠nio",
                "Decorators ‚Üí Middleware e aspectos",
                "Geradores ‚Üí Streaming de dados",
                "Regex ‚Üí Valida√ß√£o de entrada",
                "Debugging ‚Üí Monitoramento e logs",
                "Exce√ß√µes ‚Üí Tratamento de erros"
            ],
            "Essenciais (24-30)": [
                "APIs ‚Üí Interface externa",
                "Testes ‚Üí Qualidade e confiabilidade",
                "Performance ‚Üí Otimiza√ß√£o e cache",
                "Async ‚Üí Concorr√™ncia e escala",
                "Seguran√ßa ‚Üí Prote√ß√£o e compliance"
            ],
            "Enterprise (31-35)": [
                "Design Patterns ‚Üí Arquitetura s√≥lida",
                "Clean Architecture ‚Üí Organiza√ß√£o",
                "DevOps ‚Üí Deploy e opera√ß√£o",
                "Database Design ‚Üí Persist√™ncia",
                "Capstone ‚Üí Integra√ß√£o total"
            ]
        }
        
        for categoria, conceitos in modulos_mapeamento.items():
            self.print_colored(f"\nüìö {categoria}:", "warning")
            for conceito in conceitos:
                self.print_colored(f"  ‚Ä¢ {conceito}", "text")
            input("   ‚è≥ Pressione ENTER para a pr√≥xima categoria...")
        
        self.print_colored("\nüåç RESULTADO FINAL NO MUNDO REAL:", "accent")
        resultados = [
            "Sistema que processa 100,000+ usu√°rios simult√¢neos",
            "API que responde em menos de 200ms",
            "Database otimizado para TBs de dados",
            "Deploy autom√°tico com zero downtime",
            "Monitoramento 24/7 com alertas inteligentes"
        ]
        for resultado in resultados:
            self.print_colored(f"‚Ä¢ {resultado}", "primary")
        
        self.pausar()
    
    def _secao_desenvolvimento_fases(self) -> None:
        """Se√ß√£o: Desenvolvimento em Fases"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("DESENVOLVIMENTO EM FASES", "üìÖ")
        
        self.print_concept(
            "Roadmap Estrat√©gico",
            "Como construir uma aplica√ß√£o enterprise de forma incremental, do MVP √† solu√ß√£o completa em 20 semanas"
        )
        
        fases = {
            "Fase 1 - MVP (4 semanas)": [
                "Setup inicial e autentica√ß√£o",
                "CRUD b√°sico de usu√°rios",
                "Multi-tenancy simples",
                "Deploy b√°sico com Docker"
            ],
            "Fase 2 - Features (6 semanas)": [
                "Sistema financeiro",
                "CRM e gest√£o de clientes",
                "Analytics em tempo real",
                "Notifica√ß√µes e email"
            ],
            "Fase 3 - Escala (4 semanas)": [
                "Cache distribu√≠do",
                "Otimiza√ß√£o de performance",
                "Kubernetes e auto-scaling",
                "Monitoramento avan√ßado"
            ],
            "Fase 4 - Enterprise (6 semanas)": [
                "SSO e autentica√ß√£o avan√ßada",
                "API GraphQL",
                "Mobile app",
                "Compliance e auditoria"
            ]
        }
        
        for fase, features in fases.items():
            self.print_colored(f"\nüöÄ {fase}:", "warning")
            for feature in features:
                self.print_colored(f"  ‚úÖ {feature}", "text")
            input("   ‚è≥ Pressione ENTER para a pr√≥xima fase...")
        
        self.pausar()
    
    def _secao_tecnologias_stack(self) -> None:
        """Se√ß√£o: Stack Tecnol√≥gico Completo"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("STACK TECNOL√ìGICO COMPLETO", "üíª")
        
        self.print_concept(
            "Full Stack Enterprise",
            "Todas as tecnologias modernas trabalhando em harmonia para criar uma solu√ß√£o de classe mundial"
        )
        
        stack = {
            "Backend üêç": [
                "Python 3.11+ (FastAPI, SQLAlchemy)",
                "PostgreSQL 15 + Redis 7",
                "Pydantic v2 para valida√ß√£o",
                "Celery para tarefas ass√≠ncronas"
            ],
            "Frontend ‚öõÔ∏è": [
                "React 18 + TypeScript",
                "Next.js 14 (SSR/SSG)",
                "TailwindCSS + Shadcn/ui",
                "TanStack Query (estado)"
            ],
            "DevOps üöÄ": [
                "Docker + Kubernetes",
                "GitHub Actions (CI/CD)",
                "Prometheus + Grafana",
                "ELK Stack (logs)"
            ],
            "Cloud ‚òÅÔ∏è": [
                "AWS/Azure/GCP",
                "Terraform (IaC)",
                "CDN global",
                "Auto-scaling"
            ]
        }
        
        for categoria, tecnologias in stack.items():
            self.print_colored(f"\n{categoria}:", "warning")
            for tech in tecnologias:
                self.print_colored(f"  ‚Ä¢ {tech}", "text")
            input("   ‚è≥ Pressione ENTER para a pr√≥xima categoria...")
        
        self.pausar()
    
    def _secao_devops_deploy(self) -> None:
        """Se√ß√£o: DevOps e Deploy Enterprise"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("DEVOPS E DEPLOY ENTERPRISE", "üöÄ")
        
        self.print_concept(
            "CI/CD Profissional",
            "Pipeline completo que automatiza testes, build, deploy e monitoramento com zero downtime e rollback autom√°tico"
        )
        
        pipeline_exemplo = '''# Pipeline CI/CD Enterprise
name: Production Deploy

on:
  push:
    branches: [main]
    tags: ['v*']

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Run tests
      run: |
        pytest backend/tests/ --cov=80%
        npm test frontend/
  
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Security scan
      uses: aquasecurity/trivy-action@master
  
  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    steps:
    - name: Build Docker images
      run: |
        docker build -t cloudcorp/backend:${{ github.sha }} .
        docker push cloudcorp/backend:${{ github.sha }}
  
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Deploy to Kubernetes
      run: |
        kubectl set image deployment/backend \
          backend=cloudcorp/backend:${{ github.sha }}
        kubectl rollout status deployment/backend
  
  monitor:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
    - name: Health check
      run: |
        curl -f https://api.cloudcorp.com/health
        # Alertas autom√°ticos se falhar

print("üöÄ BENEFITS DO CI/CD ENTERPRISE:")
print("‚ö° Deploy em segundos, n√£o horas")
print("üîí Zero chance de deploy quebrado")
print("üìä Monitoramento em tempo real")
print("üîÑ Rollback autom√°tico se algo falhar")
print("üéØ 99.9% uptime garantido")
'''
        
        self.print_code_section("PIPELINE EXEMPLO", pipeline_exemplo)
        self.executar_codigo(pipeline_exemplo)
        
        self.pausar()
    
    def _secao_resultado_final(self) -> None:
        """Se√ß√£o: Resultado Final e Pr√≥ximos Passos"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("RESULTADO FINAL E PR√ìXIMOS PASSOS", "üèÜ")
        
        self.print_concept(
            "Desenvolvedor Expert",
            "Voc√™ n√£o √© mais um iniciante - √© um arquiteto de software capaz de criar solu√ß√µes enterprise de classe mundial"
        )
        
        self.print_colored("\nüéØ O QUE VOC√ä CONQUISTOU:", "success")
        conquistas = [
            "Dom√≠nio completo do Python (b√°sico ao avan√ßado)",
            "Arquitetura enterprise com padr√µes profissionais",
            "DevOps e deploy em produ√ß√£o",
            "Database design otimizado",
            "APIs REST e GraphQL",
            "Testes automatizados",
            "Monitoramento e observabilidade",
            "Seguran√ßa de n√≠vel enterprise"
        ]
        
        for conquista in conquistas:
            self.print_colored(f"‚úÖ {conquista}", "primary")
        
        self.print_colored("\nüíº VAGAS PARA AS QUAIS VOC√ä EST√Å PREPARADO:", "warning")
        vagas = [
            "Senior Python Developer (R$ 8.000 - 15.000)",
            "Software Architect (R$ 12.000 - 20.000)",
            "DevOps Engineer (R$ 10.000 - 18.000)",
            "Tech Lead (R$ 15.000 - 25.000)",
            "CTO de Startup (equity + sal√°rio)",
            "Consultant/Freelancer (R$ 150-300/hora)"
        ]
        
        for vaga in vagas:
            self.print_colored(f"üí∞ {vaga}", "accent")
        
        self.print_colored("\nüöÄ PR√ìXIMOS PASSOS RECOMENDADOS:", "info")
        proximos_passos = [
            "Implemente o CloudCorp Platform completo",
            "Contribua para projetos open source",
            "Crie seu portf√≥lio no GitHub",
            "Candidate-se a vagas senior",
            "Considere criar sua pr√≥pria startup",
            "Mentore outros desenvolvedores"
        ]
        
        for passo in proximos_passos:
            self.print_colored(f"üéØ {passo}", "text")
        
        self.pausar()
    
    def _secao_pratica_interativa(self) -> None:
        """Se√ß√£o de pr√°tica interativa do m√≥dulo"""
        
        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_section("HORA DE PRATICAR!", "üéØ", "success")
        self.print_colored("Vamos testar o que voc√™ aprendeu sobre desenvolvimento enterprise!", "text")
        
        # === INSTRU√á√ïES PARA INICIANTES ===
        self.print_tip("Para especialistas: Cada exerc√≠cio testa conceitos avan√ßados do capstone project!")
        self.print_colored("\\nüéì SOBRE OS EXERC√çCIOS:", "info")
        self.print_colored("‚Ä¢ Testam sua compreens√£o da arquitetura enterprise", "text")
        self.print_colored("‚Ä¢ Avaliam seu conhecimento de integra√ß√£o de sistemas", "text")
        self.print_colored("‚Ä¢ Verificam seu dom√≠nio de padr√µes profissionais", "text")
        self.print_colored("‚Ä¢ Use Ctrl+C se quiser voltar ao menu principal", "text")
        
        # === DEFINI√á√ÉO DOS EXERC√çCIOS ===
        exercicios = [
            {
                'title': 'Quiz: Arquitetura Enterprise',
                'type': 'quiz',
                'questions': [
                    {
                        'question': 'Qual a principal vantagem da Clean Architecture?',
                        'answer': ['independencia', 'flexibilidade', 'testabilidade', 'isolamento'],
                        'hint': 'Pense na capacidade de trocar componentes sem afetar o core'
                    },
                    {
                        'question': 'Em qual camada ficam as regras de neg√≥cio na Clean Architecture?',
                        'answer': ['dominio', 'domain', 'entidades', 'entities'],
                        'hint': '√â a camada mais interna e independente'
                    },
                    {
                        'question': 'Qual padr√£o permite trocar implementa√ß√µes facilmente?',
                        'answer': ['repository', 'dependency injection', 'interface'],
                        'hint': 'Usado para abstrair acesso a dados'
                    },
                    {
                        'question': 'O que significa CI/CD?',
                        'answer': ['continuous integration continuous deployment', 'integracao continua deploy continuo'],
                        'hint': 'Automatiza√ß√£o do pipeline de desenvolvimento'
                    },
                    {
                        'question': 'Qual ferramenta orquestra containers em produ√ß√£o?',
                        'answer': ['kubernetes', 'k8s'],
                        'hint': 'Sistema de orquestra√ß√£o da Google'
                    }
                ]
            },
            {
                'title': 'Desafio: Complete o C√≥digo Enterprise',
                'type': 'code_completion',
                'exercises': [
                    {
                        'instruction': 'B√ÅSICO: Complete o Use Case para criar usu√°rio',
                        'starter': '''class CreateUserUseCase:\n    def __init__(self, user_repo: IUserRepository):\n        self.user_repo = user_repo\n    \n    async def execute(self, email: str, name: str) -> User:\n        # Verificar se email j√° existe\n        if await self.user_repo._____(email):\n            raise ValueError("Email j√° existe")\n        \n        # Criar usu√°rio\n        user = User(id=uuid.uuid4(), email=email, name=name)\n        return await self.user_repo._____(user)''',
                        'solution': 'find_by_email',
                        'type': 'simple'
                    },
                    {
                        'instruction': 'INTERMEDI√ÅRIO: Complete o middleware de tenant',
                        'starter': '''class TenantMiddleware:\n    async def __call__(self, request: Request, call_next):\n        # Extrair tenant do subdom√≠nio\n        tenant_slug = request.headers.get("X-Tenant-Slug")\n        \n        if not tenant_slug:\n            raise HTTPException(400, "_____ n√£o identificado")\n        \n        # Carregar tenant\n        tenant = await self.tenant_service.get_by_slug(_____)\n        request.state.tenant = tenant\n        \n        return await call_next(request)''',
                        'solution': 'tenant_slug',
                        'type': 'intermediate'
                    },
                    {
                        'instruction': 'AVAN√áADO: Complete a configura√ß√£o Kubernetes',
                        'starter': '''apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: cloudcorp-backend\nspec:\n  replicas: 5\n  selector:\n    matchLabels:\n      app: cloudcorp-backend\n  template:\n    spec:\n      containers:\n      - name: backend\n        image: cloudcorp/backend:v1.0.0\n        ports:\n        - containerPort: _____\n        resources:\n          limits:\n            cpu: 500m\n            memory: _____''',
                        'solution': '8000',
                        'type': 'advanced'
                    }
                ]
            },
            {
                'title': 'Exerc√≠cio Criativo: Projete seu pr√≥prio microservi√ßo',
                'type': 'creative',
                'instruction': 'Descreva um microservi√ßo que voc√™ adicionaria ao CloudCorp Platform. Inclua: prop√≥sito, API endpoints, tecnologias e como se integra com o sistema.'
            }
        ]
        
        # === MENU PRINCIPAL DE EXERC√çCIOS ===
        while True:
            print("\\nEscolha uma atividade:")
            print("1. üìù Quiz de Arquitetura Enterprise")
            print("2. üíª Complete o C√≥digo Enterprise")
            print("3. üé® Exerc√≠cio Criativo")
            print("0. Continuar para o Projeto Capstone")
            
            try:
                escolha = input("\\nüëâ Sua escolha: ").strip().lower()
                
                if escolha in ["0", "continuar", "sair", "proximo"]:
                    break
                elif escolha in ["1", "quiz", "arquitetura"]:
                    try:
                        self._run_quiz(exercicios[0])
                    except KeyboardInterrupt:
                        self.print_warning("\\n\\n‚ö†Ô∏è Quiz interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no quiz. Continuando...")
                elif escolha in ["2", "codigo", "completar"]:
                    try:
                        self._run_code_completion(exercicios[1])
                    except KeyboardInterrupt:
                        self.print_warning("\\n\\n‚ö†Ô∏è Exerc√≠cio de c√≥digo interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio de c√≥digo. Continuando...")
                elif escolha in ["3", "criativo"]:
                    try:
                        self._run_creative_exercise(exercicios[2])
                    except KeyboardInterrupt:
                        self.print_warning("\\n\\n‚ö†Ô∏è Exerc√≠cio criativo interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio criativo. Continuando...")
                elif escolha in ["help", "ajuda", "h", "?"]:
                    self._show_help()
                else:
                    self.print_warning("‚ùå Op√ß√£o inv√°lida! Digite 1, 2, 3, 0 ou 'help' para ajuda.")
            
            except KeyboardInterrupt:
                self.print_warning("\\n\\n‚ö†Ô∏è Opera√ß√£o cancelada pelo usu√°rio. Voltando ao menu principal...")
                return
            except Exception as e:
                self.print_warning("‚ùå Erro inesperado no menu. Tente novamente.")
    
    def _show_help(self) -> None:
        """Mostra ajuda sobre as op√ß√µes dispon√≠veis"""
        self.print_section("AJUDA - SE√á√ÉO DE PR√ÅTICA", "‚ùì", "info")
        help_text = [
            "üìù OP√á√ÉO 1 - Quiz: Teste seus conhecimentos sobre arquitetura enterprise",
            "üíª OP√á√ÉO 2 - Complete o C√≥digo: 3 exerc√≠cios de c√≥digo progressivos",
            "üé® OP√á√ÉO 3 - Exerc√≠cio Criativo: Projete um microservi√ßo",
            "üî¢ OP√á√ÉO 0 - Continue para o Projeto Capstone final",
            "",
            "üí° DICAS:",
            "‚Ä¢ Voc√™ pode digitar o n√∫mero ou palavras como 'quiz', 'codigo'",
            "‚Ä¢ Digite 'help' a qualquer momento para ver esta ajuda",
            "‚Ä¢ Use Ctrl+C se quiser voltar ao menu principal",
            "‚Ä¢ Estes exerc√≠cios testam conceitos avan√ßados do curso!"
        ]
        
        for line in help_text:
            if line:
                self.print_colored(f"  {line}", "text")
            else:
                print()
        
        input("\\nüî∏ Pressione ENTER para voltar ao menu...")
    
    def _mini_projeto_cloudcorp_platform(self) -> None:
        """Mini Projeto - M√≥dulo 35: CloudCorp Enterprise Platform"""
        
        # === CABE√áALHO IMPACTANTE ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üéØ CAPSTONE PROJECT: CLOUDCORP ENTERPRISE PLATFORM")
        else:
            print("\\n" + "="*50)
            print("üéØ CAPSTONE PROJECT: CLOUDCORP ENTERPRISE PLATFORM")
            print("="*50)
        
        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_success("üéâ Vamos criar o projeto FINAL que demonstra TODOS os conceitos aprendidos!")
        
        self.print_concept(
            "CloudCorp Enterprise Platform",
            "Uma plataforma SaaS completa que integra arquitetura enterprise, DevOps, seguran√ßa e performance de classe mundial"
        )
        
        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\\nEste tipo de projeto √© usado por:", "text")
        usos_praticos = [
            "Startups unic√≥rnios para escalar rapidamente",
            "Empresas Fortune 500 para moderniza√ß√£o",
            "Consultores para transforma√ß√£o digital",
            "Desenvolvedores senior em big techs"
        ]
        for uso in usos_praticos:
            self.print_colored(f"‚Ä¢ {uso}", "accent")
        
        # === DESENVOLVIMENTO PASSO A PASSO ===
        
        # PASSO 1: Arquitetura e Setup
        self.print_section("PASSO 1: Arquitetura Enterprise", "üèóÔ∏è", "info")
        self.print_tip("Vamos criar a base s√≥lida com Clean Architecture e padr√µes profissionais!")
        
        try:
            codigo_arquitetura = '''# üèóÔ∏è CLOUDCORP PLATFORM - ARQUITETURA ENTERPRISE
# Clean Architecture + Domain-Driven Design + Microservices

# ========================================
# 1. ESTRUTURA DE PROJETO ENTERPRISE
# ========================================

"""
cloudcorp-platform/
‚îú‚îÄ‚îÄ backend/                    # Python + FastAPI
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ domain/            # Entidades e regras de neg√≥cio
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ entities/      # User, Tenant, Project
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ repositories/  # Interfaces abstratas
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ services/      # Servi√ßos de dom√≠nio
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ application/       # Casos de uso
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ use_cases/     # CreateUser, UpdateProject
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ dto/           # Data Transfer Objects
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ infrastructure/    # Implementa√ß√µes concretas
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ database/      # SQLAlchemy, PostgreSQL
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ cache/         # Redis
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ external/      # APIs externas
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ presentation/      # APIs e interfaces
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ api/           # FastAPI endpoints
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ web/           # Web interface
‚îÇ   ‚îú‚îÄ‚îÄ tests/                 # Testes automatizados
‚îÇ   ‚îî‚îÄ‚îÄ Dockerfile             # Containeriza√ß√£o
‚îú‚îÄ‚îÄ frontend/                   # React + TypeScript
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/        # Componentes reutiliz√°veis
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ pages/             # P√°ginas da aplica√ß√£o
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hooks/             # Custom hooks
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ services/          # API clients
‚îÇ   ‚îî‚îÄ‚îÄ Dockerfile
‚îú‚îÄ‚îÄ infrastructure/             # DevOps e infraestrutura
‚îÇ   ‚îú‚îÄ‚îÄ kubernetes/            # Manifests K8s
‚îÇ   ‚îú‚îÄ‚îÄ terraform/             # Infrastructure as Code
‚îÇ   ‚îî‚îÄ‚îÄ monitoring/            # Prometheus + Grafana
‚îî‚îÄ‚îÄ docker-compose.yml         # Ambiente local
"""

# ========================================
# 2. DOMAIN ENTITIES (Clean Architecture)
# ========================================

from dataclasses import dataclass
from typing import List, Optional
from datetime import datetime
from enum import Enum
import uuid

class UserRole(Enum):
    ADMIN = "admin"
    MANAGER = "manager"
    USER = "user"

class ProjectStatus(Enum):
    PLANNING = "planning"
    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"

@dataclass
class User:
    """Entidade de dom√≠nio: Usu√°rio"""
    id: uuid.UUID
    tenant_id: uuid.UUID
    email: str
    name: str
    role: UserRole
    is_active: bool
    created_at: datetime
    
    def can_manage_project(self, project: 'Project') -> bool:
        """Regra de neg√≥cio: quem pode gerenciar projeto"""
        return (
            self.role == UserRole.ADMIN or
            (self.role == UserRole.MANAGER and project.tenant_id == self.tenant_id)
        )
    
    def is_tenant_admin(self) -> bool:
        """Verifica se √© admin do tenant"""
        return self.role == UserRole.ADMIN

@dataclass
class Tenant:
    """Entidade de dom√≠nio: Empresa/Organiza√ß√£o"""
    id: uuid.UUID
    slug: str
    name: str
    plan: str  # basic, pro, enterprise
    max_users: int
    is_active: bool
    created_at: datetime
    
    def can_add_user(self, current_users_count: int) -> bool:
        """Regra de neg√≥cio: limite de usu√°rios por plano"""
        return current_users_count < self.max_users

@dataclass
class Project:
    """Entidade de dom√≠nio: Projeto"""
    id: uuid.UUID
    tenant_id: uuid.UUID
    name: str
    description: str
    owner_id: uuid.UUID
    status: ProjectStatus
    budget: Optional[float]
    created_at: datetime
    due_date: Optional[datetime]
    
    def is_overdue(self) -> bool:
        """Regra de neg√≥cio: projeto atrasado"""
        if not self.due_date:
            return False
        return datetime.now() > self.due_date and self.status != ProjectStatus.COMPLETED

# ========================================
# 3. REPOSITORY INTERFACES (Ports)
# ========================================

from abc import ABC, abstractmethod

class IUserRepository(ABC):
    """Interface do reposit√≥rio de usu√°rios"""
    
    @abstractmethod
    async def create(self, user: User) -> User:
        pass
    
    @abstractmethod
    async def get_by_id(self, user_id: uuid.UUID) -> Optional[User]:
        pass
    
    @abstractmethod
    async def get_by_email(self, email: str) -> Optional[User]:
        pass
    
    @abstractmethod
    async def list_by_tenant(self, tenant_id: uuid.UUID) -> List[User]:
        pass

class ITenantRepository(ABC):
    """Interface do reposit√≥rio de tenants"""
    
    @abstractmethod
    async def create(self, tenant: Tenant) -> Tenant:
        pass
    
    @abstractmethod
    async def get_by_slug(self, slug: str) -> Optional[Tenant]:
        pass

# ========================================
# 4. USE CASES (Application Layer)
# ========================================

class CreateUserUseCase:
    """Caso de uso: Criar usu√°rio com valida√ß√µes de neg√≥cio"""
    
    def __init__(
        self, 
        user_repo: IUserRepository,
        tenant_repo: ITenantRepository
    ):
        self.user_repo = user_repo
        self.tenant_repo = tenant_repo
    
    async def execute(
        self, 
        tenant_id: uuid.UUID,
        email: str, 
        name: str, 
        role: UserRole
    ) -> User:
        """Executar caso de uso com valida√ß√µes"""
        
        # 1. Validar tenant
        tenant = await self.tenant_repo.get_by_id(tenant_id)
        if not tenant or not tenant.is_active:
            raise ValueError("Tenant n√£o encontrado ou inativo")
        
        # 2. Verificar limite de usu√°rios
        current_users = await self.user_repo.list_by_tenant(tenant_id)
        if not tenant.can_add_user(len(current_users)):
            raise ValueError("Limite de usu√°rios atingido para este plano")
        
        # 3. Verificar email √∫nico
        existing_user = await self.user_repo.get_by_email(email)
        if existing_user:
            raise ValueError("Email j√° cadastrado")
        
        # 4. Criar usu√°rio
        user = User(
            id=uuid.uuid4(),
            tenant_id=tenant_id,
            email=email,
            name=name,
            role=role,
            is_active=True,
            created_at=datetime.now()
        )
        
        return await self.user_repo.create(user)

print("üèóÔ∏è ARQUITETURA ENTERPRISE IMPLEMENTADA:")
print("‚úÖ Domain Entities com regras de neg√≥cio")
print("‚úÖ Repository Pattern para abstra√ß√£o")
print("‚úÖ Use Cases para orquestra√ß√£o")
print("‚úÖ Clean Architecture respeitada")
print("‚úÖ Separation of Concerns aplicado")
'''
            
            self.print_code_section("C√ìDIGO DA ARQUITETURA", codigo_arquitetura)
            self.executar_codigo(codigo_arquitetura)
            
        except KeyboardInterrupt:
            self.print_warning("Projeto cancelado pelo usu√°rio")
            return
        
        # PASSO 2: API e Endpoints
        self.print_section("PASSO 2: APIs REST + GraphQL", "üåê", "success")
        self.print_colored("Agora vamos criar as APIs que conectam tudo:", "text")
        
        codigo_api = '''# üåê CLOUDCORP PLATFORM - APIs ENTERPRISE

# ========================================
# 1. FASTAPI + DEPENDENCY INJECTION
# ========================================

from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List
import uvicorn

app = FastAPI(
    title="CloudCorp Enterprise Platform",
    description="Plataforma SaaS enterprise completa",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# CORS para frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ========================================
# 2. PYDANTIC MODELS (DTOs)
# ========================================

class UserCreateRequest(BaseModel):
    email: str
    name: str
    role: str

class UserResponse(BaseModel):
    id: str
    email: str
    name: str
    role: str
    is_active: bool
    created_at: str

class TenantResponse(BaseModel):
    id: str
    slug: str
    name: str
    plan: str
    max_users: int

# ========================================
# 3. DEPENDENCY INJECTION
# ========================================

async def get_user_repository() -> IUserRepository:
    """Injeta reposit√≥rio de usu√°rios"""
    # Em produ√ß√£o, vem do container IoC
    return PostgreSQLUserRepository()

async def get_tenant_repository() -> ITenantRepository:
    """Injeta reposit√≥rio de tenants"""
    return PostgreSQLTenantRepository()

async def get_current_user() -> User:
    """Obt√©m usu√°rio autenticado do token JWT"""
    # Valida√ß√£o de JWT aqui
    return User(
        id=uuid.uuid4(),
        tenant_id=uuid.uuid4(),
        email="admin@cloudcorp.com",
        name="Admin",
        role=UserRole.ADMIN,
        is_active=True,
        created_at=datetime.now()
    )

# ========================================
# 4. API ENDPOINTS
# ========================================

@app.get("/")
async def root():
    """Health check"""
    return {"message": "CloudCorp Platform API v1.0", "status": "healthy"}

@app.post("/api/v1/users", response_model=UserResponse)
async def create_user(
    user_data: UserCreateRequest,
    current_user: User = Depends(get_current_user),
    user_repo: IUserRepository = Depends(get_user_repository),
    tenant_repo: ITenantRepository = Depends(get_tenant_repository)
):
    """Criar usu√°rio com valida√ß√µes enterprise"""
    
    # Verificar permiss√µes
    if not current_user.is_tenant_admin():
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Apenas admins podem criar usu√°rios"
        )
    
    # Executar use case
    use_case = CreateUserUseCase(user_repo, tenant_repo)
    
    try:
        user = await use_case.execute(
            tenant_id=current_user.tenant_id,
            email=user_data.email,
            name=user_data.name,
            role=UserRole(user_data.role)
        )
        
        return UserResponse(
            id=str(user.id),
            email=user.email,
            name=user.name,
            role=user.role.value,
            is_active=user.is_active,
            created_at=user.created_at.isoformat()
        )
        
    except ValueError as e:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=str(e)
        )

@app.get("/api/v1/users", response_model=List[UserResponse])
async def list_users(
    current_user: User = Depends(get_current_user),
    user_repo: IUserRepository = Depends(get_user_repository)
):
    """Listar usu√°rios do tenant"""
    
    users = await user_repo.list_by_tenant(current_user.tenant_id)
    
    return [
        UserResponse(
            id=str(user.id),
            email=user.email,
            name=user.name,
            role=user.role.value,
            is_active=user.is_active,
            created_at=user.created_at.isoformat()
        )
        for user in users
    ]

@app.get("/api/v1/tenants/current", response_model=TenantResponse)
async def get_current_tenant(
    current_user: User = Depends(get_current_user),
    tenant_repo: ITenantRepository = Depends(get_tenant_repository)
):
    """Obter dados do tenant atual"""
    
    tenant = await tenant_repo.get_by_id(current_user.tenant_id)
    if not tenant:
        raise HTTPException(status_code=404, detail="Tenant n√£o encontrado")
    
    return TenantResponse(
        id=str(tenant.id),
        slug=tenant.slug,
        name=tenant.name,
        plan=tenant.plan,
        max_users=tenant.max_users
    )

# ========================================
# 5. MIDDLEWARE PERSONALIZADO
# ========================================

@app.middleware("http")
async def tenant_isolation_middleware(request, call_next):
    """Middleware para isolamento de tenant"""
    
    # Extrair tenant do header
    tenant_slug = request.headers.get("X-Tenant-Slug")
    
    if tenant_slug:
        # Configurar contexto do tenant
        request.state.tenant_slug = tenant_slug
    
    response = await call_next(request)
    
    # Adicionar headers de seguran√ßa
    response.headers["X-Content-Type-Options"] = "nosniff"
    response.headers["X-Frame-Options"] = "DENY"
    response.headers["X-XSS-Protection"] = "1; mode=block"
    
    return response

print("üåê API ENTERPRISE IMPLEMENTADA:")
print("‚úÖ FastAPI com documenta√ß√£o autom√°tica")
print("‚úÖ Dependency Injection profissional")
print("‚úÖ Valida√ß√£o com Pydantic")
print("‚úÖ Tratamento de erros robusto")
print("‚úÖ Middleware de seguran√ßa")
print("‚úÖ Multi-tenancy integrado")
print("\\nüöÄ API rodando em: http://localhost:8000")
print("üìö Documenta√ß√£o em: http://localhost:8000/docs")
'''
        
        self.exemplo(codigo_api)
        print("\\nüöÄ Executando simula√ß√£o da API:")
        self.executar_codigo(codigo_api)
        
        # PASSO 3: DevOps e Deploy
        self.print_section("PASSO 3: DevOps Enterprise", "üöÄ", "warning")
        
        codigo_devops = '''# üöÄ CLOUDCORP PLATFORM - DEVOPS ENTERPRISE

# ========================================
# 1. DOCKER MULTI-STAGE BUILD
# ========================================

"""
# Dockerfile.backend
FROM python:3.11-slim AS builder

WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

FROM python:3.11-slim AS runtime

WORKDIR /app
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY . .

EXPOSE 8000
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
"""

# ========================================
# 2. KUBERNETES DEPLOYMENT
# ========================================

kubernetes_manifests = """
# backend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudcorp-backend
  labels:
    app: cloudcorp-backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: cloudcorp-backend
  template:
    metadata:
      labels:
        app: cloudcorp-backend
    spec:
      containers:
      - name: backend
        image: cloudcorp/backend:latest
        ports:
        - containerPort: 8000
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: cloudcorp-secrets
              key: database-url
        - name: REDIS_URL
          value: "redis://redis-service:6379"
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: cloudcorp-backend-service
spec:
  selector:
    app: cloudcorp-backend
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8000
  type: LoadBalancer

---
# Auto-scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: cloudcorp-backend-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: cloudcorp-backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
"""

# ========================================
# 3. CI/CD PIPELINE (GITHUB ACTIONS)
# ========================================

github_actions_pipeline = """
# .github/workflows/deploy.yml
name: Deploy to Production

on:
  push:
    branches: [main]
    tags: ['v*']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: cloudcorp/platform

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        pytest tests/ --cov=src/ --cov-report=xml --cov-fail-under=80
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'

  build-and-push:
    needs: [test, security]
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Deploy to Kubernetes
      run: |
        echo "Deploying to production cluster..."
        kubectl set image deployment/cloudcorp-backend \\
          backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        kubectl rollout status deployment/cloudcorp-backend
    
    - name: Run smoke tests
      run: |
        curl -f https://api.cloudcorp.com/health
        echo "‚úÖ Health check passed"

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify team
      run: |
        echo "üöÄ Deploy completed successfully!"
        echo "üìä Monitoring dashboard: https://grafana.cloudcorp.com"
"""

# ========================================
# 4. MONITORING E OBSERVABILIDADE
# ========================================

monitoring_config = """
# Prometheus configuration
global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  - "alert_rules.yml"

scrape_configs:
  - job_name: 'cloudcorp-backend'
    static_configs:
      - targets: ['backend-service:8000']
    metrics_path: /metrics
    scrape_interval: 10s

alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

# Alert rules
groups:
- name: cloudcorp.rules
  rules:
  - alert: HighErrorRate
    expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.05
    for: 2m
    labels:
      severity: warning
    annotations:
      summary: "High error rate detected"
  
  - alert: HighLatency
    expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 0.5
    for: 5m
    labels:
      severity: critical
    annotations:
      summary: "High latency detected"
"""

print("üöÄ DEVOPS ENTERPRISE IMPLEMENTADO:")
print("‚úÖ Docker multi-stage otimizado")
print("‚úÖ Kubernetes com auto-scaling")
print("‚úÖ CI/CD pipeline completo")
print("‚úÖ Testes automatizados (80%+ coverage)")
print("‚úÖ Security scanning integrado")
print("‚úÖ Monitoring e alertas")
print("‚úÖ Zero-downtime deployment")
print("\\nüìä Monitoramento: https://grafana.cloudcorp.com")
print("üîç Logs: https://kibana.cloudcorp.com")
print("üìà M√©tricas: https://prometheus.cloudcorp.com")
'''
        
        self.exemplo(codigo_devops)
        self.executar_codigo(codigo_devops)
        
        # === RESULTADO FINAL ===
        self.print_section("RESULTADO FINAL", "üé¨", "warning")
        
        print("\\n" + "="*80)
        print("üéâ PARAB√âNS! VOC√ä CRIOU UMA APLICA√á√ÉO ENTERPRISE COMPLETA!")
        print("="*80)
        
        resultado_final = f'''
üìä ESTAT√çSTICAS DO PROJETO CLOUDCORP:

üèóÔ∏è ARQUITETURA:
‚Ä¢ Clean Architecture com 4 camadas
‚Ä¢ Domain-Driven Design (DDD)
‚Ä¢ Microservices ready
‚Ä¢ Event-driven architecture

üíª TECNOLOGIAS:
‚Ä¢ Backend: Python + FastAPI + SQLAlchemy
‚Ä¢ Frontend: React + TypeScript + Next.js
‚Ä¢ Database: PostgreSQL + Redis
‚Ä¢ Infraestrutura: Docker + Kubernetes

üöÄ DEVOPS:
‚Ä¢ CI/CD automatizado
‚Ä¢ Testes com 80%+ coverage
‚Ä¢ Security scanning
‚Ä¢ Auto-scaling
‚Ä¢ Zero-downtime deployment

üìà PERFORMANCE:
‚Ä¢ < 200ms response time
‚Ä¢ 10,000+ requests/second
‚Ä¢ Auto-scaling de 3-10 pods
‚Ä¢ Cache distribu√≠do

üîí SEGURAN√áA:
‚Ä¢ JWT authentication
‚Ä¢ RBAC + ABAC authorization
‚Ä¢ Security headers
‚Ä¢ Input validation
‚Ä¢ Audit logging

üåç ESCALABILIDADE:
‚Ä¢ Multi-tenant SaaS
‚Ä¢ Horizontal scaling
‚Ä¢ Load balancing
‚Ä¢ Global CDN ready

üèÜ N√çVEL CONQUISTADO: EXPERT ENTERPRISE DEVELOPER
'''
        
        print(resultado_final)
        
        self.print_success("\\nüéä CONQUISTA √âPICA DESBLOQUEADA: Arquiteto de Software Enterprise!")
        
        # === PR√ìXIMOS PASSOS ===
        self.print_section("PR√ìXIMOS PASSOS", "üöÄ", "info")
        proximos_passos = [
            "Implemente o CloudCorp Platform completo",
            "Publique no GitHub como portf√≥lio",
            "Candidate-se a vagas Senior/Staff/Principal",
            "Inicie sua pr√≥pria startup SaaS",
            "Contribua para projetos open source",
            "Torne-se mentor de outros desenvolvedores"
        ]
        for passo in proximos_passos:
            self.print_colored(f"üéØ {passo}", "primary")
        
        # === REGISTRO DE CONCLUS√ÉO ===
        self.complete_mini_project("CloudCorp Enterprise Platform - Capstone Project Completo")
        
        self.pausar()
