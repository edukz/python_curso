#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
M√≥dulo 9: Listas
Aprenda sobre listas, cole√ß√µes de dados organizadas
"""

from ..shared.base_module import BaseModule


class Modulo09Listas(BaseModule):
    """M√≥dulo 9: Listas"""
    
    def __init__(self):
        super().__init__("modulo_9", "Listas e Cole√ß√µes")
        self.has_mini_project = True
        self.mini_project_points = 65
    
    def execute(self) -> None:
        """Executa o m√≥dulo sobre listas"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return
        
        try:
            self._listas()
        except Exception as e:
            self.error_handler(lambda: None)
    
    def _listas(self) -> None:
        """Conte√∫do principal sobre listas"""
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üìã M√ìDULO 9: LISTAS E COLE√á√ïES")
        else:
            print("\n" + "="*50)
            print("üìã M√ìDULO 9: LISTAS E COLE√á√ïES")
            print("="*50)
        
        self.print_concept("Listas e Cole√ß√µes", "Listas armazenam m√∫ltiplos valores organizados de forma sequencial!", "üìã")
        
        codigo = '''# Criando e usando listas
frutas = ["ma√ß√£", "banana", "laranja", "uva"]
numeros = [1, 2, 3, 4, 5]
mista = ["Python", 2024, True, 3.14]

print("Frutas:", frutas)
print("Primeiro item:", frutas[0])
print("√öltimo item:", frutas[-1])

# Adicionando itens
frutas.append("manga")
print("Ap√≥s adicionar:", frutas)

# Removendo itens
frutas.remove("banana")
print("Ap√≥s remover:", frutas)

# Percorrendo a lista
print("\\nTodas as frutas:")
for fruta in frutas:
    print(f"üçé {fruta}")'''
        
        self.exemplo(codigo)
        self.executar_codigo(codigo)
        
        self.print_section("M√©todos √öteis de Listas", "üîß")
        self.print_colored("‚Ä¢ append() - Adiciona item no final", "info")
        self.print_colored("‚Ä¢ insert() - Adiciona item em posi√ß√£o espec√≠fica", "info")
        self.print_colored("‚Ä¢ remove() - Remove item por valor", "info")
        self.print_colored("‚Ä¢ pop() - Remove e retorna item por √≠ndice", "info")
        self.print_colored("‚Ä¢ len() - Retorna tamanho da lista", "info")
        self.print_colored("‚Ä¢ sort() - Ordena a lista", "info")
        
        self.print_tip("Use √≠ndices negativos para acessar do final: lista[-1] √© o √∫ltimo item")
        self.print_warning("Cuidado com √≠ndices fora do alcance - podem causar erro!")
        
        # Mini Projeto
        self._mini_projeto_inventario()
        
        # Marcar m√≥dulo como completo
        self.complete_module()
    
    def _mini_projeto_inventario(self) -> None:
        """Mini Projeto - Sistema de Invent√°rio Inteligente"""
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üéØ MINI PROJETO: SISTEMA DE INVENT√ÅRIO")
        else:
            print("\n" + "="*50)
            print("üéØ MINI PROJETO: SISTEMA DE INVENT√ÅRIO")
            print("="*50)
        
        self.print_concept("Sistema de Invent√°rio Inteligente", "Vamos criar um sistema de invent√°rio profissional!", "üì¶")
        
        self.print_section("Aplica√ß√µes Comerciais", "üíº")
        self.print_colored("‚Ä¢ E-commerce e lojas virtuais", "success")
        self.print_colored("‚Ä¢ Lojas f√≠sicas e varejos", "success")
        self.print_colored("‚Ä¢ Almoxarifados e dep√≥sitos", "success")
        self.print_colored("‚Ä¢ Empresas e ind√∫strias", "success")
        
        self.print_tip("Listas s√£o ideais para organizar dados que podem mudar de tamanho")
        
        codigo_projeto = '''# üì¶ SISTEMA DE INVENT√ÅRIO INTELIGENTE
print("üì¶ SISTEMA DE INVENT√ÅRIO V1.0")
print("=" * 40)

# Invent√°rio inicial
inventario = [
    {"nome": "Notebook", "quantidade": 5, "preco": 2500.00},
    {"nome": "Mouse", "quantidade": 20, "preco": 50.00},
    {"nome": "Teclado", "quantidade": 15, "preco": 120.00},
    {"nome": "Monitor", "quantidade": 8, "preco": 800.00}
]

def exibir_inventario(inventario):
    """Exibe o invent√°rio atual"""
    print("\\nüìä INVENT√ÅRIO ATUAL:")
    print("-" * 60)
    print(f"{'PRODUTO':<15} {'QTD':<5} {'PRE√áO':<10} {'TOTAL':<15}")
    print("-" * 60)
    
    valor_total = 0
    for item in inventario:
        total_item = item['quantidade'] * item['preco']
        valor_total += total_item
        print(f"{item['nome']:<15} {item['quantidade']:<5} R${item['preco']:<9.2f} R${total_item:<14.2f}")
    
    print("-" * 60)
    print(f"{'VALOR TOTAL DO ESTOQUE:':<35} R${valor_total:.2f}")
    return valor_total

def buscar_produto(inventario, nome_produto):
    """Busca um produto no invent√°rio"""
    for item in inventario:
        if item['nome'].lower() == nome_produto.lower():
            return item
    return None

def adicionar_estoque(inventario, nome_produto, quantidade):
    """Adiciona quantidade ao estoque"""
    produto = buscar_produto(inventario, nome_produto)
    if produto:
        produto['quantidade'] += quantidade
        print(f"‚úÖ Adicionado {quantidade} unidades de {nome_produto}")
    else:
        print(f"‚ùå Produto {nome_produto} n√£o encontrado")

# Demonstra√ß√£o do sistema
valor_inicial = exibir_inventario(inventario)

print("\\nüîÑ MOVIMENTA√á√ïES DE ESTOQUE:")
print("1. Entrada: +10 Notebooks")
adicionar_estoque(inventario, "Notebook", 10)

print("2. Sa√≠da: -5 Mouses")
adicionar_estoque(inventario, "Mouse", -5)

print("\\nüìä INVENT√ÅRIO ATUALIZADO:")
valor_final = exibir_inventario(inventario)

# An√°lise
diferenca = valor_final - valor_inicial
print(f"\\nüìà AN√ÅLISE:")
print(f"Valor inicial: R$ {valor_inicial:.2f}")
print(f"Valor final: R$ {valor_final:.2f}")
print(f"Diferen√ßa: R$ {diferenca:.2f}")

# Produtos em baixo estoque
print("\\n‚ö†Ô∏è ALERTA - BAIXO ESTOQUE:")
for item in inventario:
    if item['quantidade'] < 10:
        print(f"üî¥ {item['nome']}: apenas {item['quantidade']} unidades")

print("\\n‚úÖ SISTEMA FUNCIONANDO PERFEITAMENTE!")'''
        
        self.exemplo(codigo_projeto)
        self.executar_codigo(codigo_projeto)
        
        self.print_success("CONQUISTA: Gerente de Invent√°rio!", "üèÜ")
        self.print_tip("Listas s√£o fundamentais para organizar dados em qualquer sistema!")
        self.complete_mini_project("Sistema de Invent√°rio Inteligente")
        self.pausar()


# Para teste standalone
if __name__ == "__main__":
    module = Modulo09Listas()
    print("Teste do m√≥dulo 9 - vers√£o standalone")
    module._listas()