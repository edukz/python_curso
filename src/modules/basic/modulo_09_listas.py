#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
M√≥dulo 9: Listas
Aprenda sobre listas, cole√ß√µes de dados organizadas
"""

from ..shared.base_module import BaseModule


class Modulo09Listas(BaseModule):
    """M√≥dulo 9: Dominando Listas e Cole√ß√µes"""
    
    def __init__(self):
        super().__init__("modulo_9", "Listas e Cole√ß√µes")
        self.has_mini_project = True
        self.mini_project_points = 65
    
    def execute(self) -> None:
        """Executa o m√≥dulo Listas e Cole√ß√µes"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return
        
        try:
            self._listas_interativo()
        except Exception as e:
            self.error_handler(lambda: None)
    
    def _listas_interativo(self) -> None:
        """Conte√∫do principal do m√≥dulo Listas e Cole√ß√µes"""
        # === CABE√áALHO VISUAL ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üìã M√ìDULO 9: DOMINANDO LISTAS E COLE√á√ïES")
        else:
            print("\n" + "="*50)
            print("üìã M√ìDULO 9: DOMINANDO LISTAS E COLE√á√ïES")
            print("="*50)
        
        # === MENSAGENS MOTIVACIONAIS ===
        self.print_success("üéâ Vamos descobrir o poder das listas para organizar dados como um profissional!")
        self.print_tip("Este m√≥dulo est√° dividido em se√ß√µes interativas. Voc√™ controla o ritmo!")
        
        # === FLUXO PRINCIPAL COM TRATAMENTO DE CTRL+C ===
        
        # 1. Sistema de navega√ß√£o por se√ß√µes
        try:
            self._navegacao_secoes_interativas()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Navega√ß√£o interrompida pelo usu√°rio. Voltando ao menu principal...")
            return
        
        # 2. Se√ß√£o de Pr√°tica Interativa
        try:
            self._secao_pratica_interativa()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è M√≥dulo interrompido pelo usu√°rio. Voltando ao menu principal...")
            return
        
        # 3. Mini Projeto Pr√°tico
        try:
            self._mini_projeto_organizador_musical()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Mini projeto interrompido. Voltando ao menu principal...")
            return
        
        # 4. Marcar m√≥dulo como completo
        self.complete_module()
    
    def _navegacao_secoes_interativas(self) -> None:
        """Sistema de navega√ß√£o por se√ß√µes do m√≥dulo"""
        
        # === DEFINI√á√ÉO DAS SE√á√ïES ===
        secoes = [
            {
                'id': 'secao_conceito_listas',
                'titulo': 'üéØ O que s√£o listas na programa√ß√£o?',
                'descricao': 'Entenda como organizar m√∫ltiplos dados',
                'funcao': self._secao_conceito_listas
            },
            {
                'id': 'secao_criacao_acesso',
                'titulo': '‚öôÔ∏è Como criar e acessar listas?',
                'descricao': 'Domine a cria√ß√£o e manipula√ß√£o b√°sica',
                'funcao': self._secao_criacao_acesso
            },
            {
                'id': 'secao_metodos_essenciais',
                'titulo': 'üîß M√©todos essenciais das listas',
                'descricao': 'Append, remove, insert e muito mais',
                'funcao': self._secao_metodos_essenciais
            },
            {
                'id': 'secao_exemplos_praticos',
                'titulo': 'üí° Listas em a√ß√£o - Exemplos pr√°ticos',
                'descricao': 'Veja listas resolvendo problemas reais',
                'funcao': self._secao_exemplos_praticos
            },
            {
                'id': 'secao_casos_uso',
                'titulo': 'üåç Onde usar listas na vida real?',
                'descricao': 'Aplica√ß√µes pr√°ticas em sistemas',
                'funcao': self._secao_casos_uso
            },
            {
                'id': 'secao_melhores_praticas',
                'titulo': '‚≠ê Melhores pr√°ticas com listas',
                'descricao': 'Dicas de profissionais experientes',
                'funcao': self._secao_melhores_praticas
            },
            {
                'id': 'secao_erros_comuns',
                'titulo': '‚ö†Ô∏è Erros comuns e como evitar',
                'descricao': 'Evite √≠ndices inv√°lidos e outros problemas',
                'funcao': self._secao_erros_comuns
            }
        ]
        
        secoes_visitadas = set()
        
        # === LOOP PRINCIPAL DE NAVEGA√á√ÉO ===
        while True:
            # Limpa tela e mostra cabe√ßalho
            self.ui.clear_screen() if self.ui else print("\n" + "="*50)
            self.print_section("NAVEGA√á√ÉO DO M√ìDULO", "üìö", "accent")
            self.print_colored("Escolha uma se√ß√£o para estudar:", "text")
            
            # Lista todas as se√ß√µes com status
            print()
            for i, secao in enumerate(secoes, 1):
                status = "‚úÖ" if secao['id'] in secoes_visitadas else "üìñ"
                print(f"{status} {i}. {secao['titulo']}")
                self.print_colored(f"    {secao['descricao']}", "text")
                print()
            
            print("0. üéØ Continuar para os Exerc√≠cios Pr√°ticos")
            
            # Mostra progresso visual
            progresso = len(secoes_visitadas)
            total = len(secoes)
            self.print_colored(f"\nüìä Progresso: {progresso}/{total} se√ß√µes visitadas", "info")
            
            if progresso == total:
                self.print_success("üåü Voc√™ completou todas as se√ß√µes! Est√° pronto para praticar!")
            
            # Processa escolha do usu√°rio
            try:
                escolha = input(f"\nüëâ Escolha uma se√ß√£o (1-{len(secoes)}) ou 0 para continuar: ").strip()
                
                if escolha == "0":
                    # Verifica se visitou se√ß√µes suficientes
                    if progresso >= 3:  # Pelo menos 3 se√ß√µes visitadas
                        break
                    else:
                        self.print_warning("üìö Recomendamos visitar pelo menos 3 se√ß√µes antes de continuar!")
                        continuar = input("Quer continuar mesmo assim? (s/n): ").lower()
                        if continuar in ['s', 'sim', 'yes']:
                            break
                elif escolha.isdigit() and 1 <= int(escolha) <= len(secoes):
                    # Executa se√ß√£o escolhida
                    idx = int(escolha) - 1
                    secoes[idx]['funcao']()
                    secoes_visitadas.add(secoes[idx]['id'])
                else:
                    self.print_warning(f"‚ùå Op√ß√£o inv√°lida! Digite um n√∫mero de 1 a {len(secoes)} ou 0.")
            
            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Pulando para exerc√≠cios pr√°ticos...")
                break
            except Exception as e:
                self.print_warning(f"‚ùå Erro: {str(e)}. Tente novamente.")
    
    def _secao_conceito_listas(self) -> None:
        """Se√ß√£o: O que s√£o listas na programa√ß√£o?"""
        if self.ui:
            self.ui.clear_screen()
        
        # === CABE√áALHO ATRATIVO ===
        self.print_section("O QUE S√ÉO LISTAS NA PROGRAMA√á√ÉO?", "üéØ")
        
        # === DEFINI√á√ÉO DO CONCEITO ===
        self.print_concept(
            "Listas",
            "S√£o cole√ß√µes ordenadas que armazenam m√∫ltiplos itens em uma √∫nica vari√°vel, permitindo organiza√ß√£o eficiente"
        )
        
        # === DICA RELACIONADA ===
        self.print_tip("Imagine sua lista de compras - voc√™ pode adicionar, remover e verificar itens!")
        
        # === ANALOGIA DO COTIDIANO ===
        self.print_colored("\nüè† ANALOGIA DO DIA A DIA:", "warning")
        self.print_colored("Imagine uma prateleira de livros:", "text")
        self.print_colored("‚Ä¢ Cada posi√ß√£o (√≠ndice) tem um livro espec√≠fico", "text")
        self.print_colored("‚Ä¢ Voc√™ pode adicionar novos livros no final", "text")
        self.print_colored("‚Ä¢ Pode remover ou trocar livros de posi√ß√£o", "text")
        self.print_colored("‚Ä¢ Cada livro tem uma posi√ß√£o numerada (0, 1, 2...)", "text")
        input("\nüî∏ Pressione ENTER para continuar...")
        
        # === EXPLICA√á√ÉO T√âCNICA GRADUAL ===
        self.print_colored("\nüîß COMO FUNCIONA NA PR√ÅTICA:", "info")
        passos_tecnicos = [
            "1. Criamos uma lista usando colchetes [] com itens separados por v√≠rgula",
            "2. Cada item tem um √≠ndice (posi√ß√£o) que come√ßa em 0",
            "3. Podemos acessar, modificar, adicionar e remover itens facilmente"
        ]
        
        for i, passo in enumerate(passos_tecnicos, 1):
            self.print_colored(passo, "text")
            if i < len(passos_tecnicos):
                input("   ‚è≥ Pressione ENTER para o pr√≥ximo passo...")
        
        # === EXEMPLO DE C√ìDIGO ===
        self.print_colored("\nüíª EXEMPLO PR√ÅTICO:", "success")
        codigo_exemplo = '''# Compara√ß√£o: sem lista vs com lista
print("‚ùå SEM LISTA (repetitivo):")
fruta1 = "ma√ß√£"
fruta2 = "banana" 
fruta3 = "laranja"
print(f"Tenho: {fruta1}, {fruta2}, {fruta3}")

print("\\n‚úÖ COM LISTA (organizado):")
frutas = ["ma√ß√£", "banana", "laranja"]
print(f"Minha lista: {frutas}")
print(f"Primeira fruta: {frutas[0]}")
print(f"Total de frutas: {len(frutas)}")

# F√°cil de adicionar mais!
frutas.append("uva")
print(f"Ap√≥s adicionar: {frutas}")'''
        
        self.exemplo(codigo_exemplo)
        
        # Executa o c√≥digo para mostrar resultado
        print("\nüöÄ Vamos ver a diferen√ßa:")
        self.executar_codigo(codigo_exemplo)
        
        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nüåç ONDE √â USADO NO MUNDO REAL:", "accent")
        aplicacoes = [
            "YouTube - Lista de v√≠deos da playlist",
            "Amazon - Carrinho de compras com produtos",
            "Spotify - Lista de m√∫sicas favoritas",
            "WhatsApp - Lista de contatos e mensagens"
        ]
        for app in aplicacoes:
            self.print_colored(f"‚Ä¢ {app}", "primary")
        
        self.pausar()
    
    def _secao_criacao_acesso(self) -> None:
        """Se√ß√£o: Como criar e acessar listas?"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("COMO CRIAR E ACESSAR LISTAS?", "‚öôÔ∏è")
        
        # === CRIA√á√ÉO DE LISTAS ===
        self.print_concept(
            "Cria√ß√£o de Listas",
            "Use colchetes [] para criar listas com diferentes tipos de dados"
        )
        
        self.print_colored("\nüèóÔ∏è FORMAS DE CRIAR LISTAS:", "warning")
        tipos_criacao = [
            "‚Ä¢ lista_vazia = [] ‚Üí Lista vazia para adicionar depois",
            "‚Ä¢ numeros = [1, 2, 3, 4, 5] ‚Üí Lista de n√∫meros",
            "‚Ä¢ nomes = ['Ana', 'Jo√£o', 'Maria'] ‚Üí Lista de strings",
            "‚Ä¢ mista = ['Python', 2024, True, 3.14] ‚Üí Tipos diferentes"
        ]
        
        for tipo in tipos_criacao:
            self.print_colored(tipo, "text")
            input("   ‚è≥ Pressione ENTER para continuar...")
        
        # === EXEMPLO CRIA√á√ÉO ===
        self.print_colored("\nüíª EXEMPLO DE CRIA√á√ÉO:", "success")
        codigo_criacao = '''# Diferentes formas de criar listas
print("üîß CRIANDO LISTAS:")

# Lista vazia
carrinho = []
print(f"Carrinho vazio: {carrinho}")

# Lista de n√∫meros
idades = [25, 30, 22, 28, 35]
print(f"Idades: {idades}")

# Lista de strings
cores = ["azul", "verde", "vermelho", "amarelo"]
print(f"Cores: {cores}")

# Lista mista (diferentes tipos)
perfil = ["Jo√£o", 28, True, 1.80, "S√£o Paulo"]
print(f"Perfil: {perfil}")

# Usando range para criar lista
numeros = list(range(1, 6))
print(f"N√∫meros de 1 a 5: {numeros}")'''
        
        self.exemplo(codigo_criacao)
        print("\nüöÄ Executando exemplo:")
        self.executar_codigo(codigo_criacao)
        
        input("\nüî∏ Pressione ENTER para aprender sobre acesso...")
        
        # === ACESSO A ELEMENTOS ===
        self.print_colored("\nüéØ ACESSANDO ELEMENTOS:", "info")
        self.print_colored("Cada elemento tem um √≠ndice (posi√ß√£o) que come√ßa em 0:", "text")
        
        codigo_acesso = '''# Acessando elementos da lista
frutas = ["ma√ß√£", "banana", "laranja", "uva", "manga"]
print(f"Lista completa: {frutas}")
print()

# √çndices positivos (do in√≠cio)
print("üìç √çNDICES POSITIVOS:")
print(f"Posi√ß√£o 0 (primeira): {frutas[0]}")
print(f"Posi√ß√£o 1 (segunda): {frutas[1]}")
print(f"Posi√ß√£o 2 (terceira): {frutas[2]}")

# √çndices negativos (do final)
print("\\nüìç √çNDICES NEGATIVOS:")
print(f"Posi√ß√£o -1 (√∫ltima): {frutas[-1]}")
print(f"Posi√ß√£o -2 (pen√∫ltima): {frutas[-2]}")

# Fatias (slicing)
print("\\n‚úÇÔ∏è FATIAS (SLICING):")
print(f"Primeiras 3: {frutas[:3]}")
print(f"√öltimas 2: {frutas[-2:]}")
print(f"Do meio: {frutas[1:4]}")'''
        
        self.exemplo(codigo_acesso)
        print("\nüöÄ Executando exemplo:")
        self.executar_codigo(codigo_acesso)
        
        self.print_tip("√çndices negativos contam do final: -1 √© o √∫ltimo, -2 √© o pen√∫ltimo!")
        
        self.pausar()
    
    def _secao_metodos_essenciais(self) -> None:
        """Se√ß√£o: M√©todos essenciais das listas"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("M√âTODOS ESSENCIAIS DAS LISTAS", "üîß")
        
        # === M√âTODOS DE ADI√á√ÉO ===
        self.print_colored("\n‚ûï M√âTODOS PARA ADICIONAR:", "warning")
        
        codigo_adicao = '''# M√©todos para adicionar elementos
carrinho = ["notebook", "mouse"]
print(f"Carrinho inicial: {carrinho}")

# append() - adiciona no final
carrinho.append("teclado")
print(f"Ap√≥s append: {carrinho}")

# insert() - adiciona em posi√ß√£o espec√≠fica
carrinho.insert(1, "monitor")  # posi√ß√£o 1
print(f"Ap√≥s insert: {carrinho}")

# extend() - adiciona m√∫ltiplos itens
novos_itens = ["cabo USB", "mousepad"]
carrinho.extend(novos_itens)
print(f"Ap√≥s extend: {carrinho}")'''
        
        self.exemplo(codigo_adicao)
        print("\nüöÄ Executando exemplo:")
        self.executar_codigo(codigo_adicao)
        
        input("\nüî∏ Pressione ENTER para m√©todos de remo√ß√£o...")
        
        # === M√âTODOS DE REMO√á√ÉO ===
        self.print_colored("\n‚ûñ M√âTODOS PARA REMOVER:", "warning")
        
        codigo_remocao = '''# M√©todos para remover elementos
lista = ["a", "b", "c", "d", "e"]
print(f"Lista inicial: {lista}")

# remove() - remove por valor (primeira ocorr√™ncia)
lista.remove("c")
print(f"Ap√≥s remove('c'): {lista}")

# pop() - remove e retorna por √≠ndice
item_removido = lista.pop(1)  # remove posi√ß√£o 1
print(f"Item removido: {item_removido}")
print(f"Ap√≥s pop(1): {lista}")

# pop() sem √≠ndice remove o √∫ltimo
ultimo = lista.pop()
print(f"√öltimo removido: {ultimo}")
print(f"Lista final: {lista}")

# clear() - remove todos os elementos
lista.clear()
print(f"Ap√≥s clear(): {lista}")'''
        
        self.exemplo(codigo_remocao)
        print("\nüöÄ Executando exemplo:")
        self.executar_codigo(codigo_remocao)
        
        input("\nüî∏ Pressione ENTER para outros m√©todos √∫teis...")
        
        # === OUTROS M√âTODOS √öTEIS ===
        self.print_colored("\nüõ†Ô∏è OUTROS M√âTODOS √öTEIS:", "warning")
        
        codigo_outros = '''# Outros m√©todos importantes
numeros = [3, 1, 4, 1, 5, 9, 2, 6]
print(f"Lista original: {numeros}")

# len() - tamanho da lista
tamanho = len(numeros)
print(f"Tamanho: {tamanho}")

# count() - conta ocorr√™ncias
contador = numeros.count(1)
print(f"N√∫mero 1 aparece {contador} vezes")

# index() - encontra posi√ß√£o do valor
posicao = numeros.index(4)
print(f"N√∫mero 4 est√° na posi√ß√£o: {posicao}")

# sort() - ordena a lista
numeros.sort()
print(f"Ordenado crescente: {numeros}")

# reverse() - inverte a ordem
numeros.reverse()
print(f"Invertido: {numeros}")

# in - verifica se item existe
existe = 5 in numeros
print(f"5 est√° na lista? {existe}")'''
        
        self.exemplo(codigo_outros)
        print("\nüöÄ Executando exemplo:")
        self.executar_codigo(codigo_outros)
        
        # === RESUMO VISUAL ===
        self.print_colored("\nüìã RESUMO DOS M√âTODOS:", "info")
        metodos = [
            "append(item) ‚Üí Adiciona no final",
            "insert(pos, item) ‚Üí Adiciona em posi√ß√£o espec√≠fica", 
            "remove(item) ‚Üí Remove primeira ocorr√™ncia",
            "pop(index) ‚Üí Remove e retorna item",
            "clear() ‚Üí Remove todos os elementos",
            "sort() ‚Üí Ordena a lista",
            "reverse() ‚Üí Inverte a ordem",
            "count(item) ‚Üí Conta ocorr√™ncias",
            "index(item) ‚Üí Encontra posi√ß√£o"
        ]
        
        for metodo in metodos:
            self.print_colored(f"‚Ä¢ {metodo}", "text")
        
        self.pausar()
    
    def _secao_exemplos_praticos(self) -> None:
        """Se√ß√£o: Listas em a√ß√£o - Exemplos pr√°ticos"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("LISTAS EM A√á√ÉO - EXEMPLOS PR√ÅTICOS", "üí°", "success")
        
        exemplos = [
            {
                'titulo': 'EXEMPLO 1: Sistema de Notas Escolares',
                'descricao': 'Lista para gerenciar notas e calcular estat√≠sticas',
                'codigo': '''# Sistema de notas escolares
print("üìö SISTEMA DE NOTAS")
print("=" * 30)

# Lista de notas
notas = [8.5, 7.2, 9.0, 6.8, 8.9, 7.5, 9.2, 8.1]
print(f"Notas: {notas}")

# Estat√≠sticas b√°sicas
total_notas = len(notas)
soma_notas = sum(notas)
media = soma_notas / total_notas
nota_maxima = max(notas)
nota_minima = min(notas)

print(f"\\nüìä ESTAT√çSTICAS:")
print(f"Total de notas: {total_notas}")
print(f"M√©dia: {media:.2f}")
print(f"Nota m√°xima: {nota_maxima}")
print(f"Nota m√≠nima: {nota_minima}")

# An√°lise de aprova√ß√£o
aprovados = [nota for nota in notas if nota >= 7.0]
reprovados = [nota for nota in notas if nota < 7.0]

print(f"\\n‚úÖ Aprovados: {len(aprovados)} ({len(aprovados)/total_notas*100:.1f}%)")
print(f"‚ùå Reprovados: {len(reprovados)} ({len(reprovados)/total_notas*100:.1f}%)")''',
                'explicacao': 'Demonstra uso de listas para c√°lculos estat√≠sticos e an√°lises'
            },
            {
                'titulo': 'EXEMPLO 2: Gerenciador de Tarefas',
                'descricao': 'Lista din√¢mica para organizar e gerenciar tarefas',
                'codigo': '''# Gerenciador de tarefas
print("‚úÖ GERENCIADOR DE TAREFAS")
print("=" * 35)

# Lista de tarefas
tarefas = [
    {"titulo": "Estudar Python", "concluida": False, "prioridade": "alta"},
    {"titulo": "Fazer exerc√≠cios", "concluida": True, "prioridade": "m√©dia"},
    {"titulo": "Projeto final", "concluida": False, "prioridade": "alta"},
    {"titulo": "Revisar c√≥digo", "concluida": False, "prioridade": "baixa"}
]

def exibir_tarefas(lista_tarefas):
    """Exibe todas as tarefas formatadas"""
    for i, tarefa in enumerate(lista_tarefas, 1):
        status = "‚úÖ" if tarefa["concluida"] else "‚è≥"
        prioridade = tarefa["prioridade"].upper()
        print(f"{i}. {status} {tarefa['titulo']} [{prioridade}]")

def marcar_concluida(lista_tarefas, indice):
    """Marca uma tarefa como conclu√≠da"""
    if 0 <= indice < len(lista_tarefas):
        lista_tarefas[indice]["concluida"] = True
        print(f"‚úÖ Tarefa '{lista_tarefas[indice]['titulo']}' conclu√≠da!")

# Demonstra√ß√£o
print("üìã LISTA ATUAL:")
exibir_tarefas(tarefas)

print("\\nüîÑ Marcando tarefa 1 como conclu√≠da...")
marcar_concluida(tarefas, 0)

print("\\nüìã LISTA ATUALIZADA:")
exibir_tarefas(tarefas)

# Estat√≠sticas
total = len(tarefas)
concluidas = sum(1 for t in tarefas if t["concluida"])
pendentes = total - concluidas

print(f"\\nüìä PROGRESSO:")
print(f"Total: {total} | Conclu√≠das: {concluidas} | Pendentes: {pendentes}")
print(f"Porcentagem: {concluidas/total*100:.1f}% completo")''',
                'explicacao': 'Mostra listas com dicion√°rios para estruturas de dados complexas'
            },
            {
                'titulo': 'EXEMPLO 3: Filtro e Ordena√ß√£o de Dados',
                'descricao': 'T√©cnicas avan√ßadas de manipula√ß√£o de listas',
                'codigo': '''# Filtro e ordena√ß√£o de dados
print("üîç FILTRO E ORDENA√á√ÉO")
print("=" * 30)

# Lista de produtos
produtos = [
    {"nome": "Notebook", "preco": 2500.00, "categoria": "eletr√¥nicos"},
    {"nome": "Livro Python", "preco": 89.90, "categoria": "livros"},
    {"nome": "Mouse", "preco": 45.00, "categoria": "eletr√¥nicos"},
    {"nome": "Cadeira", "preco": 350.00, "categoria": "m√≥veis"},
    {"nome": "Monitor", "preco": 800.00, "categoria": "eletr√¥nicos"}
]

print("üì¶ PRODUTOS ORIGINAIS:")
for produto in produtos:
    print(f"‚Ä¢ {produto['nome']}: R$ {produto['preco']:.2f}")

# Filtrar eletr√¥nicos
eletronicos = [p for p in produtos if p["categoria"] == "eletr√¥nicos"]
print(f"\\nüíª ELETR√îNICOS ({len(eletronicos)} itens):")
for produto in eletronicos:
    print(f"‚Ä¢ {produto['nome']}: R$ {produto['preco']:.2f}")

# Filtrar por pre√ßo
baratos = [p for p in produtos if p["preco"] < 100]
print(f"\\nüí∞ PRODUTOS BARATOS ({len(baratos)} itens):")
for produto in baratos:
    print(f"‚Ä¢ {produto['nome']}: R$ {produto['preco']:.2f}")

# Ordenar por pre√ßo
produtos_ordenados = sorted(produtos, key=lambda x: x["preco"])
print(f"\\nüìà ORDENADOS POR PRE√áO:")
for produto in produtos_ordenados:
    print(f"‚Ä¢ {produto['nome']}: R$ {produto['preco']:.2f}")

# Pre√ßo m√©dio
preco_medio = sum(p["preco"] for p in produtos) / len(produtos)
print(f"\\nüìä PRE√áO M√âDIO: R$ {preco_medio:.2f}")''',
                'explicacao': 'Demonstra list comprehensions, filtros e ordena√ß√£o avan√ßada'
            }
        ]
        
        for i, exemplo in enumerate(exemplos, 1):
            self.print_colored(f"\n{exemplo['titulo']}", "warning")
            self.print_colored(f"üìù {exemplo['descricao']}", "text")
            
            self.print_code_section("C√ìDIGO", exemplo['codigo'])
            
            print("\nüöÄ Executando exemplo:")
            self.executar_codigo(exemplo['codigo'])
            
            if exemplo['explicacao']:
                self.print_colored(f"\nüí° EXPLICA√á√ÉO: {exemplo['explicacao']}", "info")
            
            if i < len(exemplos):
                input("\nüî∏ Pressione ENTER para o pr√≥ximo exemplo...")
        
        self.print_success("\nüéâ Agora voc√™ viu listas resolvendo problemas reais!")
        self.pausar()
    
    def _secao_casos_uso(self) -> None:
        """Se√ß√£o: Onde usar listas na vida real?"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("ONDE USAR LISTAS NA VIDA REAL?", "üåç")
        
        casos_uso = [
            {
                'titulo': 'üõí E-COMMERCE E VENDAS',
                'descricao': 'Carrinho de compras e gest√£o de produtos',
                'exemplo': '''# Sistema de carrinho de compras
print("üõí SISTEMA DE E-COMMERCE")
print("=" * 30)

class CarrinhoCompras:
    def __init__(self):
        self.itens = []
        self.total = 0.0
    
    def adicionar_item(self, produto, preco, quantidade=1):
        item = {
            'produto': produto,
            'preco': preco,
            'quantidade': quantidade,
            'subtotal': preco * quantidade
        }
        self.itens.append(item)
        self.total += item['subtotal']
        print(f"‚úÖ {produto} adicionado ao carrinho")
    
    def remover_item(self, produto):
        for item in self.itens:
            if item['produto'] == produto:
                self.total -= item['subtotal']
                self.itens.remove(item)
                print(f"‚ùå {produto} removido do carrinho")
                return
        print(f"‚ö†Ô∏è {produto} n√£o encontrado no carrinho")
    
    def exibir_carrinho(self):
        if not self.itens:
            print("üõí Carrinho vazio")
            return
        
        print("\\nüõí ITENS NO CARRINHO:")
        print("-" * 50)
        for item in self.itens:
            print(f"{item['produto']:20} "
                  f"R$ {item['preco']:6.2f} x{item['quantidade']} = "
                  f"R$ {item['subtotal']:7.2f}")
        print("-" * 50)
        print(f"{'TOTAL:':32} R$ {self.total:7.2f}")

# Demonstra√ß√£o
carrinho = CarrinhoCompras()

# Adicionando produtos
carrinho.adicionar_item("Smartphone", 899.90, 1)
carrinho.adicionar_item("Capinha", 29.90, 2)
carrinho.adicionar_item("Carregador", 45.00, 1)

carrinho.exibir_carrinho()

# Aplicando desconto
if carrinho.total > 500:
    desconto = carrinho.total * 0.1
    print(f"\\nüéÅ DESCONTO (10%): -R$ {desconto:.2f}")
    print(f"üí∞ TOTAL FINAL: R$ {carrinho.total - desconto:.2f}")'''
            },
            {
                'titulo': 'üìä AN√ÅLISE DE DADOS',
                'descricao': 'Processamento e an√°lise de grandes conjuntos de dados',
                'exemplo': '''# An√°lise de dados de vendas
import random

print("üìä AN√ÅLISE DE DADOS DE VENDAS")
print("=" * 35)

# Simulando dados de vendas de 30 dias
vendas_diarias = [random.randint(800, 2500) for _ in range(30)]

print(f"üìà VENDAS DOS √öLTIMOS 30 DIAS:")
print(f"Dados: {vendas_diarias[:10]}... (primeiros 10 dias)")

# An√°lises estat√≠sticas
total_vendas = sum(vendas_diarias)
media_diaria = total_vendas / len(vendas_diarias)
melhor_dia = max(vendas_diarias)
pior_dia = min(vendas_diarias)

print(f"\\nüìä ESTAT√çSTICAS:")
print(f"Total do m√™s: R$ {total_vendas:,}")
print(f"M√©dia di√°ria: R$ {media_diaria:.2f}")
print(f"Melhor dia: R$ {melhor_dia:,}")
print(f"Pior dia: R$ {pior_dia:,}")

# Tend√™ncias
dias_acima_media = [v for v in vendas_diarias if v > media_diaria]
print(f"\\nüìà PERFORMANCE:")
print(f"Dias acima da m√©dia: {len(dias_acima_media)}/{len(vendas_diarias)}")
print(f"Taxa de sucesso: {len(dias_acima_media)/len(vendas_diarias)*100:.1f}%")

# Metas
meta_diaria = 1500
dias_meta = [v for v in vendas_diarias if v >= meta_diaria]
print(f"\\nüéØ METAS:")
print(f"Meta di√°ria: R$ {meta_diaria:,}")
print(f"Dias que bateram meta: {len(dias_meta)}")
print(f"Percentual de meta: {len(dias_meta)/len(vendas_diarias)*100:.1f}%")'''
            },
            {
                'titulo': 'üéµ STREAMING E M√çDIA',
                'descricao': 'Playlists e recomenda√ß√µes de conte√∫do',
                'exemplo': '''# Sistema de playlist musical
print("üéµ SISTEMA DE PLAYLIST")
print("=" * 25)

class Playlist:
    def __init__(self, nome):
        self.nome = nome
        self.musicas = []
        self.posicao_atual = 0
    
    def adicionar_musica(self, titulo, artista, duracao):
        musica = {
            'titulo': titulo,
            'artista': artista,
            'duracao': duracao,
            'tocada': False
        }
        self.musicas.append(musica)
        print(f"üéµ '{titulo}' por {artista} adicionada")
    
    def tocar_proxima(self):
        if self.posicao_atual < len(self.musicas):
            musica = self.musicas[self.posicao_atual]
            musica['tocada'] = True
            print(f"‚ñ∂Ô∏è Tocando: {musica['titulo']} - {musica['artista']}")
            self.posicao_atual += 1
        else:
            print("üîö Fim da playlist")
    
    def shuffle(self):
        import random
        random.shuffle(self.musicas)
        self.posicao_atual = 0
        print("üîÄ Playlist embaralhada!")
    
    def estatisticas(self):
        total = len(self.musicas)
        tocadas = sum(1 for m in self.musicas if m['tocada'])
        duracao_total = sum(m['duracao'] for m in self.musicas)
        
        print(f"\\nüìä ESTAT√çSTICAS DA PLAYLIST:")
        print(f"Nome: {self.nome}")
        print(f"Total de m√∫sicas: {total}")
        print(f"J√° tocadas: {tocadas}")
        print(f"Dura√ß√£o total: {duracao_total} minutos")

# Criando playlist
rock_classico = Playlist("Rock Cl√°ssico")

# Adicionando m√∫sicas
rock_classico.adicionar_musica("Bohemian Rhapsody", "Queen", 6)
rock_classico.adicionar_musica("Stairway to Heaven", "Led Zeppelin", 8)
rock_classico.adicionar_musica("Hotel California", "Eagles", 6)
rock_classico.adicionar_musica("Sweet Child O' Mine", "Guns N' Roses", 5)

# Tocando algumas m√∫sicas
print("\\nüé∂ REPRODUZINDO:")
rock_classico.tocar_proxima()
rock_classico.tocar_proxima()

# Estat√≠sticas
rock_classico.estatisticas()

# Shuffle
rock_classico.shuffle()'''
            }
        ]
        
        for i, caso in enumerate(casos_uso):
            self.print_colored(f"\n{caso['titulo']}", "warning")
            self.print_colored(f"üìù {caso['descricao']}", "text")
            
            self.print_code_section("EXEMPLO", caso['exemplo'])
            
            print("\nüöÄ Executando exemplo:")
            self.executar_codigo(caso['exemplo'])
            
            if i < len(casos_uso) - 1:
                input("\nüî∏ Pressione ENTER para o pr√≥ximo caso...")
        
        self.print_success("\nüåü Listas s√£o fundamentais em praticamente todos os sistemas!")
        self.pausar()
    
    def _secao_melhores_praticas(self) -> None:
        """Se√ß√£o: Melhores pr√°ticas com listas"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("MELHORES PR√ÅTICAS COM LISTAS", "‚≠ê")
        
        praticas = [
            {
                'titulo': 'üéØ Use nomes descritivos para listas',
                'ruim': '''# ‚ùå EVITE: Nomes gen√©ricos
lista = ["Jo√£o", "Maria", "Pedro"]
l = [1, 2, 3, 4, 5]
dados = ["produto1", 10, 29.90]''',
                'bom': '''# ‚úÖ PREFIRA: Nomes que explicam o conte√∫do
nomes_alunos = ["Jo√£o", "Maria", "Pedro"]
idades = [1, 2, 3, 4, 5]  
info_produto = ["produto1", 10, 29.90]'''
            },
            {
                'titulo': '‚ö° Prefira list comprehensions quando apropriado',
                'ruim': '''# ‚ùå EVITE: Loop desnecess√°rio para opera√ß√µes simples
numeros = [1, 2, 3, 4, 5]
quadrados = []
for num in numeros:
    quadrados.append(num ** 2)''',
                'bom': '''# ‚úÖ PREFIRA: List comprehension mais elegante
numeros = [1, 2, 3, 4, 5]
quadrados = [num ** 2 for num in numeros]
# Mais conciso e pyth√¥nico'''
            },
            {
                'titulo': 'üîç Verifique limites antes de acessar √≠ndices',
                'ruim': '''# ‚ùå PERIGO: Acesso sem verifica√ß√£o
lista = [1, 2, 3]
print(lista[5])  # IndexError!''',
                'bom': '''# ‚úÖ SEGURO: Sempre verifique os limites
lista = [1, 2, 3]
indice = 5

if 0 <= indice < len(lista):
    print(lista[indice])
else:
    print("√çndice fora do alcance")'''
            },
            {
                'titulo': 'üöÄ Use m√©todos apropriados para cada opera√ß√£o',
                'ruim': '''# ‚ùå EVITE: M√©todos incorretos
lista = [1, 2, 3]
# Forma lenta de verificar exist√™ncia
existe = False
for item in lista:
    if item == 2:
        existe = True
        break''',
                'bom': '''# ‚úÖ PREFIRA: Operadores e m√©todos built-in
lista = [1, 2, 3]
# Forma r√°pida e clara
existe = 2 in lista
posicao = lista.index(2) if 2 in lista else -1'''
            }
        ]
        
        for i, pratica in enumerate(praticas, 1):
            self.print_colored(f"\n{i}. {pratica['titulo']}", "warning")
            
            self.print_colored("\n‚ùå EVITE:", "error")
            self.exemplo(pratica['ruim'])
            
            self.print_colored("‚úÖ PREFIRA:", "success")
            self.exemplo(pratica['bom'])
            
            if i < len(praticas):
                input("\nüî∏ Pressione ENTER para a pr√≥xima pr√°tica...")
        
        self.print_tip("Listas bem utilizadas tornam seu c√≥digo mais leg√≠vel e eficiente!")
        self.pausar()
    
    def _secao_erros_comuns(self) -> None:
        """Se√ß√£o: Erros comuns e como evitar"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("ERROS COMUNS COM LISTAS", "‚ö†Ô∏è")
        
        erros = [
            {
                'titulo': 'üìç Erro de √≠ndice - IndexError',
                'erro': '''# ‚ùå ERRO: Acessar √≠ndice que n√£o existe
frutas = ["ma√ß√£", "banana", "laranja"]
print(frutas[5])  # IndexError! Lista s√≥ tem 3 itens (0,1,2)''',
                'correto': '''# ‚úÖ CORRETO: Verificar tamanho antes de acessar
frutas = ["ma√ß√£", "banana", "laranja"]

# Op√ß√£o 1: Verifica√ß√£o manual
if len(frutas) > 5:
    print(frutas[5])
else:
    print("√çndice fora do alcance")

# Op√ß√£o 2: Try/except
try:
    print(frutas[5])
except IndexError:
    print("√çndice n√£o existe na lista")''',
                'dica': 'Sempre verifique se o √≠ndice est√° dentro dos limites da lista'
            },
            {
                'titulo': 'üîÑ Modificar lista durante itera√ß√£o',
                'erro': '''# ‚ùå ERRO: Modificar lista enquanto itera
numeros = [1, 2, 3, 4, 5]
for num in numeros:
    if num % 2 == 0:
        numeros.remove(num)  # Problema: modifica durante loop!''',
                'correto': '''# ‚úÖ CORRETO: Criar nova lista ou iterar em c√≥pia
numeros = [1, 2, 3, 4, 5]

# Op√ß√£o 1: List comprehension
impares = [num for num in numeros if num % 2 != 0]

# Op√ß√£o 2: Iterar em c√≥pia
numeros_copia = numeros.copy()
for num in numeros_copia:
    if num % 2 == 0:
        numeros.remove(num)''',
                'dica': 'Nunca modifique uma lista enquanto est√° iterando sobre ela'
            },
            {
                'titulo': 'üîç Usar remove() sem verificar exist√™ncia',
                'erro': '''# ‚ùå ERRO: Tentar remover item que n√£o existe
lista = ["a", "b", "c"]
lista.remove("d")  # ValueError! "d" n√£o existe''',
                'correto': '''# ‚úÖ CORRETO: Verificar antes de remover
lista = ["a", "b", "c"]

# Op√ß√£o 1: Verifica√ß√£o com 'in'
if "d" in lista:
    lista.remove("d")
else:
    print("Item n√£o encontrado")

# Op√ß√£o 2: Try/except
try:
    lista.remove("d")
except ValueError:
    print("Item n√£o existe na lista")''',
                'dica': 'Sempre verifique se o item existe antes de tentar remov√™-lo'
            },
            {
                'titulo': 'üìù Confundir append() com extend()',
                'erro': '''# ‚ùå ERRO: Usar append() para m√∫ltiplos itens
lista = [1, 2, 3]
lista.append([4, 5, 6])  # Adiciona UMA lista, n√£o os itens
print(lista)  # [1, 2, 3, [4, 5, 6]] - lista aninhada!''',
                'correto': '''# ‚úÖ CORRETO: Use extend() para m√∫ltiplos itens
lista = [1, 2, 3]

# Para adicionar m√∫ltiplos itens individuais
lista.extend([4, 5, 6])
print(lista)  # [1, 2, 3, 4, 5, 6]

# append() √© para adicionar UM item (pode ser uma lista)
outra_lista = [1, 2, 3]
outra_lista.append(4)  # Adiciona o n√∫mero 4
print(outra_lista)  # [1, 2, 3, 4]''',
                'dica': 'append() adiciona UM item, extend() adiciona M√öLTIPLOS itens'
            }
        ]
        
        for i, erro in enumerate(erros, 1):
            self.print_colored(f"\n{i}. {erro['titulo']}", "warning")
            
            self.print_colored("\n‚ùå C√ìDIGO COM ERRO:", "error")
            self.exemplo(erro['erro'])
            
            self.print_colored("‚úÖ C√ìDIGO CORRETO:", "success")
            self.exemplo(erro['correto'])
            
            self.print_tip(erro['dica'])
            
            if i < len(erros):
                input("\nüî∏ Pressione ENTER para o pr√≥ximo erro...")
        
        self.print_success("\nüéØ Conhecendo os erros comuns, voc√™ os evitar√°!")
        self.pausar()
    
    def _secao_pratica_interativa(self) -> None:
        """Se√ß√£o de pr√°tica interativa do m√≥dulo"""
        
        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_section("HORA DE PRATICAR!", "üéØ", "success")
        self.print_colored("Vamos testar o que voc√™ aprendeu sobre listas!", "text")
        
        # === INSTRU√á√ïES PARA INICIANTES ===
        self.print_tip("Para iniciantes: Cada exerc√≠cio √© opcional, mas recomendamos fazer todos!")
        self.print_colored("\nüéì SOBRE OS EXERC√çCIOS:", "info")
        self.print_colored("‚Ä¢ N√£o se preocupe se errar - faz parte do aprendizado!", "text")
        self.print_colored("‚Ä¢ Voc√™ pode tentar quantas vezes quiser", "text")
        self.print_colored("‚Ä¢ Digite 'help' se precisar de ajuda", "text")
        self.print_colored("‚Ä¢ Use Ctrl+C para voltar ao menu principal se necess√°rio", "text")
        
        # === DEFINI√á√ÉO DOS EXERC√çCIOS ===
        exercicios = [
            {
                'title': 'Quiz: Conhecimentos sobre Listas',
                'type': 'quiz',
                'questions': [
                    {
                        'question': 'Como voc√™ acessa o primeiro elemento de uma lista?',
                        'answer': ['lista[0]', '[0]', '√≠ndice 0'],
                        'hint': 'Listas come√ßam no √≠ndice 0!'
                    },
                    {
                        'question': 'Qual m√©todo adiciona um item no final da lista?',
                        'answer': ['append', 'append()'],
                        'hint': '√â o m√©todo mais comum para adicionar itens'
                    },
                    {
                        'question': 'Como voc√™ acessa o √∫ltimo elemento usando √≠ndice negativo?',
                        'answer': ['lista[-1]', '[-1]', '-1'],
                        'hint': '√çndices negativos contam do final'
                    },
                    {
                        'question': 'Qual fun√ß√£o retorna o tamanho de uma lista?',
                        'answer': ['len', 'len()'],
                        'hint': '√â uma fun√ß√£o built-in muito usada'
                    },
                    {
                        'question': 'Qual m√©todo remove um item por valor?',
                        'answer': ['remove', 'remove()'],
                        'hint': 'Remove a primeira ocorr√™ncia do valor'
                    }
                ]
            },
            {
                'title': 'Desafio: Complete o C√≥digo',
                'type': 'code_completion',
                'exercises': [
                    {
                        'instruction': 'B√ÅSICO: Complete para adicionar "ma√ß√£" no final da lista',
                        'starter': '''frutas = ["banana", "laranja"]
frutas.___("ma√ß√£")
print(frutas)''',
                        'solution': 'append',
                        'type': 'simple'
                    },
                    {
                        'instruction': 'INTERMEDI√ÅRIO: Complete para acessar o √∫ltimo elemento',
                        'starter': '''numeros = [10, 20, 30, 40, 50]
ultimo = numeros[___]
print(f"√öltimo n√∫mero: {ultimo}")''',
                        'solution': '-1',
                        'type': 'intermediate'
                    },
                    {
                        'instruction': 'AVAN√áADO: Complete para remover item e obter o tamanho',
                        'starter': '''cores = ["azul", "verde", "vermelho", "amarelo"]
cores.___("verde")
tamanho = ___(cores)
print(f"Cores restantes: {cores}")
print(f"Total: {tamanho}")''',
                        'solution': 'remove\nlen',
                        'type': 'advanced'
                    }
                ]
            },
            {
                'title': 'Exerc√≠cio Criativo: Minha Lista Personalizada',
                'type': 'creative',
                'instruction': 'Crie uma lista com algo que voc√™ gosta (filmes, livros, jogos, etc.) e mostre opera√ß√µes interessantes!'
            }
        ]
        
        # === MENU PRINCIPAL DE EXERC√çCIOS ===
        while True:
            print("\nEscolha uma atividade:")
            print("1. üìù Quiz de Conhecimentos")
            print("2. üíª Complete o C√≥digo")
            print("3. üé® Exerc√≠cio Criativo")
            print("0. Continuar para o Mini Projeto")
            
            try:
                escolha = input("\nüëâ Sua escolha: ").strip().lower()
                
                if escolha in ["0", "continuar", "sair", "proximo"]:
                    break
                elif escolha in ["1", "quiz", "conhecimentos"]:
                    try:
                        self._run_quiz(exercicios[0])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Quiz interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no quiz. Continuando...")
                elif escolha in ["2", "codigo", "completar"]:
                    try:
                        self._run_code_completion(exercicios[1])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio de c√≥digo interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio de c√≥digo. Continuando...")
                elif escolha in ["3", "criativo"]:
                    try:
                        self._run_creative_exercise(exercicios[2])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio criativo interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio criativo. Continuando...")
                elif escolha in ["help", "ajuda", "h", "?"]:
                    self._show_help()
                else:
                    self.print_warning("‚ùå Op√ß√£o inv√°lida! Digite 1, 2, 3, 0 ou 'help' para ajuda.")
            
            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Opera√ß√£o cancelada pelo usu√°rio. Voltando ao menu principal...")
                return
            except Exception as e:
                self.print_warning("‚ùå Erro inesperado no menu. Tente novamente.")
    
    def _show_help(self) -> None:
        """Mostra ajuda sobre as op√ß√µes dispon√≠veis"""
        self.print_section("AJUDA - SE√á√ÉO DE PR√ÅTICA", "‚ùì", "info")
        help_text = [
            "üìù OP√á√ÉO 1 - Quiz: Teste seus conhecimentos sobre listas e seus m√©todos",
            "üíª OP√á√ÉO 2 - Complete o C√≥digo: 3 exerc√≠cios progressivos de programa√ß√£o",
            "üé® OP√á√ÉO 3 - Exerc√≠cio Criativo: Crie sua pr√≥pria lista tem√°tica",
            "üî¢ OP√á√ÉO 0 - Continue para o Mini Projeto Organizador Musical",
            "",
            "üí° DICAS:",
            "‚Ä¢ Voc√™ pode digitar o n√∫mero ou palavras como 'quiz', 'codigo'",
            "‚Ä¢ Digite 'help' a qualquer momento para ver esta ajuda",
            "‚Ä¢ Use Ctrl+C se quiser voltar ao menu principal",
            "‚Ä¢ Recomendamos fazer todas as atividades para aprender melhor!"
        ]
        
        for line in help_text:
            if line:
                self.print_colored(f"  {line}", "text")
            else:
                print()
        
        input("\nüî∏ Pressione ENTER para voltar ao menu...")
    
    def _run_quiz(self, quiz_data: dict) -> None:
        """Executa um quiz interativo"""
        self.print_section(quiz_data['title'], "üìù")
        score = 0
        total_questions = len(quiz_data['questions'])
        
        for i, q in enumerate(quiz_data['questions'], 1):
            print(f"\nüìù Pergunta {i} de {total_questions}:")
            correto = self.exercicio(
                q['question'],
                q['answer'],
                q['hint']
            )
            if correto:
                score += 1
        
        # Feedback detalhado baseado na pontua√ß√£o
        percentage = (score / total_questions) * 100
        
        self.print_success(f"\nüèÜ RESULTADO: {score} de {total_questions} perguntas corretas ({percentage:.0f}%)")
        
        if percentage >= 80:
            self.print_success("üåü Excelente! Voc√™ domina as listas!")
        elif percentage >= 60:
            self.print_success("üëè Muito bom! Continue praticando!")
        else:
            self.print_tip("üí™ Continue estudando! Revise as se√ß√µes te√≥ricas.")
        
        self.pausar()
    
    def _run_code_completion(self, exercise_data: dict) -> None:
        """Executa exerc√≠cio de completar c√≥digo"""
        self.print_section(exercise_data['title'], "üíª")
        
        for i, ex in enumerate(exercise_data['exercises'], 1):
            print(f"\nüéØ EXERC√çCIO {i} de {len(exercise_data['exercises'])}:")
            print(f"üìù {ex['instruction']}")
            self.print_code_section("C√≥digo para Completar", ex['starter'])
            
            exercise_type = ex.get('type', 'simple')
            
            if exercise_type == 'simple':
                print(f"\n‚úçÔ∏è Complete com o m√©todo:")
                user_input = input(">>> ").strip()
                if user_input.lower() == ex['solution'].lower():
                    self.print_success("‚úÖ Perfeito! Resposta correta!")
                    # Mostrar c√≥digo completo funcionando
                    codigo_completo = ex['starter'].replace('___', user_input)
                    print("\nüöÄ C√≥digo completo:")
                    self.executar_codigo(codigo_completo)
                else:
                    self.print_warning(f"‚ùå Resposta incorreta. A resposta era: {ex['solution']}")
                    
            elif exercise_type == 'intermediate':
                print(f"\n‚úçÔ∏è Complete com o √≠ndice:")
                user_input = input(">>> ").strip()
                if user_input.lower() == ex['solution'].lower():
                    self.print_success("‚úÖ Correto! √çndice perfeito!")
                    codigo_completo = ex['starter'].replace('___', user_input)
                    print("\nüöÄ C√≥digo completo:")
                    self.executar_codigo(codigo_completo)
                else:
                    self.print_warning(f"‚ùå Resposta incorreta. A resposta era: {ex['solution']}")
                    
            elif exercise_type == 'advanced':
                print(f"\n‚úçÔ∏è Complete as duas partes (uma por linha):")
                print("Parte 1:")
                input1 = input(">>> ").strip()
                print("Parte 2:")
                input2 = input(">>> ").strip()
                
                solutions = ex['solution'].split('\n')
                correct = (input1.lower() == solutions[0].lower() and 
                          input2.lower() == solutions[1].lower())
                
                if correct:
                    self.print_success("‚úÖ Excelente! C√≥digo avan√ßado completo!")
                    codigo_completo = ex['starter'].replace('___', input1, 1).replace('___', input2, 1)
                    print("\nüöÄ C√≥digo completo:")
                    self.executar_codigo(codigo_completo)
                else:
                    self.print_warning(f"‚ùå Resposta incorreta. As respostas eram: {solutions[0]} e {solutions[1]}")
            
            if i < len(exercise_data['exercises']):
                input("\nüî∏ Pressione ENTER para o pr√≥ximo exerc√≠cio...")
        
        self.print_success("\nüéâ Parab√©ns! Voc√™ completou todos os exerc√≠cios de listas!")
        self.pausar()
    
    def _run_creative_exercise(self, exercise_data: dict) -> None:
        """Executa exerc√≠cio criativo"""
        self.print_section(exercise_data['title'], "üé®")
        print(f"\n{exercise_data['instruction']}")
        
        print("\nüí° Exemplos de listas tem√°ticas:")
        print("üé¨ Lista de filmes favoritos")
        print("üìö Lista de livros para ler") 
        print("üéµ Lista de m√∫sicas favoritas")
        print("üçï Lista de comidas preferidas")
        print("üèñÔ∏è Lista de lugares para visitar")
        
        print("\nüéØ Vamos criar sua lista personalizada:")
        
        tema = input("\nüìù Qual o tema da sua lista? (ex: filmes, livros, m√∫sicas): ").strip()
        
        if tema:
            print(f"\nüåü √ìtima escolha! Vamos criar uma lista de {tema}!")
            
            # Coletar itens
            itens = []
            print(f"\nüìã Digite itens para sua lista de {tema} (digite 'fim' para terminar):")
            
            while len(itens) < 5:  # Limite para n√£o ser muito longo
                item = input(f"Item {len(itens) + 1}: ").strip()
                if item.lower() == 'fim':
                    break
                if item:
                    itens.append(item)
                    print(f"‚úÖ '{item}' adicionado!")
            
            if itens:
                # Gerar c√≥digo baseado na lista criada
                itens_str = str(itens)
                codigo_criativo = f'''# üé® MINHA LISTA PERSONALIZADA DE {tema.upper()}
print("üìã MINHA LISTA DE {tema.upper()}")
print("=" * 40)

# Lista criada por voc√™
minha_lista = {itens_str}

print(f"üìä Total de itens: {{len(minha_lista)}}")
print()

# Exibindo todos os itens
print("üìù ITENS DA LISTA:")
for i, item in enumerate(minha_lista, 1):
    print(f"{{i}}. {{item}}")

# Opera√ß√µes interessantes
print(f"\\n‚≠ê Primeiro item: {{minha_lista[0]}}")
print(f"üèÜ √öltimo item: {{minha_lista[-1]}}")

# Adicionando um novo item
novo_item = "item especial"
minha_lista.append(novo_item)
print(f"\\n‚ûï Adicionado: {{novo_item}}")
print(f"üìä Nova lista: {{minha_lista}}")

# Verificando se existe um item
item_procurado = minha_lista[0]  # Primeiro item
if item_procurado in minha_lista:
    posicao = minha_lista.index(item_procurado)
    print(f"\\nüîç '{{item_procurado}}' est√° na posi√ß√£o {{posicao}}")

print("\\n‚ú® Lista criada com sucesso!")'''
                
                print(f"\nüöÄ Aqui est√° seu c√≥digo personalizado para {tema}:")
                self.exemplo(codigo_criativo)
                
                print("\nüé¨ Executando sua lista:")
                self.executar_codigo(codigo_criativo)
                
                print(f"\nüéâ Incr√≠vel! Voc√™ criou uma lista personalizada de {tema}!")
                self.print_success("üèÜ Parab√©ns pela criatividade com listas!")
            else:
                print("\nüé® Sem problemas! Listas podem come√ßar vazias tamb√©m!")
        else:
            print("\nüí° Pr√≥xima vez voc√™ pode criar sua lista tem√°tica!")
        
        self.pausar()
    
    def _mini_projeto_organizador_musical(self) -> None:
        """Mini Projeto - M√≥dulo 9: Organizador Musical Inteligente"""
        
        # === CABE√áALHO IMPACTANTE ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üéØ MINI PROJETO: ORGANIZADOR MUSICAL INTELIGENTE")
        else:
            print("\n" + "="*50)
            print("üéØ MINI PROJETO: ORGANIZADOR MUSICAL INTELIGENTE")
            print("="*50)
        
        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_success("üéâ Vamos criar um sistema completo de organiza√ß√£o musical usando listas!")
        
        self.print_concept(
            "Organizador Musical Inteligente",
            "Um sistema que gerencia playlists, artistas e estat√≠sticas musicais usando o poder das listas"
        )
        
        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nEste tipo de programa √© √∫til para:", "text")
        usos_praticos = [
            "Spotify - Organiza√ß√£o de playlists e recomenda√ß√µes",
            "Apple Music - Biblioteca musical e estat√≠sticas",
            "YouTube Music - Gerenciamento de favoritos",
            "R√°dios Online - Programa√ß√£o e rota√ß√£o musical"
        ]
        for uso in usos_praticos:
            self.print_colored(f"‚Ä¢ {uso}", "accent")
        
        # === DESENVOLVIMENTO PASSO A PASSO ===
        
        # PASSO 1: Coleta de dados musicais
        self.print_section("PASSO 1: Configurando biblioteca musical", "üìù", "info")
        self.print_tip("Vamos criar um sistema com m√∫ltiplas listas para diferentes aspectos musicais")
        
        try:
            print("\nüéµ Preparando biblioteca musical:")
            generos_disponiveis = ["Rock", "Pop", "Jazz", "Blues", "Eletr√¥nica", "Cl√°ssica"]
            
            for genero in generos_disponiveis:
                print(f"  üéº {genero}")
            
            input("\nüî∏ Pressione ENTER para ver o sistema...")
            
        except KeyboardInterrupt:
            self.print_warning("Projeto cancelado pelo usu√°rio")
            return
        
        # PASSO 2: Implementa√ß√£o do sistema
        self.print_section("PASSO 2: Construindo o organizador", "‚öôÔ∏è", "success")
        self.print_colored("Agora vamos criar um sistema completo de organiza√ß√£o:", "text")
        
        # PASSO 3: Sistema funcionando
        self.print_section("PASSO 3: Sistema musical em funcionamento", "üé¨", "warning")
        
        # === C√ìDIGO FINAL GERADO ===
        self.print_colored("Aqui est√° o c√≥digo completo do seu Organizador Musical:", "text")
        
        codigo_final = f'''# üêç PROJETO: ORGANIZADOR MUSICAL INTELIGENTE
# M√≥dulo 9: Listas e Cole√ß√µes

import random

class OrganizadorMusical:
    def __init__(self):
        """Inicializa o organizador musical"""
        # Listas principais do sistema
        self.biblioteca = []
        self.playlists = []
        self.artistas_favoritos = []
        self.historico_reproducao = []
        
        # Dados de exemplo
        self._carregar_dados_exemplo()
    
    def _carregar_dados_exemplo(self):
        """Carrega dados de exemplo para demonstra√ß√£o"""
        # Biblioteca principal de m√∫sicas
        self.biblioteca = [
            {{"titulo": "Bohemian Rhapsody", "artista": "Queen", "genero": "Rock", "duracao": 6, "plays": 150}},
            {{"titulo": "Billie Jean", "artista": "Michael Jackson", "genero": "Pop", "duracao": 4, "plays": 200}},
            {{"titulo": "Take Five", "artista": "Dave Brubeck", "genero": "Jazz", "duracao": 5, "plays": 80}},
            {{"titulo": "Hotel California", "artista": "Eagles", "genero": "Rock", "duracao": 6, "plays": 175}},
            {{"titulo": "Thriller", "artista": "Michael Jackson", "genero": "Pop", "duracao": 6, "plays": 190}},
            {{"titulo": "Blue in Green", "artista": "Miles Davis", "genero": "Jazz", "duracao": 5, "plays": 65}},
            {{"titulo": "Sweet Child O' Mine", "artista": "Guns N' Roses", "genero": "Rock", "duracao": 5, "plays": 140}},
            {{"titulo": "Shape of You", "artista": "Ed Sheeran", "genero": "Pop", "duracao": 4, "plays": 300}}
        ]
        
        # Playlists tem√°ticas
        self.playlists = [
            {{"nome": "Rock Cl√°ssico", "musicas": ["Bohemian Rhapsody", "Hotel California", "Sweet Child O' Mine"]}},
            {{"nome": "Hits do Pop", "musicas": ["Billie Jean", "Thriller", "Shape of You"]}},
            {{"nome": "Jazz Suave", "musicas": ["Take Five", "Blue in Green"]}}
        ]
        
        # Artistas favoritos (lista simples)
        self.artistas_favoritos = ["Queen", "Michael Jackson", "Miles Davis"]
    
    def exibir_biblioteca(self):
        """Exibe toda a biblioteca musical"""
        print("\\nüéµ BIBLIOTECA MUSICAL")
        print("=" * 70)
        print(f"{{'T√çTULO':<20}} {{'ARTISTA':<15}} {{'G√äNERO':<10}} {{'DURA√á√ÉO':<8}} {{'PLAYS':<6}}")
        print("=" * 70)
        
        for musica in self.biblioteca:
            print(f"{{musica['titulo']:<20}} {{musica['artista']:<15}} "
                  f"{{musica['genero']:<10}} {{musica['duracao']:<8}}min {{musica['plays']:<6}}")
        
        print(f"\\nüìä Total: {{len(self.biblioteca)}} m√∫sicas")
    
    def buscar_por_artista(self, nome_artista):
        """Busca todas as m√∫sicas de um artista"""
        musicas_artista = [m for m in self.biblioteca if m['artista'].lower() == nome_artista.lower()]
        
        if musicas_artista:
            print(f"\\nüé§ M√öSICAS DE {{nome_artista.upper()}}:")
            print("-" * 40)
            for musica in musicas_artista:
                print(f"‚Ä¢ {{musica['titulo']}} ({{musica['genero']}}) - {{musica['plays']}} plays")
            return musicas_artista
        else:
            print(f"‚ùå Nenhuma m√∫sica encontrada para {{nome_artista}}")
            return []
    
    def buscar_por_genero(self, genero):
        """Busca todas as m√∫sicas de um g√™nero"""
        musicas_genero = [m for m in self.biblioteca if m['genero'].lower() == genero.lower()]
        
        if musicas_genero:
            print(f"\\nüéº M√öSICAS DE {{genero.upper()}}:")
            print("-" * 40)
            for musica in musicas_genero:
                print(f"‚Ä¢ {{musica['titulo']}} - {{musica['artista']}} ({{musica['plays']}} plays)")
            return musicas_genero
        else:
            print(f"‚ùå Nenhuma m√∫sica encontrada no g√™nero {{genero}}")
            return []
    
    def top_musicas(self, limite=5):
        """Exibe o top de m√∫sicas mais tocadas"""
        musicas_ordenadas = sorted(self.biblioteca, key=lambda x: x['plays'], reverse=True)
        top_lista = musicas_ordenadas[:limite]
        
        print(f"\\nüèÜ TOP {{limite}} MAIS TOCADAS:")
        print("-" * 50)
        for i, musica in enumerate(top_lista, 1):
            print(f"{{i}}. {{musica['titulo']}} - {{musica['artista']}} ({{musica['plays']}} plays)")
        
        return top_lista
    
    def criar_playlist_automatica(self, genero, tamanho=5):
        """Cria playlist autom√°tica baseada em g√™nero"""
        musicas_genero = [m for m in self.biblioteca if m['genero'].lower() == genero.lower()]
        
        if len(musicas_genero) >= tamanho:
            # Seleciona m√∫sicas aleat√≥rias do g√™nero
            playlist_musicas = random.sample(musicas_genero, tamanho)
            nome_playlist = f"Mix {{genero}} Autom√°tico"
            
            nova_playlist = {{
                "nome": nome_playlist,
                "musicas": [m['titulo'] for m in playlist_musicas]
            }}
            
            self.playlists.append(nova_playlist)
            
            print(f"\\nüéß PLAYLIST CRIADA: {{nome_playlist}}")
            print("-" * 40)
            for i, musica in enumerate(playlist_musicas, 1):
                print(f"{{i}}. {{musica['titulo']}} - {{musica['artista']}}")
            
            return nova_playlist
        else:
            print(f"‚ùå N√£o h√° m√∫sicas suficientes do g√™nero {{genero}}")
            return None
    
    def exibir_playlists(self):
        """Exibe todas as playlists"""
        print("\\nüìã PLAYLISTS DISPON√çVEIS:")
        print("=" * 40)
        
        for i, playlist in enumerate(self.playlists, 1):
            print(f"\\n{{i}}. {{playlist['nome']}} ({{len(playlist['musicas'])}} m√∫sicas)")
            for j, musica in enumerate(playlist['musicas'], 1):
                print(f"   {{j}}. {{musica}}")
    
    def estatisticas_gerais(self):
        """Exibe estat√≠sticas gerais da biblioteca"""
        total_musicas = len(self.biblioteca)
        total_artistas = len(set(m['artista'] for m in self.biblioteca))
        total_generos = len(set(m['genero'] for m in self.biblioteca))
        total_plays = sum(m['plays'] for m in self.biblioteca)
        duracao_total = sum(m['duracao'] for m in self.biblioteca)
        
        print("\\nüìä ESTAT√çSTICAS GERAIS:")
        print("=" * 30)
        print(f"üéµ Total de m√∫sicas: {{total_musicas}}")
        print(f"üé§ Total de artistas: {{total_artistas}}")
        print(f"üéº Total de g√™neros: {{total_generos}}")
        print(f"‚ñ∂Ô∏è Total de reprodu√ß√µes: {{total_plays:,}}")
        print(f"‚è∞ Dura√ß√£o total: {{duracao_total}} minutos ({{duracao_total/60:.1f}} horas)")
        print(f"üìà M√©dia de plays por m√∫sica: {{total_plays/total_musicas:.1f}}")
        
        # G√™nero mais popular
        generos_count = {{}}
        for musica in self.biblioteca:
            genero = musica['genero']
            generos_count[genero] = generos_count.get(genero, 0) + musica['plays']
        
        genero_popular = max(generos_count, key=generos_count.get)
        print(f"üèÜ G√™nero mais tocado: {{genero_popular}}")

# === DEMONSTRA√á√ÉO DO SISTEMA ===
print("üéµ ORGANIZADOR MUSICAL INTELIGENTE V1.0")
print("=" * 50)

# Criando inst√¢ncia do organizador
organizador = OrganizadorMusical()

# Demonstra√ß√£o 1: Exibir biblioteca
organizador.exibir_biblioteca()

# Demonstra√ß√£o 2: Buscar por artista
organizador.buscar_por_artista("Michael Jackson")

# Demonstra√ß√£o 3: Top m√∫sicas
organizador.top_musicas(3)

# Demonstra√ß√£o 4: Buscar por g√™nero
organizador.buscar_por_genero("Rock")

# Demonstra√ß√£o 5: Criar playlist autom√°tica
organizador.criar_playlist_automatica("Jazz", 2)

# Demonstra√ß√£o 6: Exibir todas as playlists
organizador.exibir_playlists()

# Demonstra√ß√£o 7: Estat√≠sticas gerais
organizador.estatisticas_gerais()

print("\\n‚ú® ORGANIZADOR FUNCIONANDO PERFEITAMENTE!")
print("üéß Suas m√∫sicas nunca estiveram t√£o bem organizadas!")'''
        
        self.exemplo(codigo_final)
        
        # === EXECU√á√ÉO DO RESULTADO ===
        self.print_section("RESULTADO FINAL", "üé¨", "warning")
        print("üöÄ Executando seu Organizador Musical Inteligente:")
        self.executar_codigo(codigo_final)
        
        # === MENSAGEM DE CONQUISTA ===
        self.print_success("üéâ PARAB√âNS! Voc√™ criou um organizador musical completo!")
        
        # === APLICA√á√ïES AVAN√áADAS ===
        self.print_section("PR√ìXIMOS PASSOS", "üöÄ", "info")
        proximos_passos = [
            "Adicionar sistema de avalia√ß√£o e coment√°rios",
            "Implementar algoritmos de recomenda√ß√£o musical",
            "Integrar com APIs de streaming (Spotify, Apple Music)",
            "Criar interface gr√°fica para o organizador",
            "Adicionar an√°lise de letras e sentimentos musicais"
        ]
        for passo in proximos_passos:
            self.print_colored(f"‚Ä¢ {passo}", "primary")
        
        self.print_success("\nüèÜ CONQUISTA DESBLOQUEADA: Maestro das Listas!")
        
        # === REGISTRO DE CONCLUS√ÉO ===
        self.complete_mini_project("Organizador Musical Inteligente")
        
        self.pausar()


# Para teste standalone
if __name__ == "__main__":
    module = Modulo09Listas()
    print("Teste do m√≥dulo 9 - vers√£o refatorada")
    module._listas_interativo()