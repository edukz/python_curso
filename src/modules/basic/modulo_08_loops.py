#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
M√≥dulo 8: Loops (Repeti√ß√µes)
Aprenda sobre estruturas de repeti√ß√£o (for e while)
"""

from ..shared.base_module import BaseModule


class Modulo08Loops(BaseModule):
    """M√≥dulo 8: Dominando Loops e Repeti√ß√µes"""
    
    def __init__(self):
        super().__init__("modulo_8", "Loops e Repeti√ß√µes")
        self.has_mini_project = True
        self.mini_project_points = 60
    
    def execute(self) -> None:
        """Executa o m√≥dulo Loops e Repeti√ß√µes"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return
        
        try:
            self._loops_interativo()
        except Exception as e:
            self.error_handler(lambda: None)
    
    def _loops_interativo(self) -> None:
        """Conte√∫do principal do m√≥dulo Loops e Repeti√ß√µes"""
        # === CABE√áALHO VISUAL ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üîÑ M√ìDULO 8: DOMINANDO LOOPS E REPETI√á√ïES")
        else:
            print("\n" + "="*50)
            print("üîÑ M√ìDULO 8: DOMINANDO LOOPS E REPETI√á√ïES")
            print("="*50)
        
        # === MENSAGENS MOTIVACIONAIS ===
        self.print_success("üéâ Vamos aprender a automatizar tarefas repetitivas como um profissional!")
        self.print_tip("Este m√≥dulo est√° dividido em se√ß√µes interativas. Voc√™ controla o ritmo!")
        
        # === FLUXO PRINCIPAL COM TRATAMENTO DE CTRL+C ===
        
        # 1. Sistema de navega√ß√£o por se√ß√µes
        try:
            self._navegacao_secoes_interativas()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Navega√ß√£o interrompida pelo usu√°rio. Voltando ao menu principal...")
            return
        
        # 2. Se√ß√£o de Pr√°tica Interativa
        try:
            self._secao_pratica_interativa()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è M√≥dulo interrompido pelo usu√°rio. Voltando ao menu principal...")
            return
        
        # 3. Mini Projeto Pr√°tico
        try:
            self._mini_projeto_gerador_interativo()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Mini projeto interrompido. Voltando ao menu principal...")
            return
        
        # 4. Marcar m√≥dulo como completo
        self.complete_module()
    
    def _navegacao_secoes_interativas(self) -> None:
        """Sistema de navega√ß√£o por se√ß√µes do m√≥dulo"""
        
        # === DEFINI√á√ÉO DAS SE√á√ïES ===
        secoes = [
            {
                'id': 'secao_conceito_loops',
                'titulo': 'üéØ O que s√£o loops na programa√ß√£o?',
                'descricao': 'Entenda como automatizar tarefas repetitivas',
                'funcao': self._secao_conceito_loops
            },
            {
                'id': 'secao_for_basico',
                'titulo': '‚öôÔ∏è Como o loop FOR funciona?',
                'descricao': 'Domine repeti√ß√µes controladas e previs√≠veis',
                'funcao': self._secao_for_basico
            },
            {
                'id': 'secao_while_basico',
                'titulo': 'üîÑ Como o loop WHILE funciona?',
                'descricao': 'Aprenda repeti√ß√µes baseadas em condi√ß√µes',
                'funcao': self._secao_while_basico
            },
            {
                'id': 'secao_exemplos_praticos',
                'titulo': 'üí° Loops em a√ß√£o - Exemplos pr√°ticos',
                'descricao': 'Veja loops resolvendo problemas reais',
                'funcao': self._secao_exemplos_praticos
            },
            {
                'id': 'secao_casos_uso',
                'titulo': 'üåç Onde usar loops na vida real?',
                'descricao': 'Aplica√ß√µes pr√°ticas de loops',
                'funcao': self._secao_casos_uso
            },
            {
                'id': 'secao_melhores_praticas',
                'titulo': '‚≠ê Melhores pr√°ticas com loops',
                'descricao': 'Dicas de profissionais experientes',
                'funcao': self._secao_melhores_praticas
            },
            {
                'id': 'secao_erros_comuns',
                'titulo': '‚ö†Ô∏è Erros comuns e como evitar',
                'descricao': 'Evite loops infinitos e outros problemas',
                'funcao': self._secao_erros_comuns
            }
        ]
        
        secoes_visitadas = set()
        
        # === LOOP PRINCIPAL DE NAVEGA√á√ÉO ===
        while True:
            # Limpa tela e mostra cabe√ßalho
            self.ui.clear_screen() if self.ui else print("\n" + "="*50)
            self.print_section("NAVEGA√á√ÉO DO M√ìDULO", "üìö", "accent")
            self.print_colored("Escolha uma se√ß√£o para estudar:", "text")
            
            # Lista todas as se√ß√µes com status
            print()
            for i, secao in enumerate(secoes, 1):
                status = "‚úÖ" if secao['id'] in secoes_visitadas else "üìñ"
                print(f"{status} {i}. {secao['titulo']}")
                self.print_colored(f"    {secao['descricao']}", "text")
                print()
            
            print("0. üéØ Continuar para os Exerc√≠cios Pr√°ticos")
            
            # Mostra progresso visual
            progresso = len(secoes_visitadas)
            total = len(secoes)
            self.print_colored(f"\nüìä Progresso: {progresso}/{total} se√ß√µes visitadas", "info")
            
            if progresso == total:
                self.print_success("üåü Voc√™ completou todas as se√ß√µes! Est√° pronto para praticar!")
            
            # Processa escolha do usu√°rio
            try:
                escolha = input(f"\nüëâ Escolha uma se√ß√£o (1-{len(secoes)}) ou 0 para continuar: ").strip()
                
                if escolha == "0":
                    # Verifica se visitou se√ß√µes suficientes
                    if progresso >= 3:  # Pelo menos 3 se√ß√µes visitadas
                        break
                    else:
                        self.print_warning("üìö Recomendamos visitar pelo menos 3 se√ß√µes antes de continuar!")
                        continuar = input("Quer continuar mesmo assim? (s/n): ").lower()
                        if continuar in ['s', 'sim', 'yes']:
                            break
                elif escolha.isdigit() and 1 <= int(escolha) <= len(secoes):
                    # Executa se√ß√£o escolhida
                    idx = int(escolha) - 1
                    secoes[idx]['funcao']()
                    secoes_visitadas.add(secoes[idx]['id'])
                else:
                    self.print_warning(f"‚ùå Op√ß√£o inv√°lida! Digite um n√∫mero de 1 a {len(secoes)} ou 0.")
            
            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Pulando para exerc√≠cios pr√°ticos...")
                break
            except Exception as e:
                self.print_warning(f"‚ùå Erro: {str(e)}. Tente novamente.")
    
    def _secao_conceito_loops(self) -> None:
        """Se√ß√£o: O que s√£o loops na programa√ß√£o?"""
        if self.ui:
            self.ui.clear_screen()
        
        # === CABE√áALHO ATRATIVO ===
        self.print_section("O QUE S√ÉO LOOPS NA PROGRAMA√á√ÉO?", "üéØ")
        
        # === DEFINI√á√ÉO DO CONCEITO ===
        self.print_concept(
            "Loops (Repeti√ß√µes)",
            "S√£o estruturas que permitem executar o mesmo c√≥digo v√°rias vezes de forma autom√°tica e eficiente"
        )
        
        # === DICA RELACIONADA ===
        self.print_tip("Imagine ter que escrever 1000 prints diferentes - loops fazem isso em 3 linhas!")
        
        # === ANALOGIA DO COTIDIANO ===
        self.print_colored("\nüè† ANALOGIA DO DIA A DIA:", "warning")
        self.print_colored("Imagine uma m√°quina de lavar roupa:", "text")
        self.print_colored("‚Ä¢ Ela repete o ciclo: molhar ‚Üí esfregar ‚Üí enxaguar", "text")
        self.print_colored("‚Ä¢ Faz isso automaticamente v√°rias vezes", "text")
        self.print_colored("‚Ä¢ Para quando a roupa est√° limpa (condi√ß√£o)", "text")
        input("\nüî∏ Pressione ENTER para continuar...")
        
        # === EXPLICA√á√ÉO T√âCNICA GRADUAL ===
        self.print_colored("\nüîß COMO FUNCIONA NA PR√ÅTICA:", "info")
        passos_tecnicos = [
            "1. Definimos o que queremos repetir (c√≥digo dentro do loop)",
            "2. Estabelecemos quando parar (condi√ß√£o ou contador)",
            "3. O computador executa automaticamente at√© o fim"
        ]
        
        for i, passo in enumerate(passos_tecnicos, 1):
            self.print_colored(passo, "text")
            if i < len(passos_tecnicos):
                input("   ‚è≥ Pressione ENTER para o pr√≥ximo passo...")
        
        # === EXEMPLO DE C√ìDIGO ===
        self.print_colored("\nüíª EXEMPLO PR√ÅTICO:", "success")
        codigo_exemplo = '''# Sem loop (chato e repetitivo)
print("Ol√° 1")
print("Ol√° 2")
print("Ol√° 3")
print("Ol√° 4")
print("Ol√° 5")

print("\\n--- COM LOOP (elegante!) ---")

# Com loop (inteligente e eficiente)
for i in range(1, 6):
    print(f"Ol√° {i}")'''
        
        self.exemplo(codigo_exemplo)
        
        # Executa o c√≥digo para mostrar resultado
        print("\nüöÄ Vamos ver a diferen√ßa:")
        self.executar_codigo(codigo_exemplo)
        
        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nüåç ONDE √â USADO NO MUNDO REAL:", "accent")
        aplicacoes = [
            "Instagram - Carrega fotos uma por uma na timeline",
            "Netflix - Processa milh√µes de filmes para recomenda√ß√µes",
            "WhatsApp - Envia mensagens para todos os contatos do grupo",
            "Jogos - Move personagens, atualiza f√≠sica, desenha frames"
        ]
        for app in aplicacoes:
            self.print_colored(f"‚Ä¢ {app}", "primary")
        
        self.pausar()
    
    def _secao_for_basico(self) -> None:
        """Se√ß√£o: Como o loop FOR funciona?"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("COMO O LOOP FOR FUNCIONA?", "‚öôÔ∏è")
        
        # === CONCEITO ESPEC√çFICO ===
        self.print_concept(
            "Loop FOR",
            "Usado quando voc√™ SABE quantas vezes quer repetir algo ou tem uma lista para percorrer"
        )
        
        # === ESTRUTURA B√ÅSICA ===
        self.print_colored("\nüèóÔ∏è ESTRUTURA B√ÅSICA DO FOR:", "warning")
        estrutura = '''for variavel in sequencia:
    # C√≥digo que se repete
    print(f"Repeti√ß√£o n√∫mero: {variavel}")'''
        
        self.exemplo(estrutura)
        
        # === TIPOS DE FOR ===
        self.print_colored("\nüìå PRINCIPAIS TIPOS DE FOR:", "info")
        tipos = [
            "‚Ä¢ for i in range(5) ‚Üí Repete 5 vezes (0,1,2,3,4)",
            "‚Ä¢ for item in lista ‚Üí Percorre cada item da lista",
            "‚Ä¢ for i in range(1,6) ‚Üí Conta de 1 at√© 5",
            "‚Ä¢ for letra in 'Python' ‚Üí Percorre cada letra"
        ]
        
        for tipo in tipos:
            self.print_colored(tipo, "text")
            input("   ‚è≥ Pressione ENTER para continuar...")
        
        # === EXEMPLO RANGE ===
        self.print_colored("\nüî¢ EXEMPLO COM RANGE:", "success")
        codigo_range = '''# Range b√°sico
print("Contando de 0 a 4:")
for i in range(5):
    print(f"  {i}")

# Range com in√≠cio e fim
print("\\nContando de 1 a 5:")
for i in range(1, 6):
    print(f"  {i}")

# Range com passo
print("\\nContando de 2 em 2:")
for i in range(0, 11, 2):
    print(f"  {i}")'''
        
        self.exemplo(codigo_range)
        print("\nüöÄ Executando exemplo:")
        self.executar_codigo(codigo_range)
        
        input("\nüî∏ Pressione ENTER para ver mais exemplos...")
        
        # === EXEMPLO COM LISTAS ===
        self.print_colored("\nüìù EXEMPLO COM LISTAS:", "success")
        codigo_lista = '''# Percorrendo uma lista
frutas = ["üçé", "üçå", "üçä", "üçá", "ü•ù"]

print("Frutas da feira:")
for fruta in frutas:
    print(f"  Comprando {fruta}")

print("\\nContador autom√°tico:")
for i, fruta in enumerate(frutas, 1):
    print(f"  {i}. {fruta}")'''
        
        self.exemplo(codigo_lista)
        print("\nüöÄ Executando exemplo:")
        self.executar_codigo(codigo_lista)
        
        self.print_tip("O enumerate() adiciona um contador autom√°tico!")
        
        self.pausar()
    
    def _secao_while_basico(self) -> None:
        """Se√ß√£o: Como o loop WHILE funciona?"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("COMO O LOOP WHILE FUNCIONA?", "üîÑ")
        
        # === CONCEITO ESPEC√çFICO ===
        self.print_concept(
            "Loop WHILE",
            "Usado quando voc√™ N√ÉO SABE quantas vezes vai repetir - continua enquanto uma condi√ß√£o for verdadeira"
        )
        
        # === ANALOGIA ESPEC√çFICA ===
        self.print_colored("\nüè† ANALOGIA DO WHILE:", "warning")
        self.print_colored("Como um porteiro de festa:", "text")
        self.print_colored("‚Ä¢ ENQUANTO tiver espa√ßo na festa...", "text")
        self.print_colored("‚Ä¢ Continua deixando pessoas entrar", "text")
        self.print_colored("‚Ä¢ Para quando a festa lota (condi√ß√£o muda)", "text")
        input("\nüî∏ Pressione ENTER para continuar...")
        
        # === ESTRUTURA B√ÅSICA ===
        self.print_colored("\nüèóÔ∏è ESTRUTURA B√ÅSICA DO WHILE:", "info")
        estrutura = '''# Configura√ß√£o inicial
contador = 0

while condicao:
    # C√≥digo que se repete
    print("Repetindo...")
    
    # IMPORTANTE: Modificar a condi√ß√£o!
    contador += 1'''
        
        self.exemplo(estrutura)
        
        # === EXEMPLO PR√ÅTICO ===
        self.print_colored("\nüíª EXEMPLO PR√ÅTICO:", "success")
        codigo_while = '''# Contagem regressiva
print("üöÄ CONTAGEM REGRESSIVA:")
contador = 5

while contador > 0:
    print(f"  {contador}...")
    contador -= 1  # CR√çTICO: sempre modificar!

print("  üéâ DECOLAGEM!")

print("\\nüéÆ JOGO SIMPLES:")
pontos = 0
nivel = 1

while pontos < 50:
    print(f"N√≠vel {nivel}: +{nivel*5} pontos")
    pontos += nivel * 5
    nivel += 1

print(f"üèÜ Parab√©ns! {pontos} pontos totais!")'''
        
        self.exemplo(codigo_while)
        print("\nüöÄ Executando exemplo:")
        self.executar_codigo(codigo_while)
        
        # === CUIDADO COM LOOPS INFINITOS ===
        self.print_colored("\n‚ö†Ô∏è CUIDADO - LOOP INFINITO:", "error")
        loop_ruim = '''# ‚ùå NUNCA FA√áA ISSO!
contador = 5
while contador > 0:
    print("Infinito!")
    # Esqueceu de modificar contador!
    # Loop nunca termina!'''
        
        self.exemplo(loop_ruim)
        self.print_warning("Sempre certifique-se de que a condi√ß√£o vai mudar!")
        
        self.pausar()
    
    def _secao_exemplos_praticos(self) -> None:
        """Se√ß√£o: Loops em a√ß√£o - Exemplos pr√°ticos"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("LOOPS EM A√á√ÉO - EXEMPLOS PR√ÅTICOS", "üí°", "success")
        
        exemplos = [
            {
                'titulo': 'EXEMPLO 1: Calculadora de Tabuada',
                'descricao': 'For loop para gerar tabuada de qualquer n√∫mero',
                'codigo': '''# Gerador de tabuada
numero = 7
print(f"üìä TABUADA DO {numero}:")
print("=" * 20)

for i in range(1, 11):
    resultado = numero * i
    print(f"{numero} x {i:2d} = {resultado:2d}")''',
                'explicacao': 'Usa range(1,11) para multiplicar de 1 a 10, com formata√ß√£o alinhada'
            },
            {
                'titulo': 'EXEMPLO 2: Validador de Senha',
                'descricao': 'While loop para pedir senha at√© acertar',
                'codigo': '''# Simula√ß√£o de valida√ß√£o de senha
senha_correta = "python123"
tentativas = 0
max_tentativas = 3

print("üîê SISTEMA DE LOGIN")
while tentativas < max_tentativas:
    senha = input("Digite a senha: ")
    tentativas += 1
    
    if senha == senha_correta:
        print("‚úÖ Login realizado com sucesso!")
        break
    else:
        restantes = max_tentativas - tentativas
        if restantes > 0:
            print(f"‚ùå Senha incorreta! {restantes} tentativas restantes")
        else:
            print("üö´ Acesso bloqueado!")''',
                'explicacao': 'Combina while com if para controlar tentativas e dar feedback'
            },
            {
                'titulo': 'EXEMPLO 3: Processador de Lista',
                'descricao': 'For loop para processar dados de uma lista',
                'codigo': '''# Processamento de notas de alunos
notas = [8.5, 7.2, 9.0, 6.8, 8.9, 7.5, 9.2]
total = 0
aprovados = 0

print("üìö PROCESSAMENTO DE NOTAS:")
print("-" * 30)

for i, nota in enumerate(notas, 1):
    total += nota
    status = "‚úÖ APROVADO" if nota >= 7.0 else "‚ùå REPROVADO"
    
    if nota >= 7.0:
        aprovados += 1
    
    print(f"Aluno {i}: {nota:4.1f} - {status}")

media = total / len(notas)
taxa_aprovacao = (aprovados / len(notas)) * 100

print(f"\\nüìä ESTAT√çSTICAS:")
print(f"M√©dia da turma: {media:.2f}")
print(f"Taxa de aprova√ß√£o: {taxa_aprovacao:.1f}%")''',
                'explicacao': 'Demonstra acumuladores, contadores e c√°lculos dentro de loops'
            }
        ]
        
        for i, exemplo in enumerate(exemplos, 1):
            self.print_colored(f"\n{exemplo['titulo']}", "warning")
            self.print_colored(f"üìù {exemplo['descricao']}", "text")
            
            self.print_code_section("C√ìDIGO", exemplo['codigo'])
            
            print("\nüöÄ Executando exemplo:")
            self.executar_codigo(exemplo['codigo'])
            
            if exemplo['explicacao']:
                self.print_colored(f"\nüí° EXPLICA√á√ÉO: {exemplo['explicacao']}", "info")
            
            if i < len(exemplos):
                input("\nüî∏ Pressione ENTER para o pr√≥ximo exemplo...")
        
        self.print_success("\nüéâ Agora voc√™ viu loops resolvendo problemas reais!")
        self.pausar()
    
    def _secao_casos_uso(self) -> None:
        """Se√ß√£o: Onde usar loops na vida real?"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("ONDE USAR LOOPS NA VIDA REAL?", "üåç")
        
        casos_uso = [
            {
                'titulo': 'üéÆ DESENVOLVIMENTO DE GAMES',
                'descricao': 'Game loop - o cora√ß√£o de qualquer jogo',
                'exemplo': '''# Game loop simplificado
import time
import random

print("üéÆ MINI GAME - COLETE AS MOEDAS!")
pontos = 0
tempo_restante = 10

# Loop principal do jogo
while tempo_restante > 0:
    print(f"‚è∞ Tempo: {tempo_restante}s | üí∞ Pontos: {pontos}")
    
    # Simula evento aleat√≥rio
    if random.random() > 0.5:
        moedas = random.randint(1, 5)
        pontos += moedas
        print(f"  ‚ú® Voc√™ coletou {moedas} moedas!")
    else:
        print("  üí® Nada desta vez...")
    
    time.sleep(1)
    tempo_restante -= 1

print(f"\\nüèÜ GAME OVER! Pontua√ß√£o final: {pontos}")'''
            },
            {
                'titulo': 'üìä AN√ÅLISE DE DADOS',
                'descricao': 'Processamento de grandes volumes de informa√ß√£o',
                'exemplo': '''# An√°lise de vendas mensais
vendas_mensais = [
    15000, 18500, 22000, 17800, 19200,
    21500, 23800, 25100, 20900, 22400,
    24600, 28000
]

meses = [
    "Jan", "Fev", "Mar", "Abr", "Mai", "Jun",
    "Jul", "Ago", "Set", "Out", "Nov", "Dez"
]

print("üìä RELAT√ìRIO ANUAL DE VENDAS")
print("=" * 40)

total_anual = 0
melhor_mes = 0
melhor_valor = 0

# Processa dados m√™s a m√™s
for i, vendas in enumerate(vendas_mensais):
    total_anual += vendas
    
    if vendas > melhor_valor:
        melhor_valor = vendas
        melhor_mes = i
    
    print(f"{meses[i]}: R$ {vendas:,}")

media_mensal = total_anual / len(vendas_mensais)

print(f"\\nüí∞ RESUMO:")
print(f"Total anual: R$ {total_anual:,}")
print(f"M√©dia mensal: R$ {media_mensal:,.0f}")
print(f"Melhor m√™s: {meses[melhor_mes]} (R$ {melhor_valor:,})")'''
            },
            {
                'titulo': 'ü§ñ AUTOMA√á√ÉO E IA',
                'descricao': 'Machine Learning e processamento autom√°tico',
                'exemplo': '''# Simula√ß√£o de treinamento de IA
import random

print("ü§ñ TREINAMENTO DE IA SIMPLES")
print("Aprendendo a reconhecer padr√µes...")

# Par√¢metros do modelo
precisao = 0.5  # Come√ßa com 50%
epoch = 0
target_precisao = 0.95

# Loop de treinamento
while precisao < target_precisao:
    epoch += 1
    
    # Simula melhoria gradual
    melhoria = random.uniform(0.01, 0.05)
    precisao += melhoria
    
    # Previne overfitting
    if precisao > 1.0:
        precisao = 0.98 + random.uniform(-0.02, 0.02)
    
    print(f"√âpoca {epoch:3d}: Precis√£o = {precisao:.1%}")
    
    # Evita loop infinito
    if epoch >= 100:
        break

if precisao >= target_precisao:
    print(f"\\n‚úÖ IA treinada com sucesso!")
    print(f"üéØ Precis√£o final: {precisao:.1%}")
else:
    print(f"\\n‚ö†Ô∏è Treinamento incompleto ap√≥s {epoch} √©pocas")'''
            }
        ]
        
        for i, caso in enumerate(casos_uso):
            self.print_colored(f"\n{caso['titulo']}", "warning")
            self.print_colored(f"üìù {caso['descricao']}", "text")
            
            self.print_code_section("EXEMPLO", caso['exemplo'])
            
            print("\nüöÄ Executando exemplo:")
            self.executar_codigo(caso['exemplo'])
            
            if i < len(casos_uso) - 1:
                input("\nüî∏ Pressione ENTER para o pr√≥ximo caso...")
        
        self.print_success("\nüåü Loops est√£o em TODO LUGAR na programa√ß√£o!")
        self.pausar()
    
    def _secao_melhores_praticas(self) -> None:
        """Se√ß√£o: Melhores pr√°ticas com loops"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("MELHORES PR√ÅTICAS COM LOOPS", "‚≠ê")
        
        praticas = [
            {
                'titulo': 'üéØ Use o loop certo para cada situa√ß√£o',
                'ruim': '''# ‚ùå EVITE: FOR quando deveria ser WHILE
for i in range(1000000):
    if condicao_complexa():
        break
    # c√≥digo...''',
                'bom': '''# ‚úÖ PREFIRA: WHILE para condi√ß√µes din√¢micas
while condicao_complexa():
    # c√≥digo...
    # condi√ß√£o pode mudar naturalmente'''
            },
            {
                'titulo': '‚ö° Evite loops desnecess√°rios',
                'ruim': '''# ‚ùå EVITE: Loop para buscar em lista
encontrado = None
for item in lista:
    if item.id == procurado:
        encontrado = item
        break''',
                'bom': '''# ‚úÖ PREFIRA: Fun√ß√£o built-in quando poss√≠vel
encontrado = next((item for item in lista 
                   if item.id == procurado), None)
# ou usar filter(), map(), etc.'''
            },
            {
                'titulo': 'üîí Sempre previna loops infinitos',
                'ruim': '''# ‚ùå PERIGO: Sem modifica√ß√£o da condi√ß√£o
tentativas = 0
while tentativas < 5:
    fazer_algo()
    # Esqueceu: tentativas += 1''',
                'bom': '''# ‚úÖ SEGURO: Sempre modifica a condi√ß√£o
tentativas = 0
max_tentativas = 5

while tentativas < max_tentativas:
    fazer_algo()
    tentativas += 1  # Sempre incremente!'''
            },
            {
                'titulo': 'üìù Use nomes descritivos para vari√°veis',
                'ruim': '''# ‚ùå CONFUSO: Nomes gen√©ricos
for i in dados:
    for j in i:
        print(j)''',
                'bom': '''# ‚úÖ CLARO: Nomes que fazem sentido
for aluno in turma:
    for nota in aluno.notas:
        print(f"Nota: {nota}")'''
            }
        ]
        
        for i, pratica in enumerate(praticas, 1):
            self.print_colored(f"\n{i}. {pratica['titulo']}", "warning")
            
            self.print_colored("\n‚ùå EVITE:", "error")
            self.exemplo(pratica['ruim'])
            
            self.print_colored("‚úÖ PREFIRA:", "success")
            self.exemplo(pratica['bom'])
            
            if i < len(praticas):
                input("\nüî∏ Pressione ENTER para a pr√≥xima pr√°tica...")
        
        self.print_tip("Loops eficientes fazem seus programas mais r√°pidos e leg√≠veis!")
        self.pausar()
    
    def _secao_erros_comuns(self) -> None:
        """Se√ß√£o: Erros comuns e como evitar"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("ERROS COMUNS COM LOOPS", "‚ö†Ô∏è")
        
        erros = [
            {
                'titulo': 'üåÄ Loop infinito - O pesadelo dos programadores',
                'erro': '''# ‚ùå ERRO: Loop nunca termina
contador = 0
while contador < 10:
    print(f"Contando: {contador}")
    # ERRO: Esqueceu de incrementar!''',
                'correto': '''# ‚úÖ CORRETO: Sempre modifica a condi√ß√£o
contador = 0
while contador < 10:
    print(f"Contando: {contador}")
    contador += 1  # Incrementa para sair do loop''',
                'dica': 'Sempre verifique se a condi√ß√£o do while ser√° modificada!'
            },
            {
                'titulo': 'üî¢ Erro de √≠ndice em listas',
                'erro': '''# ‚ùå ERRO: Acessa √≠ndice que n√£o existe
lista = [1, 2, 3]
for i in range(5):  # range maior que a lista!
    print(lista[i])  # IndexError quando i >= 3''',
                'correto': '''# ‚úÖ CORRETO: Use len() ou iterate diretamente
lista = [1, 2, 3]
for i in range(len(lista)):  # Tamanho correto
    print(lista[i])

# Ainda melhor:
for item in lista:  # Sem √≠ndices
    print(item)''',
                'dica': 'Prefira iterar diretamente nos itens em vez de usar √≠ndices'
            },
            {
                'titulo': 'üîÑ Modificar lista durante itera√ß√£o',
                'erro': '''# ‚ùå ERRO: Modifica lista enquanto itera
numeros = [1, 2, 3, 4, 5]
for num in numeros:
    if num % 2 == 0:
        numeros.remove(num)  # Modifica durante loop!''',
                'correto': '''# ‚úÖ CORRETO: Cria nova lista ou usa compreens√£o
numeros = [1, 2, 3, 4, 5]

# Op√ß√£o 1: Lista nova
impares = []
for num in numeros:
    if num % 2 != 0:
        impares.append(num)

# Op√ß√£o 2: List comprehension (melhor)
impares = [num for num in numeros if num % 2 != 0]''',
                'dica': 'Nunca modifique uma lista enquanto est√° iterando sobre ela'
            },
            {
                'titulo': 'üéØ Range com valores incorretos',
                'erro': '''# ‚ùå ERRO: Range vazio ou incorreto
for i in range(5, 1):  # Range vazio!
    print(i)  # Nunca executa

for i in range(1, 10, -1):  # Step negativo com ordem errada
    print(i)  # Nunca executa''',
                'correto': '''# ‚úÖ CORRETO: Range com valores l√≥gicos
for i in range(1, 6):  # 1, 2, 3, 4, 5
    print(i)

for i in range(10, 0, -1):  # 10, 9, 8, ..., 1
    print(i)

# Verificar se range n√£o est√° vazio
inicio, fim = 5, 1
if inicio < fim:
    for i in range(inicio, fim):
        print(i)''',
                'dica': 'Sempre verifique se os par√¢metros do range fazem sentido'
            }
        ]
        
        for i, erro in enumerate(erros, 1):
            self.print_colored(f"\n{i}. {erro['titulo']}", "warning")
            
            self.print_colored("\n‚ùå C√ìDIGO COM ERRO:", "error")
            self.exemplo(erro['erro'])
            
            self.print_colored("‚úÖ C√ìDIGO CORRETO:", "success")
            self.exemplo(erro['correto'])
            
            self.print_tip(erro['dica'])
            
            if i < len(erros):
                input("\nüî∏ Pressione ENTER para o pr√≥ximo erro...")
        
        self.print_success("\nüéØ Conhecendo os erros comuns, voc√™ os evitar√°!")
        self.pausar()
    
    def _secao_pratica_interativa(self) -> None:
        """Se√ß√£o de pr√°tica interativa do m√≥dulo"""
        
        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_section("HORA DE PRATICAR!", "üéØ", "success")
        self.print_colored("Vamos testar o que voc√™ aprendeu sobre loops!", "text")
        
        # === INSTRU√á√ïES PARA INICIANTES ===
        self.print_tip("Para iniciantes: Cada exerc√≠cio √© opcional, mas recomendamos fazer todos!")
        self.print_colored("\nüéì SOBRE OS EXERC√çCIOS:", "info")
        self.print_colored("‚Ä¢ N√£o se preocupe se errar - faz parte do aprendizado!", "text")
        self.print_colored("‚Ä¢ Voc√™ pode tentar quantas vezes quiser", "text")
        self.print_colored("‚Ä¢ Digite 'help' se precisar de ajuda", "text")
        self.print_colored("‚Ä¢ Use Ctrl+C para voltar ao menu principal se necess√°rio", "text")
        
        # === DEFINI√á√ÉO DOS EXERC√çCIOS ===
        exercicios = [
            {
                'title': 'Quiz: Conhecimentos sobre Loops',
                'type': 'quiz',
                'questions': [
                    {
                        'question': 'Qual loop voc√™ usa quando SABE quantas vezes vai repetir?',
                        'answer': ['for', 'loop for'],
                        'hint': '√â ideal para listas e contadores fixos'
                    },
                    {
                        'question': 'Qual comando gera n√∫meros de 0 a 4?',
                        'answer': ['range(5)', 'range(0,5)'],
                        'hint': 'Lembre-se: range para antes do √∫ltimo n√∫mero'
                    },
                    {
                        'question': 'Como voc√™ evita um loop infinito em WHILE?',
                        'answer': ['modificando a condi√ß√£o', 'incrementando vari√°vel', 'alterando condi√ß√£o'],
                        'hint': 'A condi√ß√£o precisa mudar para se tornar False'
                    },
                    {
                        'question': 'Qual palavra-chave para interromper um loop?',
                        'answer': ['break'],
                        'hint': '√â usada para sair do loop antes do fim natural'
                    },
                    {
                        'question': 'Qual palavra-chave para pular para pr√≥xima itera√ß√£o?',
                        'answer': ['continue'],
                        'hint': 'Pula o resto do c√≥digo e vai para pr√≥xima repeti√ß√£o'
                    }
                ]
            },
            {
                'title': 'Desafio: Complete o C√≥digo',
                'type': 'code_completion',
                'exercises': [
                    {
                        'instruction': 'B√ÅSICO: Complete o for para contar de 1 a 5',
                        'starter': '''for i in _____(1, 6):
    print(f"Contando: {i}")''',
                        'solution': 'range',
                        'type': 'simple'
                    },
                    {
                        'instruction': 'INTERMEDI√ÅRIO: Complete o while para countdown',
                        'starter': '''contador = 5
_____ contador > 0:
    print(contador)
    contador -= 1
print("Fim!")''',
                        'solution': 'while',
                        'type': 'intermediate'
                    },
                    {
                        'instruction': 'AVAN√áADO: Complete o loop com break quando achar o item',
                        'starter': '''lista = ["a", "b", "c", "d"]
procurado = "c"

for item in lista:
    if item == procurado:
        print(f"Achei: {item}")
        _____
    print(f"Verificando: {item}")''',
                        'solution': 'break',
                        'type': 'advanced'
                    }
                ]
            },
            {
                'title': 'Exerc√≠cio Criativo: Gerador de Padr√µes',
                'type': 'creative',
                'instruction': 'Crie um padr√£o visual usando loops! Pode ser estrelas, n√∫meros, emojis - use sua criatividade!'
            }
        ]
        
        # === MENU PRINCIPAL DE EXERC√çCIOS ===
        while True:
            print("\nEscolha uma atividade:")
            print("1. üìù Quiz de Conhecimentos")
            print("2. üíª Complete o C√≥digo")
            print("3. üé® Exerc√≠cio Criativo")
            print("0. Continuar para o Mini Projeto")
            
            try:
                escolha = input("\nüëâ Sua escolha: ").strip().lower()
                
                if escolha in ["0", "continuar", "sair", "proximo"]:
                    break
                elif escolha in ["1", "quiz", "conhecimentos"]:
                    try:
                        self._run_quiz(exercicios[0])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Quiz interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no quiz. Continuando...")
                elif escolha in ["2", "codigo", "completar"]:
                    try:
                        self._run_code_completion(exercicios[1])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio de c√≥digo interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio de c√≥digo. Continuando...")
                elif escolha in ["3", "criativo"]:
                    try:
                        self._run_creative_exercise(exercicios[2])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio criativo interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio criativo. Continuando...")
                elif escolha in ["help", "ajuda", "h", "?"]:
                    self._show_help()
                else:
                    self.print_warning("‚ùå Op√ß√£o inv√°lida! Digite 1, 2, 3, 0 ou 'help' para ajuda.")
            
            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Opera√ß√£o cancelada pelo usu√°rio. Voltando ao menu principal...")
                return
            except Exception as e:
                self.print_warning("‚ùå Erro inesperado no menu. Tente novamente.")
    
    def _show_help(self) -> None:
        """Mostra ajuda sobre as op√ß√µes dispon√≠veis"""
        self.print_section("AJUDA - SE√á√ÉO DE PR√ÅTICA", "‚ùì", "info")
        help_text = [
            "üìù OP√á√ÉO 1 - Quiz: Teste seus conhecimentos sobre loops FOR e WHILE",
            "üíª OP√á√ÉO 2 - Complete o C√≥digo: 3 exerc√≠cios progressivos de programa√ß√£o",
            "üé® OP√á√ÉO 3 - Exerc√≠cio Criativo: Crie padr√µes visuais com loops",
            "üî¢ OP√á√ÉO 0 - Continue para o Mini Projeto Gerador Interativo",
            "",
            "üí° DICAS:",
            "‚Ä¢ Voc√™ pode digitar o n√∫mero ou palavras como 'quiz', 'codigo'",
            "‚Ä¢ Digite 'help' a qualquer momento para ver esta ajuda",
            "‚Ä¢ Use Ctrl+C se quiser voltar ao menu principal",
            "‚Ä¢ Recomendamos fazer todas as atividades para aprender melhor!"
        ]
        
        for line in help_text:
            if line:
                self.print_colored(f"  {line}", "text")
            else:
                print()
        
        input("\nüî∏ Pressione ENTER para voltar ao menu...")
    
    def _run_quiz(self, quiz_data: dict) -> None:
        """Executa um quiz interativo"""
        self.print_section(quiz_data['title'], "üìù")
        score = 0
        total_questions = len(quiz_data['questions'])
        
        for i, q in enumerate(quiz_data['questions'], 1):
            print(f"\nüìù Pergunta {i} de {total_questions}:")
            correto = self.exercicio(
                q['question'],
                q['answer'],
                q['hint']
            )
            if correto:
                score += 1
        
        # Feedback detalhado baseado na pontua√ß√£o
        percentage = (score / total_questions) * 100
        
        self.print_success(f"\nüèÜ RESULTADO: {score} de {total_questions} perguntas corretas ({percentage:.0f}%)")
        
        if percentage >= 80:
            self.print_success("üåü Excelente! Voc√™ domina os loops!")
        elif percentage >= 60:
            self.print_success("üëè Muito bom! Continue praticando!")
        else:
            self.print_tip("üí™ Continue estudando! Revise as se√ß√µes te√≥ricas.")
        
        self.pausar()
    
    def _run_code_completion(self, exercise_data: dict) -> None:
        """Executa exerc√≠cio de completar c√≥digo"""
        self.print_section(exercise_data['title'], "üíª")
        
        for i, ex in enumerate(exercise_data['exercises'], 1):
            print(f"\nüéØ EXERC√çCIO {i} de {len(exercise_data['exercises'])}:")
            print(f"üìù {ex['instruction']}")
            self.print_code_section("C√≥digo para Completar", ex['starter'])
            
            exercise_type = ex.get('type', 'simple')
            
            if exercise_type == 'simple':
                print(f"\n‚úçÔ∏è Complete com a palavra-chave:")
                user_input = input(">>> ").strip()
                if user_input.lower() == ex['solution'].lower():
                    self.print_success("‚úÖ Perfeito! Resposta correta!")
                    # Mostrar c√≥digo completo funcionando
                    codigo_completo = ex['starter'].replace('_____', user_input)
                    print("\nüöÄ C√≥digo completo:")
                    self.executar_codigo(codigo_completo)
                else:
                    self.print_warning(f"‚ùå Resposta incorreta. A resposta era: {ex['solution']}")
                    
            elif exercise_type == 'intermediate':
                print(f"\n‚úçÔ∏è Complete com a palavra-chave:")
                user_input = input(">>> ").strip()
                if user_input.lower() == ex['solution'].lower():
                    self.print_success("‚úÖ Correto! Loop perfeito!")
                    codigo_completo = ex['starter'].replace('_____', user_input)
                    print("\nüöÄ C√≥digo completo:")
                    self.executar_codigo(codigo_completo)
                else:
                    self.print_warning(f"‚ùå Resposta incorreta. A resposta era: {ex['solution']}")
                    
            elif exercise_type == 'advanced':
                print(f"\n‚úçÔ∏è Complete com a palavra-chave:")
                user_input = input(">>> ").strip()
                
                if user_input.lower() == ex['solution'].lower():
                    self.print_success("‚úÖ Excelente! Controle de loop avan√ßado!")
                    codigo_completo = ex['starter'].replace('_____', user_input)
                    print("\nüöÄ C√≥digo completo:")
                    self.executar_codigo(codigo_completo)
                else:
                    self.print_warning(f"‚ùå Resposta incorreta. A resposta era: {ex['solution']}")
            
            if i < len(exercise_data['exercises']):
                input("\nüî∏ Pressione ENTER para o pr√≥ximo exerc√≠cio...")
        
        self.print_success("\nüéâ Parab√©ns! Voc√™ completou todos os exerc√≠cios de loops!")
        self.pausar()
    
    def _run_creative_exercise(self, exercise_data: dict) -> None:
        """Executa exerc√≠cio criativo"""
        self.print_section(exercise_data['title'], "üé®")
        print(f"\n{exercise_data['instruction']}")
        
        print("\nüí° Exemplos de padr√µes que voc√™ pode criar:")
        print("‚≠ê Pir√¢mide de estrelas")
        print("üî¢ Sequ√™ncia de n√∫meros") 
        print("üé® Arte ASCII com emojis")
        print("üìä Gr√°fico simples de barras")
        
        print("\nüéØ Vamos criar seu padr√£o personalizado:")
        
        tipo = input("\nüìù Que tipo de padr√£o? (estrelas/n√∫meros/emojis/outro): ").strip().lower()
        tamanho = input("üìè Quantas linhas? (ex: 5): ").strip()
        
        try:
            tamanho = int(tamanho) if tamanho.isdigit() else 5
        except:
            tamanho = 5
        
        if tipo in ['estrelas', 'estrela', 'star']:
            simbolo = "‚≠ê"
            nome_padrao = "Pir√¢mide de Estrelas"
        elif tipo in ['n√∫meros', 'numeros', 'number']:
            simbolo = None
            nome_padrao = "Padr√£o Num√©rico"
        elif tipo in ['emojis', 'emoji']:
            emoji_escolhido = input("Qual emoji? (ex: üåü): ").strip()
            simbolo = emoji_escolhido if emoji_escolhido else "üé®"
            nome_padrao = f"Arte de {simbolo}"
        else:
            simbolo = "‚ñà"
            nome_padrao = "Padr√£o Personalizado"
        
        # Gerar c√≥digo baseado nas escolhas
        if simbolo:
            codigo_criativo = f'''# üé® {nome_padrao.upper()}
print("üé® {nome_padrao}")
print("=" * 30)

for i in range(1, {tamanho + 1}):
    espacos = " " * ({tamanho} - i)
    simbolos = "{simbolo}" * i
    print(f"{{espacos}}{{simbolos}}")

print("\\n‚ú® Padr√£o criado com sucesso!")'''
        else:
            codigo_criativo = f'''# üî¢ {nome_padrao.upper()}
print("üî¢ {nome_padrao}")
print("=" * 30)

for i in range(1, {tamanho + 1}):
    numeros = ""
    for j in range(i):
        numeros += str(i) + " "
    print(numeros.strip())

print("\\n‚ú® Padr√£o criado com sucesso!")'''
        
        print(f"\nüöÄ Aqui est√° seu {nome_padrao} personalizado:")
        self.exemplo(codigo_criativo)
        
        print("\nüé¨ Executando seu padr√£o:")
        self.executar_codigo(codigo_criativo)
        
        print(f"\nüéâ Incr√≠vel! Voc√™ criou um {nome_padrao} √∫nico!")
        self.print_success("üèÜ Parab√©ns pela criatividade com loops!")
        
        self.pausar()
    
    def _mini_projeto_gerador_interativo(self) -> None:
        """Mini Projeto - M√≥dulo 8: Gerador Interativo de Padr√µes e Sequ√™ncias"""
        
        # === CABE√áALHO IMPACTANTE ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üéØ MINI PROJETO: GERADOR INTERATIVO DE PADR√ïES")
        else:
            print("\n" + "="*50)
            print("üéØ MINI PROJETO: GERADOR INTERATIVO DE PADR√ïES")
            print("="*50)
        
        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_success("üéâ Vamos criar um gerador completo usando o poder dos loops!")
        
        self.print_concept(
            "Gerador Interativo de Padr√µes",
            "Um programa que usa loops FOR e WHILE para criar m√∫ltiplos padr√µes visuais e sequ√™ncias matem√°ticas"
        )
        
        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nEste tipo de programa √© √∫til para:", "text")
        usos_praticos = [
            "Game Development - Gera√ß√£o procedural de mapas e texturas",
            "Arte Digital - Cria√ß√£o de padr√µes fractais e designs",
            "Data Visualization - Gr√°ficos e representa√ß√µes visuais",
            "Interface Design - Elementos visuais e anima√ß√µes"
        ]
        for uso in usos_praticos:
            self.print_colored(f"‚Ä¢ {uso}", "accent")
        
        # === DESENVOLVIMENTO PASSO A PASSO ===
        
        # PASSO 1: Coleta de prefer√™ncias
        self.print_section("PASSO 1: Configurando o gerador", "üìù", "info")
        self.print_tip("Vamos criar um menu interativo para o usu√°rio escolher padr√µes")
        
        try:
            print("\nüé® Preparando op√ß√µes de padr√µes:")
            padroes_disponiveis = [
                "Pir√¢mide de Estrelas",
                "√Årvore de Natal",
                "Tabela de Multiplica√ß√£o",
                "Sequ√™ncia Fibonacci",
                "Arte ASCII",
                "Gr√°fico de Barras"
            ]
            
            for i, padrao in enumerate(padroes_disponiveis, 1):
                print(f"  {i}. {padrao}")
            
            input("\nüî∏ Pressione ENTER para ver o c√≥digo...")
            
        except KeyboardInterrupt:
            self.print_warning("Projeto cancelado pelo usu√°rio")
            return
        
        # PASSO 2: Implementa√ß√£o dos padr√µes
        self.print_section("PASSO 2: Implementando os geradores", "‚öôÔ∏è", "success")
        self.print_colored("Agora vamos criar cada gerador usando loops:", "text")
        
        # PASSO 3: Sistema completo
        self.print_section("PASSO 3: Sistema completo funcionando", "üé¨", "warning")
        
        # === C√ìDIGO FINAL GERADO ===
        self.print_colored("Aqui est√° o c√≥digo completo do seu Gerador Interativo:", "text")
        
        codigo_final = f'''# üêç PROJETO: GERADOR INTERATIVO DE PADR√ïES E SEQU√äNCIAS
# M√≥dulo 8: Loops e Repeti√ß√µes

import random
import time

def gerar_piramide_estrelas(altura):
    """Gera pir√¢mide de estrelas usando loops FOR"""
    print(f"\\n‚≠ê PIR√ÇMIDE DE ESTRELAS (Altura: {{altura}})")
    print("-" * 30)
    
    for i in range(1, altura + 1):
        espacos = " " * (altura - i)
        estrelas = "‚≠ê" * i
        print(f"{{espacos}}{{estrelas}}")

def gerar_arvore_natal(altura):
    """Gera √°rvore de Natal com loops FOR aninhados"""
    print(f"\\nüéÑ √ÅRVORE DE NATAL (Altura: {{altura}})")
    print("-" * 30)
    
    # Copa da √°rvore
    for i in range(1, altura + 1):
        espacos = " " * (altura - i)
        folhas = "üå≤" * i
        print(f"{{espacos}}{{folhas}}")
    
    # Tronco
    espacos_tronco = " " * (altura - 1)
    print(f"{{espacos_tronco}}üü´")
    print(f"{{espacos_tronco}}üü´")

def gerar_tabuada(numero, limite=10):
    """Gera tabuada usando loop FOR"""
    print(f"\\nüî¢ TABUADA DO {{numero}}")
    print("-" * 25)
    
    for i in range(1, limite + 1):
        resultado = numero * i
        print(f"{{numero}} x {{i:2d}} = {{resultado:3d}}")

def gerar_fibonacci(quantidade):
    """Gera sequ√™ncia Fibonacci usando loop WHILE"""
    print(f"\\nüåÄ SEQU√äNCIA FIBONACCI ({{quantidade}} n√∫meros)")
    print("-" * 35)
    
    if quantidade <= 0:
        return
    
    # Casos base
    if quantidade >= 1:
        a = 0
        print(f"1¬∫: {{a}}")
    
    if quantidade >= 2:
        b = 1
        print(f"2¬∫: {{b}}")
    
    # Gerando resto da sequ√™ncia
    contador = 3
    while contador <= quantidade:
        proximo = a + b
        print(f"{{contador}}¬∫: {{proximo}}")
        a, b = b, proximo
        contador += 1

def gerar_arte_ascii(largura, altura):
    """Gera arte ASCII usando loops aninhados"""
    print(f"\\nüé≠ ARTE ASCII ({{largura}}x{{altura}})")
    print("-" * 25)
    
    for linha in range(altura):
        arte = ""
        for coluna in range(largura):
            # Padr√£o: bordas azuis, interior branco
            if linha == 0 or linha == altura-1 or coluna == 0 or coluna == largura-1:
                arte += "üü¶"
            else:
                arte += "‚¨ú"
        print(arte)

def gerar_grafico_barras(dados, titulo="Gr√°fico"):
    """Gera gr√°fico de barras simples"""
    print(f"\\nüìä {{titulo.upper()}}")
    print("-" * 30)
    
    for i, valor in enumerate(dados, 1):
        barra = "‚ñà" * valor
        print(f"Item {{i}}: {{barra}} ({{valor}})")

def menu_principal():
    """Menu principal do gerador"""
    print("üé® GERADOR INTERATIVO DE PADR√ïES E SEQU√äNCIAS")
    print("=" * 55)
    print("\\nEscolha um padr√£o para gerar:")
    print("1. ‚≠ê Pir√¢mide de Estrelas")
    print("2. üéÑ √Årvore de Natal")
    print("3. üî¢ Tabela de Multiplica√ß√£o")
    print("4. üåÄ Sequ√™ncia Fibonacci")
    print("5. üé≠ Arte ASCII")
    print("6. üìä Gr√°fico de Barras")
    print("7. üé≤ Surpresa Aleat√≥ria!")
    print("0. üö™ Sair")

def executar_gerador():
    """Fun√ß√£o principal que executa o gerador"""
    continuar = True
    
    while continuar:
        menu_principal()
        
        try:
            opcao = input("\\nüëâ Sua escolha: ").strip()
            
            if opcao == "1":
                altura = int(input("Altura da pir√¢mide (1-10): ") or "5")
                altura = max(1, min(altura, 10))
                gerar_piramide_estrelas(altura)
                
            elif opcao == "2":
                altura = int(input("Altura da √°rvore (1-8): ") or "5")
                altura = max(1, min(altura, 8))
                gerar_arvore_natal(altura)
                
            elif opcao == "3":
                numero = int(input("N√∫mero da tabuada (1-20): ") or "7")
                numero = max(1, min(numero, 20))
                gerar_tabuada(numero)
                
            elif opcao == "4":
                quantidade = int(input("Quantos n√∫meros Fibonacci (1-20): ") or "10")
                quantidade = max(1, min(quantidade, 20))
                gerar_fibonacci(quantidade)
                
            elif opcao == "5":
                largura = int(input("Largura (3-15): ") or "8")
                altura = int(input("Altura (3-10): ") or "5")
                largura = max(3, min(largura, 15))
                altura = max(3, min(altura, 10))
                gerar_arte_ascii(largura, altura)
                
            elif opcao == "6":
                print("\\nGerando dados aleat√≥rios para demonstra√ß√£o...")
                dados = [random.randint(1, 15) for _ in range(5)]
                gerar_grafico_barras(dados, "Vendas por Regi√£o")
                
            elif opcao == "7":
                print("\\nüé≤ SURPRESA! Gerando padr√£o aleat√≥rio...")
                time.sleep(1)
                opcoes = ["1", "2", "3", "4", "5", "6"]
                opcao_aleatoria = random.choice(opcoes)
                print(f"Sorteado: Op√ß√£o {{opcao_aleatoria}}!")
                
                # Re-executa com op√ß√£o sorteada
                if opcao_aleatoria == "1":
                    gerar_piramide_estrelas(random.randint(3, 7))
                elif opcao_aleatoria == "2":
                    gerar_arvore_natal(random.randint(3, 6))
                elif opcao_aleatoria == "3":
                    gerar_tabuada(random.randint(2, 12))
                elif opcao_aleatoria == "4":
                    gerar_fibonacci(random.randint(8, 15))
                elif opcao_aleatoria == "5":
                    gerar_arte_ascii(random.randint(5, 12), random.randint(4, 8))
                elif opcao_aleatoria == "6":
                    dados = [random.randint(1, 20) for _ in range(6)]
                    gerar_grafico_barras(dados, "Dados Aleat√≥rios")
                
            elif opcao == "0":
                print("\\nüëã Obrigado por usar o Gerador de Padr√µes!")
                continuar = False
                
            else:
                print("\\n‚ùå Op√ß√£o inv√°lida! Escolha de 0 a 7.")
            
            if continuar and opcao != "0":
                input("\\nüî∏ Pressione ENTER para continuar...")
                
        except ValueError:
            print("\\n‚ùå Digite apenas n√∫meros!")
        except Exception as e:
            print(f"\\n‚ùå Erro inesperado: {{e}}")

# === EXECUTANDO O GERADOR ===
print("üöÄ INICIANDO GERADOR INTERATIVO...")
executar_gerador()
print("\\n‚ú® GERADOR FINALIZADO! Loops s√£o poderosos! üîÑ")'''
        
        self.exemplo(codigo_final)
        
        # === EXECU√á√ÉO DO RESULTADO ===
        self.print_section("RESULTADO FINAL", "üé¨", "warning")
        print("üöÄ Executando uma demonstra√ß√£o do seu Gerador Interativo:")
        
        # Demonstra√ß√£o simplificada para n√£o ser interativa
        codigo_demo = '''# üé® DEMONSTRA√á√ÉO DO GERADOR
print("üöÄ DEMONSTRA√á√ÉO - GERADOR DE PADR√ïES")
print("=" * 45)

# Demo 1: Pir√¢mide
print("\\n‚≠ê PIR√ÇMIDE DE ESTRELAS:")
for i in range(1, 6):
    espacos = " " * (5 - i)
    estrelas = "‚≠ê" * i
    print(f"{espacos}{estrelas}")

# Demo 2: Tabuada
print("\\nüî¢ TABUADA DO 3:")
for i in range(1, 6):
    print(f"3 x {i} = {3*i}")

# Demo 3: Fibonacci
print("\\nüåÄ FIBONACCI (8 n√∫meros):")
a, b = 0, 1
fib = [a, b]
for _ in range(6):
    proximo = a + b
    fib.append(proximo)
    a, b = b, proximo
print("Sequ√™ncia:", fib)

print("\\n‚ú® TODOS OS PADR√ïES FUNCIONANDO PERFEITAMENTE!")'''
        
        self.executar_codigo(codigo_demo)
        
        # === MENSAGEM DE CONQUISTA ===
        self.print_success("üéâ PARAB√âNS! Voc√™ criou um gerador completo de padr√µes!")
        
        # === APLICA√á√ïES AVAN√áADAS ===
        self.print_section("PR√ìXIMOS PASSOS", "üöÄ", "info")
        proximos_passos = [
            "Adicionar mais tipos de padr√µes (fractais, espirais)",
            "Implementar anima√ß√µes usando loops temporais",
            "Criar padr√µes coloridos usando bibliotecas gr√°ficas",
            "Salvar padr√µes em arquivos de imagem",
            "Integrar com sistemas de visualiza√ß√£o de dados"
        ]
        for passo in proximos_passos:
            self.print_colored(f"‚Ä¢ {passo}", "primary")
        
        self.print_success("\nüèÜ CONQUISTA DESBLOQUEADA: Mestre dos Loops!")
        
        # === REGISTRO DE CONCLUS√ÉO ===
        self.complete_mini_project("Gerador Interativo de Padr√µes e Sequ√™ncias")
        
        self.pausar()


# Para teste standalone
if __name__ == "__main__":
    module = Modulo08Loops()
    print("Teste do m√≥dulo 8 - vers√£o refatorada")
    module._loops_interativo()