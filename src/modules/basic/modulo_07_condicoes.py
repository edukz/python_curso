#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
M√≥dulo 7: Estruturas Condicionais (if/else)
Aprenda a tomar decis√µes nos seus programas
"""

from ..shared.base_module import BaseModule


class Modulo07Condicoes(BaseModule):
    """M√≥dulo 7: Tomando Decis√µes (if/else)"""
    
    def __init__(self):
        super().__init__("modulo_7", "Estruturas Condicionais")
        self.has_mini_project = True
        self.mini_project_points = 60
    
    def execute(self) -> None:
        """Executa o m√≥dulo sobre condi√ß√µes"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return
        
        try:
            self._condicoes()
        except Exception as e:
            self.error_handler(lambda: None)
    
    def _condicoes(self) -> None:
        """Conte√∫do principal sobre condi√ß√µes"""
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("ü§î M√ìDULO 7: TOMANDO DECIS√ïES (IF/ELSE)")
        else:
            print("\n" + "="*50)
            print("ü§î M√ìDULO 7: TOMANDO DECIS√ïES (IF/ELSE)")
            print("="*50)
        
        print("Programas precisam tomar decis√µes!")
        
        codigo = '''idade = 18

if idade >= 18:
    print("Voc√™ √© maior de idade! üéâ")
    print("Pode tirar carteira de motorista")
else:
    print("Voc√™ √© menor de idade")
    print(f"Faltam {18 - idade} anos para a maioridade")'''
        
        self.exemplo(codigo)
        self.executar_codigo(codigo)
        
        print("\nüìå Operadores de compara√ß√£o:")
        print("‚Ä¢ == (igual)")
        print("‚Ä¢ != (diferente)")
        print("‚Ä¢ > (maior)")
        print("‚Ä¢ < (menor)")
        print("‚Ä¢ >= (maior ou igual)")
        print("‚Ä¢ <= (menor ou igual)")
        
        # Mini Projeto do M√≥dulo 7
        self._mini_projeto_classificacao()
        
        # Marcar m√≥dulo como completo
        self.complete_module()
        
        self.pausar()
    
    def _mini_projeto_classificacao(self) -> None:
        """Mini Projeto - Sistema de Classifica√ß√£o Inteligente"""
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üéØ MINI PROJETO: SISTEMA DE CLASSIFICA√á√ÉO INTELIGENTE")
        else:
            print("\n" + "="*50)
            print("üéØ MINI PROJETO: SISTEMA DE CLASSIFICA√á√ÉO INTELIGENTE")
            print("="*50)
        
        print("üß† Vamos criar um sistema que toma decis√µes baseadas em condi√ß√µes!")
        print("üíº Tipo de sistema usado em:")
        print("‚Ä¢ Sistema de aprova√ß√£o de cr√©dito")
        print("‚Ä¢ Classifica√ß√£o de produtos")
        print("‚Ä¢ Sistemas de recomenda√ß√£o")
        print("‚Ä¢ Diagn√≥sticos automatizados")
        
        self.pausar()
        
        print("\nüìù PROJETO: Sistema de Avalia√ß√£o de Candidatos")
        
        codigo_projeto = '''# üéØ SISTEMA DE CLASSIFICA√á√ÉO INTELIGENTE
# Sistema de Avalia√ß√£o de Candidatos para Vaga

print("üè¢ SISTEMA DE AVALIA√á√ÉO DE CANDIDATOS")
print("=" * 50)

def avaliar_candidato(nome, idade, experiencia, formacao, nota_teste):
    """Avalia candidato baseado em crit√©rios definidos"""
    print(f"\\nüë§ Avaliando: {nome}")
    print("-" * 30)
    
    pontuacao = 0
    criterios_atendidos = []
    
    # Crit√©rio 1: Idade
    if 18 <= idade <= 65:
        pontuacao += 20
        criterios_atendidos.append("‚úÖ Idade adequada")
    else:
        criterios_atendidos.append("‚ùå Idade fora do range")
    
    # Crit√©rio 2: Experi√™ncia
    if experiencia >= 3:
        pontuacao += 30
        criterios_atendidos.append("‚úÖ Experi√™ncia suficiente")
    elif experiencia >= 1:
        pontuacao += 15
        criterios_atendidos.append("‚ö†Ô∏è Experi√™ncia limitada")
    else:
        criterios_atendidos.append("‚ùå Sem experi√™ncia")
    
    # Crit√©rio 3: Forma√ß√£o
    if formacao.lower() in ["superior", "universitario", "faculdade"]:
        pontuacao += 25
        criterios_atendidos.append("‚úÖ Forma√ß√£o superior")
    elif formacao.lower() in ["tecnico", "t√©cnico"]:
        pontuacao += 15
        criterios_atendidos.append("‚ö†Ô∏è Forma√ß√£o t√©cnica")
    else:
        pontuacao += 5
        criterios_atendidos.append("‚ö†Ô∏è Forma√ß√£o b√°sica")
    
    # Crit√©rio 4: Nota do teste
    if nota_teste >= 8:
        pontuacao += 25
        criterios_atendidos.append("‚úÖ Excelente no teste")
    elif nota_teste >= 6:
        pontuacao += 15
        criterios_atendidos.append("‚ö†Ô∏è Bom no teste")
    else:
        criterios_atendidos.append("‚ùå Nota baixa no teste")
    
    # Exibe avalia√ß√£o detalhada
    print("üìä CRIT√âRIOS AVALIADOS:")
    for criterio in criterios_atendidos:
        print(f"  {criterio}")
    
    print(f"\\nüèÜ PONTUA√á√ÉO TOTAL: {pontuacao}/100")
    
    # Decis√£o final
    if pontuacao >= 80:
        status = "APROVADO - EXCELENTE CANDIDATO"
        emoji = "üåü"
    elif pontuacao >= 60:
        status = "APROVADO - BOM CANDIDATO"
        emoji = "‚úÖ"
    elif pontuacao >= 40:
        status = "EM AN√ÅLISE - CANDIDATO RAZO√ÅVEL"
        emoji = "‚ö†Ô∏è"
    else:
        status = "REPROVADO - N√ÉO ATENDE CRIT√âRIOS"
        emoji = "‚ùå"
    
    print(f"\\n{emoji} RESULTADO: {status}")
    return pontuacao, status

# Testando o sistema com candidatos
print("\\nüß™ TESTANDO O SISTEMA:")

# Candidato 1: Perfil Excelente
print("\\n" + "="*50)
pontos1, resultado1 = avaliar_candidato(
    "Ana Silva", 28, 5, "Superior", 9.2
)

# Candidato 2: Perfil M√©dio
print("\\n" + "="*50)
pontos2, resultado2 = avaliar_candidato(
    "Carlos Santos", 22, 1, "T√©cnico", 7.0
)

# Relat√≥rio final
print("\\n" + "="*60)
print("üìä RELAT√ìRIO FINAL DE AVALIA√á√ïES")
print("="*60)
print(f"Ana Silva: {pontos1} pontos - {resultado1.split(' - ')[0]}")
print(f"Carlos Santos: {pontos2} pontos - {resultado2.split(' - ')[0]}")

print("\\nüéØ SISTEMA FUNCIONANDO PERFEITAMENTE!")'''
        
        self.exemplo(codigo_projeto)
        self.executar_codigo(codigo_projeto)
        
        print("\nüèÜ PARAB√âNS! Sistema de Classifica√ß√£o Inteligente criado!")
        print("üéØ Aplica√ß√£o real: RH, sistemas de aprova√ß√£o, classificadores autom√°ticos")
        
        # Registra conclus√£o do mini projeto
        self.complete_mini_project("Sistema de Classifica√ß√£o Inteligente")
        
        self.pausar()


# Para teste standalone
if __name__ == "__main__":
    module = Modulo07Condicoes()
    print("Teste do m√≥dulo 7 - vers√£o standalone")
    module._condicoes()