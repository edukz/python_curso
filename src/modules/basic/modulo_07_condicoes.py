#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
M√≥dulo 7: Estruturas Condicionais (if/else)
Aprenda a tomar decis√µes nos seus programas
"""

from ..shared.base_module import BaseModule


class Modulo07Condicoes(BaseModule):
    """M√≥dulo 7: Tomando Decis√µes com if/else"""
    
    def __init__(self):
        super().__init__("modulo_7", "Estruturas Condicionais")
        self.has_mini_project = True
        self.mini_project_points = 60
    
    def execute(self) -> None:
        """Executa o m√≥dulo Estruturas Condicionais"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return
        
        try:
            self._condicoes_interativo()
        except Exception as e:
            self.error_handler(lambda: None)
    
    def _condicoes_interativo(self) -> None:
        """Conte√∫do principal do m√≥dulo Estruturas Condicionais"""
        # === CABE√áALHO VISUAL ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("ü§î M√ìDULO 7: TOMANDO DECIS√ïES COM IF/ELSE")
        else:
            print("\n" + "="*50)
            print("ü§î M√ìDULO 7: TOMANDO DECIS√ïES COM IF/ELSE")
            print("="*50)
        
        # === MENSAGENS MOTIVACIONAIS ===
        self.print_success("üéâ Chegou a hora de ensinar programas a tomar decis√µes inteligentes!")
        self.print_tip("Este m√≥dulo est√° dividido em se√ß√µes interativas. Voc√™ controla o ritmo!")
        
        # === FLUXO PRINCIPAL COM TRATAMENTO DE CTRL+C ===
        
        # 1. Sistema de navega√ß√£o por se√ß√µes
        try:
            self._navegacao_secoes_interativas()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Navega√ß√£o interrompida pelo usu√°rio. Voltando ao menu principal...")
            return
        
        # 2. Se√ß√£o de Pr√°tica Interativa
        try:
            self._secao_pratica_interativa()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è M√≥dulo interrompido pelo usu√°rio. Voltando ao menu principal...")
            return
        
        # 3. Mini Projeto Pr√°tico
        try:
            self._mini_projeto_avaliador_inteligente()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Mini projeto interrompido. Voltando ao menu principal...")
            return
        
        # 4. Marcar m√≥dulo como completo
        self.complete_module()
    
    def _navegacao_secoes_interativas(self) -> None:
        """Sistema de navega√ß√£o por se√ß√µes do m√≥dulo"""
        
        # === DEFINI√á√ÉO DAS SE√á√ïES ===
        secoes = [
            {
                'id': 'secao_conceito_decisoes',
                'titulo': 'üéØ O que s√£o decis√µes na programa√ß√£o?',
                'descricao': 'Entenda como programas tomam decis√µes',
                'funcao': self._secao_conceito_decisoes
            },
            {
                'id': 'secao_if_else_basico',
                'titulo': '‚öôÔ∏è Como if/else funciona?',
                'descricao': 'Veja o processo passo a passo das condi√ß√µes',
                'funcao': self._secao_if_else_basico
            },
            {
                'id': 'secao_operadores_comparacao',
                'titulo': 'üîç Operadores de compara√ß√£o',
                'descricao': 'Veja condi√ß√µes em a√ß√£o com c√≥digo real',
                'funcao': self._secao_operadores_comparacao
            },
            {
                'id': 'secao_operadores_logicos',
                'titulo': 'üß† Operadores l√≥gicos (and, or, not)',
                'descricao': 'Combine m√∫ltiplas condi√ß√µes inteligentemente',
                'funcao': self._secao_operadores_logicos
            },
            {
                'id': 'secao_casos_uso',
                'titulo': 'üåç Onde usar na vida real?',
                'descricao': 'Aplica√ß√µes pr√°ticas de condi√ß√µes',
                'funcao': self._secao_casos_uso
            },
            {
                'id': 'secao_melhores_praticas',
                'titulo': '‚≠ê Melhores pr√°ticas',
                'descricao': 'Dicas de profissionais experientes',
                'funcao': self._secao_melhores_praticas
            },
            {
                'id': 'secao_erros_comuns',
                'titulo': '‚ö†Ô∏è Erros comuns e como evitar',
                'descricao': 'Aprenda com os erros mais frequentes',
                'funcao': self._secao_erros_comuns
            }
        ]
        
        secoes_visitadas = set()
        
        # === LOOP PRINCIPAL DE NAVEGA√á√ÉO ===
        while True:
            # Limpa tela e mostra cabe√ßalho
            self.ui.clear_screen() if self.ui else print("\n" + "="*50)
            self.print_section("NAVEGA√á√ÉO DO M√ìDULO", "üìö", "accent")
            self.print_colored("Escolha uma se√ß√£o para estudar:", "text")
            
            # Lista todas as se√ß√µes com status
            print()
            for i, secao in enumerate(secoes, 1):
                status = "‚úÖ" if secao['id'] in secoes_visitadas else "üìñ"
                print(f"{status} {i}. {secao['titulo']}")
                self.print_colored(f"    {secao['descricao']}", "text")
                print()
            
            print("0. üéØ Continuar para os Exerc√≠cios Pr√°ticos")
            
            # Mostra progresso visual
            progresso = len(secoes_visitadas)
            total = len(secoes)
            self.print_colored(f"\nüìä Progresso: {progresso}/{total} se√ß√µes visitadas", "info")
            
            if progresso == total:
                self.print_success("üåü Voc√™ completou todas as se√ß√µes! Est√° pronto para praticar!")
            
            # Processa escolha do usu√°rio
            try:
                escolha = input(f"\nüëâ Escolha uma se√ß√£o (1-{len(secoes)}) ou 0 para continuar: ").strip()
                
                if escolha == "0":
                    # Verifica se visitou se√ß√µes suficientes
                    if progresso >= 3:  # Pelo menos 3 se√ß√µes visitadas
                        break
                    else:
                        self.print_warning("üìö Recomendamos visitar pelo menos 3 se√ß√µes antes de continuar!")
                        continuar = input("Quer continuar mesmo assim? (s/n): ").lower()
                        if continuar in ['s', 'sim', 'yes']:
                            break
                elif escolha.isdigit() and 1 <= int(escolha) <= len(secoes):
                    # Executa se√ß√£o escolhida
                    idx = int(escolha) - 1
                    secoes[idx]['funcao']()
                    secoes_visitadas.add(secoes[idx]['id'])
                else:
                    self.print_warning(f"‚ùå Op√ß√£o inv√°lida! Digite um n√∫mero de 1 a {len(secoes)} ou 0.")
            
            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Pulando para exerc√≠cios pr√°ticos...")
                break
            except Exception as e:
                self.print_warning(f"‚ùå Erro: {str(e)}. Tente novamente.")
    
    def _secao_conceito_decisoes(self) -> None:
        """Se√ß√£o: O que s√£o decis√µes na programa√ß√£o?"""
        if self.ui:
            self.ui.clear_screen()
        
        # === CABE√áALHO ATRATIVO ===
        self.print_section("O QUE S√ÉO DECIS√ïES NA PROGRAMA√á√ÉO?", "üéØ")
        
        # === DEFINI√á√ÉO DO CONCEITO ===
        self.print_concept(
            "Estruturas Condicionais",
            "S√£o comandos que fazem o programa escolher diferentes caminhos baseado em condi√ß√µes espec√≠ficas"
        )
        
        # === DICA RELACIONADA ===
        self.print_tip("Assim como voc√™ decide se vai levar guarda-chuva baseado na previs√£o do tempo!")
        
        # === ANALOGIA DO COTIDIANO ===
        self.print_colored("\nüè† ANALOGIA DO DIA A DIA:", "warning")
        self.print_colored("Imagine um sem√°foro inteligente:", "text")
        self.print_colored("‚Ä¢ Se tem carros esperando ‚Üí Fica verde", "text")
        self.print_colored("‚Ä¢ Se n√£o tem carros ‚Üí Continua vermelho", "text")
        self.print_colored("‚Ä¢ Se √© de madrugada ‚Üí Fica amarelo piscando", "text")
        input("\nüî∏ Pressione ENTER para continuar...")
        
        # === EXPLICA√á√ÉO T√âCNICA GRADUAL ===
        self.print_colored("\nüîß COMO FUNCIONA NA PR√ÅTICA:", "info")
        passos_tecnicos = [
            "1. O programa verifica uma condi√ß√£o (ex: idade >= 18)",
            "2. Se a condi√ß√£o for verdadeira, executa um bloco de c√≥digo",
            "3. Se for falsa, pode executar outro bloco (else) ou pular"
        ]
        
        for i, passo in enumerate(passos_tecnicos, 1):
            self.print_colored(passo, "text")
            if i < len(passos_tecnicos):
                input("   ‚è≥ Pressione ENTER para o pr√≥ximo passo...")
        
        # === EXEMPLO DE C√ìDIGO ===
        self.print_colored("\nüíª EXEMPLO PR√ÅTICO:", "success")
        codigo_exemplo = '''# Programa que decide se pode votar
idade = 17

if idade >= 16:
    print("‚úÖ Voc√™ pode votar!")
else:
    print("‚ùå Ainda n√£o pode votar")
    print(f"Faltam {16 - idade} anos")'''
        
        self.exemplo(codigo_exemplo)
        
        # Executa o c√≥digo para mostrar resultado
        print("\nüöÄ Vamos ver funcionando:")
        self.executar_codigo(codigo_exemplo)
        
        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nüåç ONDE √â USADO NO MUNDO REAL:", "accent")
        aplicacoes = [
            "Netflix - Decide quais filmes recomendar baseado no seu hist√≥rico",
            "Bancos - Aprovam ou negam empr√©stimos baseado em crit√©rios",
            "GPS - Escolhe a melhor rota baseado no tr√¢nsito",
            "Games - Muda a dificuldade baseado na performance do jogador"
        ]
        for app in aplicacoes:
            self.print_colored(f"‚Ä¢ {app}", "primary")
        
        self.pausar()
    
    def _secao_if_else_basico(self) -> None:
        """Se√ß√£o: Como if/else funciona?"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("COMO IF/ELSE FUNCIONA?", "‚öôÔ∏è")
        
        # === ESTRUTURA B√ÅSICA ===
        self.print_colored("üèóÔ∏è ESTRUTURA B√ÅSICA DO IF/ELSE:", "warning")
        estrutura = '''if condi√ß√£o:
    # C√≥digo executado se condi√ß√£o for True
    print("Condi√ß√£o verdadeira!")
else:
    # C√≥digo executado se condi√ß√£o for False
    print("Condi√ß√£o falsa!")'''
        
        self.exemplo(estrutura)
        
        # === PONTOS IMPORTANTES ===
        self.print_colored("\nüìå PONTOS IMPORTANTES:", "info")
        pontos = [
            "‚Ä¢ Os dois pontos (:) s√£o obrigat√≥rios",
            "‚Ä¢ A indenta√ß√£o (espa√ßos) define o que est√° dentro do if",
            "‚Ä¢ O else √© opcional - pode ter s√≥ if",
            "‚Ä¢ Pode ter elif (else if) para m√∫ltiplas condi√ß√µes"
        ]
        
        for ponto in pontos:
            self.print_colored(ponto, "text")
            input("   ‚è≥ Pressione ENTER para continuar...")
        
        # === EXEMPLO ELIF ===
        self.print_colored("\nüîÄ EXEMPLO COM ELIF (M√öLTIPLAS CONDI√á√ïES):", "success")
        codigo_elif = '''nota = 8.5

if nota >= 9:
    print("üåü Conceito A - Excelente!")
elif nota >= 7:
    print("üìö Conceito B - Muito bom!")
elif nota >= 6:
    print("üìñ Conceito C - Bom")
else:
    print("üìù Conceito D - Precisa estudar mais")

print(f"Sua nota: {nota}")'''
        
        self.exemplo(codigo_elif)
        
        print("\nüöÄ Executando exemplo:")
        self.executar_codigo(codigo_elif)
        
        self.pausar()
    
    def _secao_operadores_comparacao(self) -> None:
        """Se√ß√£o: Operadores de compara√ß√£o"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("OPERADORES DE COMPARA√á√ÉO", "üîç")
        
        # === LISTA DE OPERADORES ===
        self.print_colored("üîß FERRAMENTAS PARA COMPARAR VALORES:", "warning")
        operadores = [
            ("==", "Igual", "5 == 5 ‚Üí True"),
            ("!=", "Diferente", "5 != 3 ‚Üí True"),
            (">", "Maior que", "8 > 5 ‚Üí True"),
            ("<", "Menor que", "3 < 7 ‚Üí True"),
            (">=", "Maior ou igual", "5 >= 5 ‚Üí True"),
            ("<=", "Menor ou igual", "4 <= 6 ‚Üí True")
        ]
        
        for simbolo, nome, exemplo in operadores:
            self.print_colored(f"‚Ä¢ {simbolo:2} ({nome:12}) - Exemplo: {exemplo}", "text")
            input("   ‚è≥ Pressione ENTER para o pr√≥ximo...")
        
        # === EXEMPLO PR√ÅTICO ===
        self.print_colored("\nüí° EXEMPLO PR√ÅTICO - SISTEMA DE ACESSO:", "success")
        codigo_acesso = '''# Sistema de controle de acesso
idade = 25
tem_documento = True

print("üè¢ SISTEMA DE CONTROLE DE ACESSO")
print("-" * 40)

if idade >= 18:
    print("‚úÖ Idade: Maior de idade")
else:
    print("‚ùå Idade: Menor de idade")

if tem_documento == True:
    print("‚úÖ Documento: Apresentado")
else:
    print("‚ùå Documento: N√£o apresentado")

if idade >= 18 and tem_documento:
    print("\\nüéâ ACESSO LIBERADO!")
else:
    print("\\nüö´ ACESSO NEGADO!")'''
        
        self.exemplo(codigo_acesso)
        
        print("\nüöÄ Executando exemplo:")
        self.executar_codigo(codigo_acesso)
        
        self.print_tip("Cuidado: Use == para comparar, n√£o = (que √© para atribuir valores)")
        
        self.pausar()
    
    def _secao_operadores_logicos(self) -> None:
        """Se√ß√£o: Operadores l√≥gicos (and, or, not)"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("OPERADORES L√ìGICOS", "üß†")
        
        # === EXPLICA√á√ÉO DOS OPERADORES ===
        self.print_colored("ü§ù COMBINANDO M√öLTIPLAS CONDI√á√ïES:", "warning")
        
        # Operador AND
        self.print_colored("\nüîó AND - TODAS as condi√ß√µes devem ser verdadeiras:", "info")
        self.print_colored("‚Ä¢ Como uma porta com duas chaves - precisa das duas!", "text")
        
        codigo_and = '''# Exemplo AND - Precisa de TODAS as condi√ß√µes
idade = 20
tem_carteira = True
tem_carro = True

if idade >= 18 and tem_carteira and tem_carro:
    print("üöó Pode dirigir seu pr√≥prio carro!")
else:
    print("üö´ N√£o pode dirigir")'''
        
        self.exemplo(codigo_and)
        self.executar_codigo(codigo_and)
        input("\nüî∏ Pressione ENTER para o pr√≥ximo operador...")
        
        # Operador OR
        self.print_colored("\nüéØ OR - PELO MENOS UMA condi√ß√£o deve ser verdadeira:", "info")
        self.print_colored("‚Ä¢ Como ter m√∫ltiplas chaves - qualquer uma abre!", "text")
        
        codigo_or = '''# Exemplo OR - Basta UMA condi√ß√£o ser verdadeira
tem_dinheiro = False
tem_cartao = True
tem_pix = False

if tem_dinheiro or tem_cartao or tem_pix:
    print("üí≥ Pode pagar a compra!")
else:
    print("üí∏ N√£o pode pagar")
    
print("Formas de pagamento dispon√≠veis:")
if tem_dinheiro:
    print("  üíµ Dinheiro")
if tem_cartao:
    print("  üí≥ Cart√£o")
if tem_pix:
    print("  üì± PIX")'''
        
        self.exemplo(codigo_or)
        self.executar_codigo(codigo_or)
        input("\nüî∏ Pressione ENTER para o pr√≥ximo operador...")
        
        # Operador NOT
        self.print_colored("\nüîÑ NOT - INVERTE o resultado (verdadeiro vira falso):", "info")
        self.print_colored("‚Ä¢ Como um interruptor - liga vira desliga!", "text")
        
        codigo_not = '''# Exemplo NOT - Inverte o resultado
chovendo = False
tem_guarda_chuva = True

print(f"Est√° chovendo? {chovendo}")
print(f"Tem guarda-chuva? {tem_guarda_chuva}")

if not chovendo:
    print("‚òÄÔ∏è N√£o est√° chovendo - pode sair sem guarda-chuva!")
else:
    print("üåßÔ∏è Est√° chovendo - melhor levar guarda-chuva!")
    
# Exemplo mais complexo
if not chovendo and tem_guarda_chuva:
    print("‚úÖ Condi√ß√µes perfeitas para um passeio!")'''
        
        self.exemplo(codigo_not)
        self.executar_codigo(codigo_not)
        
        # === TABELA DA VERDADE ===
        self.print_colored("\nüìä TABELA DA VERDADE:", "warning")
        tabela = [
            "True  and True  = True",
            "True  and False = False",
            "False and True  = False", 
            "False and False = False",
            "",
            "True  or True   = True",
            "True  or False  = True",
            "False or True   = True",
            "False or False  = False",
            "",
            "not True  = False",
            "not False = True"
        ]
        
        for linha in tabela:
            if linha:
                self.print_colored(f"  {linha}", "text")
            else:
                print()
        
        self.pausar()
    
    def _secao_casos_uso(self) -> None:
        """Se√ß√£o: Onde usar na vida real?"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("ONDE USAR NA VIDA REAL?", "üåç")
        
        casos_uso = [
            {
                'titulo': 'üè¶ SISTEMA BANC√ÅRIO',
                'descricao': 'Aprova√ß√£o de empr√©stimos e cart√µes de cr√©dito',
                'exemplo': '''# Sistema de aprova√ß√£o de empr√©stimo
renda = 5000
score = 750
tempo_emprego = 24  # meses

if renda >= 3000 and score >= 600 and tempo_emprego >= 12:
    print("‚úÖ Empr√©stimo APROVADO!")
    if score >= 800:
        print("üåü Taxa preferencial: 1.5% ao m√™s")
    else:
        print("üìä Taxa padr√£o: 2.1% ao m√™s")
else:
    print("‚ùå Empr√©stimo NEGADO")'''
            },
            {
                'titulo': 'üéÆ DESENVOLVIMENTO DE GAMES',
                'descricao': 'L√≥gica de gameplay e progress√£o',
                'exemplo': '''# Sistema de level up em game
experiencia = 1250
level_atual = 5

if experiencia >= 1000 and level_atual < 10:
    print("üéâ LEVEL UP!")
    print(f"Subiu para level {level_atual + 1}")
    
    if level_atual == 4:
        print("üîì Nova habilidade desbloqueada: Fireball!")
    elif level_atual == 9:
        print("üèÜ Conquistou o t√≠tulo: Mestre Aventureiro!")
else:
    falta_exp = 1000 - (experiencia % 1000)
    print(f"Faltam {falta_exp} pontos para o pr√≥ximo level")'''
            },
            {
                'titulo': 'üõí E-COMMERCE',
                'descricao': 'C√°lculo de frete e promo√ß√µes',
                'exemplo': '''# Sistema de desconto e frete
valor_compra = 150.00
eh_cliente_vip = True
cep_regiao = "SP"

desconto = 0
frete = 15.00

# Calcula desconto
if valor_compra >= 100:
    desconto = 10  # 10% de desconto
elif valor_compra >= 50:
    desconto = 5   # 5% de desconto

# Desconto VIP adicional
if eh_cliente_vip:
    desconto += 5

# Calcula frete
if valor_compra >= 200 or eh_cliente_vip:
    frete = 0  # Frete gr√°tis

valor_final = valor_compra * (1 - desconto/100) + frete

print(f"üí∞ Valor da compra: R$ {valor_compra:.2f}")
print(f"üéÅ Desconto total: {desconto}%")
print(f"üöö Frete: R$ {frete:.2f}")
print(f"üí∏ Total a pagar: R$ {valor_final:.2f}")'''
            }
        ]
        
        for i, caso in enumerate(casos_uso):
            self.print_colored(f"\n{caso['titulo']}", "warning")
            self.print_colored(f"üìù {caso['descricao']}", "text")
            
            self.print_code_section("EXEMPLO", caso['exemplo'])
            
            print("\nüöÄ Executando exemplo:")
            self.executar_codigo(caso['exemplo'])
            
            if i < len(casos_uso) - 1:
                input("\nüî∏ Pressione ENTER para o pr√≥ximo caso...")
        
        self.print_success("\nüåü Condi√ß√µes est√£o em TODO LUGAR na programa√ß√£o!")
        self.pausar()
    
    def _secao_melhores_praticas(self) -> None:
        """Se√ß√£o: Melhores pr√°ticas"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("MELHORES PR√ÅTICAS", "‚≠ê")
        
        praticas = [
            {
                'titulo': 'üìù Use nomes descritivos para vari√°veis',
                'ruim': '''if x > 18:
    print("OK")''',
                'bom': '''if idade > 18:
    print("Maior de idade")'''
            },
            {
                'titulo': 'üîç Prefira compara√ß√µes expl√≠citas',
                'ruim': '''if nome:  # Pode confundir
    print("OK")''',
                'bom': '''if nome != "":  # Mais claro
    print("Nome informado")'''
            },
            {
                'titulo': 'üéØ Evite condi√ß√µes muito complexas',
                'ruim': '''if (idade >= 18 and tem_documento and not suspenso and credito_ok and not bloqueado):
    print("Aprovado")''',
                'bom': '''# Quebrar em vari√°veis intermedi√°rias
pode_dirigir = idade >= 18 and tem_documento and not suspenso
tem_credito_ok = credito_ok and not bloqueado

if pode_dirigir and tem_credito_ok:
    print("Aprovado")'''
            },
            {
                'titulo': 'üí° Use coment√°rios para l√≥gicas complexas',
                'ruim': '''if score >= 600 and renda * 12 > valor * 0.3:
    print("Aprovado")''',
                'bom': '''# Regra do banco: score m√≠nimo 600 e 
# renda anual deve ser pelo menos 30% do valor
if score >= 600 and renda * 12 > valor * 0.3:
    print("Empr√©stimo aprovado")'''
            }
        ]
        
        for i, pratica in enumerate(praticas, 1):
            self.print_colored(f"\n{i}. {pratica['titulo']}", "warning")
            
            self.print_colored("\n‚ùå EVITE:", "error")
            self.exemplo(pratica['ruim'])
            
            self.print_colored("‚úÖ PREFIRA:", "success")
            self.exemplo(pratica['bom'])
            
            if i < len(praticas):
                input("\nüî∏ Pressione ENTER para a pr√≥xima pr√°tica...")
        
        self.print_tip("C√≥digo limpo e leg√≠vel √© mais importante que c√≥digo 'inteligente'!")
        self.pausar()
    
    def _secao_erros_comuns(self) -> None:
        """Se√ß√£o: Erros comuns e como evitar"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("ERROS COMUNS E COMO EVITAR", "‚ö†Ô∏è")
        
        erros = [
            {
                'titulo': 'üî∏ Esquecer os dois pontos (:)',
                'erro': '''if idade >= 18  # ‚ùå ERRO: Faltou :
    print("Maior de idade")''',
                'correto': '''if idade >= 18:  # ‚úÖ CORRETO
    print("Maior de idade")''',
                'dica': 'Python sempre exige : ap√≥s if, elif, else'
            },
            {
                'titulo': 'üî∏ Confundir = com ==',
                'erro': '''if nome = "Jo√£o":  # ‚ùå ERRO: = √© atribui√ß√£o
    print("Ol√° Jo√£o")''',
                'correto': '''if nome == "Jo√£o":  # ‚úÖ CORRETO: == √© compara√ß√£o
    print("Ol√° Jo√£o")''',
                'dica': '= atribui valor, == compara valores'
            },
            {
                'titulo': 'üî∏ Indenta√ß√£o incorreta',
                'erro': '''if idade >= 18:
print("Maior de idade")  # ‚ùå ERRO: Sem indenta√ß√£o''',
                'correto': '''if idade >= 18:
    print("Maior de idade")  # ‚úÖ CORRETO: Com indenta√ß√£o''',
                'dica': 'Use 4 espa√ßos para indentar (padr√£o Python)'
            },
            {
                'titulo': 'üî∏ Usar and/or incorretamente',
                'erro': '''# ‚ùå ERRO: Esta condi√ß√£o nunca ser√° True
if idade >= 18 and idade <= 10:
    print("Imposs√≠vel")''',
                'correto': '''# ‚úÖ CORRETO: Usar OR para faixas excludentes
if idade <= 10 or idade >= 65:
    print("Desconto especial")''',
                'dica': 'AND exige que ambas sejam verdadeiras simultaneamente'
            }
        ]
        
        for i, erro in enumerate(erros, 1):
            self.print_colored(f"\n{i}. {erro['titulo']}", "warning")
            
            self.print_colored("\n‚ùå C√ìDIGO COM ERRO:", "error")
            self.exemplo(erro['erro'])
            
            self.print_colored("‚úÖ C√ìDIGO CORRETO:", "success")
            self.exemplo(erro['correto'])
            
            self.print_tip(erro['dica'])
            
            if i < len(erros):
                input("\nüî∏ Pressione ENTER para o pr√≥ximo erro...")
        
        self.print_success("\nüéØ Conhecendo os erros comuns, voc√™ os evitar√°!")
        self.pausar()
    
    def _secao_pratica_interativa(self) -> None:
        """Se√ß√£o de pr√°tica interativa do m√≥dulo"""
        
        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_section("HORA DE PRATICAR!", "üéØ", "success")
        self.print_colored("Vamos testar o que voc√™ aprendeu sobre condi√ß√µes!", "text")
        
        # === INSTRU√á√ïES PARA INICIANTES ===
        self.print_tip("Para iniciantes: Cada exerc√≠cio √© opcional, mas recomendamos fazer todos!")
        self.print_colored("\nüéì SOBRE OS EXERC√çCIOS:", "info")
        self.print_colored("‚Ä¢ N√£o se preocupe se errar - faz parte do aprendizado!", "text")
        self.print_colored("‚Ä¢ Voc√™ pode tentar quantas vezes quiser", "text")
        self.print_colored("‚Ä¢ Digite 'help' se precisar de ajuda", "text")
        self.print_colored("‚Ä¢ Use Ctrl+C para voltar ao menu principal se necess√°rio", "text")
        
        # === DEFINI√á√ÉO DOS EXERC√çCIOS ===
        exercicios = [
            {
                'title': 'Quiz: Conhecimentos sobre Condi√ß√µes',
                'type': 'quiz',
                'questions': [
                    {
                        'question': 'Qual operador usamos para verificar se dois valores s√£o iguais?',
                        'answer': ['==', 'igual', 'duplo igual'],
                        'hint': 'N√£o confunda com = que √© para atribuir valores!'
                    },
                    {
                        'question': 'Se queremos que TODAS as condi√ß√µes sejam verdadeiras, qual operador l√≥gico usamos?',
                        'answer': ['and', 'e'],
                        'hint': 'Pense em "isso E aquilo" - ambos precisam ser verdade'
                    },
                    {
                        'question': 'O que √© obrigat√≥rio no final de um if em Python?',
                        'answer': [':', 'dois pontos', 'doispontos'],
                        'hint': '√â um sinal de pontua√ß√£o que vem depois da condi√ß√£o'
                    },
                    {
                        'question': 'Qual comando usamos para m√∫ltiplas condi√ß√µes alternativas?',
                        'answer': ['elif', 'else if'],
                        'hint': '√â uma jun√ß√£o de "else" + "if" em Python'
                    },
                    {
                        'question': 'Quantos espa√ßos s√£o recomendados para indenta√ß√£o em Python?',
                        'answer': ['4', 'quatro', '4 espa√ßos'],
                        'hint': '√â o padr√£o oficial do Python (PEP 8)'
                    }
                ]
            },
            {
                'title': 'Desafio: Complete o C√≥digo',
                'type': 'code_completion',
                'exercises': [
                    {
                        'instruction': 'B√ÅSICO: Complete a condi√ß√£o para verificar se a pessoa pode votar (16+ anos)',
                        'starter': '''idade = 17
if idade ___ 16:
    print("‚úÖ Pode votar!")
else:
    print("‚ùå N√£o pode votar ainda")''',
                        'solution': '>=',
                        'type': 'simple'
                    },
                    {
                        'instruction': 'INTERMEDI√ÅRIO: Complete usando operador l√≥gico para dirigir (18+ anos E ter carteira)',
                        'starter': '''idade = 20
tem_carteira = True

if idade >= 18 ___ tem_carteira:
    print("üöó Pode dirigir!")
else:
    print("üö´ N√£o pode dirigir")''',
                        'solution': 'and',
                        'type': 'intermediate'
                    },
                    {
                        'instruction': 'AVAN√áADO: Complete o sistema de desconto com m√∫ltiplas condi√ß√µes',
                        'starter': '''valor = 120
eh_vip = True
desconto = 0

if valor >= 100:
    desconto = 10
____ valor >= 50:
    desconto = 5

if eh_vip:
    desconto ___ 5

print(f"Desconto total: {desconto}%")''',
                        'solution': 'elif\n+=',
                        'type': 'advanced'
                    }
                ]
            },
            {
                'title': 'Exerc√≠cio Criativo: Sistema de Classifica√ß√£o Pessoal',
                'type': 'creative',
                'instruction': 'Crie um sistema que classifica algo do seu interesse (filmes, m√∫sicas, livros, etc.) baseado em crit√©rios que voc√™ escolher!'
            }
        ]
        
        # === MENU PRINCIPAL DE EXERC√çCIOS ===
        while True:
            print("\nEscolha uma atividade:")
            print("1. üìù Quiz de Conhecimentos")
            print("2. üíª Complete o C√≥digo")
            print("3. üé® Exerc√≠cio Criativo")
            print("0. Continuar para o Mini Projeto")
            
            try:
                escolha = input("\nüëâ Sua escolha: ").strip().lower()
                
                if escolha in ["0", "continuar", "sair", "proximo"]:
                    break
                elif escolha in ["1", "quiz", "conhecimentos"]:
                    try:
                        self._run_quiz(exercicios[0])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Quiz interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no quiz. Continuando...")
                elif escolha in ["2", "codigo", "completar"]:
                    try:
                        self._run_code_completion(exercicios[1])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio de c√≥digo interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio de c√≥digo. Continuando...")
                elif escolha in ["3", "criativo"]:
                    try:
                        self._run_creative_exercise(exercicios[2])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio criativo interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio criativo. Continuando...")
                elif escolha in ["help", "ajuda", "h", "?"]:
                    self._show_help()
                else:
                    self.print_warning("‚ùå Op√ß√£o inv√°lida! Digite 1, 2, 3, 0 ou 'help' para ajuda.")
            
            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Opera√ß√£o cancelada pelo usu√°rio. Voltando ao menu principal...")
                return
            except Exception as e:
                self.print_warning("‚ùå Erro inesperado no menu. Tente novamente.")
    
    def _show_help(self) -> None:
        """Mostra ajuda sobre as op√ß√µes dispon√≠veis"""
        self.print_section("AJUDA - SE√á√ÉO DE PR√ÅTICA", "‚ùì", "info")
        help_text = [
            "üìù OP√á√ÉO 1 - Quiz: Teste seus conhecimentos sobre condi√ß√µes if/else",
            "üíª OP√á√ÉO 2 - Complete o C√≥digo: 3 exerc√≠cios progressivos de programa√ß√£o",
            "üé® OP√á√ÉO 3 - Exerc√≠cio Criativo: Crie seu pr√≥prio sistema de classifica√ß√£o",
            "üî¢ OP√á√ÉO 0 - Continue para o Mini Projeto de Avaliador Inteligente",
            "",
            "üí° DICAS:",
            "‚Ä¢ Voc√™ pode digitar o n√∫mero ou palavras como 'quiz', 'codigo'",
            "‚Ä¢ Digite 'help' a qualquer momento para ver esta ajuda",
            "‚Ä¢ Use Ctrl+C se quiser voltar ao menu principal",
            "‚Ä¢ Recomendamos fazer todas as atividades para aprender melhor!"
        ]
        
        for line in help_text:
            if line:
                self.print_colored(f"  {line}", "text")
            else:
                print()
        
        input("\nüî∏ Pressione ENTER para voltar ao menu...")
    
    def _run_quiz(self, quiz_data: dict) -> None:
        """Executa um quiz interativo"""
        self.print_section(quiz_data['title'], "üìù")
        score = 0
        total_questions = len(quiz_data['questions'])
        
        for i, q in enumerate(quiz_data['questions'], 1):
            print(f"\nüìù Pergunta {i} de {total_questions}:")
            correto = self.exercicio(
                q['question'],
                q['answer'],
                q['hint']
            )
            if correto:
                score += 1
        
        # Feedback detalhado baseado na pontua√ß√£o
        percentage = (score / total_questions) * 100
        
        self.print_success(f"\nüèÜ RESULTADO: {score} de {total_questions} perguntas corretas ({percentage:.0f}%)")
        
        if percentage >= 80:
            self.print_success("üåü Excelente! Voc√™ domina as condi√ß√µes!")
        elif percentage >= 60:
            self.print_success("üëè Muito bom! Continue praticando!")
        else:
            self.print_tip("üí™ Continue estudando! Revise as se√ß√µes te√≥ricas.")
        
        self.pausar()
    
    def _run_code_completion(self, exercise_data: dict) -> None:
        """Executa exerc√≠cio de completar c√≥digo"""
        self.print_section(exercise_data['title'], "üíª")
        
        for i, ex in enumerate(exercise_data['exercises'], 1):
            print(f"\nüéØ EXERC√çCIO {i} de {len(exercise_data['exercises'])}:")
            print(f"üìù {ex['instruction']}")
            self.print_code_section("C√≥digo para Completar", ex['starter'])
            
            exercise_type = ex.get('type', 'simple')
            
            if exercise_type == 'simple':
                print(f"\n‚úçÔ∏è Complete a condi√ß√£o:")
                user_input = input(">>> ").strip()
                if user_input.lower() == ex['solution'].lower():
                    self.print_success("‚úÖ Perfeito! Resposta correta!")
                    # Mostrar c√≥digo completo funcionando
                    codigo_completo = ex['starter'].replace('___', user_input)
                    print("\nüöÄ C√≥digo completo:")
                    self.executar_codigo(codigo_completo)
                else:
                    self.print_warning(f"‚ùå Resposta incorreta. A resposta era: {ex['solution']}")
                    
            elif exercise_type == 'intermediate':
                print(f"\n‚úçÔ∏è Complete o operador l√≥gico:")
                user_input = input(">>> ").strip()
                if user_input.lower() == ex['solution'].lower():
                    self.print_success("‚úÖ Correto! Operador l√≥gico perfeito!")
                    codigo_completo = ex['starter'].replace('___', user_input)
                    print("\nüöÄ C√≥digo completo:")
                    self.executar_codigo(codigo_completo)
                else:
                    self.print_warning(f"‚ùå Resposta incorreta. A resposta era: {ex['solution']}")
                    
            elif exercise_type == 'advanced':
                print(f"\n‚úçÔ∏è Complete as duas partes (uma por linha):")
                print("Linha 1:")
                input1 = input(">>> ").strip()
                print("Linha 2:")
                input2 = input(">>> ").strip()
                
                solutions = ex['solution'].split('\n')
                correct = (input1.lower() == solutions[0].lower() and 
                          input2.lower() == solutions[1].lower())
                
                if correct:
                    self.print_success("‚úÖ Excelente! C√≥digo avan√ßado completo!")
                    codigo_completo = ex['starter'].replace('____', input1).replace('___', input2)
                    print("\nüöÄ C√≥digo completo:")
                    self.executar_codigo(codigo_completo)
                else:
                    self.print_warning(f"‚ùå Resposta incorreta. As respostas eram: {solutions[0]} e {solutions[1]}")
            
            if i < len(exercise_data['exercises']):
                input("\nüî∏ Pressione ENTER para o pr√≥ximo exerc√≠cio...")
        
        self.print_success("\nüéâ Parab√©ns! Voc√™ completou todos os exerc√≠cios de c√≥digo!")
        self.pausar()
    
    def _run_creative_exercise(self, exercise_data: dict) -> None:
        """Executa exerc√≠cio criativo"""
        self.print_section(exercise_data['title'], "üé®")
        print(f"\n{exercise_data['instruction']}")
        
        print("\nüí° Exemplo de sistema de classifica√ß√£o:")
        print("Sistema de Avalia√ß√£o de Filmes:")
        print("‚Ä¢ Se dura√ß√£o > 180 minutos ‚Üí 'Filme longo'")
        print("‚Ä¢ Se nota_imdb >= 8.0 ‚Üí 'Obra-prima'") 
        print("‚Ä¢ Se ano >= 2020 ‚Üí 'Lan√ßamento recente'")
        
        print("\nüéØ Agora √© sua vez! Pense em algo que gosta e crie crit√©rios para classificar:")
        
        categoria = input("\nüìù O que voc√™ quer classificar? (ex: livros, m√∫sicas, jogos): ").strip()
        
        if categoria:
            print(f"\nüåü √ìtima escolha! Vamos criar um sistema para classificar {categoria}!")
            
            criterio1 = input(f"üî∏ Crit√©rio 1 - Complete: Se _____ ent√£o... : ").strip()
            resultado1 = input(f"üî∏ Resultado 1 - O que acontece?: ").strip()
            
            criterio2 = input(f"üî∏ Crit√©rio 2 - Complete: Se _____ ent√£o... : ").strip()
            resultado2 = input(f"üî∏ Resultado 2 - O que acontece?: ").strip()
            
            # Criar c√≥digo baseado nas respostas
            codigo_criativo = f'''# üé® SISTEMA DE CLASSIFICA√á√ÉO DE {categoria.upper()}
# Criado por voc√™!

def classificar_{categoria.lower().replace(' ', '_')}():
    print("üéØ SISTEMA DE CLASSIFICA√á√ÉO DE {categoria.upper()}")
    print("=" * 50)
    
    # Crit√©rio 1
    if {criterio1}:
        print("‚úÖ {resultado1}")
    else:
        print("‚ö†Ô∏è N√£o atende ao crit√©rio 1")
    
    # Crit√©rio 2  
    if {criterio2}:
        print("‚úÖ {resultado2}")
    else:
        print("‚ö†Ô∏è N√£o atende ao crit√©rio 2")
    
    print("\\nüéâ Sistema funcionando!")

# Testando o sistema
classificar_{categoria.lower().replace(' ', '_')}()'''
            
            print("\nüöÄ Aqui est√° seu sistema de classifica√ß√£o personalizado:")
            self.exemplo(codigo_criativo)
            
            print(f"\nüéâ Incr√≠vel! Voc√™ criou um sistema inteligente para {categoria}!")
            self.print_success("üèÜ Parab√©ns pela criatividade!")
        else:
            print("\nüé® Sem problema! A criatividade vem com a pr√°tica!")
        
        self.pausar()
    
    def _mini_projeto_avaliador_inteligente(self) -> None:
        """Mini Projeto - M√≥dulo 7: Avaliador Inteligente de Perfis"""
        
        # === CABE√áALHO IMPACTANTE ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üéØ MINI PROJETO: AVALIADOR INTELIGENTE DE PERFIS")
        else:
            print("\n" + "="*50)
            print("üéØ MINI PROJETO: AVALIADOR INTELIGENTE DE PERFIS")
            print("="*50)
        
        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_success("üéâ Vamos criar seu sistema de avalia√ß√£o inteligente usando condi√ß√µes!")
        
        self.print_concept(
            "Avaliador Inteligente",
            "Um sistema que analisa perfis e toma decis√µes autom√°ticas baseado em m√∫ltiplos crit√©rios"
        )
        
        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nEste tipo de programa √© √∫til para:", "text")
        usos_praticos = [
            "Recursos Humanos - Triagem autom√°tica de candidatos",
            "Bancos - An√°lise de risco para empr√©stimos",
            "Plataformas de dating - Compatibilidade entre usu√°rios",
            "E-commerce - Sistema de recomenda√ß√£o personalizada"
        ]
        for uso in usos_praticos:
            self.print_colored(f"‚Ä¢ {uso}", "accent")
        
        # === DESENVOLVIMENTO PASSO A PASSO ===
        
        # PASSO 1: Coleta de informa√ß√µes
        self.print_section("PASSO 1: Coletando informa√ß√µes do perfil", "üìù", "info")
        self.print_tip("Vamos simular dados de um candidato para nossa an√°lise")
        
        try:
            print("\nüß™ Dados do candidato para an√°lise:")
            nome = "Ana Silva"
            idade = 28
            experiencia = 5  # anos
            formacao = "Superior"
            nota_teste = 8.5
            tem_certificacoes = True
            disponibilidade = "Integral"
            
            print(f"üë§ Nome: {nome}")
            print(f"üéÇ Idade: {idade} anos")
            print(f"üíº Experi√™ncia: {experiencia} anos")
            print(f"üéì Forma√ß√£o: {formacao}")
            print(f"üìä Nota do teste: {nota_teste}")
            print(f"üèÜ Certifica√ß√µes: {'Sim' if tem_certificacoes else 'N√£o'}")
            print(f"‚è∞ Disponibilidade: {disponibilidade}")
            
            input("\nüî∏ Pressione ENTER para come√ßar a an√°lise...")
            
        except KeyboardInterrupt:
            self.print_warning("Projeto cancelado pelo usu√°rio")
            return
        
        # PASSO 2: Processamento e an√°lise
        self.print_section("PASSO 2: Analisando o perfil com intelig√™ncia", "‚öôÔ∏è", "success")
        self.print_colored("Agora vamos aplicar nossa l√≥gica de avalia√ß√£o:", "text")
        
        # PASSO 3: Gerando resultado
        self.print_section("PASSO 3: Resultado da avalia√ß√£o inteligente", "üé¨", "warning")
        
        # === C√ìDIGO FINAL GERADO ===
        self.print_colored("Aqui est√° o c√≥digo completo do seu Avaliador Inteligente:", "text")
        
        codigo_final = f'''# üêç PROJETO: AVALIADOR INTELIGENTE DE PERFIS
# M√≥dulo 7: Estruturas Condicionais

def avaliar_candidato(nome, idade, experiencia, formacao, nota_teste, tem_certificacoes, disponibilidade):
    """Sistema inteligente de avalia√ß√£o de candidatos"""
    
    print(f"\\nüîç ANALISANDO PERFIL DE: {{nome.upper()}}")
    print("=" * 50)
    
    # Inicializar pontua√ß√£o e crit√©rios
    pontuacao = 0
    criterios_positivos = []
    criterios_negativos = []
    bonus = 0
    
    # === CRIT√âRIO 1: IDADE ===
    if 22 <= idade <= 50:
        pontuacao += 25
        criterios_positivos.append("‚úÖ Faixa et√°ria ideal para a vaga")
    elif 18 <= idade <= 60:
        pontuacao += 15
        criterios_positivos.append("‚ö†Ô∏è Faixa et√°ria aceit√°vel")
    else:
        criterios_negativos.append("‚ùå Faixa et√°ria fora do perfil")
    
    # === CRIT√âRIO 2: EXPERI√äNCIA ===
    if experiencia >= 5:
        pontuacao += 30
        criterios_positivos.append("‚úÖ Experi√™ncia s√≥lida e comprovada")
        if experiencia >= 10:
            bonus += 10
            criterios_positivos.append("üåü B√îNUS: Experi√™ncia excepcional!")
    elif experiencia >= 2:
        pontuacao += 20
        criterios_positivos.append("‚ö†Ô∏è Experi√™ncia adequada")
    elif experiencia >= 1:
        pontuacao += 10
        criterios_positivos.append("‚ö†Ô∏è Experi√™ncia limitada mas v√°lida")
    else:
        criterios_negativos.append("‚ùå Falta de experi√™ncia na √°rea")
    
    # === CRIT√âRIO 3: FORMA√á√ÉO ===
    formacao_lower = formacao.lower()
    if "superior" in formacao_lower or "universitario" in formacao_lower:
        pontuacao += 25
        criterios_positivos.append("‚úÖ Forma√ß√£o superior completa")
    elif "tecnico" in formacao_lower or "t√©cnico" in formacao_lower:
        pontuacao += 15
        criterios_positivos.append("‚ö†Ô∏è Forma√ß√£o t√©cnica adequada")
    elif "medio" in formacao_lower or "m√©dio" in formacao_lower:
        pontuacao += 10
        criterios_positivos.append("‚ö†Ô∏è Ensino m√©dio completo")
    else:
        criterios_negativos.append("‚ùå Forma√ß√£o n√£o atende aos requisitos")
    
    # === CRIT√âRIO 4: PERFORMANCE NO TESTE ===
    if nota_teste >= 9.0:
        pontuacao += 20
        criterios_positivos.append("‚úÖ Performance excepcional no teste")
        bonus += 5
    elif nota_teste >= 7.0:
        pontuacao += 15
        criterios_positivos.append("‚úÖ Boa performance no teste")
    elif nota_teste >= 5.0:
        pontuacao += 10
        criterios_positivos.append("‚ö†Ô∏è Performance aceit√°vel no teste")
    else:
        criterios_negativos.append("‚ùå Performance insuficiente no teste")
    
    # === CRIT√âRIOS B√îNUS ===
    if tem_certificacoes:
        bonus += 10
        criterios_positivos.append("üèÜ B√îNUS: Possui certifica√ß√µes relevantes")
    
    if disponibilidade.lower() == "integral":
        bonus += 5
        criterios_positivos.append("‚è∞ B√îNUS: Disponibilidade integral")
    elif disponibilidade.lower() == "parcial":
        criterios_positivos.append("‚ö†Ô∏è Disponibilidade parcial")
    
    # === C√ÅLCULO FINAL ===
    pontuacao_final = pontuacao + bonus
    
    # === EXIBIR AN√ÅLISE DETALHADA ===
    print("\\nüìä AN√ÅLISE DETALHADA:")
    print("-" * 30)
    
    if criterios_positivos:
        print("\\nüü¢ PONTOS POSITIVOS:")
        for criterio in criterios_positivos:
            print(f"  {criterio}")
    
    if criterios_negativos:
        print("\\nüî¥ PONTOS DE ATEN√á√ÉO:")
        for criterio in criterios_negativos:
            print(f"  {criterio}")
    
    print(f"\\nüìà PONTUA√á√ÉO BASE: {{pontuacao}}/100")
    if bonus > 0:
        print(f"üéÅ B√îNUS ADICIONAIS: +{{bonus}} pontos")
    print(f"üèÜ PONTUA√á√ÉO FINAL: {{pontuacao_final}}/110")
    
    # === DECIS√ÉO INTELIGENTE ===
    print("\\n" + "="*50)
    if pontuacao_final >= 90:
        decisao = "APROVADO IMEDIATAMENTE"
        emoji = "üåü"
        recomendacao = "Candidato excepcional - Agendar entrevista URGENTE!"
    elif pontuacao_final >= 70:
        decisao = "APROVADO PARA PR√ìXIMA FASE"
        emoji = "‚úÖ"
        recomendacao = "Bom candidato - Prosseguir com entrevista t√©cnica"
    elif pontuacao_final >= 50:
        decisao = "EM AN√ÅLISE"
        emoji = "‚ö†Ô∏è"
        recomendacao = "Candidato m√©dio - Avaliar junto com outros perfis"
    elif pontuacao_final >= 30:
        decisao = "REPROVADO COM RESSALVAS"
        emoji = "‚ùå"
        recomendacao = "N√£o atende agora - Reavaliar em 6 meses"
    else:
        decisao = "REPROVADO"
        emoji = "üö´"
        recomendacao = "Perfil n√£o compat√≠vel com a vaga"
    
    print(f"{{emoji}} DECIS√ÉO: {{decisao}}")
    print(f"üí° RECOMENDA√á√ÉO: {{recomendacao}}")
    
    return pontuacao_final, decisao

# === TESTANDO O SISTEMA ===
print("üè¢ SISTEMA DE AVALIA√á√ÉO INTELIGENTE DE CANDIDATOS")
print("="*60)

# Candidato real do exemplo
resultado = avaliar_candidato(
    nome="{nome}",
    idade={idade},
    experiencia={experiencia},
    formacao="{formacao}",
    nota_teste={nota_teste},
    tem_certificacoes={tem_certificacoes},
    disponibilidade="{disponibilidade}"
)

print("\\nüéØ SISTEMA FUNCIONANDO PERFEITAMENTE!")
print("‚ú® Capaz de avaliar centenas de candidatos automaticamente!")'''
        
        self.exemplo(codigo_final)
        
        # === EXECU√á√ÉO DO RESULTADO ===
        self.print_section("RESULTADO FINAL", "üé¨", "warning")
        print("üöÄ Executando seu Avaliador Inteligente:")
        self.executar_codigo(codigo_final)
        
        # === MENSAGEM DE CONQUISTA ===
        self.print_success("üéâ PARAB√âNS! Voc√™ criou um sistema de avalia√ß√£o inteligente!")
        
        # === APLICA√á√ïES AVAN√áADAS ===
        self.print_section("PR√ìXIMOS PASSOS", "üöÄ", "info")
        proximos_passos = [
            "Adicionar mais crit√©rios de avalia√ß√£o (idiomas, localiza√ß√£o, etc.)",
            "Implementar pesos diferentes para cada crit√©rio",
            "Criar relat√≥rios comparativos entre candidatos",
            "Integrar com banco de dados para processar milhares de perfis",
            "Adicionar machine learning para aprender com contrata√ß√µes de sucesso"
        ]
        for passo in proximos_passos:
            self.print_colored(f"‚Ä¢ {passo}", "primary")
        
        self.print_success("\nüèÜ CONQUISTA DESBLOQUEADA: Mestre das Condi√ß√µes!")
        
        # === REGISTRO DE CONCLUS√ÉO ===
        self.complete_mini_project("Avaliador Inteligente de Perfis")
        
        self.pausar()


# Para teste standalone
if __name__ == "__main__":
    module = Modulo07Condicoes()
    print("Teste do m√≥dulo 7 - vers√£o refatorada")
    module._condicoes_interativo()