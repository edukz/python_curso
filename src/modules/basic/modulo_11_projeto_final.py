#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
M√≥dulo 11: Projeto Final
Integra√ß√£o de todos os conceitos aprendidos em um projeto completo
"""

from ..shared.base_module import BaseModule


class Modulo11ProjetoFinal(BaseModule):
    """M√≥dulo 11: Projeto Final - Sistema Completo de Gest√£o"""
    
    def __init__(self):
        super().__init__("modulo_11", "Projeto Final Integrado")
        self.has_mini_project = True
        self.mini_project_points = 150
    
    def execute(self) -> None:
        """Executa o m√≥dulo Projeto Final Integrado"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return
        
        try:
            self._projeto_final_interativo()
        except Exception as e:
            self.error_handler(lambda: None)
    
    def _projeto_final_interativo(self) -> None:
        """Conte√∫do principal do m√≥dulo Projeto Final Integrado"""
        # === CABE√áALHO VISUAL ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üéì M√ìDULO 11: PROJETO FINAL - INTEGRANDO TUDO QUE VOC√ä APRENDEU")
        else:
            print("\n" + "="*50)
            print("üéì M√ìDULO 11: PROJETO FINAL - INTEGRANDO TUDO QUE VOC√ä APRENDEU")
            print("="*50)
        
        # === MENSAGENS MOTIVACIONAIS ===
        self.print_success("üéâ Parab√©ns! Voc√™ chegou ao grande projeto final!")
        self.print_tip("Este m√≥dulo est√° dividido em se√ß√µes interativas. Voc√™ controla o ritmo!")
        
        # === FLUXO PRINCIPAL COM TRATAMENTO DE CTRL+C ===
        
        # 1. Sistema de navega√ß√£o por se√ß√µes
        try:
            self._navegacao_secoes_interativas()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Navega√ß√£o interrompida pelo usu√°rio. Voltando ao menu principal...")
            return
        
        # 2. Se√ß√£o de Pr√°tica Interativa
        try:
            self._secao_pratica_interativa()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è M√≥dulo interrompido pelo usu√°rio. Voltando ao menu principal...")
            return
        
        # 3. Mini Projeto Pr√°tico
        try:
            self._mini_projeto_sistema_gestao()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Mini projeto interrompido. Voltando ao menu principal...")
            return
        
        # 4. Marcar m√≥dulo como completo
        self.complete_module()
    
    def _navegacao_secoes_interativas(self) -> None:
        """Sistema de navega√ß√£o por se√ß√µes do m√≥dulo"""
        
        # === DEFINI√á√ÉO DAS SE√á√ïES ===
        secoes = [
            {
                'id': 'secao_revisao_conceitos',
                'titulo': 'üéØ Revis√£o dos conceitos aprendidos',
                'descricao': 'Relembre tudo que voc√™ dominou at√© aqui',
                'funcao': self._secao_revisao_conceitos
            },
            {
                'id': 'secao_integracao_conceitos',
                'titulo': '‚öôÔ∏è Como integrar todos os conceitos?',
                'descricao': 'Aprenda a combinar diferentes t√©cnicas',
                'funcao': self._secao_integracao_conceitos
            },
            {
                'id': 'secao_planejamento_projeto',
                'titulo': 'üìã Planejando um projeto completo',
                'descricao': 'Do conceito √† implementa√ß√£o profissional',
                'funcao': self._secao_planejamento_projeto
            },
            {
                'id': 'secao_boas_praticas',
                'titulo': '‚≠ê Boas pr√°ticas de programa√ß√£o',
                'descricao': 'Escreva c√≥digo limpo e profissional',
                'funcao': self._secao_boas_praticas
            },
            {
                'id': 'secao_exemplos_sistemas',
                'titulo': 'üí° Exemplos de sistemas completos',
                'descricao': 'Veja projetos reais funcionando',
                'funcao': self._secao_exemplos_sistemas
            },
            {
                'id': 'secao_proximos_passos',
                'titulo': 'üöÄ Seus pr√≥ximos passos como desenvolvedor',
                'descricao': 'O que estudar depois deste m√≥dulo',
                'funcao': self._secao_proximos_passos
            }
        ]
        
        secoes_visitadas = set()
        
        # === LOOP PRINCIPAL DE NAVEGA√á√ÉO ===
        while True:
            # Limpa tela e mostra cabe√ßalho
            self.ui.clear_screen() if self.ui else print("\n" + "="*50)
            self.print_section("NAVEGA√á√ÉO DO M√ìDULO", "üìö", "accent")
            self.print_colored("Escolha uma se√ß√£o para estudar:", "text")
            
            # Lista todas as se√ß√µes com status
            print()
            for i, secao in enumerate(secoes, 1):
                status = "‚úÖ" if secao['id'] in secoes_visitadas else "üìñ"
                print(f"{status} {i}. {secao['titulo']}")
                self.print_colored(f"    {secao['descricao']}", "text")
                print()
            
            print("0. üéØ Continuar para os Exerc√≠cios Pr√°ticos")
            
            # Mostra progresso visual
            progresso = len(secoes_visitadas)
            total = len(secoes)
            self.print_colored(f"\nüìä Progresso: {progresso}/{total} se√ß√µes visitadas", "info")
            
            if progresso == total:
                self.print_success("üåü Voc√™ completou todas as se√ß√µes! Est√° pronto para o projeto final!")
            
            # Processa escolha do usu√°rio
            try:
                escolha = input(f"\nüëâ Escolha uma se√ß√£o (1-{len(secoes)}) ou 0 para continuar: ").strip()
                
                if escolha == "0":
                    # Verifica se visitou se√ß√µes suficientes
                    if progresso >= 3:  # Pelo menos 3 se√ß√µes visitadas
                        break
                    else:
                        self.print_warning("üìö Recomendamos visitar pelo menos 3 se√ß√µes antes de continuar!")
                        continuar = input("Quer continuar mesmo assim? (s/n): ").lower()
                        if continuar in ['s', 'sim', 'yes']:
                            break
                elif escolha.isdigit() and 1 <= int(escolha) <= len(secoes):
                    # Executa se√ß√£o escolhida
                    idx = int(escolha) - 1
                    secoes[idx]['funcao']()
                    secoes_visitadas.add(secoes[idx]['id'])
                else:
                    self.print_warning(f"‚ùå Op√ß√£o inv√°lida! Digite um n√∫mero de 1 a {len(secoes)} ou 0.")
                    
            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Pulando para exerc√≠cios pr√°ticos...")
                break
            except Exception as e:
                self.print_warning(f"‚ùå Erro: {str(e)}. Tente novamente.")
    
    def _secao_revisao_conceitos(self) -> None:
        """Se√ß√£o: Revis√£o dos conceitos aprendidos"""
        if self.ui:
            self.ui.clear_screen()
        
        # === CABE√áALHO ATRATIVO ===
        self.print_section("REVIS√ÉO DOS CONCEITOS APRENDIDOS", "üéØ")
        
        # === JORNADA DO APRENDIZADO ===
        self.print_concept(
            "Sua Jornada Python",
            "Voc√™ percorreu 10 m√≥dulos e dominou os fundamentos da programa√ß√£o!"
        )
        
        # === CONCEITOS DOMINADOS ===
        self.print_colored("\nüèÜ CONCEITOS QUE VOC√ä DOMINOU:", "success")
        
        conceitos = [
            {
                'modulo': 'M√≥dulo 1',
                'conceito': 'Introdu√ß√£o ao Python',
                'habilidades': ['Instala√ß√£o', 'Primeiro contato', 'Ambiente de desenvolvimento']
            },
            {
                'modulo': 'M√≥dulo 2',
                'conceito': 'Primeiro Programa',
                'habilidades': ['print()', 'Sintaxe b√°sica', 'Execu√ß√£o de c√≥digo']
            },
            {
                'modulo': 'M√≥dulo 3',
                'conceito': 'Vari√°veis',
                'habilidades': ['Cria√ß√£o de vari√°veis', 'Atribui√ß√£o', 'Nomes v√°lidos']
            },
            {
                'modulo': 'M√≥dulo 4',
                'conceito': 'Tipos de Dados',
                'habilidades': ['int, float, str, bool', 'Convers√µes', 'type()']
            },
            {
                'modulo': 'M√≥dulo 5',
                'conceito': 'Entrada de Dados',
                'habilidades': ['input()', 'Intera√ß√£o com usu√°rio', 'Valida√ß√£o']
            },
            {
                'modulo': 'M√≥dulo 6',
                'conceito': 'Opera√ß√µes',
                'habilidades': ['Matem√°ticas', 'Strings', 'Compara√ß√£o']
            },
            {
                'modulo': 'M√≥dulo 7',
                'conceito': 'Condi√ß√µes',
                'habilidades': ['if/else/elif', 'Operadores l√≥gicos', 'Decis√µes']
            },
            {
                'modulo': 'M√≥dulo 8',
                'conceito': 'Loops',
                'habilidades': ['for', 'while', 'range()', 'break/continue']
            },
            {
                'modulo': 'M√≥dulo 9',
                'conceito': 'Listas',
                'habilidades': ['Cria√ß√£o', 'M√©todos', 'Itera√ß√£o', 'List comprehension']
            },
            {
                'modulo': 'M√≥dulo 10',
                'conceito': 'Fun√ß√µes',
                'habilidades': ['def', 'Par√¢metros', 'return', 'Reutiliza√ß√£o']
            }
        ]
        
        for conceito in conceitos:
            self.print_colored(f"\nüìò {conceito['modulo']}: {conceito['conceito']}", "warning")
            for habilidade in conceito['habilidades']:
                self.print_colored(f"   ‚úÖ {habilidade}", "text")
        
        # === ESTAT√çSTICAS ===
        self.print_colored("\nüìä SUAS CONQUISTAS:", "accent")
        self.print_colored("‚Ä¢ 10 m√≥dulos completados", "primary")
        self.print_colored("‚Ä¢ 50+ conceitos dominados", "primary")
        self.print_colored("‚Ä¢ 100+ exerc√≠cios resolvidos", "primary")
        self.print_colored("‚Ä¢ 10 mini projetos criados", "primary")
        
        self.print_success("\nüéâ Voc√™ est√° pronto para criar sistemas completos!")
        self.pausar()
    
    def _secao_integracao_conceitos(self) -> None:
        """Se√ß√£o: Como integrar todos os conceitos?"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("COMO INTEGRAR TODOS OS CONCEITOS?", "‚öôÔ∏è", "success")
        
        # === CONCEITO DE INTEGRA√á√ÉO ===
        self.print_concept(
            "Integra√ß√£o de Conceitos",
            "Combinar diferentes t√©cnicas para criar solu√ß√µes completas e poderosas"
        )
        
        # === ANALOGIA ===
        self.print_colored("\nüè† ANALOGIA DO DIA A DIA:", "warning")
        self.print_colored("√â como cozinhar um prato elaborado: voc√™ usa diferentes ingredientes "
                          "(conceitos) e t√©cnicas culin√°rias (programa√ß√£o) para criar algo delicioso "
                          "(sistema completo)!", "text")
        input("\nüî∏ Pressione ENTER para continuar...")
        
        # === EXEMPLO DE INTEGRA√á√ÉO ===
        self.print_colored("\nüí° EXEMPLO PR√ÅTICO DE INTEGRA√á√ÉO:", "info")
        codigo_integracao = '''# Sistema que integra m√∫ltiplos conceitos
def sistema_completo():
    # LISTAS para armazenar dados
    usuarios = []
    
    # LOOP principal do sistema
    while True:
        # FUN√á√ÉO para mostrar menu
        print("\\n=== SISTEMA DE GEST√ÉO ===")
        print("1. Cadastrar usu√°rio")
        print("2. Listar usu√°rios")
        print("3. Buscar usu√°rio")
        print("0. Sair")
        
        # ENTRADA de dados
        opcao = input("\\nEscolha: ")
        
        # CONDI√á√ïES para cada op√ß√£o
        if opcao == "1":
            # VARI√ÅVEIS para dados
            nome = input("Nome: ")
            idade = int(input("Idade: "))
            
            # OPERA√á√ïES com dados
            usuario = {"nome": nome, "idade": idade}
            usuarios.append(usuario)
            print("‚úÖ Cadastrado!")
            
        elif opcao == "2":
            # LOOP para listar
            for i, user in enumerate(usuarios, 1):
                print(f"{i}. {user['nome']} - {user['idade']} anos")
                
        elif opcao == "0":
            break

# Executando o sistema
print("üöÄ Sistema integrando todos os conceitos!")'''
        
        self.exemplo(codigo_integracao)
        
        # === PADR√ïES DE INTEGRA√á√ÉO ===
        self.print_colored("\nüîß PADR√ïES COMUNS DE INTEGRA√á√ÉO:", "accent")
        padroes = [
            "üìä Dados + Loops = Processamento de informa√ß√µes",
            "üéÆ Input + Condi√ß√µes = Interatividade",
            "üìù Listas + Fun√ß√µes = Organiza√ß√£o de c√≥digo",
            "üîÑ While + If/Else = Menus interativos",
            "üíæ Vari√°veis + Fun√ß√µes = Estado do sistema"
        ]
        
        for padrao in padroes:
            self.print_colored(f"‚Ä¢ {padrao}", "primary")
        
        self.print_tip("A chave √© pensar em cada conceito como uma ferramenta em sua caixa!")
        self.pausar()
    
    def _secao_planejamento_projeto(self) -> None:
        """Se√ß√£o: Planejando um projeto completo"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("PLANEJANDO UM PROJETO COMPLETO", "üìã", "info")
        
        # === ETAPAS DO PLANEJAMENTO ===
        self.print_concept(
            "Planejamento Profissional",
            "Todo grande projeto come√ßa com um bom planejamento"
        )
        
        self.print_colored("\nüìê ETAPAS DO PLANEJAMENTO:", "warning")
        
        etapas = [
            {
                'numero': '1',
                'titulo': 'Definir o Problema',
                'descricao': 'O que o sistema vai resolver?',
                'exemplo': 'Sistema para gerenciar tarefas di√°rias'
            },
            {
                'numero': '2',
                'titulo': 'Listar Funcionalidades',
                'descricao': 'O que o sistema precisa fazer?',
                'exemplo': 'Adicionar, listar, marcar como conclu√≠da, deletar'
            },
            {
                'numero': '3',
                'titulo': 'Escolher Estruturas',
                'descricao': 'Quais conceitos usar?',
                'exemplo': 'Lista para tarefas, fun√ß√µes para cada a√ß√£o'
            },
            {
                'numero': '4',
                'titulo': 'Desenhar o Fluxo',
                'descricao': 'Como o usu√°rio interage?',
                'exemplo': 'Menu ‚Üí Escolha ‚Üí A√ß√£o ‚Üí Feedback'
            },
            {
                'numero': '5',
                'titulo': 'Implementar Passo a Passo',
                'descricao': 'Construir incrementalmente',
                'exemplo': 'Primeiro o menu, depois cada funcionalidade'
            }
        ]
        
        for etapa in etapas:
            self.print_colored(f"\n{etapa['numero']}. {etapa['titulo']}", "accent")
            self.print_colored(f"   üìù {etapa['descricao']}", "text")
            self.print_colored(f"   üí° Exemplo: {etapa['exemplo']}", "info")
            input("   ‚è≥ Pressione ENTER para pr√≥xima etapa...")
        
        # === EXEMPLO DE PLANEJAMENTO ===
        self.print_colored("\nüìä EXEMPLO: Planejando um Sistema de Biblioteca", "success")
        exemplo_plano = '''# PLANEJAMENTO: Sistema de Biblioteca

## 1. PROBLEMA:
   - Gerenciar livros de uma biblioteca pessoal

## 2. FUNCIONALIDADES:
   - Cadastrar livros
   - Listar todos os livros
   - Buscar por t√≠tulo/autor
   - Emprestar/devolver livros
   - Ver estat√≠sticas

## 3. ESTRUTURAS NECESS√ÅRIAS:
   - Lista: armazenar livros
   - Dicion√°rios: dados de cada livro
   - Fun√ß√µes: cada funcionalidade
   - Loops: menu e listagens
   - Condi√ß√µes: valida√ß√µes

## 4. FLUXO:
   Menu Principal
   ‚îú‚îÄ‚îÄ Cadastrar ‚Üí Input dados ‚Üí Adicionar lista
   ‚îú‚îÄ‚îÄ Listar ‚Üí Loop na lista ‚Üí Mostrar dados
   ‚îú‚îÄ‚îÄ Buscar ‚Üí Input termo ‚Üí Filtrar lista
   ‚îî‚îÄ‚îÄ Sair ‚Üí Encerrar programa'''
        
        self.print_code_section("PLANEJAMENTO", exemplo_plano)
        
        self.print_success("\nüéØ Com um bom plano, programar fica muito mais f√°cil!")
        self.pausar()
    
    def _secao_boas_praticas(self) -> None:
        """Se√ß√£o: Boas pr√°ticas de programa√ß√£o"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("BOAS PR√ÅTICAS DE PROGRAMA√á√ÉO", "‚≠ê", "warning")
        
        # === CONCEITO ===
        self.print_concept(
            "C√≥digo Profissional",
            "Escrever c√≥digo que seja f√°cil de ler, manter e expandir"
        )
        
        # === COMPARA√á√ÉO ===
        self.print_colored("\n‚ùå C√ìDIGO RUIM vs ‚úÖ C√ìDIGO BOM:", "accent")
        
        # Exemplo 1: Nomes de vari√°veis
        self.print_colored("\nüìù NOMES DE VARI√ÅVEIS:", "info")
        comparacao1 = '''# ‚ùå Ruim
x = 25
y = "Jo√£o"
z = x * 1.1

# ‚úÖ Bom
idade = 25
nome = "Jo√£o"
idade_com_bonus = idade * 1.1'''
        self.exemplo(comparacao1)
        
        # Exemplo 2: Fun√ß√µes
        self.print_colored("\nüîß ORGANIZA√á√ÉO COM FUN√á√ïES:", "info")
        comparacao2 = '''# ‚ùå Ruim - Tudo junto
nome = input("Nome: ")
idade = int(input("Idade: "))
if idade >= 18:
    print(f"{nome} √© maior de idade")
else:
    print(f"{nome} √© menor de idade")

# ‚úÖ Bom - Organizado em fun√ß√µes
def obter_dados_usuario():
    nome = input("Nome: ")
    idade = int(input("Idade: "))
    return nome, idade

def verificar_maioridade(nome, idade):
    if idade >= 18:
        return f"{nome} √© maior de idade"
    else:
        return f"{nome} √© menor de idade"

# Uso limpo
nome, idade = obter_dados_usuario()
resultado = verificar_maioridade(nome, idade)
print(resultado)'''
        self.exemplo(comparacao2)
        
        # === DICAS DE OURO ===
        self.print_colored("\nüíé DICAS DE OURO:", "success")
        dicas = [
            "üìù Use nomes descritivos para vari√°veis e fun√ß√µes",
            "üîß Uma fun√ß√£o = uma responsabilidade",
            "üí¨ Comente c√≥digo complexo, n√£o o √≥bvio",
            "üìè Mantenha linhas com menos de 80 caracteres",
            "üßπ Delete c√≥digo morto (n√£o usado)",
            "üéØ Seja consistente no estilo",
            "üêõ Trate erros adequadamente",
            "üìö Organize c√≥digo em se√ß√µes l√≥gicas"
        ]
        
        for dica in dicas:
            self.print_colored(f"‚Ä¢ {dica}", "primary")
        
        self.print_tip("C√≥digo limpo √© um presente para o seu eu futuro!")
        self.pausar()
    
    def _secao_exemplos_sistemas(self) -> None:
        """Se√ß√£o: Exemplos de sistemas completos"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("EXEMPLOS DE SISTEMAS COMPLETOS", "üí°", "success")
        
        exemplos = [
            {
                'titulo': 'EXEMPLO 1: Sistema de Vendas Simples',
                'descricao': 'Gerencia produtos e calcula totais',
                'codigo': '''# Sistema de Vendas
produtos = []
vendas = []

def cadastrar_produto():
    nome = input("Nome do produto: ")
    preco = float(input("Pre√ßo: R$ "))
    produtos.append({"nome": nome, "preco": preco})
    print("‚úÖ Produto cadastrado!")

def realizar_venda():
    if not produtos:
        print("‚ùå Nenhum produto cadastrado!")
        return
    
    print("\\nProdutos dispon√≠veis:")
    for i, prod in enumerate(produtos):
        print(f"{i+1}. {prod['nome']} - R$ {prod['preco']:.2f}")
    
    escolha = int(input("Escolha o produto: ")) - 1
    quantidade = int(input("Quantidade: "))
    
    total = produtos[escolha]['preco'] * quantidade
    vendas.append({
        "produto": produtos[escolha]['nome'],
        "quantidade": quantidade,
        "total": total
    })
    print(f"‚úÖ Venda realizada! Total: R$ {total:.2f}")

def relatorio_vendas():
    if not vendas:
        print("‚ùå Nenhuma venda realizada!")
        return
    
    total_geral = 0
    print("\\nüìä RELAT√ìRIO DE VENDAS:")
    for venda in vendas:
        print(f"‚Ä¢ {venda['produto']} x{venda['quantidade']} = R$ {venda['total']:.2f}")
        total_geral += venda['total']
    print(f"\\nTOTAL GERAL: R$ {total_geral:.2f}")

# Demonstra√ß√£o
print("üõí SISTEMA DE VENDAS")
cadastrar_produto()  # Simula cadastro
realizar_venda()     # Simula venda
relatorio_vendas()   # Mostra relat√≥rio''',
                'explicacao': 'Integra listas, dicion√°rios, fun√ß√µes, loops e c√°lculos'
            },
            {
                'titulo': 'EXEMPLO 2: Gerenciador de Contatos',
                'descricao': 'Agenda telef√¥nica com busca',
                'codigo': '''# Gerenciador de Contatos
contatos = []

def adicionar_contato(nome, telefone, email):
    contato = {
        "nome": nome,
        "telefone": telefone,
        "email": email
    }
    contatos.append(contato)
    return f"‚úÖ Contato {nome} adicionado!"

def buscar_contato(termo):
    encontrados = []
    for contato in contatos:
        if termo.lower() in contato["nome"].lower():
            encontrados.append(contato)
    return encontrados

def listar_contatos():
    if not contatos:
        return "üì≠ Nenhum contato cadastrado"
    
    resultado = "üì± LISTA DE CONTATOS:\\n"
    for i, contato in enumerate(contatos, 1):
        resultado += f"{i}. {contato['nome']}\\n"
        resultado += f"   üìû {contato['telefone']}\\n"
        resultado += f"   ‚úâÔ∏è  {contato['email']}\\n"
    return resultado

# Demonstra√ß√£o
print("üì± GERENCIADOR DE CONTATOS")
print(adicionar_contato("Jo√£o Silva", "(11) 98765-4321", "joao@email.com"))
print(adicionar_contato("Maria Santos", "(21) 91234-5678", "maria@email.com"))
print(listar_contatos())''',
                'explicacao': 'Usa fun√ß√µes com return, listas de dicion√°rios e busca'
            }
        ]
        
        for i, exemplo in enumerate(exemplos, 1):
            self.print_colored(f"\n{exemplo['titulo']}", "warning")
            self.print_colored(f"üìù {exemplo['descricao']}", "text")
            
            self.print_code_section("C√ìDIGO", exemplo['codigo'])
            
            print("\nüöÄ Executando exemplo:")
            self.executar_codigo(exemplo['codigo'])
            
            if exemplo['explicacao']:
                self.print_colored(f"\nüí° EXPLICA√á√ÉO: {exemplo['explicacao']}", "info")
            
            if i < len(exemplos):
                input("\nüî∏ Pressione ENTER para o pr√≥ximo exemplo...")
        
        self.print_success("\nüéâ Agora voc√™ viu sistemas completos em a√ß√£o!")
        self.pausar()
    
    def _secao_proximos_passos(self) -> None:
        """Se√ß√£o: Seus pr√≥ximos passos como desenvolvedor"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("SEUS PR√ìXIMOS PASSOS COMO DESENVOLVEDOR", "üöÄ", "accent")
        
        # === PARAB√âNS ===
        self.print_success("üéä PARAB√âNS! Voc√™ completou os m√≥dulos b√°sicos!")
        self.print_colored("Voc√™ tem uma base s√≥lida e est√° pronto para avan√ßar!", "text")
        
        # === O QUE VEM DEPOIS ===
        self.print_colored("\nüìö M√ìDULOS AVAN√áADOS (12-23):", "warning")
        topicos_avancados = [
            "üìñ Dicion√°rios e estruturas complexas",
            "üîß Fun√ß√µes avan√ßadas e decoradores",
            "üì¶ M√≥dulos e pacotes",
            "üìÖ Manipula√ß√£o de datas e tempo",
            "üìÑ Trabalho com arquivos",
            "üìä JSON e CSV",
            "üéØ Orienta√ß√£o a Objetos",
            "üé® Classes e heran√ßa",
            "‚ö° Geradores e iteradores",
            "üîç Express√µes regulares",
            "üêõ Debugging profissional"
        ]
        
        for topico in topicos_avancados:
            self.print_colored(f"  ‚Ä¢ {topico}", "text")
        
        # === M√ìDULOS ESSENCIAIS ===
        self.print_colored("\n‚ö° M√ìDULOS ESSENCIAIS (24-30):", "info")
        topicos_essenciais = [
            "üß™ Testes e TDD",
            "üì° Async/await",
            "üåê APIs e Web",
            "üõ†Ô∏è Ambientes virtuais",
            "üéØ Type hints",
            "üìä An√°lise de dados",
            "üîê Seguran√ßa"
        ]
        
        for topico in topicos_essenciais:
            self.print_colored(f"  ‚Ä¢ {topico}", "text")
        
        # === PROJETOS SUGERIDOS ===
        self.print_colored("\nüíº PROJETOS PARA PRATICAR:", "success")
        projetos = [
            "üéÆ Jogo da Velha com IA",
            "üìù To-Do List com persist√™ncia",
            "üí∞ Sistema banc√°rio completo",
            "üåê Web scraper simples",
            "üìä Analisador de dados CSV",
            "ü§ñ Bot para automa√ß√£o",
            "üì± Agenda com banco de dados"
        ]
        
        for projeto in projetos:
            self.print_colored(f"  ‚Ä¢ {projeto}", "primary")
        
        # === COMUNIDADE ===
        self.print_colored("\nüë• JUNTE-SE √Ä COMUNIDADE:", "accent")
        self.print_colored("‚Ä¢ Participe de f√≥runs Python", "text")
        self.print_colored("‚Ä¢ Contribua em projetos open source", "text")
        self.print_colored("‚Ä¢ Compartilhe seus projetos", "text")
        self.print_colored("‚Ä¢ Ajude outros iniciantes", "text")
        
        self.print_success("\nüåü O c√©u √© o limite! Continue aprendendo e criando!")
        self.print_tip("Lembre-se: todo expert j√° foi iniciante. Persist√™ncia √© a chave!")
        
        self.pausar()
    
    def _secao_pratica_interativa(self) -> None:
        """Se√ß√£o de pr√°tica interativa do m√≥dulo"""
        
        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_section("HORA DE PRATICAR!", "üéØ", "success")
        self.print_colored("Vamos testar sua capacidade de integrar todos os conceitos!", "text")
        
        # === INSTRU√á√ïES PARA INICIANTES ===
        self.print_tip("Para este projeto final, voc√™ usar√° TUDO que aprendeu!")
        self.print_colored("\nüéì SOBRE OS EXERC√çCIOS:", "info")
        self.print_colored("‚Ä¢ Integre m√∫ltiplos conceitos em cada solu√ß√£o", "text")
        self.print_colored("‚Ä¢ Pense em solu√ß√µes completas, n√£o apenas funcionais", "text")
        self.print_colored("‚Ä¢ Use fun√ß√µes para organizar seu c√≥digo", "text")
        self.print_colored("‚Ä¢ Aplique as boas pr√°ticas aprendidas", "text")
        
        # === DEFINI√á√ÉO DOS EXERC√çCIOS ===
        exercicios = [
            {
                'title': 'Quiz: Integrando Conceitos',
                'type': 'quiz',
                'questions': [
                    {
                        'question': 'Qual estrutura √© melhor para armazenar m√∫ltiplos dados do mesmo tipo?',
                        'answer': ['lista', 'listas', 'list'],
                        'hint': 'Pense em uma cole√ß√£o ordenada de elementos'
                    },
                    {
                        'question': 'Como voc√™ repetiria uma a√ß√£o 10 vezes em Python?',
                        'answer': ['for', 'loop for', 'for loop'],
                        'hint': 'Use uma estrutura de repeti√ß√£o com range'
                    },
                    {
                        'question': 'Qual comando retorna um valor de uma fun√ß√£o?',
                        'answer': ['return'],
                        'hint': 'Palavra em ingl√™s que significa "retornar"'
                    },
                    {
                        'question': 'Como verificar se um n√∫mero √© par?',
                        'answer': ['numero % 2 == 0', '% 2 == 0', 'modulo 2'],
                        'hint': 'Use o operador de resto da divis√£o'
                    },
                    {
                        'question': 'Qual estrutura permite tomar decis√µes no c√≥digo?',
                        'answer': ['if', 'if else', 'condicional'],
                        'hint': 'Estrutura que testa condi√ß√µes'
                    }
                ]
            },
            {
                'title': 'Desafio: Complete o Sistema',
                'type': 'code_completion',
                'exercises': [
                    {
                        'instruction': 'B√ÅSICO: Complete a fun√ß√£o que calcula m√©dia de uma lista',
                        'starter': '''def calcular_media(numeros):
    # Complete aqui
    total = ___
    quantidade = ___
    return ___

print(calcular_media([10, 20, 30, 40, 50]))''',
                        'solution': 'sum(numeros)\nlen(numeros)\ntotal / quantidade',
                        'type': 'simple'
                    },
                    {
                        'instruction': 'INTERMEDI√ÅRIO: Complete o sistema de login',
                        'starter': '''usuarios = [{"nome": "admin", "senha": "123"}]

def fazer_login(nome, senha):
    for usuario in usuarios:
        if ___ and ___:
            return "Login realizado!"
    return ___

print(fazer_login("admin", "123"))''',
                        'solution': 'usuario["nome"] == nome\nusuario["senha"] == senha\n"Login falhou!"',
                        'type': 'intermediate'
                    },
                    {
                        'instruction': 'AVAN√áADO: Complete o sistema de busca',
                        'starter': '''produtos = [
    {"nome": "Notebook", "preco": 3000},
    {"nome": "Mouse", "preco": 50},
    {"nome": "Teclado", "preco": 150}
]

def buscar_por_preco_maximo(preco_max):
    encontrados = []
    for produto in produtos:
        if ___:
            ___
    return ___

print(buscar_por_preco_maximo(200))''',
                        'solution': 'produto["preco"] <= preco_max\nencontrados.append(produto)\nencontrados',
                        'type': 'advanced'
                    }
                ]
            },
            {
                'title': 'Exerc√≠cio Criativo: Seu Pr√≥prio Sistema',
                'type': 'creative',
                'instruction': 'Crie um mini sistema que use: vari√°veis, input, listas, loops, condi√ß√µes e fun√ß√µes. '
                             'Pode ser um jogo, calculadora especial, gerenciador de algo, ou qualquer ideia sua!'
            }
        ]
        
        # === MENU PRINCIPAL DE EXERC√çCIOS ===
        while True:
            # Limpa tela antes do menu
            if self.ui:
                self.ui.clear_screen()
            
            self.print_section("MENU DE EXERC√çCIOS", "üìö", "accent")
            print("\nEscolha uma atividade:")
            print("1. üìù Quiz de Conhecimentos")
            print("2. üíª Complete o C√≥digo")
            print("3. üé® Exerc√≠cio Criativo")
            print("\n" + "‚îÄ" * 40)
            print("0. üéØ Continuar para o Mini Projeto")
            print("‚îÄ" * 40)
            
            try:
                escolha = input("\nüëâ Sua escolha: ").strip().lower()
                
                if escolha in ["0", "continuar", "sair", "proximo"]:
                    break
                elif escolha in ["1", "quiz", "integracao"]:
                    try:
                        self._run_quiz(exercicios[0])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Quiz interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no quiz. Continuando...")
                elif escolha in ["2", "sistema", "completar"]:
                    try:
                        self._run_code_completion(exercicios[1])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio. Continuando...")
                elif escolha in ["3", "criativo", "projeto"]:
                    try:
                        self._run_creative_exercise(exercicios[2])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio criativo interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio criativo. Continuando...")
                elif escolha in ["help", "ajuda", "h", "?"]:
                    self._show_help()
                else:
                    self.print_warning("‚ùå Op√ß√£o inv√°lida! Digite 1, 2, 3, 0 ou 'help' para ajuda.")
                    
            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Opera√ß√£o cancelada pelo usu√°rio. Voltando ao menu principal...")
                return
            except Exception as e:
                self.print_warning("‚ùå Erro inesperado no menu. Tente novamente.")
    
    def _show_help(self) -> None:
        """Mostra ajuda sobre as op√ß√µes dispon√≠veis"""
        self.print_section("AJUDA - SE√á√ÉO DE PR√ÅTICA", "‚ùì", "info")
        help_text = [
            "üìù OP√á√ÉO 1 - Quiz: Teste integra√ß√£o de conceitos",
            "üíª OP√á√ÉO 2 - Complete o Sistema: 3 desafios progressivos",
            "üé® OP√á√ÉO 3 - Projeto Criativo: Crie seu pr√≥prio sistema",
            "üî¢ OP√á√ÉO 0 - Continue para o Projeto Final completo",
            "",
            "üí° DICAS:",
            "‚Ä¢ Este √© o m√≥dulo final - use TODOS os conceitos!",
            "‚Ä¢ Pense em solu√ß√µes completas e organizadas",
            "‚Ä¢ Aplique as boas pr√°ticas aprendidas",
            "‚Ä¢ Seja criativo mas mantenha o c√≥digo limpo!"
        ]
        
        for line in help_text:
            if line:
                self.print_colored(f"  {line}", "text")
            else:
                print()
        
        input("\nüî∏ Pressione ENTER para voltar ao menu...")
    
    def _run_quiz(self, quiz_data) -> None:
        """Executa o quiz de integra√ß√£o"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("QUIZ: INTEGRANDO CONCEITOS", "üìù", "warning")
        self.print_colored("Teste seu conhecimento integrado!", "text")
        
        acertos = 0
        total_perguntas = len(quiz_data['questions'])
        
        for i, pergunta in enumerate(quiz_data['questions'], 1):
            self.print_colored(f"\nüìù PERGUNTA {i}/{total_perguntas}:", "accent")
            if self.exercicio(pergunta['question'], pergunta['answer'], pergunta['hint']):
                acertos += 1
            
            input("\nüî∏ Pressione ENTER para continuar...")
        
        # Resultado final
        self.print_section("RESULTADO DO QUIZ", "üèÜ", "success")
        percentual = (acertos / total_perguntas) * 100
        
        if percentual >= 80:
            self.print_success(f"üéâ EXCELENTE! Voc√™ acertou {acertos}/{total_perguntas} ({percentual:.0f}%)")
            self.print_colored("Voc√™ domina a integra√ß√£o de conceitos!", "success")
        elif percentual >= 60:
            self.print_colored(f"üëç BOM! Voc√™ acertou {acertos}/{total_perguntas} ({percentual:.0f}%)", "warning")
            self.print_colored("Continue praticando a integra√ß√£o!", "text")
        else:
            self.print_colored(f"üí™ Voc√™ acertou {acertos}/{total_perguntas} ({percentual:.0f}%)", "error")
            self.print_colored("Revise os m√≥dulos anteriores!", "text")
        
        input("\nüî∏ Pressione ENTER para voltar ao menu...")
    
    def _run_code_completion(self, code_data) -> None:
        """Executa exerc√≠cios de completar sistema"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("DESAFIO: COMPLETE O SISTEMA", "üíª", "accent")
        self.print_colored("Complete sistemas que integram m√∫ltiplos conceitos!", "text")
        
        for i, exercicio in enumerate(code_data['exercises'], 1):
            self.print_colored(f"\nüíª EXERC√çCIO {i}/{len(code_data['exercises'])}: {exercicio['instruction']}", "warning")
            
            self.print_code_section("C√ìDIGO PARA COMPLETAR", exercicio['starter'])
            
            self.print_colored("\n‚úçÔ∏è Complete onde est√° '___' (m√∫ltiplas linhas se necess√°rio)", "info")
            
            # Para exerc√≠cios com m√∫ltiplas lacunas
            if exercicio['type'] != 'simple':
                self.print_colored("DICA: Este exerc√≠cio tem m√∫ltiplas lacunas. Complete uma por vez!", "info")
            
            resposta = input("üëâ Sua resposta: ").strip()
            
            # Verifica se a resposta cont√©m os elementos essenciais
            solucao_partes = exercicio['solution'].split('\n')
            resposta_correta = all(parte.strip() in resposta for parte in solucao_partes if parte.strip())
            
            if resposta_correta:
                self.print_success("‚úÖ CORRETO! Excelente integra√ß√£o de conceitos!")
                
                # Mostra c√≥digo funcionando
                codigo_completo = exercicio['starter']
                for parte in solucao_partes:
                    codigo_completo = codigo_completo.replace('___', parte, 1)
                
                self.print_colored("\nüöÄ Veja o sistema funcionando:", "success")
                self.executar_codigo(codigo_completo)
            else:
                self.print_warning(f"‚ùå N√£o foi dessa vez. A solu√ß√£o era:\n{exercicio['solution']}")
                
                # Mostra c√≥digo correto
                codigo_completo = exercicio['starter']
                for parte in solucao_partes:
                    codigo_completo = codigo_completo.replace('___', parte, 1)
                
                self.print_colored("\nüí° Veja como fica o sistema completo:", "info")
                self.executar_codigo(codigo_completo)
            
            if i < len(code_data['exercises']):
                input("\nüî∏ Pressione ENTER para o pr√≥ximo desafio...")
        
        self.print_success("\nüéâ Parab√©ns por completar os desafios de integra√ß√£o!")
        input("\nüî∏ Pressione ENTER para voltar ao menu...")
    
    def _run_creative_exercise(self, creative_data) -> None:
        """Executa exerc√≠cio criativo final"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("PROJETO CRIATIVO: SEU PR√ìPRIO SISTEMA", "üé®", "success")
        self.print_colored(creative_data['instruction'], "text")
        
        self.print_colored("\nüí° REQUISITOS M√çNIMOS:", "info")
        requisitos = [
            "üìù Use vari√°veis para armazenar dados",
            "‚å®Ô∏è Use input() para intera√ß√£o",
            "üìã Use lista para m√∫ltiplos itens",
            "üîÑ Use loop para repeti√ß√µes",
            "‚ùì Use if/else para decis√µes",
            "üîß Use pelo menos 2 fun√ß√µes"
        ]
        
        for req in requisitos:
            self.print_colored(f"  {req}", "primary")
        
        self.print_colored("\nüéØ IDEIAS DE PROJETOS:", "warning")
        ideias = [
            "üéÆ Jogo de adivinha√ß√£o com n√≠veis",
            "üìö Sistema de biblioteca pessoal",
            "üí∞ Controle de gastos mensais",
            "üìù Lista de tarefas inteligente",
            "üé¨ Cat√°logo de filmes favoritos",
            "üçï Sistema de pedidos de restaurante"
        ]
        
        for ideia in ideias:
            self.print_colored(f"  ‚Ä¢ {ideia}", "accent")
        
        self.print_colored("\nüñ•Ô∏è DIGITE SEU C√ìDIGO:", "success")
        self.print_colored("(Digite 'fim' em uma linha vazia para terminar)", "text")
        
        codigo_usuario = []
        while True:
            linha = input()
            if linha.lower() == 'fim':
                break
            codigo_usuario.append(linha)
        
        codigo_completo = '\n'.join(codigo_usuario)
        
        if codigo_completo.strip():
            self.print_colored("\nüöÄ EXECUTANDO SEU SISTEMA:", "success")
            try:
                exec(codigo_completo)
                self.print_success("\nüéâ INCR√çVEL! Seu sistema funcionou perfeitamente!")
                self.print_colored("Voc√™ demonstrou dom√≠nio de todos os conceitos!", "success")
                
                # An√°lise do c√≥digo
                conceitos_usados = []
                if 'def ' in codigo_completo:
                    conceitos_usados.append("‚úÖ Fun√ß√µes")
                if 'for ' in codigo_completo or 'while ' in codigo_completo:
                    conceitos_usados.append("‚úÖ Loops")
                if 'if ' in codigo_completo:
                    conceitos_usados.append("‚úÖ Condi√ß√µes")
                if '[' in codigo_completo:
                    conceitos_usados.append("‚úÖ Listas")
                if 'input(' in codigo_completo:
                    conceitos_usados.append("‚úÖ Entrada de dados")
                
                if conceitos_usados:
                    self.print_colored("\nüìä CONCEITOS IDENTIFICADOS:", "info")
                    for conceito in conceitos_usados:
                        self.print_colored(f"  {conceito}", "primary")
                
            except Exception as e:
                self.print_warning(f"\n‚ùå Erro: {e}")
                self.print_colored("Continue praticando! Erros fazem parte do aprendizado.", "info")
        else:
            self.print_colored("\nNenhum c√≥digo foi digitado. Tente novamente quando estiver pronto!", "text")
        
        input("\nüî∏ Pressione ENTER para voltar ao menu...")
    
    def _mini_projeto_sistema_gestao(self) -> None:
        """Mini Projeto - M√≥dulo 11: Sistema Completo de Gest√£o"""
        
        # === CABE√áALHO IMPACTANTE ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üéØ PROJETO FINAL: SISTEMA DE GEST√ÉO PESSOAL COMPLETO")
        else:
            print("\n" + "="*50)
            print("üéØ PROJETO FINAL: SISTEMA DE GEST√ÉO PESSOAL COMPLETO")
            print("="*50)
        
        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_success("üéâ Este √© o momento! Vamos criar um sistema profissional completo!")
        
        self.print_concept(
            "Sistema de Gest√£o Pessoal",
            "Um sistema completo que integra TODOS os conceitos aprendidos para gerenciar sua vida"
        )
        
        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nEste tipo de sistema √© usado para:", "text")
        usos_praticos = [
            "Organizar tarefas e compromissos di√°rios",
            "Controlar finan√ßas pessoais",
            "Gerenciar contatos importantes",
            "Acompanhar metas e objetivos"
        ]
        for uso in usos_praticos:
            self.print_colored(f"‚Ä¢ {uso}", "accent")
        
        # === DESENVOLVIMENTO PASSO A PASSO ===
        
        # PASSO 1: Estrutura do Sistema
        self.print_section("PASSO 1: Planejando a Estrutura", "üìù", "info")
        self.print_tip("Vamos criar um sistema modular com v√°rias funcionalidades!")
        
        try:
            # PASSO 2: Implementa√ß√£o
            self.print_section("PASSO 2: Implementando o Sistema", "‚öôÔ∏è", "success")
            self.print_colored("Integrando todos os conceitos aprendidos:", "text")
            
            # PASSO 3: Sistema Funcionando
            self.print_section("PASSO 3: Sistema em A√ß√£o", "üé¨", "warning")
            
            # === C√ìDIGO FINAL GERADO ===
            self.print_colored("Aqui est√° seu Sistema de Gest√£o Pessoal Completo:", "text")
            
            codigo_final = f'''# üêç PROJETO FINAL: SISTEMA DE GEST√ÉO PESSOAL
# M√≥dulo 11: Integrando TODOS os conceitos Python

import datetime

# ========== ESTRUTURAS DE DADOS ==========
tarefas = []
financas = []
contatos = []
metas = []

# ========== FUN√á√ïES DO SISTEMA ==========

def exibir_menu_principal():
    """Exibe o menu principal do sistema"""
    print("\\n" + "="*50)
    print("üè† SISTEMA DE GEST√ÉO PESSOAL")
    print("="*50)
    print("1. üìù Gerenciar Tarefas")
    print("2. üí∞ Controle Financeiro")
    print("3. üì± Agenda de Contatos")
    print("4. üéØ Metas e Objetivos")
    print("5. üìä Relat√≥rios")
    print("0. üö™ Sair")
    print("="*50)

# === M√ìDULO DE TAREFAS ===
def adicionar_tarefa():
    """Adiciona nova tarefa"""
    titulo = input("T√≠tulo da tarefa: ")
    descricao = input("Descri√ß√£o: ")
    prazo = input("Prazo (dd/mm/aaaa): ")
    prioridade = input("Prioridade (alta/m√©dia/baixa): ")
    
    tarefa = {
        "titulo": titulo,
        "descricao": descricao,
        "prazo": prazo,
        "prioridade": prioridade,
        "concluida": False,
        "data_criacao": datetime.datetime.now().strftime("%d/%m/%Y")
    }
    
    tarefas.append(tarefa)
    return "‚úÖ Tarefa adicionada com sucesso!"

def listar_tarefas():
    """Lista todas as tarefas"""
    if not tarefas:
        return "üì≠ Nenhuma tarefa cadastrada"
    
    print("\\nüìã SUAS TAREFAS:")
    print("-" * 50)
    
    for i, tarefa in enumerate(tarefas, 1):
        status = "‚úÖ" if tarefa["concluida"] else "‚è≥"
        prioridade_emoji = {"alta": "üî¥", "m√©dia": "üü°", "baixa": "üü¢"}
        emoji = prioridade_emoji.get(tarefa["prioridade"], "‚ö™")
        
        print(f"{i}. {status} {tarefa['titulo']} {emoji}")
        print(f"   üìÖ Prazo: {tarefa['prazo']}")
        print(f"   üìù {tarefa['descricao']}")
        print("-" * 50)

# === M√ìDULO FINANCEIRO ===
def adicionar_transacao():
    """Adiciona transa√ß√£o financeira"""
    tipo = input("Tipo (receita/despesa): ").lower()
    categoria = input("Categoria: ")
    valor = float(input("Valor: R$ "))
    descricao = input("Descri√ß√£o: ")
    
    transacao = {
        "tipo": tipo,
        "categoria": categoria,
        "valor": valor,
        "descricao": descricao,
        "data": datetime.datetime.now().strftime("%d/%m/%Y %H:%M")
    }
    
    financas.append(transacao)
    return f"‚úÖ {tipo.capitalize()} de R$ {valor:.2f} registrada!"

def resumo_financeiro():
    """Mostra resumo financeiro"""
    if not financas:
        return "üìä Nenhuma transa√ß√£o registrada"
    
    receitas = sum(t["valor"] for t in financas if t["tipo"] == "receita")
    despesas = sum(t["valor"] for t in financas if t["tipo"] == "despesa")
    saldo = receitas - despesas
    
    print("\\nüí∞ RESUMO FINANCEIRO:")
    print("="*40)
    print(f"üìà Total de Receitas: R$ {receitas:.2f}")
    print(f"üìâ Total de Despesas: R$ {despesas:.2f}")
    print(f"üíµ Saldo Atual: R$ {saldo:.2f}")
    
    # An√°lise por categoria
    print("\\nüìä DESPESAS POR CATEGORIA:")
    categorias = {{}}
    for t in financas:
        if t["tipo"] == "despesa":
            if t["categoria"] not in categorias:
                categorias[t["categoria"]] = 0
            categorias[t["categoria"]] += t["valor"]
    
    for cat, valor in categorias.items():
        print(f"‚Ä¢ {cat}: R$ {valor:.2f}")

# === M√ìDULO DE CONTATOS ===
def adicionar_contato():
    """Adiciona novo contato"""
    nome = input("Nome completo: ")
    telefone = input("Telefone: ")
    email = input("Email: ")
    aniversario = input("Anivers√°rio (dd/mm): ")
    
    contato = {
        "nome": nome,
        "telefone": telefone,
        "email": email,
        "aniversario": aniversario
    }
    
    contatos.append(contato)
    return f"‚úÖ Contato {nome} adicionado!"

def buscar_contato(termo):
    """Busca contatos por nome"""
    encontrados = []
    for contato in contatos:
        if termo.lower() in contato["nome"].lower():
            encontrados.append(contato)
    
    if encontrados:
        print(f"\\nüîç Encontrados {len(encontrados)} contatos:")
        for c in encontrados:
            print(f"üë§ {c['nome']}")
            print(f"üìû {c['telefone']} | ‚úâÔ∏è {c['email']}")
    else:
        print("‚ùå Nenhum contato encontrado")

# === M√ìDULO DE METAS ===
def criar_meta():
    """Cria nova meta"""
    titulo = input("T√≠tulo da meta: ")
    descricao = input("Descri√ß√£o detalhada: ")
    prazo = input("Prazo para alcan√ßar (dd/mm/aaaa): ")
    
    meta = {
        "titulo": titulo,
        "descricao": descricao,
        "prazo": prazo,
        "progresso": 0,
        "concluida": False
    }
    
    metas.append(meta)
    return f"üéØ Meta '{titulo}' criada!"

def atualizar_progresso_meta():
    """Atualiza progresso de uma meta"""
    if not metas:
        return "‚ùå Nenhuma meta cadastrada"
    
    print("\\nüéØ SUAS METAS:")
    for i, meta in enumerate(metas):
        if not meta["concluida"]:
            print(f"{i+1}. {meta['titulo']} - {meta['progresso']}%")
    
    escolha = int(input("\\nEscolha a meta: ")) - 1
    novo_progresso = int(input("Novo progresso (%): "))
    
    metas[escolha]["progresso"] = novo_progresso
    if novo_progresso >= 100:
        metas[escolha]["concluida"] = True
        return f"üéâ PARAB√âNS! Meta '{metas[escolha]['titulo']}' conclu√≠da!"
    
    return f"‚úÖ Progresso atualizado: {novo_progresso}%"

# === RELAT√ìRIOS INTEGRADOS ===
def gerar_relatorio_geral():
    """Gera relat√≥rio completo do sistema"""
    print("\\n" + "="*60)
    print("üìä RELAT√ìRIO GERAL DO SISTEMA")
    print("="*60)
    
    # Estat√≠sticas de Tarefas
    total_tarefas = len(tarefas)
    tarefas_concluidas = sum(1 for t in tarefas if t["concluida"])
    tarefas_pendentes = total_tarefas - tarefas_concluidas
    
    print("\\nüìù TAREFAS:")
    print(f"‚Ä¢ Total: {total_tarefas}")
    print(f"‚Ä¢ Conclu√≠das: {tarefas_concluidas}")
    print(f"‚Ä¢ Pendentes: {tarefas_pendentes}")
    
    # Resumo Financeiro
    if financas:
        receitas = sum(t["valor"] for t in financas if t["tipo"] == "receita")
        despesas = sum(t["valor"] for t in financas if t["tipo"] == "despesa")
        print(f"\\nüí∞ FINAN√áAS:")
        print(f"‚Ä¢ Saldo: R$ {receitas - despesas:.2f}")
    
    # Contatos
    print(f"\\nüì± CONTATOS: {len(contatos)} cadastrados")
    
    # Metas
    metas_ativas = sum(1 for m in metas if not m["concluida"])
    print(f"\\nüéØ METAS: {metas_ativas} em andamento")

# === DEMONSTRA√á√ÉO DO SISTEMA ===
print("üé¨ DEMONSTRA√á√ÉO DO SISTEMA DE GEST√ÉO PESSOAL")

# Adicionando dados de exemplo
print("\\nüìù Adicionando tarefa de exemplo...")
tarefas.append({
    "titulo": "Estudar Python",
    "descricao": "Completar m√≥dulo 11",
    "prazo": "31/12/2024",
    "prioridade": "alta",
    "concluida": False,
    "data_criacao": "28/06/2025"
})

print("üí∞ Adicionando transa√ß√£o de exemplo...")
financas.append({
    "tipo": "receita",
    "categoria": "Sal√°rio",
    "valor": 5000.00,
    "descricao": "Pagamento mensal",
    "data": "28/06/2025 10:00"
})

print("üì± Adicionando contato de exemplo...")
contatos.append({
    "nome": "Python Master",
    "telefone": "(11) 98765-4321",
    "email": "python@master.com",
    "aniversario": "01/01"
})

print("üéØ Adicionando meta de exemplo...")
metas.append({
    "titulo": "Dominar Python",
    "descricao": "Completar todos os m√≥dulos do curso",
    "prazo": "31/12/2024",
    "progresso": 90,
    "concluida": False
})

# Mostrando o sistema funcionando
exibir_menu_principal()
print("\\nüìã Listando tarefas...")
listar_tarefas()
print("\\nüí∞ Resumo financeiro...")
resumo_financeiro()
print("\\nüìä Relat√≥rio geral...")
gerar_relatorio_geral()

print("\\nüéâ SISTEMA DE GEST√ÉO PESSOAL COMPLETO!")
print("üèÜ PARAB√âNS! Voc√™ criou um sistema profissional!")'''
            
            self.exemplo(codigo_final)
            
            # === EXECU√á√ÉO DO RESULTADO ===
            self.print_section("RESULTADO FINAL", "üé¨", "warning")
            self.executar_codigo(codigo_final)
            
        except KeyboardInterrupt:
            self.print_warning("Projeto cancelado pelo usu√°rio")
            return
        
        # === MENSAGEM DE CONQUISTA ===
        self.print_success("üéâ PARAB√âNS! Voc√™ completou o PROJETO FINAL!")
        
        # === ESTAT√çSTICAS FINAIS ===
        self.print_section("SUAS CONQUISTAS", "üèÜ", "info")
        conquistas = [
            "‚úÖ Dominou todos os conceitos b√°sicos de Python",
            "‚úÖ Criou um sistema completo e funcional",
            "‚úÖ Integrou m√∫ltiplos m√≥dulos em um projeto",
            "‚úÖ Aplicou boas pr√°ticas de programa√ß√£o",
            "‚úÖ Desenvolveu pensamento computacional"
        ]
        for conquista in conquistas:
            self.print_colored(f"  {conquista}", "success")
        
        # === PR√ìXIMOS PASSOS ===
        self.print_section("PR√ìXIMOS PASSOS", "üöÄ", "accent")
        proximos_passos = [
            "Adicionar persist√™ncia de dados (salvar em arquivos)",
            "Criar interface gr√°fica com Tkinter",
            "Implementar banco de dados SQLite",
            "Adicionar gr√°ficos e visualiza√ß√µes",
            "Transformar em aplica√ß√£o web"
        ]
        for passo in proximos_passos:
            self.print_colored(f"‚Ä¢ {passo}", "primary")
        
        self.print_success("\nüèÜ CONQUISTA DESBLOQUEADA: DESENVOLVEDOR PYTHON!")
        
        # === REGISTRO DE CONCLUS√ÉO ===
        self.complete_mini_project("Sistema de Gest√£o Pessoal Completo")
        
        self.pausar()


# Para teste standalone
if __name__ == "__main__":
    module = Modulo11ProjetoFinal()
    print("Teste do m√≥dulo 11 - vers√£o standalone")
    module._projeto_final_interativo()