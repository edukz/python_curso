#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
M√≥dulo 5: Entrada de Dados
Como receber informa√ß√µes do usu√°rio de forma interativa
"""

from ..shared.base_module import BaseModule


class Modulo05EntradaDados(BaseModule):
    """M√≥dulo 5: Entrada de Dados - Intera√ß√£o com o usu√°rio"""
    
    def __init__(self):
        super().__init__("modulo_5", "Entrada de Dados")
        self.has_mini_project = True
        self.mini_project_points = 50
    
    def execute(self) -> None:
        """Executa o m√≥dulo sobre entrada de dados"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return
        
        try:
            self._entrada_dados_interativa()
        except Exception as e:
            self.error_handler(lambda: None)
    
    def _entrada_dados_interativa(self) -> None:
        """Conte√∫do principal do m√≥dulo entrada de dados"""
        # === CABE√áALHO VISUAL ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üìù M√ìDULO 5: ENTRADA DE DADOS")
        else:
            print("\n" + "="*50)
            print("üìù M√ìDULO 5: ENTRADA DE DADOS")
            print("="*50)
        
        # === MENSAGENS MOTIVACIONAIS ===
        self.print_success("üéâ Agora seus programas v√£o conversar com o usu√°rio!")
        self.print_tip("Este m√≥dulo est√° dividido em se√ß√µes interativas. Voc√™ controla o ritmo!")
        
        # === FLUXO PRINCIPAL COM TRATAMENTO DE CTRL+C ===
        
        # 1. Sistema de navega√ß√£o por se√ß√µes
        try:
            self._navegacao_secoes_interativas()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Navega√ß√£o interrompida pelo usu√°rio. Voltando ao menu principal...")
            return
        
        # 2. Se√ß√£o de Pr√°tica Interativa
        try:
            self._secao_pratica_interativa()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è M√≥dulo interrompido pelo usu√°rio. Voltando ao menu principal...")
            return
        
        # 3. Mini Projeto Pr√°tico
        try:
            self._mini_projeto_questionario_personalizado()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Mini projeto interrompido. Voltando ao menu principal...")
            return
        
        # 4. Marcar m√≥dulo como completo
        self.complete_module()
    
    def _navegacao_secoes_interativas(self) -> None:
        """Sistema de navega√ß√£o por se√ß√µes do m√≥dulo"""
        
        # === DEFINI√á√ÉO DAS SE√á√ïES ===
        secoes = [
            {
                'id': 'secao_conceito_input',
                'titulo': 'üéØ O que √© entrada de dados?',
                'descricao': 'Entenda como programas recebem informa√ß√µes',
                'funcao': self._secao_conceito_input
            },
            {
                'id': 'secao_funcao_input',
                'titulo': '‚öôÔ∏è Como a fun√ß√£o input() funciona?',
                'descricao': 'Veja o processo passo a passo',
                'funcao': self._secao_funcao_input
            },
            {
                'id': 'secao_exemplos_praticos',
                'titulo': 'üí° Exemplos pr√°ticos',
                'descricao': 'Veja entrada de dados em a√ß√£o',
                'funcao': self._secao_exemplos_praticos
            },
            {
                'id': 'secao_tipos_conversao',
                'titulo': 'üîÑ Convers√£o de tipos',
                'descricao': 'Transforme texto em n√∫meros',
                'funcao': self._secao_tipos_conversao
            },
            {
                'id': 'secao_formatacao_saida',
                'titulo': 'üé® Formata√ß√£o de sa√≠da',
                'descricao': 'Deixe suas mensagens mais bonitas',
                'funcao': self._secao_formatacao_saida
            },
            {
                'id': 'secao_erros_comuns',
                'titulo': '‚ö†Ô∏è Erros comuns e como evitar',
                'descricao': 'Aprenda com os erros mais frequentes',
                'funcao': self._secao_erros_comuns
            },
            {
                'id': 'secao_curiosidades',
                'titulo': 'üí´ Curiosidades sobre intera√ß√£o',
                'descricao': 'Fatos interessantes sobre interfaces',
                'funcao': self._secao_curiosidades
            }
        ]
        
        secoes_visitadas = set()
        
        # === LOOP PRINCIPAL DE NAVEGA√á√ÉO ===
        while True:
            # Limpa tela e mostra cabe√ßalho
            self.ui.clear_screen() if self.ui else print("\n" + "="*50)
            self.print_section("NAVEGA√á√ÉO DO M√ìDULO", "üìö", "accent")
            self.print_colored("Escolha uma se√ß√£o para estudar:", "text")
            
            # Lista todas as se√ß√µes com status
            print()
            for i, secao in enumerate(secoes, 1):
                status = "‚úÖ" if secao['id'] in secoes_visitadas else "üìñ"
                print(f"{status} {i}. {secao['titulo']}")
                self.print_colored(f"    {secao['descricao']}", "text")
                print()
            
            print("0. üéØ Continuar para os Exerc√≠cios Pr√°ticos")
            
            # Mostra progresso visual
            progresso = len(secoes_visitadas)
            total = len(secoes)
            self.print_colored(f"\nüìä Progresso: {progresso}/{total} se√ß√µes visitadas", "info")
            
            if progresso == total:
                self.print_success("üåü Voc√™ completou todas as se√ß√µes! Est√° pronto para praticar!")
            
            # Processa escolha do usu√°rio
            try:
                escolha = input(f"\nüëâ Escolha uma se√ß√£o (1-{len(secoes)}) ou 0 para continuar: ").strip()
                
                if escolha == "0":
                    # Verifica se visitou se√ß√µes suficientes
                    if progresso >= 3:  # Pelo menos 3 se√ß√µes visitadas
                        break
                    else:
                        self.print_warning("üìö Recomendamos visitar pelo menos 3 se√ß√µes antes de continuar!")
                        continuar = input("Quer continuar mesmo assim? (s/n): ").lower()
                        if continuar in ['s', 'sim', 'yes']:
                            break
                elif escolha.isdigit() and 1 <= int(escolha) <= len(secoes):
                    # Executa se√ß√£o escolhida
                    idx = int(escolha) - 1
                    secoes[idx]['funcao']()
                    secoes_visitadas.add(secoes[idx]['id'])
                else:
                    self.print_warning(f"‚ùå Op√ß√£o inv√°lida! Digite um n√∫mero de 1 a {len(secoes)} ou 0.")
                    
            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Pulando para exerc√≠cios pr√°ticos...")
                break
            except Exception as e:
                self.print_warning(f"‚ùå Erro: {str(e)}. Tente novamente.")
    
    def _secao_conceito_input(self) -> None:
        """Se√ß√£o: O que √© entrada de dados?"""
        if self.ui:
            self.ui.clear_screen()
        
        # === CABE√áALHO ATRATIVO ===
        self.print_section("O QUE √â ENTRADA DE DADOS?", "üéØ")
        
        # === DEFINI√á√ÉO DO CONCEITO ===
        self.print_concept(
            "Entrada de Dados",
            "√â quando um programa 'pergunta' algo para o usu√°rio e\nespera uma resposta para continuar funcionando."
        )
        
        # === DICA RELACIONADA ===
        self.print_tip("√â como uma conversa: o programa fala, voc√™ responde!")
        
        # === ANALOGIA DO COTIDIANO ===
        self.print_colored("\nüè† ANALOGIA DO DIA A DIA:", "warning")
        self.print_colored("Imagine um caixa do supermercado perguntando: 'Vai ser dinheiro ou cart√£o?'", "text")
        self.print_colored("Ele precisa da sua resposta para continuar o processo!", "text")
        input("\nüî∏ Pressione ENTER para continuar...")
        
        # === EXPLICA√á√ÉO T√âCNICA GRADUAL ===
        self.print_colored("\nüîß COMO FUNCIONA NA PR√ÅTICA:", "info")
        passos_tecnicos = [
            "1. O programa mostra uma pergunta na tela",
            "2. O cursor fica piscando esperando voc√™ digitar",
            "3. Voc√™ digita a resposta e pressiona ENTER",
            "4. O programa guarda sua resposta numa vari√°vel"
        ]
        
        for i, passo in enumerate(passos_tecnicos, 1):
            self.print_colored(passo, "text")
            if i < len(passos_tecnicos):
                input("   ‚è≥ Pressione ENTER para o pr√≥ximo passo...")
        
        # === EXEMPLO DE C√ìDIGO ===
        self.print_colored("\nüíª EXEMPLO PR√ÅTICO:", "success")
        codigo_exemplo = '''# Perguntando o nome do usu√°rio
nome = input("Qual √© o seu nome? ")
print(f"Ol√°, {nome}! Prazer em conhec√™-lo!")'''
        self.exemplo(codigo_exemplo)
        
        # Executa o c√≥digo para mostrar resultado
        print("\nüöÄ Vamos ver funcionando:")
        self.executar_codigo(codigo_exemplo)
        
        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nüåç ONDE √â USADO NO MUNDO REAL:", "accent")
        aplicacoes = [
            "Caixas eletr√¥nicos pedem sua senha",
            "Apps de delivery perguntam seu endere√ßo",
            "Jogos pedem seu nome de usu√°rio",
            "Sites de compra pedem dados do cart√£o"
        ]
        for app in aplicacoes:
            self.print_colored(f"‚Ä¢ {app}", "primary")
        
        self.pausar()
    
    def _secao_funcao_input(self) -> None:
        """Se√ß√£o: Como a fun√ß√£o input() funciona?"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("COMO A FUN√á√ÉO INPUT() FUNCIONA?", "‚öôÔ∏è", "info")
        
        self.print_concept(
            "input()",
            "Uma fun√ß√£o que 'pausa' o programa e espera o usu√°rio\ndigitar algo e pressionar ENTER."
        )
        
        # === ANATOMIA DA FUN√á√ÉO ===
        self.print_colored("\nüîç ANATOMIA DA FUN√á√ÉO INPUT:", "warning")
        self.print_colored("input('mensagem aqui')", "text")
        input("\nüî∏ Pressione ENTER para ver cada parte...")
        
        partes = [
            ("input", "Nome da fun√ß√£o que captura texto"),
            ("( )", "Par√™nteses obrigat√≥rios para chamar a fun√ß√£o"),
            ("'mensagem'", "Texto que aparece para o usu√°rio (opcional)"),
            ("=", "Operador que guarda o resultado numa vari√°vel")
        ]
        
        for parte, explicacao in partes:
            self.print_colored(f"üîπ {parte}: {explicacao}", "text")
            input("   ‚è≥ Pressione ENTER para a pr√≥xima parte...")
        
        # === EXEMPLOS PROGRESSIVOS ===
        self.print_colored("\nüí° EXEMPLOS PROGRESSIVOS:", "success")
        
        exemplos = [
            {
                'titulo': 'EXEMPLO 1: Input simples',
                'codigo': 'resposta = input()\nprint(f"Voc√™ digitou: {resposta}")',
                'explicacao': 'Input sem mensagem - s√≥ espera voc√™ digitar'
            },
            {
                'titulo': 'EXEMPLO 2: Input com mensagem',
                'codigo': 'nome = input("Digite seu nome: ")\nprint(f"Oi, {nome}!")',
                'explicacao': 'Input com mensagem - mais amig√°vel'
            },
            {
                'titulo': 'EXEMPLO 3: Input formatado',
                'codigo': 'cor = input("üé® Qual sua cor favorita? ")\nprint(f"üåà {cor} √© uma cor linda!")',
                'explicacao': 'Input com emojis e formata√ß√£o bonita'
            }
        ]
        
        for i, exemplo in enumerate(exemplos, 1):
            self.print_colored(f"\n{exemplo['titulo']}", "warning")
            self.print_colored(f"üí° {exemplo['explicacao']}", "text")
            
            self.print_code_section("C√ìDIGO", exemplo['codigo'])
            
            print("\nüöÄ Executando exemplo:")
            self.executar_codigo(exemplo['codigo'])
            
            if i < len(exemplos):
                input("\nüî∏ Pressione ENTER para o pr√≥ximo exemplo...")
        
        self.print_success("\nüéâ Agora voc√™ entende como input() funciona!")
        self.pausar()
    
    def _secao_exemplos_praticos(self) -> None:
        """Se√ß√£o: Exemplos pr√°ticos de entrada de dados"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("EXEMPLOS PR√ÅTICOS", "üí°", "success")
        
        exemplos = [
            {
                'titulo': 'EXEMPLO 1: Calculadora Pessoal',
                'descricao': 'Programa que pede dois n√∫meros e faz uma soma',
                'codigo': '''# Calculadora simples
print("üßÆ CALCULADORA PESSOAL")
print("-" * 25)

numero1 = input("Digite o primeiro n√∫mero: ")
numero2 = input("Digite o segundo n√∫mero: ")

# Convertendo para n√∫meros
num1 = int(numero1)
num2 = int(numero2)

resultado = num1 + num2
print(f"‚ú® {num1} + {num2} = {resultado}")''',
                'explicacao': 'Coleta dois n√∫meros e faz uma opera√ß√£o matem√°tica'
            },
            {
                'titulo': 'EXEMPLO 2: Ficha Pessoal',
                'descricao': 'Programa que cria uma ficha com dados do usu√°rio',
                'codigo': '''# Ficha pessoal
print("üìã CRIANDO SUA FICHA")
print("-" * 20)

nome = input("üë§ Nome: ")
idade = input("üéÇ Idade: ")
cidade = input("üèòÔ∏è Cidade: ")

print("\\n‚úÖ FICHA CRIADA!")
print("=" * 30)
print(f"Nome: {nome}")
print(f"Idade: {idade} anos")
print(f"Cidade: {cidade}")
print("=" * 30)''',
                'explicacao': 'Coleta v√°rias informa√ß√µes e organiza num formato bonito'
            },
            {
                'titulo': 'EXEMPLO 3: Quiz Interativo',
                'descricao': 'Programa que faz perguntas e d√° feedback',
                'codigo': '''# Quiz simples
print("üéØ QUIZ: VOC√ä CONHECE PYTHON?")
print("-" * 30)

resposta = input("Python foi criado em que ano? ")

if resposta == "1991":
    print("üéâ CORRETO! Python foi criado em 1991!")
else:
    print(f"‚ùå Voc√™ disse {resposta}, mas foi em 1991")
    
print("\\nüèÜ Obrigado por jogar!")''',
                'explicacao': 'Faz pergunta, verifica resposta e d√° feedback'
            }
        ]
        
        for i, exemplo in enumerate(exemplos, 1):
            self.print_colored(f"\n{exemplo['titulo']}", "warning")
            self.print_colored(f"üìù {exemplo['descricao']}", "text")
            
            self.print_code_section("C√ìDIGO", exemplo['codigo'])
            
            print("\nüöÄ Executando exemplo:")
            self.executar_codigo(exemplo['codigo'])
            
            self.print_colored(f"\nüí° EXPLICA√á√ÉO: {exemplo['explicacao']}", "info")
            
            if i < len(exemplos):
                input("\nüî∏ Pressione ENTER para o pr√≥ximo exemplo...")
        
        self.print_success("\nüéâ Voc√™ viu entrada de dados em a√ß√£o!")
        self.pausar()
    
    def _secao_tipos_conversao(self) -> None:
        """Se√ß√£o: Convers√£o de tipos de dados"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("CONVERS√ÉO DE TIPOS", "üîÑ", "warning")
        
        self.print_concept(
            "Convers√£o de Tipos",
            "input() sempre retorna texto (string). Para fazer matem√°tica,\nprecisamos converter para n√∫meros."
        )
        
        # === PROBLEMA COMUM ===
        self.print_colored("\n‚ùå PROBLEMA COMUM:", "warning")
        codigo_problema = '''idade1 = input("Primeira idade: ")  # usu√°rio digita: 20
idade2 = input("Segunda idade: ")   # usu√°rio digita: 15
soma = idade1 + idade2  # Resultado: "2015" (texto grudado!)
print(soma)  # Mostra: 2015 (errado!)'''
        
        self.print_code_section("C√ìDIGO PROBLEM√ÅTICO", codigo_problema)
        
        self.print_colored("ü§î Por que acontece isso?", "text")
        self.print_colored("Porque input() sempre retorna TEXTO, n√£o n√∫mero!", "text")
        
        input("\nüî∏ Pressione ENTER para ver a solu√ß√£o...")
        
        # === SOLU√á√ÉO ===
        self.print_colored("\n‚úÖ SOLU√á√ÉO: CONVERS√ÉO DE TIPOS", "success")
        
        conversores = [
            ("int()", "Converte texto para n√∫mero inteiro", "int('20') ‚Üí 20"),
            ("float()", "Converte texto para n√∫mero decimal", "float('20.5') ‚Üí 20.5"),
            ("str()", "Converte n√∫mero para texto", "str(20) ‚Üí '20'")
        ]
        
        for funcao, descricao, exemplo in conversores:
            self.print_colored(f"üîß {funcao}: {descricao}", "info")
            self.print_colored(f"   Exemplo: {exemplo}", "text")
            input("   ‚è≥ Pressione ENTER para o pr√≥ximo...")
        
        # === EXEMPLO CORRETO ===
        self.print_colored("\nüí° EXEMPLO CORRETO:", "success")
        codigo_correto = '''print("üßÆ SOMADOR DE IDADES")
idade1 = input("Primeira idade: ")
idade2 = input("Segunda idade: ")

# Convertendo para n√∫meros
num1 = int(idade1)  # "20" vira 20
num2 = int(idade2)  # "15" vira 15

soma = num1 + num2  # 20 + 15 = 35
print(f"Total: {soma} anos")'''
        
        self.print_code_section("C√ìDIGO CORRETO", codigo_correto)
        
        print("\nüöÄ Executando vers√£o correta:")
        self.executar_codigo(codigo_correto)
        
        # === DICAS IMPORTANTES ===
        self.print_colored("\nüí° DICAS IMPORTANTES:", "info")
        dicas = [
            "Sempre converta ANTES de fazer matem√°tica",
            "int() s√≥ funciona com n√∫meros inteiros",
            "float() aceita n√∫meros com v√≠rgula (use ponto: 3.14)",
            "Se o usu√°rio digitar letra, vai dar erro!"
        ]
        
        for dica in dicas:
            self.print_colored(f"‚Ä¢ {dica}", "text")
        
        self.pausar()
    
    def _secao_formatacao_saida(self) -> None:
        """Se√ß√£o: Formata√ß√£o de sa√≠da"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("FORMATA√á√ÉO DE SA√çDA", "üé®", "accent")
        
        self.print_concept(
            "Formata√ß√£o",
            "Formas de deixar suas mensagens mais bonitas e organizadas\nusando f-strings, emojis e s√≠mbolos especiais."
        )
        
        # === F-STRINGS ===
        self.print_colored("\nüî§ F-STRINGS: A FORMA MODERNA", "warning")
        self.print_colored("F-strings come√ßam com 'f' e usam {} para inserir vari√°veis", "text")
        
        exemplos_fstring = [
            {
                'nome': 'F-string b√°sica',
                'codigo': '''nome = input("Seu nome: ")
idade = input("Sua idade: ")
print(f"Oi {nome}, voc√™ tem {idade} anos!")''',
                'dica': 'Use f"texto {variavel}" para inserir vari√°veis'
            },
            {
                'nome': 'F-string com c√°lculos',
                'codigo': '''ano_nascimento = input("Ano de nascimento: ")
ano_atual = 2024
idade = ano_atual - int(ano_nascimento)
print(f"Voc√™ nasceu em {ano_nascimento} e tem {idade} anos")''',
                'dica': 'Pode fazer c√°lculos dentro das chaves {}'
            },
            {
                'nome': 'F-string decorada',
                'codigo': '''produto = input("Nome do produto: ")
preco = input("Pre√ßo: ")
print(f"üõçÔ∏è {produto.upper()} custa R$ {preco}")
print(f"üí∞ Oferta especial: {produto}!")''',
                'dica': 'Combine com emojis e m√©todos como .upper()'
            }
        ]
        
        for i, exemplo in enumerate(exemplos_fstring, 1):
            self.print_colored(f"\n{i}. {exemplo['nome'].upper()}", "success")
            self.print_colored(f"üí° {exemplo['dica']}", "info")
            
            self.print_code_section("C√ìDIGO", exemplo['codigo'])
            
            print("\nüöÄ Executando:")
            self.executar_codigo(exemplo['codigo'])
            
            if i < len(exemplos_fstring):
                input("\nüî∏ Pressione ENTER para o pr√≥ximo...")
        
        # === DECORA√á√ÉO VISUAL ===
        self.print_colored("\n‚ú® T√âCNICAS DE DECORA√á√ÉO:", "warning")
        
        decoracoes = [
            ('Linhas separadoras', 'print("=" * 30)', "Cria uma linha de 30 sinais ="),
            ('Emojis tem√°ticos', 'print("üéâ Parab√©ns! üéä")', "Deixa mensagens mais divertidas"),
            ('Espa√ßamento', 'print("\\n" + "Texto" + "\\n")', "\\n cria linhas em branco"),
            ('Centraliza√ß√£o', 'print("T√çTULO".center(20))', "Centraliza texto em 20 caracteres")
        ]
        
        for nome, codigo, explicacao in decoracoes:
            self.print_colored(f"üé® {nome}: {explicacao}", "text")
            self.print_colored(f"   C√≥digo: {codigo}", "info")
            input("   ‚è≥ Pressione ENTER para o pr√≥ximo...")
        
        # === EXEMPLO FINAL COMPLETO ===
        self.print_colored("\nüåü EXEMPLO FINAL: MENSAGEM SUPER FORMATADA", "success")
        codigo_final = '''nome = input("Nome: ")
comida = input("Comida favorita: ")

print("\\n" + "=" * 40)
print("üçΩÔ∏è  PERFIL GASTRON√îMICO  üçΩÔ∏è".center(40))
print("=" * 40)
print(f"üë§ Chef: {nome.title()}")
print(f"üç¥ Especialidade: {comida.capitalize()}")
print(f"‚≠ê Status: Aprovado pela comunidade!")
print("=" * 40)
print("üéâ Perfil criado com sucesso!")'''
        
        self.print_code_section("C√ìDIGO FINAL", codigo_final)
        
        print("\nüöÄ Executando exemplo completo:")
        self.executar_codigo(codigo_final)
        
        self.print_success("\nüé® Agora suas mensagens ficam profissionais!")
        self.pausar()
    
    def _secao_erros_comuns(self) -> None:
        """Se√ß√£o: Erros comuns e como evitar"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("ERROS COMUNS E COMO EVITAR", "‚ö†Ô∏è", "warning")
        
        erros_comuns = [
            {
                'titulo': 'ERRO 1: Tentar fazer matem√°tica com texto',
                'codigo_errado': '''idade = input("Sua idade: ")  # "25"
proxima_idade = idade + 1  # ERRO! "25" + 1''',
                'codigo_correto': '''idade = input("Sua idade: ")
idade_numero = int(idade)  # Converte para n√∫mero
proxima_idade = idade_numero + 1  # Agora funciona!''',
                'explicacao': 'input() sempre retorna texto. Converta para n√∫mero antes de calcular.'
            },
            {
                'titulo': 'ERRO 2: Esquecer os par√™nteses no input',
                'codigo_errado': '''nome = input "Seu nome: "  # ERRO! Faltam ()''',
                'codigo_correto': '''nome = input("Seu nome: ")  # Correto!''',
                'explicacao': 'input √© uma fun√ß√£o e precisa de par√™nteses (), mesmo que vazio.'
            },
            {
                'titulo': 'ERRO 3: Misturar aspas',
                'codigo_errado': '''nome = input("Seu nome: ')  # ERRO! Aspas diferentes''',
                'codigo_correto': '''nome = input("Seu nome: ")  # Todas aspas duplas
# OU
nome = input('Seu nome: ')  # Todas aspas simples''',
                'explicacao': 'Use o mesmo tipo de aspas para abrir e fechar strings.'
            },
            {
                'titulo': 'ERRO 4: N√£o guardar o resultado do input',
                'codigo_errado': '''input("Seu nome: ")  # ERRO! Resposta perdida
print(f"Oi, {nome}")  # nome n√£o existe!''',
                'codigo_correto': '''nome = input("Seu nome: ")  # Guarda na vari√°vel
print(f"Oi, {nome}")  # Agora funciona!''',
                'explicacao': 'Sempre guarde o resultado do input() numa vari√°vel.'
            },
            {
                'titulo': 'ERRO 5: Converter letra para n√∫mero',
                'codigo_errado': '''resposta = input("Digite um n√∫mero: ")  # usu√°rio digita "abc"
numero = int(resposta)  # ERRO! N√£o pode converter "abc"''',
                'codigo_correto': '''resposta = input("Digite um n√∫mero: ")
try:
    numero = int(resposta)
    print(f"N√∫mero: {numero}")
except:
    print("‚ùå Digite apenas n√∫meros!")''',
                'explicacao': 'Valide se a entrada √© realmente um n√∫mero antes de converter.'
            }
        ]
        
        for i, erro in enumerate(erros_comuns, 1):
            self.print_colored(f"\n{erro['titulo']}", "warning")
            
            # C√≥digo errado
            self.print_colored("‚ùå C√ìDIGO PROBLEM√ÅTICO:", "error" if hasattr(self.ui, 'get_color') else "warning")
            self.print_code_section("ERRADO", erro['codigo_errado'])
            
            # C√≥digo correto
            self.print_colored("‚úÖ C√ìDIGO CORRETO:", "success")
            self.print_code_section("CORRETO", erro['codigo_correto'])
            
            # Explica√ß√£o
            self.print_colored(f"üí° EXPLICA√á√ÉO: {erro['explicacao']}", "info")
            
            if i < len(erros_comuns):
                input("\nüî∏ Pressione ENTER para o pr√≥ximo erro...")
        
        # === DICAS FINAIS ===
        self.print_colored("\nüõ°Ô∏è DICAS PARA EVITAR ERROS:", "success")
        dicas_prevencao = [
            "Sempre teste seu c√≥digo com diferentes entradas",
            "Leia as mensagens de erro - elas ajudam!",
            "Use nomes de vari√°veis claros (nome, idade, n√£o x, y)",
            "Valide entradas importantes antes de usar",
            "Pratique! Quanto mais voc√™ programa, menos erra"
        ]
        
        for dica in dicas_prevencao:
            self.print_colored(f"‚Ä¢ {dica}", "text")
        
        self.pausar()
    
    def _secao_curiosidades(self) -> None:
        """Se√ß√£o: Curiosidades sobre intera√ß√£o"""
        if self.ui:
            self.ui.clear_screen()
        
        self.print_section("CURIOSIDADES SOBRE INTERA√á√ÉO", "üí´", "accent")
        
        curiosidades = [
            {
                'titulo': 'A primeira interface de usu√°rio',
                'fato': 'O primeiro computador interativo foi criado em 1945 e ocupava uma sala inteira! Hoje voc√™ tem mais poder no seu celular.',
                'emoji': 'üñ•Ô∏è'
            },
            {
                'titulo': 'O teclado QWERTY',
                'fato': 'O layout do teclado foi criado em 1873 para m√°quinas de escrever. Foi feito propositalmente LENTO para as teclas n√£o travarem!',
                'emoji': '‚å®Ô∏è'
            },
            {
                'titulo': 'O primeiro "Hello, World!"',
                'fato': 'O programa que imprime "Hello, World!" foi criado em 1972. Desde ent√£o, √© tradi√ß√£o todo programador come√ßar com ele!',
                'emoji': 'üëã'
            },
            {
                'titulo': 'Interfaces de voz',
                'fato': 'Assistentes como Siri e Alexa processam milh√µes de comandos por minuto usando entrada de dados por voz!',
                'emoji': 'üó£Ô∏è'
            },
            {
                'titulo': 'Games e input()',
                'fato': 'Jogos como Minecraft processam centenas de inputs por segundo - teclado, mouse, controle - tudo ao mesmo tempo!',
                'emoji': 'üéÆ'
            },
            {
                'titulo': 'Input() do futuro',
                'fato': 'Cientistas j√° desenvolvem interfaces c√©rebro-computador. Um dia, talvez possamos programar s√≥ com o pensamento!',
                'emoji': 'üß†'
            }
        ]
        
        for i, curiosidade in enumerate(curiosidades, 1):
            self.print_colored(f"\n{curiosidade['emoji']} CURIOSIDADE {i}: {curiosidade['titulo'].upper()}", "warning")
            self.print_colored(f"   {curiosidade['fato']}", "text")
            
            if i < len(curiosidades):
                input("\nüî∏ Pressione ENTER para a pr√≥xima curiosidade...")
        
        self.print_success("\nüåü A entrada de dados conecta humanos e computadores!")
        self.pausar()
    
    def _secao_pratica_interativa(self) -> None:
        """Se√ß√£o de pr√°tica interativa do m√≥dulo"""
        
        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_section("HORA DE PRATICAR!", "üéØ", "success")
        self.print_colored("Vamos testar o que voc√™ aprendeu com exerc√≠cios pr√°ticos!", "text")
        
        # === INSTRU√á√ïES PARA INICIANTES ===
        self.print_tip("Para iniciantes: Cada exerc√≠cio √© opcional, mas recomendamos fazer todos!")
        self.print_colored("\nüéì SOBRE OS EXERC√çCIOS:", "info")
        self.print_colored("‚Ä¢ N√£o se preocupe se errar - faz parte do aprendizado!", "text")
        self.print_colored("‚Ä¢ Voc√™ pode tentar quantas vezes quiser", "text")
        self.print_colored("‚Ä¢ Digite 'help' se precisar de ajuda", "text")
        self.print_colored("‚Ä¢ Use Ctrl+C para voltar ao menu principal se necess√°rio", "text")
        
        # === DEFINI√á√ÉO DOS EXERC√çCIOS ===
        exercicios = [
            {
                'title': 'Quiz: Conhecimentos sobre Entrada de Dados',
                'type': 'quiz',
                'questions': [
                    {
                        'question': 'Que fun√ß√£o usamos para pedir dados ao usu√°rio?',
                        'answer': ['input', 'input()'],
                        'hint': 'Come√ßa com "in" e termina com "put"'
                    },
                    {
                        'question': 'input() sempre retorna que tipo de dado?',
                        'answer': ['texto', 'string', 'str'],
                        'hint': 'Sempre texto, mesmo se voc√™ digitar n√∫meros'
                    },
                    {
                        'question': 'Como convertemos texto para n√∫mero inteiro?',
                        'answer': ['int()', 'int', 'usando int()'],
                        'hint': 'Fun√ß√£o de 3 letras que transforma em integer'
                    },
                    {
                        'question': 'F-strings come√ßam com que letra?',
                        'answer': ['f', 'F'],
                        'hint': '√â a primeira letra de "format"'
                    },
                    {
                        'question': 'O que acontece se n√£o guardarmos input() numa vari√°vel?',
                        'answer': ['perdemos', 'se perde', 'perdemos a resposta', 'perde'],
                        'hint': 'A resposta do usu√°rio vai para onde?'
                    }
                ]
            },
            {
                'title': 'Desafio: Complete o C√≥digo',
                'type': 'code_completion',
                'exercises': [
                    {
                        'instruction': 'B√ÅSICO: Complete o input que pede o nome',
                        'starter': 'print("Programa de Boas-vindas")\n# Complete aqui\nprint(f"Bem-vindo, {nome}!")',
                        'solution': 'nome = input("Digite seu nome: ")',
                        'type': 'input_simple'
                    },
                    {
                        'instruction': 'INTERMEDI√ÅRIO: Complete o c√≥digo que soma dois n√∫meros',
                        'starter': 'print("Calculadora")\nnum1 = input("Primeiro n√∫mero: ")\nnum2 = input("Segundo n√∫mero: ")\n# Complete aqui\nprint(f"Resultado: {resultado}")',
                        'solution': 'resultado = int(num1) + int(num2)',
                        'type': 'conversion'
                    },
                    {
                        'instruction': 'AVAN√áADO: Complete com f-string formatada',
                        'starter': 'produto = input("Nome do produto: ")\npreco = input("Pre√ßo: ")\n# Complete aqui\nprint("Cadastro finalizado!")',
                        'solution': 'print(f"üõçÔ∏è {produto.title()} por R$ {preco}")',
                        'type': 'fstring'
                    }
                ]
            },
            {
                'title': 'Exerc√≠cio Criativo: Criador de Fichas',
                'type': 'creative',
                'instruction': 'Crie um programa que pede 3 informa√ß√µes pessoais e cria uma ficha bonita!'
            }
        ]
        
        # === MENU PRINCIPAL DE EXERC√çCIOS ===
        while True:
            print("\nEscolha uma atividade:")
            print("1. üìù Quiz de Conhecimentos")
            print("2. üíª Complete o C√≥digo")
            print("3. üé® Exerc√≠cio Criativo")
            print("0. Continuar para o Mini Projeto")
            
            try:
                escolha = input("\nüëâ Sua escolha: ").strip().lower()
                
                if escolha in ["0", "continuar", "sair", "proximo"]:
                    break
                elif escolha in ["1", "quiz", "conhecimentos"]:
                    try:
                        self._run_quiz(exercicios[0])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Quiz interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no quiz. Continuando...")
                elif escolha in ["2", "codigo", "completar"]:
                    try:
                        self._run_code_completion(exercicios[1])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio de c√≥digo interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio de c√≥digo. Continuando...")
                elif escolha in ["3", "criativo"]:
                    try:
                        self._run_creative_exercise(exercicios[2])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio criativo interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio criativo. Continuando...")
                elif escolha in ["help", "ajuda", "h", "?"]:
                    self._show_help()
                else:
                    self.print_warning("‚ùå Op√ß√£o inv√°lida! Digite 1, 2, 3, 0 ou 'help' para ajuda.")
                    
            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Opera√ß√£o cancelada pelo usu√°rio. Voltando ao menu principal...")
                return
            except Exception as e:
                self.print_warning("‚ùå Erro inesperado no menu. Tente novamente.")
    
    def _show_help(self) -> None:
        """Mostra ajuda sobre as op√ß√µes dispon√≠veis"""
        self.print_section("AJUDA - SE√á√ÉO DE PR√ÅTICA", "‚ùì", "info")
        help_text = [
            "üìù OP√á√ÉO 1 - Quiz: Teste seus conhecimentos sobre entrada de dados",
            "üíª OP√á√ÉO 2 - Complete o C√≥digo: 3 exerc√≠cios progressivos",
            "üé® OP√á√ÉO 3 - Exerc√≠cio Criativo: Crie um programa de fichas",
            "üî¢ OP√á√ÉO 0 - Continue para o Mini Projeto final",
            "",
            "üí° DICAS:",
            "‚Ä¢ Voc√™ pode digitar o n√∫mero ou palavras como 'quiz', 'codigo'",
            "‚Ä¢ Digite 'help' a qualquer momento para ver esta ajuda",
            "‚Ä¢ Use Ctrl+C se quiser voltar ao menu principal",
            "‚Ä¢ Recomendamos fazer todas as atividades para aprender melhor!"
        ]
        
        for line in help_text:
            if line:
                self.print_colored(f"  {line}", "text")
            else:
                print()
        
        input("\nüî∏ Pressione ENTER para voltar ao menu...")
    
    def _run_quiz(self, quiz_data: dict) -> None:
        """Executa um quiz interativo"""
        self.print_section(quiz_data['title'], "üìù")
        score = 0
        total_questions = len(quiz_data['questions'])
        
        for i, q in enumerate(quiz_data['questions'], 1):
            print(f"\nüìù Pergunta {i} de {total_questions}:")
            correto = self.exercicio(
                q['question'],
                q['answer'],
                q['hint']
            )
            if correto:
                score += 1
        
        # Feedback detalhado baseado na pontua√ß√£o
        percentage = (score / total_questions) * 100
        
        self.print_success(f"\nüèÜ RESULTADO: {score} de {total_questions} perguntas corretas ({percentage:.0f}%)")
        
        if percentage == 100:
            self.print_success("üåü PERFEITO! Voc√™ dominou entrada de dados!")
        elif percentage >= 80:
            self.print_success("üéâ MUITO BEM! Voc√™ entende bem o assunto!")
        elif percentage >= 60:
            self.print_colored("üòä BOM TRABALHO! Revise alguns conceitos.", "warning")
        else:
            self.print_colored("üìö Continue estudando! Releia o conte√∫do.", "info")
            
        self.pausar()
    
    def _run_code_completion(self, exercise_data: dict) -> None:
        """Executa exerc√≠cio de completar c√≥digo"""
        self.print_section(exercise_data['title'], "üíª")
        
        for i, ex in enumerate(exercise_data['exercises'], 1):
            print(f"\nüéØ EXERC√çCIO {i} de {len(exercise_data['exercises'])}:")
            print(f"üìù {ex['instruction']}")
            self.print_code_section("C√≥digo Inicial", ex['starter'])
            
            exercise_type = ex.get('type', 'simple')
            
            if exercise_type == 'input_simple':
                print("\n‚úçÔ∏è Complete com um input() que pede o nome:")
                print("üí° Formato: variavel = input('mensagem')")
                user_input = input(">>> ").strip()
                if 'input(' in user_input and 'nome' in user_input:
                    user_code = user_input
                else:
                    user_code = 'nome = input("Digite seu nome: ")'
                    self.print_tip("Usando solu√ß√£o padr√£o - lembre de usar input()")
                    
            elif exercise_type == 'conversion':
                print("\n‚úçÔ∏è Complete convertendo strings para n√∫meros e somando:")
                print("üí° Use int() para converter e + para somar")
                user_input = input(">>> ").strip()
                if 'int(' in user_input and '+' in user_input:
                    user_code = user_input
                else:
                    user_code = 'resultado = int(num1) + int(num2)'
                    self.print_tip("Usando solu√ß√£o padr√£o - lembre de usar int()")
                    
            elif exercise_type == 'fstring':
                print("\n‚úçÔ∏è Complete com uma f-string bonita:")
                print("üí° Use f'' e {} para vari√°veis, pode adicionar emojis!")
                user_input = input(">>> ").strip()
                if user_input:
                    if user_input.startswith('print(f'):
                        user_code = user_input
                    elif user_input.startswith('f"') or user_input.startswith("f'"):
                        user_code = f'print({user_input})'
                    else:
                        user_code = f'print(f"{user_input}")'
                else:
                    user_code = 'print(f"üõçÔ∏è {produto} por R$ {preco}")'
                    self.print_tip("Usando solu√ß√£o padr√£o.")
            else:
                print("\n‚úçÔ∏è Digite a linha que falta:")
                user_input = input(">>> ").strip()
                user_code = user_input if user_input else ex['solution']
            
            # Substitui no c√≥digo
            lines = ex['starter'].split('\n')
            for j, line in enumerate(lines):
                if '# Complete aqui' in line:
                    lines[j] = user_code
                    break
            complete_code = '\n'.join(lines)
            
            print("\nüöÄ Executando seu c√≥digo completo:")
            self.executar_codigo(complete_code)
            
            print(f"\nüí° Solu√ß√£o sugerida: {ex['solution']}")
            self.print_success("‚úÖ Muito bem! Voc√™ completou o c√≥digo!")
            
            if i < len(exercise_data['exercises']):
                input("\nüî∏ Pressione ENTER para o pr√≥ximo exerc√≠cio...")
        
        self.pausar()
    
    def _run_creative_exercise(self, exercise_data: dict) -> None:
        """Executa exerc√≠cio criativo"""
        self.print_section(exercise_data['title'], "üé®")
        print(f"\n{exercise_data['instruction']}")
        print("üí° Exemplo: Nome, idade e hobby")
        print("üéØ Use input(), f-strings e deixe bonito com emojis!")
        
        print("\nüìù Vamos criar juntos:")
        
        try:
            campo1 = input("Que informa√ß√£o quer pedir? (ex: nome): ").strip()
            if not campo1:
                campo1 = "nome"
            
            campo2 = input("Segunda informa√ß√£o? (ex: idade): ").strip()
            if not campo2:
                campo2 = "idade"
                
            campo3 = input("Terceira informa√ß√£o? (ex: hobby): ").strip()
            if not campo3:
                campo3 = "hobby"
            
            print(f"\nüåü Criando ficha com: {campo1}, {campo2}, {campo3}")
            
            # Gera c√≥digo personalizado
            codigo_personalizado = f'''print("üìã CRIADOR DE FICHAS")
print("-" * 30)

{campo1} = input("üìù {campo1.capitalize()}: ")
{campo2} = input("üìù {campo2.capitalize()}: ")
{campo3} = input("üìù {campo3.capitalize()}: ")

print("\\n‚úÖ FICHA CRIADA!")
print("=" * 40)
print(f"üî∏ {campo1.capitalize()}: {{{campo1}}}")
print(f"üî∏ {campo2.capitalize()}: {{{campo2}}}")
print(f"üî∏ {campo3.capitalize()}: {{{campo3}}}")
print("=" * 40)
print("üéâ Ficha salva com sucesso!")'''
            
            print("\nüíª Seu c√≥digo personalizado:")
            self.print_code_section("SEU PROGRAMA", codigo_personalizado)
            
            print("\nüöÄ Executando seu programa:")
            self.executar_codigo(codigo_personalizado)
            
            self.print_success("\nüéâ Parab√©ns! Voc√™ criou um programa √∫nico!")
            
        except KeyboardInterrupt:
            self.print_warning("\nExerc√≠cio cancelado")
        
        self.pausar()
    
    def _mini_projeto_questionario_personalizado(self) -> None:
        """Mini Projeto - M√≥dulo 5: Question√°rio Personalizado"""
        
        # === CABE√áALHO IMPACTANTE ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üéØ MINI PROJETO: QUESTION√ÅRIO PERSONALIZADO")
        else:
            print("\n" + "="*50)
            print("üéØ MINI PROJETO: QUESTION√ÅRIO PERSONALIZADO")
            print("="*50)
        
        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_success("üéâ Vamos criar um question√°rio interativo completo!")
        
        self.print_concept(
            "Question√°rio Personalizado",
            "Um programa que faz perguntas, processa as respostas e\ngera um relat√≥rio personalizado com as informa√ß√µes."
        )
        
        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nEste tipo de programa √© usado em:", "text")
        usos_praticos = [
            "Pesquisas de satisfa√ß√£o em empresas",
            "Formul√°rios de cadastro em sites",
            "Quiz de personalidade em redes sociais",
            "Coleta de dados para pesquisas acad√™micas",
            "Sistemas de CRM (relacionamento com cliente)"
        ]
        for uso in usos_praticos:
            self.print_colored(f"‚Ä¢ {uso}", "accent")
        
        # === DESENVOLVIMENTO PASSO A PASSO ===
        
        # PASSO 1: Escolha do tema
        self.print_section("PASSO 1: Escolha do Tema", "üìù", "info")
        self.print_tip("Vamos criar um question√°rio sobre um tema de sua escolha!")
        
        temas_sugeridos = [
            "üé¨ Cinema e Filmes",
            "üçï Alimenta√ß√£o e Culin√°ria", 
            "üéÆ Games e Tecnologia",
            "üåç Viagens e Aventuras",
            "üìö Livros e Leitura",
            "üéµ M√∫sica e Shows",
            "‚öΩ Esportes e Atividades"
        ]
        
        print("\nüéØ Temas sugeridos:")
        for tema in temas_sugeridos:
            print(f"  {tema}")
        
        try:
            tema_escolhido = input("\n‚úçÔ∏è Escolha um tema (ou crie o seu): ").strip()
            if not tema_escolhido:
                tema_escolhido = "Interesses Pessoais"
            
            self.print_success(f"üéØ Tema escolhido: {tema_escolhido}!")
            
            # PASSO 2: Cria√ß√£o das perguntas
            self.print_section("PASSO 2: Definindo as Perguntas", "‚ùì", "success")
            self.print_colored("Vamos criar 4 perguntas sobre seu tema:", "text")
            
            perguntas = []
            for i in range(1, 5):
                pergunta = input(f"üìù Pergunta {i}: ").strip()
                if not pergunta:
                    pergunta = f"Qual √© seu/sua {tema_escolhido.lower()} favorito(a)?"
                perguntas.append(pergunta)
            
            # PASSO 3: Gera√ß√£o do c√≥digo
            self.print_section("PASSO 3: Gerando o Programa", "‚öôÔ∏è", "warning")
            self.print_colored("Criando seu question√°rio personalizado...", "text")
            
            # Cria√ß√£o do c√≥digo personalizado
            codigo_questionario = f'''#!/usr/bin/env python3
# üéØ QUESTION√ÅRIO: {tema_escolhido.upper()}
# Criado com Python

print("=" * 50)
print("üìã QUESTION√ÅRIO: {tema_escolhido.upper()}")
print("=" * 50)
print("üéØ Responda as perguntas abaixo:")
print()

# Coletando respostas
respostas = []

print("üìù Pergunta 1:")
resp1 = input("{perguntas[0]} ")
respostas.append(resp1)

print("\\nüìù Pergunta 2:")
resp2 = input("{perguntas[1]} ")
respostas.append(resp2)

print("\\nüìù Pergunta 3:")
resp3 = input("{perguntas[2]} ")
respostas.append(resp3)

print("\\nüìù Pergunta 4:")
resp4 = input("{perguntas[3]} ")
respostas.append(resp4)

# Processando dados
print("\\n‚è≥ Processando suas respostas...")
print("." * 20)

# Relat√≥rio final
print("\\n" + "=" * 60)
print("üìä SEU RELAT√ìRIO PERSONALIZADO")
print("=" * 60)
print(f"üéØ Tema: {tema_escolhido}")
print(f"üìÖ Data: 2024")
print("\\nüìù SUAS RESPOSTAS:")
print("-" * 30)

for i, (pergunta, resposta) in enumerate(zip(["{perguntas[0]}", "{perguntas[1]}", "{perguntas[2]}", "{perguntas[3]}"], respostas), 1):
    print(f"‚ùì {i}. {{pergunta}}")
    print(f"‚úÖ Sua resposta: {{resposta}}")
    print()

print("=" * 60)
print("üéâ Obrigado por participar!")
print("üìä Dados coletados com sucesso!")
print("=" * 60)

# Estat√≠sticas b√°sicas
total_caracteres = sum(len(resp) for resp in respostas)
resposta_mais_longa = max(respostas, key=len)

print("\\nüìà ESTAT√çSTICAS:")
print(f"üìù Total de respostas: 4")
print(f"üî§ Caracteres digitados: {{total_caracteres}}")
print(f"üìè Resposta mais elaborada: {{resposta_mais_longa[:30]}}...")
print("\\n‚ú® Question√°rio criado com Python!")'''

        except KeyboardInterrupt:
            self.print_warning("Projeto cancelado pelo usu√°rio")
            return
        
        # === C√ìDIGO FINAL GERADO ===
        self.print_colored("Aqui est√° o c√≥digo completo que voc√™ criou:", "text")
        self.exemplo(codigo_questionario)
        
        # === EXECU√á√ÉO DO RESULTADO ===
        self.print_section("RESULTADO FINAL", "üé¨", "warning")
        self.print_colored("üöÄ Executando seu question√°rio personalizado:", "text")
        self.executar_codigo(codigo_questionario)
        
        # === MENSAGEM DE CONQUISTA ===
        self.print_success("üéâ PARAB√âNS! Voc√™ criou um sistema completo de question√°rio!")
        
        # === APLICA√á√ïES AVAN√áADAS ===
        self.print_section("PR√ìXIMOS PASSOS", "üöÄ", "info")
        proximos_passos = [
            "Adicionar valida√ß√£o de respostas (verificar se n√£o est√° vazio)",
            "Salvar respostas em arquivo de texto",
            "Criar an√°lise autom√°tica das respostas",
            "Adicionar m√∫ltipla escolha nas perguntas",
            "Conectar com banco de dados para pesquisas grandes"
        ]
        for passo in proximos_passos:
            self.print_colored(f"‚Ä¢ {passo}", "primary")
        
        self.print_success("\nüèÜ CONQUISTA DESBLOQUEADA: Mestre em Entrada de Dados!")
        
        # === REGISTRO DE CONCLUS√ÉO ===
        self.complete_mini_project("Question√°rio Personalizado")
        
        self.pausar()


# Para teste standalone
if __name__ == "__main__":
    module = Modulo05EntradaDados()
    print("Teste do m√≥dulo 5 - vers√£o refatorada")
    module._entrada_dados_interativa()