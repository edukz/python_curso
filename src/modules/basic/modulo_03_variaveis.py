#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
M√≥dulo 3: Vari√°veis e Tipos de Dados
Aprenda sobre vari√°veis, a mem√≥ria do seu programa
"""

from ..shared.base_module import BaseModule


class Modulo03Variaveis(BaseModule):
    """M√≥dulo 3: Vari√°veis - A Mem√≥ria do Seu Programa"""
    
    def __init__(self):
        super().__init__("modulo_3", "Vari√°veis e Tipos de Dados")
        self.has_mini_project = True
        self.mini_project_points = 50
    
    def execute(self) -> None:
        """Executa o m√≥dulo Vari√°veis"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return

        try:
            self._variaveis_interativo()
        except Exception as e:
            self.error_handler(lambda: None)
    
    def _variaveis_interativo(self) -> None:
        """Conte√∫do principal do m√≥dulo Vari√°veis"""
        # === CABE√áALHO VISUAL ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üéØ M√ìDULO 3: VARI√ÅVEIS - A MEM√ìRIA DO SEU PROGRAMA")
        else:
            print("\n" + "="*50)
            print("üéØ M√ìDULO 3: VARI√ÅVEIS - A MEM√ìRIA DO SEU PROGRAMA")
            print("="*50)

        # === MENSAGENS MOTIVACIONAIS ===
        self.print_success("üéâ Chegou a hora de aprender sobre vari√°veis - a base de todo programa!")
        self.print_tip("Este m√≥dulo est√° dividido em se√ß√µes interativas. Voc√™ controla o ritmo!")

        # === FLUXO PRINCIPAL COM TRATAMENTO DE CTRL+C ===

        # 1. Sistema de navega√ß√£o por se√ß√µes
        try:
            self._navegacao_secoes_interativas()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Navega√ß√£o interrompida pelo usu√°rio. Voltando ao menu principal...")
            return

        # 2. Se√ß√£o de Pr√°tica Interativa
        try:
            self._secao_pratica_interativa()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è M√≥dulo interrompido pelo usu√°rio. Voltando ao menu principal...")
            return

        # 3. Mini Projeto Pr√°tico
        try:
            self._mini_projeto_cartao_apresentacao()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Mini projeto interrompido. Voltando ao menu principal...")
            return

        # 4. Marcar m√≥dulo como completo
        self.complete_module()

    def _navegacao_secoes_interativas(self) -> None:
        """Sistema de navega√ß√£o por se√ß√µes do m√≥dulo"""

        # === DEFINI√á√ÉO DAS SE√á√ïES ===
        secoes = [
            {
                'id': 'secao_o_que_sao_variaveis',
                'titulo': 'üéØ O que s√£o vari√°veis?',
                'descricao': 'Entenda o conceito fundamental de vari√°veis',
                'funcao': self._secao_o_que_sao_variaveis
            },
            {
                'id': 'secao_como_criar_variaveis',
                'titulo': 'üõ†Ô∏è Como criar e usar vari√°veis',
                'descricao': 'Aprenda a sintaxe e atribui√ß√£o de valores',
                'funcao': self._secao_como_criar_variaveis
            },
            {
                'id': 'secao_tipos_dados',
                'titulo': 'üìä Tipos de dados em Python',
                'descricao': 'Explore strings, n√∫meros e booleanos',
                'funcao': self._secao_tipos_dados
            },
            {
                'id': 'secao_nomes_variaveis',
                'titulo': 'üè∑Ô∏è Regras para nomes de vari√°veis',
                'descricao': 'Aprenda as conven√ß√µes e restri√ß√µes',
                'funcao': self._secao_nomes_variaveis
            },
            {
                'id': 'secao_operacoes_variaveis',
                'titulo': '‚öôÔ∏è Opera√ß√µes com vari√°veis',
                'descricao': 'Descubra como manipular e combinar vari√°veis',
                'funcao': self._secao_operacoes_variaveis
            },
            {
                'id': 'secao_boas_praticas',
                'titulo': '‚≠ê Boas pr√°ticas e dicas profissionais',
                'descricao': 'Segredos para escrever c√≥digo limpo e leg√≠vel',
                'funcao': self._secao_boas_praticas
            },
            {
                'id': 'secao_mundo_real',
                'titulo': 'üåç Vari√°veis no mundo real',
                'descricao': 'Veja como vari√°veis s√£o usadas em aplica√ß√µes reais',
                'funcao': self._secao_mundo_real
            }
        ]

        secoes_visitadas = set()

        # === LOOP PRINCIPAL DE NAVEGA√á√ÉO ===
        while True:
            # Limpa tela e mostra cabe√ßalho
            self.ui.clear_screen() if self.ui else print("\n" + "="*50)
            self.print_section("NAVEGA√á√ÉO DO M√ìDULO", "üìö", "accent")
            self.print_colored("Escolha uma se√ß√£o para estudar:", "text")

            # Lista todas as se√ß√µes com status
            print()
            for i, secao in enumerate(secoes, 1):
                status = "‚úÖ" if secao['id'] in secoes_visitadas else "üìñ"
                print(f"{status} {i}. {secao['titulo']}")
                self.print_colored(f"    {secao['descricao']}", "text")
                print()

            print("0. üéØ Continuar para os Exerc√≠cios Pr√°ticos")

            # Mostra progresso visual
            progresso = len(secoes_visitadas)
            total = len(secoes)
            self.print_colored(f"\nüìä Progresso: {progresso}/{total} se√ß√µes visitadas", "info")

            if progresso == total:
                self.print_success("üåü Voc√™ completou todas as se√ß√µes! Est√° pronto para praticar!")

            # Processa escolha do usu√°rio
            try:
                escolha = input(f"\nüëâ Escolha uma se√ß√£o (1-{len(secoes)}) ou 0 para continuar: ").strip()

                if escolha == "0":
                    # Verifica se visitou se√ß√µes suficientes
                    if progresso >= 3:  # Pelo menos 3 se√ß√µes visitadas
                        break
                    else:
                        self.print_warning("üìö Recomendamos visitar pelo menos 3 se√ß√µes antes de continuar!")
                        continuar = input("Quer continuar mesmo assim? (s/n): ").lower()
                        if continuar in ['s', 'sim', 'yes']:
                            break
                elif escolha.isdigit() and 1 <= int(escolha) <= len(secoes):
                    # Executa se√ß√£o escolhida
                    idx = int(escolha) - 1
                    secoes[idx]['funcao']()
                    secoes_visitadas.add(secoes[idx]['id'])
                else:
                    self.print_warning(f"‚ùå Op√ß√£o inv√°lida! Digite um n√∫mero de 1 a {len(secoes)} ou 0.")

            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Pulando para exerc√≠cios pr√°ticos...")
                break
            except Exception as e:
                self.print_warning(f"‚ùå Erro: {str(e)}. Tente novamente.")

    def _secao_o_que_sao_variaveis(self) -> None:
        """Se√ß√£o: O que s√£o vari√°veis?"""
        if self.ui:
            self.ui.clear_screen()

        # === CABE√áALHO ATRATIVO ===
        self.print_section("O QUE S√ÉO VARI√ÅVEIS?", "üéØ")

        # === DEFINI√á√ÉO DO CONCEITO ===
        self.print_concept(
            "Vari√°vel",
            "Um espa√ßo na mem√≥ria do computador onde guardamos informa√ß√µes que podem mudar"
        )

        # === DICA RELACIONADA ===
        self.print_tip("Pense nas vari√°veis como gavetas etiquetadas onde voc√™ guarda seus pertences!")

        # === ANALOGIA DO COTIDIANO ===
        self.print_colored("\nüè† ANALOGIA DO DIA A DIA:", "warning")
        self.print_colored("Imagine seu guarda-roupa com gavetas etiquetadas:", "text")
        input("\nüî∏ Pressione ENTER para continuar...")

        # === EXPLICA√á√ÉO T√âCNICA GRADUAL ===
        self.print_colored("\nüîß COMO FUNCIONA NA PR√ÅTICA:", "info")
        passos_tecnicos = [
            "1. Voc√™ cria uma 'gaveta' com nome (ex: nome = 'Jo√£o')",
            "2. O Python reserva espa√ßo na mem√≥ria para guardar 'Jo√£o'",
            "3. Sempre que usar 'nome', Python busca o valor guardado",
            "4. Voc√™ pode trocar o conte√∫do quando quiser (nome = 'Maria')"
        ]

        for i, passo in enumerate(passos_tecnicos, 1):
            self.print_colored(passo, "text")
            if i < len(passos_tecnicos):
                input("   ‚è≥ Pressione ENTER para o pr√≥ximo passo...")

        # === EXEMPLO DE C√ìDIGO ===
        self.print_colored("\nüíª EXEMPLO PR√ÅTICO:", "success")
        codigo_exemplo = '''nome = "Python"
idade = 30
print("Linguagem:", nome)
print("Idade:", idade)'''
        self.exemplo(codigo_exemplo)

        # Executa o c√≥digo para mostrar resultado
        print("\nüöÄ Vamos ver funcionando:")
        self.executar_codigo(codigo_exemplo)

        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nüåç ONDE VARI√ÅVEIS S√ÉO USADAS NO MUNDO REAL:", "accent")
        aplicacoes = [
            "Instagram - guardar seu nome de usu√°rio e n√∫mero de seguidores",
            "Netflix - armazenar seu hist√≥rico de filmes assistidos",
            "WhatsApp - salvar suas mensagens e contatos",
            "Bancos - manter saldo da conta e hist√≥rico de transa√ß√µes",
            "Jogos - armazenar pontua√ß√£o, n√≠vel e itens do jogador"
        ]
        for app in aplicacoes:
            self.print_colored(f"‚Ä¢ {app}", "primary")

        self.pausar()

    def _secao_como_criar_variaveis(self) -> None:
        """Se√ß√£o: Como criar e usar vari√°veis"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("COMO CRIAR E USAR VARI√ÅVEIS", "üõ†Ô∏è")

        # === DEFINI√á√ÉO DO CONCEITO ===
        self.print_concept(
            "Atribui√ß√£o",
            "O processo de dar um valor para uma vari√°vel usando o sinal ="
        )

        # === ANALOGIA DO COTIDIANO ===
        self.print_colored("\nüè† ANALOGIA DO DIA A DIA:", "warning")
        self.print_colored("√â como colar uma etiqueta numa caixa e colocar algo dentro:", "text")
        self.print_colored("‚Ä¢ Caixa = nome da vari√°vel", "text")
        self.print_colored("‚Ä¢ Etiqueta = nome que voc√™ escolhe", "text")
        self.print_colored("‚Ä¢ Conte√∫do = valor que voc√™ guarda", "text")
        input("\nüî∏ Pressione ENTER para continuar...")

        # === SINTAXE ===
        self.print_colored("\nüîß SINTAXE B√ÅSICA:", "info")
        self.print_colored("nome_da_variavel = valor", "success")
        
        print("\nüéØ Leia sempre da DIREITA para ESQUERDA:")
        print("   nome = 'Jo√£o'")
        print("   ‚Üë       ‚Üë")
        print("   |       ‚îî‚îÄ Valor que vai ser guardado")
        print("   ‚îî‚îÄ Nome da caixa onde vai ser guardado")

        # === EXEMPLOS PR√ÅTICOS ===
        self.print_colored("\nüíª EXEMPLOS PR√ÅTICOS:", "warning")
        
        exemplos = [
            {
                'titulo': 'EXEMPLO 1: Criando vari√°veis simples',
                'codigo': '''nome = "Ana"
idade = 25
cidade = "S√£o Paulo"
print(f"Ol√°, {nome}! Voc√™ tem {idade} anos e mora em {cidade}.")
print(f"Nome: {nome}")
print(f"Idade: {idade}")
print(f"Cidade: {cidade}")'''
            },
            {
                'titulo': 'EXEMPLO 2: Vari√°veis podem mudar',
                'codigo': '''pontos = 0
print(f"Pontos iniciais: {pontos}")

pontos = 50
print(f"Depois de ganhar: {pontos}")

pontos = pontos + 25
print(f"Depois de ganhar mais: {pontos}")'''
            }
        ]

        for i, exemplo in enumerate(exemplos, 1):
            self.print_colored(f"\n{exemplo['titulo']}", "warning")
            self.print_code_section("C√ìDIGO", exemplo['codigo'])
            print("\nüöÄ Executando exemplo:")
            self.executar_codigo(exemplo['codigo'])
            
            if i < len(exemplos):
                input("\nüî∏ Pressione ENTER para o pr√≥ximo exemplo...")

        self.print_success("\nüéâ Agora voc√™ sabe criar e modificar vari√°veis!")
        self.pausar()

    def _secao_tipos_dados(self) -> None:
        """Se√ß√£o: Tipos de dados em Python"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("TIPOS DE DADOS EM PYTHON", "üìä")

        # === DEFINI√á√ÉO DO CONCEITO ===
        self.print_concept(
            "Tipos de Dados",
            "Diferentes categorias de informa√ß√µes que podemos guardar em vari√°veis"
        )

        # === TIPOS PRINCIPAIS ===
        tipos = [
            {
                'nome': 'STRING (texto)',
                'simbolo': 'üî§',
                'descricao': 'Qualquer texto entre aspas',
                'exemplos': ['"Ol√°"', "'Python'", '"123 texto"'],
                'codigo': '''nome = "Python"
mensagem = 'Ol√°, mundo!'
codigo = "ABC123"
print(f"Nome: {nome}")
print(f"Mensagem: {mensagem}")
print(f"C√≥digo: {codigo}")'''
            },
            {
                'nome': 'INTEGER (n√∫mero inteiro)',
                'simbolo': 'üî¢',
                'descricao': 'N√∫meros sem v√≠rgula',
                'exemplos': ['42', '-10', '0'],
                'codigo': '''idade = 25
pontos = 1500
temperatura = -5
print(f"Idade: {idade}")
print(f"Pontos: {pontos}")
print(f"Temperatura: {temperatura}¬∞C")'''
            },
            {
                'nome': 'FLOAT (n√∫mero decimal)',
                'simbolo': 'üìä',
                'descricao': 'N√∫meros com v√≠rgula (usa ponto)',
                'exemplos': ['3.14', '1.75', '-2.5'],
                'codigo': '''altura = 1.75
preco = 29.90
pi = 3.14159
print(f"Altura: {altura}m")
print(f"Pre√ßo: R$ {preco}")
print(f"Pi: {pi}")'''
            },
            {
                'nome': 'BOOLEAN (verdadeiro/falso)',
                'simbolo': '‚úÖ',
                'descricao': 'Apenas True ou False',
                'exemplos': ['True', 'False'],
                'codigo': '''ativo = True
chuva = False
maior_idade = True
print(f"Usu√°rio ativo: {ativo}")
print(f"Est√° chovendo: {chuva}")
print(f"Maior de idade: {maior_idade}")'''
            }
        ]

        for i, tipo in enumerate(tipos, 1):
            self.print_colored(f"\n{tipo['simbolo']} {tipo['nome']}", "warning")
            self.print_colored(f"üìù {tipo['descricao']}", "text")
            
            self.print_colored("\n‚ú® Exemplos:", "info")
            for exemplo in tipo['exemplos']:
                self.print_colored(f"  ‚Ä¢ {exemplo}", "primary")
                
            self.print_code_section("C√ìDIGO PR√ÅTICO", tipo['codigo'])
            print("\nüöÄ Resultado:")
            self.executar_codigo(tipo['codigo'])
            
            if i < len(tipos):
                input("\nüî∏ Pressione ENTER para o pr√≥ximo tipo...")

        self.print_success("\nüéâ Agora voc√™ conhece os tipos b√°sicos de dados em Python!")
        self.pausar()

    def _secao_nomes_variaveis(self) -> None:
        """Se√ß√£o: Regras para nomes de vari√°veis"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("REGRAS PARA NOMES DE VARI√ÅVEIS", "üè∑Ô∏è")

        # === REGRAS B√ÅSICAS ===
        self.print_colored("üìù REGRAS OBRIGAT√ìRIAS:", "warning")
        regras = [
            "‚úÖ Pode usar letras (a-z, A-Z)",
            "‚úÖ Pode usar n√∫meros (0-9) - mas N√ÉO no in√≠cio",
            "‚úÖ Pode usar underscore (_)",
            "‚ùå N√£o pode ter espa√ßos",
            "‚ùå N√£o pode ter acentos ou caracteres especiais",
            "‚ùå N√£o pode come√ßar com n√∫meros",
            "‚ùå N√£o pode usar palavras reservadas do Python"
        ]
        
        for regra in regras:
            self.print_colored(f"  {regra}", "text")

        # === EXEMPLOS V√ÅLIDOS E INV√ÅLIDOS ===
        self.print_colored("\n‚úÖ NOMES V√ÅLIDOS:", "success")
        validos = ["nome", "idade", "nome_completo", "salario2023", "_temperatura", "PI"]
        for nome in validos:
            self.print_colored(f"  ‚Ä¢ {nome}", "text")
            
        self.print_colored("\n‚ùå NOMES INV√ÅLIDOS:", "red")
        invalidos = [
            ("2nome", "come√ßa com n√∫mero"),
            ("nome completo", "tem espa√ßo"),
            ("sal√°rio", "tem acento"),
            ("for", "palavra reservada"),
            ("nome@", "caractere especial")
        ]
        for nome, motivo in invalidos:
            self.print_colored(f"  ‚Ä¢ {nome} - {motivo}", "text")

        # === CONVEN√á√ïES ===
        self.print_colored("\nüé® CONVEN√á√ïES DE NOMENCLATURA:", "info")
        convencoes = [
            ("snake_case", "nome_da_variavel", "Recomendado em Python"),
            ("camelCase", "nomeDaVariavel", "Comum em outras linguagens"),
            ("PascalCase", "NomeDaVariavel", "Para classes"),
            ("CONSTANTS", "VALOR_FIXO", "Para constantes")
        ]
        
        for estilo, exemplo, uso in convencoes:
            self.print_colored(f"  ‚Ä¢ {estilo}: {exemplo} - {uso}", "primary")

        # === CASE SENSITIVE ===
        self.print_colored("\n‚ö†Ô∏è PYTHON √â CASE-SENSITIVE:", "warning")
        codigo_case = '''nome = "Jo√£o"
Nome = "Maria"
NOME = "Pedro"

print(f"nome: {nome}")
print(f"Nome: {Nome}")
print(f"NOME: {NOME}")
print("S√£o 3 vari√°veis DIFERENTES!")'''
        
        self.exemplo(codigo_case)
        self.executar_codigo(codigo_case)

        self.pausar()

    def _secao_operacoes_variaveis(self) -> None:
        """Se√ß√£o: Opera√ß√µes com vari√°veis"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("OPERA√á√ïES COM VARI√ÅVEIS", "‚öôÔ∏è")

        # === OPERA√á√ïES MATEM√ÅTICAS ===
        self.print_colored("üßÆ OPERA√á√ïES MATEM√ÅTICAS:", "warning")
        codigo_math = '''a = 10
b = 3

soma = a + b
subtracao = a - b
multiplicacao = a * b
divisao = a / b

print(f"a = {a}, b = {b}")
print(f"Soma: {a} + {b} = {soma}")
print(f"Subtra√ß√£o: {a} - {b} = {subtracao}")
print(f"Multiplica√ß√£o: {a} * {b} = {multiplicacao}")
print(f"Divis√£o: {a} / {b} = {divisao:.2f}")'''
        
        self.exemplo(codigo_math)
        self.executar_codigo(codigo_math)

        # === OPERA√á√ïES COM STRINGS ===
        self.print_colored("\nüî§ OPERA√á√ïES COM TEXTO:", "info")
        codigo_string = '''nome = "Python"
versao = "3.12"

# Concatena√ß√£o (juntar textos)
linguagem_completa = nome + " " + versao

# Repeti√ß√£o
separador = "-" * 20

print(separador)
print(f"Linguagem: {linguagem_completa}")
print(f"Nome repetido: {nome * 3}")
print(separador)'''
        
        self.exemplo(codigo_string)
        self.executar_codigo(codigo_string)

        # === OPERA√á√ïES DE ATRIBUI√á√ÉO ===
        self.print_colored("\nüîÑ ATUALIZA√á√ÉO DE VARI√ÅVEIS:", "success")
        codigo_update = '''pontos = 100
print(f"Pontos iniciais: {pontos}")

# Formas de atualizar
pontos = pontos + 50  # Forma longa
print(f"Ap√≥s ganhar 50: {pontos}")

pontos += 30  # Forma curta (equivale a: pontos = pontos + 30)
print(f"Ap√≥s ganhar mais 30: {pontos}")

pontos -= 20  # Subtrair
print(f"Ap√≥s perder 20: {pontos}")

pontos *= 2  # Multiplicar
print(f"Ap√≥s dobrar: {pontos}")'''
        
        self.exemplo(codigo_update)
        self.executar_codigo(codigo_update)

        self.pausar()

    def _secao_boas_praticas(self) -> None:
        """Se√ß√£o: Boas pr√°ticas e dicas profissionais"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("BOAS PR√ÅTICAS E DICAS PROFISSIONAIS", "‚≠ê")

        dicas = [
            {
                'titulo': 'üìù DICA 1: Use nomes descritivos',
                'ruim': '''x = 1000
y = 0.08
z = x * y''',
                'bom': '''preco_produto = 1000
taxa_desconto = 0.08
desconto = preco_produto * taxa_desconto'''
            },
            {
                'titulo': 'üìä DICA 2: Seja consistente com o estilo',
                'ruim': '''nomeUsuario = "Jo√£o"
idade_usuario = 25
UserActive = True''',
                'bom': '''nome_usuario = "Jo√£o"
idade_usuario = 25
usuario_ativo = True'''
            },
            {
                'titulo': 'üìã DICA 3: Agrupe vari√°veis relacionadas',
                'ruim': '''x = "Jo√£o"
y = 25
z = "joao@email.com"
a = True''',
                'bom': '''# Dados do usu√°rio
nome_usuario = "Jo√£o"
idade_usuario = 25
email_usuario = "joao@email.com"
usuario_ativo = True'''
            }
        ]

        for i, dica in enumerate(dicas, 1):
            self.print_colored(f"\n{dica['titulo']}", "warning")
            
            self.print_colored("‚ùå RUIM:", "red")
            self.print_code_section("Evite", dica['ruim'])
            
            self.print_colored("‚úÖ BOM:", "green")
            self.print_code_section("Prefira", dica['bom'])
            
            if i < len(dicas):
                input("\nüî∏ Pressione ENTER para a pr√≥xima dica...")

        self.print_success("\nüåü Agora voc√™ tem dicas valiosas para escrever c√≥digo profissional!")
        self.pausar()

    def _secao_mundo_real(self) -> None:
        """Se√ß√£o: Vari√°veis no mundo real"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("VARI√ÅVEIS NO MUNDO REAL", "üåç")

        # === EXEMPLOS DE APLICA√á√ïES ===
        aplicacoes = [
            {
                'nome': 'üì± REDES SOCIAIS',
                'exemplo': '''# Instagram
nome_usuario = "python_dev"
seguidores = 15420
posts = 247
verificado = True
bio = "Desenvolvedor Python üêç"'''
            },
            {
                'nome': 'üéÆ JOGOS',
                'exemplo': '''# RPG Online
nome_personagem = "DragonSlayer"
nivel = 45
vida = 850
mana = 320
classe = "Mago"
exp_atual = 15750'''
            },
            {
                'nome': 'üí≥ SISTEMA BANC√ÅRIO',
                'exemplo': '''# Conta corrente
numero_conta = "12345-6"
titular = "Maria Silva"
saldo = 2500.75
limite = 1000.00
conta_ativa = True
agencia = "0001"'''
            },
            {
                'nome': 'üìö E-LEARNING',
                'exemplo': '''# Curso online
aluno = "Jo√£o Santos"
curso_atual = "Python para Iniciantes"
progresso = 75  # percentual
modulos_completos = 8
modulos_total = 12
certificado_disponivel = False'''
            }
        ]

        for aplicacao in aplicacoes:
            self.print_colored(f"\n{aplicacao['nome']}", "warning")
            self.exemplo(aplicacao['exemplo'])
            self.executar_codigo(aplicacao['exemplo'])
            input("\nüî∏ Pressione ENTER para o pr√≥ximo exemplo...")

        self.print_success("\nüéâ Voc√™ viu como vari√°veis est√£o em tudo que usamos!")
        self.pausar()
    
    def _mini_projeto_cartao_apresentacao(self) -> None:
        """Mini Projeto - M√≥dulo 3: Cart√£o de Apresenta√ß√£o Personalizado"""
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üéØ MINI PROJETO: CART√ÉO DE APRESENTA√á√ÉO PERSONALIZADO")
        else:
            print("\n" + "="*50)
            print("üéØ MINI PROJETO: CART√ÉO DE APRESENTA√á√ÉO PERSONALIZADO")
            print("="*50)
        
        self.print_success("üéâ Vamos criar seu projeto pr√°tico aplicando tudo sobre vari√°veis!")

        self.print_concept(
            "Cart√£o de Apresenta√ß√£o Personalizado",
            "Um programa que cria um cart√£o profissional usando vari√°veis para armazenar informa√ß√µes pessoais"
        )

        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nEste tipo de programa √© √∫til para:", "text")
        usos_praticos = [
            "LinkedIn - criar perfis profissionais autom√°ticos",
            "Eventos corporativos - gerar crach√°s personalizados",
            "Freelancers - criar propostas com dados pessoais",
            "Redes sociais - bio din√¢mica baseada em vari√°veis"
        ]
        for uso in usos_praticos:
            self.print_colored(f"‚Ä¢ {uso}", "accent")
        
        # === DESENVOLVIMENTO PASSO A PASSO ===

        # PASSO 1: Coleta de informa√ß√µes
        self.print_section("PASSO 1: Coletando suas informa√ß√µes", "üìù", "info")
        self.print_tip("Vamos criar vari√°veis para armazenar seus dados pessoais")

        try:
            print("\nüë§ Vamos personalizar seu cart√£o de apresenta√ß√£o!")
            nome_completo = input("üë§ Qual √© o seu nome completo? ").strip() or "Ana Silva"
            profissao = input("üíº Qual √© a sua profiss√£o? ").strip() or "Desenvolvedora Python"
            empresa = input("üè¢ Onde voc√™ trabalha/estuda? ").strip() or "TechCorp"
            cidade = input("üåÜ Em que cidade voc√™ mora? ").strip() or "S√£o Paulo"
            anos_experiencia = input("üìÖ Quantos anos de experi√™ncia? ").strip() or "3"
            linguagem_favorita = input("üêç Qual sua linguagem de programa√ß√£o favorita? ").strip() or "Python"
            
        except KeyboardInterrupt:
            self.print_warning("Projeto cancelado pelo usu√°rio")
            return

        # PASSO 2: Processamento dos dados
        self.print_section("PASSO 2: Organizando os dados em vari√°veis", "‚öôÔ∏è", "success")
        self.print_colored("Agora vamos criar vari√°veis para organizar suas informa√ß√µes:", "text")

        # PASSO 3: Gera√ß√£o do cart√£o
        self.print_section("PASSO 3: Gerando seu cart√£o de apresenta√ß√£o", "üé¨", "warning")

        # === C√ìDIGO FINAL GERADO ===
        self.print_colored("Aqui est√° o c√≥digo completo que voc√™ criou:", "text")

        codigo_final = f'''# üêç PROJETO: CART√ÉO DE APRESENTA√á√ÉO PERSONALIZADO
# M√≥dulo 3: Vari√°veis

# === INFORMA√á√ïES PESSOAIS (usando vari√°veis) ===
nome_completo = "{nome_completo}"
profissao = "{profissao}"
empresa = "{empresa}"
cidade = "{cidade}"
anos_experiencia = {anos_experiencia}
linguagem_favorita = "{linguagem_favorita}"

# === DADOS CALCULADOS ===
nivel_experiencia = "Iniciante" if anos_experiencia < 2 else "Intermedi√°rio" if anos_experiencia < 5 else "Avan√ßado"
email_profissional = nome_completo.lower().replace(" ", ".") + "@" + empresa.lower() + ".com"

# === GERA√á√ÉO DO CART√ÉO ===
print("‚ïê" * 60)
print("               üéÜ CART√ÉO DE APRESENTA√á√ÉO üéÜ")
print("‚ïê" * 60)
print()
print(f"      üë§ {nome_completo}")
print(f"      üíº {profissao}")
print()
print("‚îÄ" * 60)
print()
print(f"  üè¢ Empresa: {empresa}")
print(f"  üåÜ Localiza√ß√£o: {cidade}")
print(f"  üìÖ Experi√™ncia: {anos_experiencia} anos ({nivel_experiencia})")
print(f"  üêç Especialidade: {linguagem_favorita}")
print(f"  üìß Email: {email_profissional}")
print()
print("‚îÄ" * 60)
print("           ‚ú® Conecte-se comigo! ‚ú®")
print("‚ïê" * 60)'''

        self.exemplo(codigo_final)

        # === EXECU√á√ÉO DO RESULTADO ===
        self.print_section("RESULTADO FINAL", "üé¨", "warning")
        self.executar_codigo(codigo_final)
        
        # === MENSAGEM DE CONQUISTA ===
        self.print_success("üéâ PARAB√âNS! Voc√™ criou seu projeto de cart√£o de apresenta√ß√£o!")

        # === APLICA√á√ïES AVAN√áADAS ===
        self.print_section("PR√ìXIMOS PASSOS", "üöÄ", "info")
        proximos_passos = [
            "Adicionar foto do perfil usando ASCII art",
            "Criar diferentes modelos de cart√£o (formal, criativo, etc.)",
            "Integrar com redes sociais para buscar informa√ß√µes automaticamente",
            "Salvar cart√µes em arquivos para reutilizar"
        ]
        for passo in proximos_passos:
            self.print_colored(f"‚Ä¢ {passo}", "primary")

        self.print_success("\nüèÜ CONQUISTA DESBLOQUEADA: Criador de Cart√µes Profissionais!")

        # === REGISTRO DE CONCLUS√ÉO ===
        self.complete_mini_project("Cart√£o de Apresenta√ß√£o Personalizado")
        
        self.pausar()
    
    def _secao_pratica_interativa(self) -> None:
        """Se√ß√£o de pr√°tica interativa do m√≥dulo"""

        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_section("HORA DE PRATICAR!", "üéØ", "success")
        self.print_colored("Vamos testar o que voc√™ aprendeu com exerc√≠cios pr√°ticos!", "text")

        # === INSTRU√á√ïES PARA INICIANTES ===
        self.print_tip("Para iniciantes: Cada exerc√≠cio √© opcional, mas recomendamos fazer todos!")
        self.print_colored("\nüéì SOBRE OS EXERC√çCIOS:", "info")
        self.print_colored("‚Ä¢ N√£o se preocupe se errar - faz parte do aprendizado!", "text")
        self.print_colored("‚Ä¢ Voc√™ pode tentar quantas vezes quiser", "text")
        self.print_colored("‚Ä¢ Digite 'help' se precisar de ajuda", "text")
        self.print_colored("‚Ä¢ Use Ctrl+C para voltar ao menu principal se necess√°rio", "text")

        # === DEFINI√á√ÉO DOS EXERC√çCIOS ===
        exercicios = [
            {
                'title': 'Quiz: Conhecimentos sobre Vari√°veis',
                'type': 'quiz',
                'questions': [
                    {
                        'question': 'O que √© uma vari√°vel em programa√ß√£o?',
                        'answer': ['espa√ßo na mem√≥ria', 'caixa', 'container', 'recipiente'],
                        'hint': 'Pense numa caixa etiquetada onde guardamos coisas'
                    },
                    {
                        'question': 'Qual o s√≠mbolo usado para atribuir valor a uma vari√°vel?',
                        'answer': ['=', 'igual'],
                        'hint': 'Usado em nome = "Jo√£o"'
                    },
                    {
                        'question': 'Em Python, "nome" e "Nome" s√£o a mesma vari√°vel? (sim/n√£o)',
                        'answer': ['n√£o', 'nao', 'diferentes'],
                        'hint': 'Python diferencia mai√∫sculas de min√∫sculas'
                    },
                    {
                        'question': 'Qual nome de vari√°vel √© V√ÅLIDO: "2nome" ou "nome2"?',
                        'answer': ['nome2'],
                        'hint': 'Vari√°veis n√£o podem come√ßar com n√∫meros'
                    },
                    {
                        'question': 'Que tipo de dado √© True ou False?',
                        'answer': ['boolean', 'bool', 'booleano'],
                        'hint': '√â um tipo que representa verdadeiro ou falso'
                    }
                ]
            },
            {
                'title': 'Desafio: Complete o C√≥digo',
                'type': 'code_completion',
                'exercises': [
                    {
                        'instruction': 'B√ÅSICO: Crie uma vari√°vel "nome" com seu nome e exiba',
                        'starter': '# Crie uma vari√°vel nome\n_____ = "_____"\nprint("Meu nome √©:", _____)',
                        'solution': 'nome = "Ana"\nprint("Meu nome √©:", nome)',
                        'type': 'simple'
                    },
                    {
                        'instruction': 'INTERMEDI√ÅRIO: Crie vari√°veis para idade e cidade, depois exiba tudo junto',
                        'starter': '# Complete o c√≥digo\nnome = "Jo√£o"\n_____ = 25\n_____ = "S√£o Paulo"\nprint(f"Ol√°, {_____}! Voc√™ tem {_____} anos e mora em {_____}")',
                        'solution': 'nome = "Jo√£o"\nidade = 25\ncidade = "S√£o Paulo"\nprint(f"Ol√°, {nome}! Voc√™ tem {idade} anos e mora em {cidade}")',
                        'type': 'intermediate'
                    },
                    {
                        'instruction': 'AVAN√áADO: Crie um sistema de pontos que aumenta e diminui',
                        'starter': '# Sistema de pontos\npontos = 0\n# Ganhou 50 pontos\npontos = _____\n# Ganhou mais 30\npontos _____ 30\n# Perdeu 20\npontos _____ 20\nprint(f"Pontos finais: {pontos}")',
                        'solution': 'pontos = 0\npontos = pontos + 50\npontos += 30\npontos -= 20\nprint(f"Pontos finais: {pontos}")',
                        'type': 'advanced'
                    }
                ]
            },
            {
                'title': 'Exerc√≠cio Criativo: Perfil Personalizado',
                'type': 'creative',
                'instruction': 'Crie vari√°veis para um perfil pessoal e exiba de forma criativa (nome, hobby, comida favorita, etc.)'
            }
        ]

        # === MENU PRINCIPAL DE EXERC√çCIOS ===
        while True:
            print("\nEscolha uma atividade:")
            print("1. üìù Quiz de Conhecimentos")
            print("2. üíª Complete o C√≥digo")
            print("3. üé® Exerc√≠cio Criativo")
            print("0. Continuar para o Mini Projeto")

            try:
                escolha = input("\nüëâ Sua escolha: ").strip().lower()

                if escolha in ["0", "continuar", "sair", "proximo"]:
                    break
                elif escolha in ["1", "quiz", "conhecimentos"]:
                    try:
                        self._run_quiz(exercicios[0])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Quiz interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no quiz. Continuando...")
                elif escolha in ["2", "codigo", "completar"]:
                    try:
                        self._run_code_completion(exercicios[1])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio de c√≥digo interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio de c√≥digo. Continuando...")
                elif escolha in ["3", "criativo"]:
                    try:
                        self._run_creative_exercise(exercicios[2])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio criativo interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio criativo. Continuando...")
                elif escolha in ["help", "ajuda", "h", "?"]:
                    self._show_help()
                else:
                    self.print_warning("‚ùå Op√ß√£o inv√°lida! Digite 1, 2, 3, 0 ou 'help' para ajuda.")

            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Opera√ß√£o cancelada pelo usu√°rio. Voltando ao menu principal...")
                return  # CR√çTICO: Return em vez de break para sair completamente
            except Exception as e:
                self.print_warning("‚ùå Erro inesperado no menu. Tente novamente.")

    def _show_help(self) -> None:
        """Mostra ajuda sobre as op√ß√µes dispon√≠veis"""
        self.print_section("AJUDA - SE√á√ÉO DE PR√ÅTICA", "‚ùì", "info")
        help_text = [
            "üìù OP√á√ÉO 1 - Quiz: Teste seus conhecimentos sobre vari√°veis",
            "üíª OP√á√ÉO 2 - Complete o C√≥digo: 3 exerc√≠cios progressivos",
            "üé® OP√á√ÉO 3 - Exerc√≠cio Criativo: Crie um perfil personalizado",
            "üî¢ OP√á√ÉO 0 - Continue para o Mini Projeto final",
            "",
            "üí° DICAS:",
            "‚Ä¢ Voc√™ pode digitar o n√∫mero ou palavras como 'quiz', 'codigo'",
            "‚Ä¢ Digite 'help' a qualquer momento para ver esta ajuda",
            "‚Ä¢ Use Ctrl+C se quiser voltar ao menu principal",
            "‚Ä¢ Recomendamos fazer todas as atividades para aprender melhor!"
        ]

        for line in help_text:
            if line:
                self.print_colored(f"  {line}", "text")
            else:
                print()

        input("\nüî∏ Pressione ENTER para voltar ao menu...")

    def _run_quiz(self, quiz_data) -> None:
        """Executa o quiz de conhecimentos"""
        self.print_section(quiz_data['title'], "üìù", "info")
        score = 0
        total = len(quiz_data['questions'])

        self.print_colored(f"Vamos testar seus conhecimentos com {total} perguntas!", "text")
        print()

        for i, q in enumerate(quiz_data['questions'], 1):
            self.print_colored(f"\nüìå PERGUNTA {i}/{total}:", "warning")
            self.print_colored(q['question'], "text")
            
            tentativas = 0
            max_tentativas = 2
            
            while tentativas < max_tentativas:
                try:
                    resposta = input("\nüëâ Sua resposta: ").strip().lower()
                    
                    if any(ans.lower() in resposta for ans in q['answer']):
                        self.print_success("‚úÖ Correto! Muito bem!")
                        score += 1
                        break
                    else:
                        tentativas += 1
                        if tentativas < max_tentativas:
                            self.print_warning(f"‚ùå N√£o √© isso. Dica: {q['hint']}")
                            self.print_colored("Tente novamente:", "text")
                        else:
                            self.print_warning(f"‚ùå A resposta era: {q['answer'][0]}")
                            
                except KeyboardInterrupt:
                    self.print_warning("\n‚ö†Ô∏è Quiz cancelado.")
                    return

        # Resultado final
        percentual = (score / total) * 100
        self.print_section("RESULTADO DO QUIZ", "üèÜ", "success")
        self.print_colored(f"Voc√™ acertou {score} de {total} perguntas ({percentual:.0f}%)", "text")
        
        if score == total:
            self.print_success("üåü PERFEITO! Voc√™ dominou completamente as vari√°veis!")
        elif score >= total * 0.8:
            self.print_success("üéâ EXCELENTE! Voc√™ entende muito bem vari√°veis!")
        elif score >= total * 0.6:
            self.print_colored("üëç BOM! Voc√™ est√° no caminho certo!", "info")
        else:
            self.print_colored("üìö Continue estudando! Revisite as se√ß√µes se necess√°rio.", "warning")
            
        self.pausar()

    def _run_code_completion(self, exercise_data) -> None:
        """Executa exerc√≠cios de completar c√≥digo"""
        self.print_section(exercise_data['title'], "üíª", "success")
        
        for i, exercise in enumerate(exercise_data['exercises'], 1):
            self.print_colored(f"\nüéØ EXERC√çCIO {i}: {exercise['type'].upper()}", "warning")
            self.print_colored(exercise['instruction'], "text")
            
            self.print_code_section("C√ìDIGO PARA COMPLETAR", exercise['starter'])
            
            print("\n‚úçÔ∏è Digite sua solu√ß√£o (ou 'skip' para pular):")
            try:
                resposta = input(">>> ").strip()
                
                if resposta.lower() == 'skip':
                    self.print_colored("‚è≠Ô∏è Exerc√≠cio pulado.", "warning")
                    continue
                    
                if resposta:
                    print("\nüöÄ Testando sua solu√ß√£o:")
                    try:
                        self.executar_codigo(resposta)
                        self.print_success("‚úÖ Sua solu√ß√£o funcionou!")
                        
                        ver_solucao = input("\nüí° Quer ver a solu√ß√£o sugerida? (s/n): ").lower()
                        if ver_solucao == 's':
                            self.print_colored("\nüîç SOLU√á√ÉO SUGERIDA:", "info")
                            self.exemplo(exercise['solution'])
                            
                    except Exception as e:
                        self.print_warning(f"‚ùå Erro ao executar: {str(e)}")
                        self.print_colored("\nüí° SOLU√á√ÉO CORRETA:", "info")
                        self.exemplo(exercise['solution'])
                        self.executar_codigo(exercise['solution'])
                        
            except KeyboardInterrupt:
                self.print_warning("\n‚ö†Ô∏è Exerc√≠cio cancelado.")
                return
                
        self.print_success("\nüéâ Parab√©ns! Voc√™ completou todos os exerc√≠cios de c√≥digo!")
        self.pausar()

    def _run_creative_exercise(self, exercise_data) -> None:
        """Executa exerc√≠cio criativo"""
        self.print_section(exercise_data['title'], "üé®", "accent")
        self.print_colored(exercise_data['instruction'], "text")
        
        print("\nüí° EXEMPLO:")
        exemplo_codigo = '''nome = "Ana"
hobby = "fotografia"
comida_favorita = "pizza"
filme_favorito = "Matrix"

print("=" * 30)
print(f"   üë§ {nome.upper()}")
print("=" * 30)
print(f"üé® Hobby: {hobby}")
print(f"üçï Comida: {comida_favorita}")
print(f"üé• Filme: {filme_favorito}")
print("=" * 30)'''
        
        self.exemplo(exemplo_codigo)
        self.executar_codigo(exemplo_codigo)
            
        print("\n‚úçÔ∏è Agora √© sua vez! Digite suas vari√°veis e c√≥digo (digite 'fim' para terminar):")
        
        linhas_codigo = []
        try:
            while True:
                linha = input(">>> ")
                if linha.lower() == 'fim':
                    break
                if linha.strip():
                    linhas_codigo.append(linha)
                    
        except KeyboardInterrupt:
            self.print_warning("\n‚ö†Ô∏è Exerc√≠cio cancelado.")
            return
            
        if linhas_codigo:
            codigo_completo = '\n'.join(linhas_codigo)
            print("\nüöÄ Sua cria√ß√£o:")
            try:
                self.executar_codigo(codigo_completo)
                self.print_success("\nüé® Fant√°stico! Voc√™ criou um perfil usando vari√°veis!")
            except Exception as e:
                self.print_warning(f"‚ùå Erro na execu√ß√£o: {str(e)}")
        else:
            self.print_colored("üëã Tudo bem, talvez na pr√≥xima vez!", "info")
            
        self.pausar()
    


# Para teste standalone
if __name__ == "__main__":
    module = Modulo03Variaveis()
    print("Teste do m√≥dulo 3 - vers√£o standalone")
    module._variaveis_interativo()