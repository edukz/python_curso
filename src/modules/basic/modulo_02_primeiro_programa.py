#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
M√≥dulo 2: Seu Primeiro Programa
Aprenda a escrever seu primeiro programa em Python com a fun√ß√£o print()
"""

from ..shared.base_module import BaseModule


class Modulo02PrimeiroPrograma(BaseModule):
    """M√≥dulo 2: Seu Primeiro Programa em Python"""
    
    def __init__(self):
        super().__init__("modulo_2", "Seu Primeiro Programa")
        self.has_mini_project = True
        self.mini_project_points = 50
    
    def execute(self) -> None:
        """Executa o m√≥dulo Primeiro Programa"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return

        try:
            self._primeiro_programa_interativo()
        except Exception as e:
            self.error_handler(lambda: None)
    
    def _primeiro_programa_interativo(self) -> None:
        """Conte√∫do principal do m√≥dulo Primeiro Programa"""
        # === CABE√áALHO VISUAL ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üéØ M√ìDULO 2: SEU PRIMEIRO PROGRAMA")
        else:
            print("\n" + "="*50)
            print("üéØ M√ìDULO 2: SEU PRIMEIRO PROGRAMA")
            print("="*50)

        # === MENSAGENS MOTIVACIONAIS ===
        self.print_success("üéâ Chegou a hora de escrever seu PRIMEIRO programa em Python!")
        self.print_tip("Este m√≥dulo est√° dividido em se√ß√µes interativas. Voc√™ controla o ritmo!")

        # === FLUXO PRINCIPAL COM TRATAMENTO DE CTRL+C ===

        # 1. Sistema de navega√ß√£o por se√ß√µes
        try:
            self._navegacao_secoes_interativas()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Navega√ß√£o interrompida pelo usu√°rio. Voltando ao menu principal...")
            return

        # 2. Se√ß√£o de Pr√°tica Interativa
        try:
            self._secao_pratica_interativa()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è M√≥dulo interrompido pelo usu√°rio. Voltando ao menu principal...")
            return

        # 3. Mini Projeto Pr√°tico
        try:
            self._mini_projeto_cartoes_digitais()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Mini projeto interrompido. Voltando ao menu principal...")
            return

        # 4. Marcar m√≥dulo como completo
        self.complete_module()
    
    def _navegacao_secoes_interativas(self) -> None:
        """Sistema de navega√ß√£o por se√ß√µes do m√≥dulo"""

        # === DEFINI√á√ÉO DAS SE√á√ïES ===
        secoes = [
            {
                'id': 'secao_o_que_e_programa',
                'titulo': 'üéØ O que √© um programa?',
                'descricao': 'Entenda o conceito fundamental de programa√ß√£o',
                'funcao': self._secao_o_que_e_programa
            },
            {
                'id': 'secao_funcao_print',
                'titulo': 'üíª A fun√ß√£o print() - sua primeira ferramenta',
                'descricao': 'Domine a fun√ß√£o mais usada em Python',
                'funcao': self._secao_funcao_print
            },
            {
                'id': 'secao_exemplos_praticos',
                'titulo': 'üí° Exemplos pr√°ticos do print()',
                'descricao': 'Veja print() em a√ß√£o com c√≥digo real',
                'funcao': self._secao_exemplos_praticos
            },
            {
                'id': 'secao_aspas_formatacao',
                'titulo': 'üî§ Aspas e formata√ß√£o de texto',
                'descricao': 'Aprenda a trabalhar com strings corretamente',
                'funcao': self._secao_aspas_formatacao
            },
            {
                'id': 'secao_erros_comuns',
                'titulo': '‚ö†Ô∏è Erros comuns e como evitar',
                'descricao': 'Aprenda com os erros mais frequentes de iniciantes',
                'funcao': self._secao_erros_comuns
            },
            {
                'id': 'secao_dicas_profissionais',
                'titulo': '‚≠ê Dicas de profissionais experientes',
                'descricao': 'Segredos que todo programador deveria saber',
                'funcao': self._secao_dicas_profissionais
            },
            {
                'id': 'secao_mundo_real',
                'titulo': 'üåç Como programs s√£o usados no mundo real',
                'descricao': 'Aplica√ß√µes pr√°ticas e exemplos inspiradores',
                'funcao': self._secao_mundo_real
            }
        ]

        secoes_visitadas = set()

        # === LOOP PRINCIPAL DE NAVEGA√á√ÉO ===
        while True:
            # Limpa tela e mostra cabe√ßalho
            self.ui.clear_screen() if self.ui else print("\n" + "="*50)
            self.print_section("NAVEGA√á√ÉO DO M√ìDULO", "üìö", "accent")
            self.print_colored("Escolha uma se√ß√£o para estudar:", "text")

            # Lista todas as se√ß√µes com status
            print()
            for i, secao in enumerate(secoes, 1):
                status = "‚úÖ" if secao['id'] in secoes_visitadas else "üìñ"
                print(f"{status} {i}. {secao['titulo']}")
                self.print_colored(f"    {secao['descricao']}", "text")
                print()

            print("0. üéØ Continuar para os Exerc√≠cios Pr√°ticos")

            # Mostra progresso visual
            progresso = len(secoes_visitadas)
            total = len(secoes)
            self.print_colored(f"\nüìä Progresso: {progresso}/{total} se√ß√µes visitadas", "info")

            if progresso == total:
                self.print_success("üåü Voc√™ completou todas as se√ß√µes! Est√° pronto para praticar!")

            # Processa escolha do usu√°rio
            try:
                escolha = input(f"\nüëâ Escolha uma se√ß√£o (1-{len(secoes)}) ou 0 para continuar: ").strip()

                if escolha == "0":
                    # Verifica se visitou se√ß√µes suficientes
                    if progresso >= 3:  # Pelo menos 3 se√ß√µes visitadas
                        break
                    else:
                        self.print_warning("üìö Recomendamos visitar pelo menos 3 se√ß√µes antes de continuar!")
                        continuar = input("Quer continuar mesmo assim? (s/n): ").lower()
                        if continuar in ['s', 'sim', 'yes']:
                            break
                elif escolha.isdigit() and 1 <= int(escolha) <= len(secoes):
                    # Executa se√ß√£o escolhida
                    idx = int(escolha) - 1
                    secoes[idx]['funcao']()
                    secoes_visitadas.add(secoes[idx]['id'])
                else:
                    self.print_warning(f"‚ùå Op√ß√£o inv√°lida! Digite um n√∫mero de 1 a {len(secoes)} ou 0.")

            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Pulando para exerc√≠cios pr√°ticos...")
                break
            except Exception as e:
                self.print_warning(f"‚ùå Erro: {str(e)}. Tente novamente.")

    def _secao_o_que_e_programa(self) -> None:
        """Se√ß√£o: O que √© um programa?"""
        if self.ui:
            self.ui.clear_screen()

        # === CABE√áALHO ATRATIVO ===
        self.print_section("O QUE √â UM PROGRAMA?", "üéØ")

        # === DEFINI√á√ÉO DO CONCEITO ===
        self.print_concept(
            "Programa de Computador",
            "Uma sequ√™ncia de instru√ß√µes que o computador segue para realizar uma tarefa espec√≠fica"
        )

        # === DICA RELACIONADA ===
        self.print_tip("Pense em um programa como uma receita de bolo - passo a passo at√© o resultado final!")

        # === ANALOGIA DO COTIDIANO ===
        self.print_colored("\nüè† ANALOGIA DO DIA A DIA:", "warning")
        self.print_colored("Um programa √© como dar instru√ß√µes para um amigo fazer um sandu√≠che:", "text")
        self.print_colored("1. Pegue o p√£o", "text")
        self.print_colored("2. Passe a maionese", "text")
        self.print_colored("3. Coloque o presunto", "text")
        self.print_colored("4. Feche o sandu√≠che", "text")
        self.print_colored("\nO computador segue suas instru√ß√µes exatamente assim!", "text")
        input("\nüî∏ Pressione ENTER para continuar...")

        # === EXPLICA√á√ÉO T√âCNICA GRADUAL ===
        self.print_colored("\nüîß COMO FUNCIONA NA PR√ÅTICA:", "info")
        passos_tecnicos = [
            "1. Voc√™ escreve o c√≥digo (as instru√ß√µes) em Python",
            "2. O Python traduz seu c√≥digo para linguagem de m√°quina",
            "3. O computador executa as instru√ß√µes uma por uma",
            "4. Voc√™ v√™ o resultado na tela!"
        ]

        for i, passo in enumerate(passos_tecnicos, 1):
            self.print_colored(passo, "text")
            if i < len(passos_tecnicos):
                input("   ‚è≥ Pressione ENTER para o pr√≥ximo passo...")

        # === EXEMPLO DE C√ìDIGO ===
        self.print_colored("\nüíª EXEMPLO PR√ÅTICO:", "success")
        codigo_exemplo = '''print("Ol√°! Eu sou um programa!")'''
        self.exemplo(codigo_exemplo)

        # Executa o c√≥digo para mostrar resultado
        print("\nüöÄ Vamos ver funcionando:")
        self.executar_codigo(codigo_exemplo)

        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nüåç ONDE PROGRAMAS S√ÉO USADOS NO MUNDO REAL:", "accent")
        aplicacoes = [
            "WhatsApp - programa que envia mensagens",
            "Instagram - programa que organiza fotos",
            "Netflix - programa que mostra filmes",
            "Google Maps - programa que calcula rotas",
            "Spotify - programa que toca m√∫sicas"
        ]
        for app in aplicacoes:
            self.print_colored(f"‚Ä¢ {app}", "primary")

        self.pausar()

    def _secao_funcao_print(self) -> None:
        """Se√ß√£o: A fun√ß√£o print() - sua primeira ferramenta"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("A FUN√á√ÉO PRINT() - SUA PRIMEIRA FERRAMENTA", "üíª")

        # === DEFINI√á√ÉO DO CONCEITO ===
        self.print_concept(
            "Fun√ß√£o print()",
            "Uma ferramenta que exibe (imprime) informa√ß√µes na tela do computador"
        )

        # === ANALOGIA DO COTIDIANO ===
        self.print_colored("\nüè† ANALOGIA DO DIA A DIA:", "warning")
        self.print_colored("A fun√ß√£o print() √© como um megafone:", "text")
        self.print_colored("‚Ä¢ Voc√™ fala algo no megafone (escreve no print)", "text")
        self.print_colored("‚Ä¢ O megafone amplifica sua voz (print mostra na tela)", "text")
        self.print_colored("‚Ä¢ Todos conseguem ouvir (ver na tela) sua mensagem", "text")
        input("\nüî∏ Pressione ENTER para continuar...")

        # === EXPLICA√á√ÉO T√âCNICA GRADUAL ===
        self.print_colored("\nüîß ANATOMIA DO PRINT():", "info")
        passos_anatomia = [
            "1. 'print' - √â o nome da fun√ß√£o (sempre min√∫sculo!)",
            "2. '(' - Abre par√™nteses para come√ßar os par√¢metros",
            "3. \"texto\" - A mensagem que voc√™ quer mostrar (entre aspas)",
            "4. ')' - Fecha par√™nteses para terminar"
        ]

        for i, passo in enumerate(passos_anatomia, 1):
            self.print_colored(passo, "text")
            if i < len(passos_anatomia):
                input("   ‚è≥ Pressione ENTER para o pr√≥ximo passo...")

        # === EXEMPLO DE C√ìDIGO ===
        self.print_colored("\nüíª PRIMEIRO EXEMPLO:", "success")
        codigo_exemplo = '''print("Ol√°, Mundo!")'''
        self.exemplo(codigo_exemplo)
        print("\nüöÄ Resultado:")
        self.executar_codigo(codigo_exemplo)

        # === CARACTER√çSTICAS IMPORTANTES ===
        self.print_colored("\n‚≠ê CARACTER√çSTICAS DA FUN√á√ÉO PRINT():", "accent")
        caracteristicas = [
            "√â uma fun√ß√£o built-in (j√° vem instalada com Python)",
            "Sempre usa letra min√∫scula - print, nunca Print",
            "Precisa de par√™nteses - print() n√£o print",
            "Texto sempre entre aspas - simples ' ou duplas \" ",
            "√â a fun√ß√£o mais usada por programadores iniciantes"
        ]
        for caract in caracteristicas:
            self.print_colored(f"‚Ä¢ {caract}", "primary")

        self.pausar()

    def _secao_exemplos_praticos(self) -> None:
        """Se√ß√£o: Exemplos pr√°ticos do print()"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("EXEMPLOS PR√ÅTICOS DO PRINT()", "üí°", "success")

        exemplos = [
            {
                'titulo': 'EXEMPLO 1: Mensagem simples',
                'descricao': 'O cl√°ssico primeiro programa de todo programador',
                'codigo': '''print("Ol√°, Mundo!")''',
                'explicacao': 'Este √© o programa mais famoso da hist√≥ria da programa√ß√£o!'
            },
            {
                'titulo': 'EXEMPLO 2: M√∫ltiplas mensagens',
                'descricao': 'Como exibir v√°rias linhas de texto',
                'codigo': '''print("Bem-vindo ao Python!")
print("Voc√™ est√° aprendendo programa√ß√£o")
print("Isso √© incr√≠vel!")''',
                'explicacao': 'Cada print() cria uma nova linha na tela'
            },
            {
                'titulo': 'EXEMPLO 3: Usando emojis',
                'descricao': 'Deixando seus programas mais divertidos e visuais',
                'codigo': '''print("üêç Python √© incr√≠vel! üêç")
print("üöÄ Vamos programar juntos! üöÄ")
print("üéâ Voc√™ est√° arrasando! üéâ")''',
                'explicacao': 'Python funciona perfeitamente com emojis e caracteres especiais'
            }
        ]

        for i, exemplo in enumerate(exemplos, 1):
            self.print_colored(f"\n{exemplo['titulo']}", "warning")
            self.print_colored(f"üìù {exemplo['descricao']}", "text")

            self.print_code_section("C√ìDIGO", exemplo['codigo'])

            print("\nüöÄ Executando exemplo:")
            self.executar_codigo(exemplo['codigo'])

            if exemplo['explicacao']:
                self.print_colored(f"\nüí° EXPLICA√á√ÉO: {exemplo['explicacao']}", "info")

            if i < len(exemplos):
                input("\nüî∏ Pressione ENTER para o pr√≥ximo exemplo...")

        self.print_success("\nüéâ Agora voc√™ viu print() em a√ß√£o! Vamos praticar!")
        self.pausar()

    def _secao_aspas_formatacao(self) -> None:
        """Se√ß√£o: Aspas e formata√ß√£o de texto"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("ASPAS E FORMATA√á√ÉO DE TEXTO", "üî§")

        # === DEFINI√á√ÉO DO CONCEITO ===
        self.print_concept(
            "Strings (Texto)",
            "Qualquer sequ√™ncia de caracteres (letras, n√∫meros, s√≠mbolos) que representam texto"
        )

        # === TIPOS DE ASPAS ===
        self.print_colored("\nüîß TIPOS DE ASPAS EM PYTHON:", "info")
        self.print_colored("1. Aspas duplas: \"texto\" ", "text")
        self.print_colored("2. Aspas simples: 'texto' ", "text")
        self.print_colored("\n‚úÖ Ambas funcionam exatamente igual!", "success")

        # === EXEMPLOS PR√ÅTICOS ===
        self.print_colored("\nüíª COMPARA√á√ÉO PR√ÅTICA:", "warning")
        
        print("\nüî∏ Com aspas duplas:")
        codigo1 = '''print("Python √© fant√°stico!")'''
        self.exemplo(codigo1)
        self.executar_codigo(codigo1)
        
        print("\nüî∏ Com aspas simples:")
        codigo2 = '''print('Python √© fant√°stico!')'''
        self.exemplo(codigo2)
        self.executar_codigo(codigo2)
        
        # === QUANDO USAR CADA UMA ===
        self.print_colored("\nüéØ QUANDO USAR CADA TIPO:", "accent")
        self.print_colored("‚Ä¢ Use aspas duplas quando o texto tem aspas simples dentro", "primary")
        exemplo_duplas = '''print("Ele disse: 'Python √© incr√≠vel!'")'''
        self.exemplo(exemplo_duplas)
        self.executar_codigo(exemplo_duplas)
        
        print()
        self.print_colored("‚Ä¢ Use aspas simples quando o texto tem aspas duplas dentro", "primary")
        exemplo_simples = '''print('O livro se chama "Aprendendo Python"')'''
        self.exemplo(exemplo_simples)
        self.executar_codigo(exemplo_simples)

        # === DICA PROFISSIONAL ===
        self.print_tip("\nDICA PROFISSIONAL: Escolha um tipo e seja consistente em todo o projeto!")

        self.pausar()

    def _secao_erros_comuns(self) -> None:
        """Se√ß√£o: Erros comuns e como evitar"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("ERROS COMUNS E COMO EVITAR", "‚ö†Ô∏è")

        self.print_colored("üéØ Todo programador comete erros - faz parte do aprendizado!", "info")
        self.print_colored("Vamos ver os erros mais comuns para voc√™ evit√°-los:", "text")

        erros_comuns = [
            {
                'titulo': 'ERRO 1: Esquecer as aspas',
                'errado': 'print(Ol√° mundo)',
                'correto': 'print("Ol√° mundo")',
                'explicacao': 'Python n√£o sabe o que √© "Ol√° mundo" sem as aspas. Ele pensa que √© uma vari√°vel!'
            },
            {
                'titulo': 'ERRO 2: Letra mai√∫scula no print',
                'errado': 'Print("Ol√°")',
                'correto': 'print("Ol√°")',
                'explicacao': 'Python diferencia mai√∫sculas de min√∫sculas. A fun√ß√£o se chama print, n√£o Print!'
            },
            {
                'titulo': 'ERRO 3: Esquecer os par√™nteses',
                'errado': 'print "Ol√° mundo"',
                'correto': 'print("Ol√° mundo")',
                'explicacao': 'Em Python 3, print() √© uma fun√ß√£o e precisa de par√™nteses!'
            },
            {
                'titulo': 'ERRO 4: N√£o fechar aspas ou par√™nteses',
                'errado': 'print("Ol√° mundo"',
                'correto': 'print("Ol√° mundo")',
                'explicacao': 'Tudo que abre deve fechar! Aspas e par√™nteses sempre em pares.'
            },
            {
                'titulo': 'ERRO 5: Misturar tipos de aspas',
                'errado': 'print("Ol√° mundo\')',
                'correto': 'print("Ol√° mundo")',
                'explicacao': 'Se come√ßou com aspas duplas, termine com aspas duplas!'
            }
        ]

        for i, erro in enumerate(erros_comuns, 1):
            self.print_colored(f"\n{erro['titulo']}", "warning")
            
            self.print_colored("‚ùå ERRADO:", "red")
            self.print_code_section("C√≥digo com erro", erro['errado'])
            
            self.print_colored("‚úÖ CORRETO:", "green")
            self.print_code_section("C√≥digo correto", erro['correto'])
            print("\nüöÄ Funcionando:")
            self.executar_codigo(erro['correto'])
            
            self.print_colored(f"üí° EXPLICA√á√ÉO: {erro['explicacao']}", "info")
            
            if i < len(erros_comuns):
                input("\nüî∏ Pressione ENTER para o pr√≥ximo erro...")

        self.print_success("\nüéâ Agora voc√™ conhece os erros mais comuns e sabe como evit√°-los!")
        self.pausar()

    def _secao_dicas_profissionais(self) -> None:
        """Se√ß√£o: Dicas de profissionais experientes"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("DICAS DE PROFISSIONAIS EXPERIENTES", "‚≠ê")

        dicas = [
            {
                'titulo': 'üîß DICA 1: Use print() para debug',
                'explicacao': 'Quando algo n√£o funciona, adicione prints para ver o que est√° acontecendo',
                'exemplo': '''nome = "Jo√£o"
print(f"Debug: nome = {nome}")
print("Processando...")
resultado = nome.upper()
print(f"Debug: resultado = {resultado}")'''
            },
            {
                'titulo': 'üé® DICA 2: Deixe seus prints bonitos',
                'explicacao': 'Programas com sa√≠da visual atrativa impressionam mais',
                'exemplo': '''print("=" * 40)
print("    üéâ BEM-VINDO AO MEU PROGRAMA üéâ")
print("=" * 40)
print("Status: ‚úÖ Funcionando perfeitamente!")'''
            },
            {
                'titulo': 'üìù DICA 3: Comente seu c√≥digo',
                'explicacao': 'Use # para deixar lembretes para voc√™ mesmo',
                'exemplo': '''# Este programa cumprimenta o usu√°rio
print("Ol√°!")  # Mensagem de boas-vindas
print("Bem-vindo!")  # Mensagem adicional'''
            },
            {
                'titulo': 'üöÄ DICA 4: Pratique todos os dias',
                'explica√ß√£o': 'Mesmo 15 minutos por dia fazem diferen√ßa enorme',
                'exemplo': '''# Desafio di√°rio: criar algo novo com print()
print("üìÖ Dia 1: Aprendi print()")
print("üìÖ Dia 2: Criei arte ASCII")
print("üìÖ Dia 3: Fiz um menu bonito")'''
            }
        ]

        for i, dica in enumerate(dicas, 1):
            self.print_colored(f"\n{dica['titulo']}", "warning")
            self.print_colored(f"üí° {dica['explicacao']}", "text")
            
            self.print_code_section("EXEMPLO PR√ÅTICO", dica['exemplo'])
            print("\nüöÄ Resultado:")
            self.executar_codigo(dica['exemplo'])
            
            if i < len(dicas):
                input("\nüî∏ Pressione ENTER para a pr√≥xima dica...")

        self.print_success("\nüåü Agora voc√™ tem dicas valiosas de programadores experientes!")
        self.pausar()

    def _secao_mundo_real(self) -> None:
        """Se√ß√£o: Como programas s√£o usados no mundo real"""
        if self.ui:
            self.ui.clear_screen()

        self.print_section("COMO PROGRAMAS S√ÉO USADOS NO MUNDO REAL", "üåç")

        # === DEFINI√á√ÉO DO CONCEITO ===
        self.print_concept(
            "Programas no Mundo Real",
            "Aplica√ß√µes pr√°ticas que resolvem problemas reais e facilitam a vida das pessoas"
        )

        # === CATEGORIAS DE APLICA√á√ïES ===
        categorias = [
            {
                'titulo': 'üì± APLICATIVOS M√ìVEIS',
                'exemplos': [
                    'WhatsApp - usar print() para logs de mensagens',
                    'Instagram - usar print() para debug de upload de fotos', 
                    'Uber - usar print() para rastrear localiza√ß√£o do motorista',
                    'iFood - usar print() para confirmar pedidos'
                ]
            },
            {
                'titulo': 'üåê SITES E SISTEMAS WEB',
                'exemplos': [
                    'Google - usar print() para logs de busca',
                    'Netflix - usar print() para debug de streaming',
                    'Amazon - usar print() para confirmar compras',
                    'YouTube - usar print() para estat√≠sticas de v√≠deos'
                ]
            },
            {
                'titulo': 'ü§ñ AUTOMA√á√ÉO E IA',
                'exemplos': [
                    'ChatGPT - usar print() para debug de respostas',
                    'Rob√¥s industriais - usar print() para status',
                    'Carros aut√¥nomos - usar print() para sensores',
                    'Smart homes - usar print() para controle'
                ]
            },
            {
                'titulo': 'üíº SISTEMAS EMPRESARIAIS',
                'exemplos': [
                    'Bancos - usar print() para logs de transa√ß√µes',
                    'Hospitais - usar print() para sistemas de prontu√°rio',
                    'Escolas - usar print() para controle de notas',
                    'Lojas - usar print() para relat√≥rios de vendas'
                ]
            }
        ]

        for categoria in categorias:
            self.print_colored(f"\n{categoria['titulo']}", "warning")
            for exemplo in categoria['exemplos']:
                self.print_colored(f"‚Ä¢ {exemplo}", "primary")
            input("\nüî∏ Pressione ENTER para a pr√≥xima categoria...")

        # === EXEMPLO PR√ÅTICO INSPIRADOR ===
        self.print_colored("\nüöÄ EXEMPLO INSPIRADOR:", "success")
        self.print_colored("Um programador j√∫nior criou um sistema simples para uma padaria:", "text")
        
        codigo_padaria = '''print("=" * 30)
print("  ü•ñ PADARIA DO JO√ÉO ü•ñ")
print("=" * 30)
print("P√£es vendidos hoje: 150")
print("Faturamento: R$ 450,00")
print("Status: ‚úÖ Meta atingida!")
print("=" * 30)'''
        
        self.exemplo(codigo_padaria)
        print("\nüöÄ Resultado:")
        self.executar_codigo(codigo_padaria)
        
        self.print_colored("\nüí∞ RESULTADO: O dono ficou t√£o impressionado que contratou o programador!", "success")
        self.print_colored("Moral da hist√≥ria: At√© um simples print() pode abrir portas!", "info")

        self.pausar()

    def _mini_projeto_cartoes_digitais(self) -> None:
        """Mini Projeto - M√≥dulo 2: Gerador de Cart√µes Digitais"""
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üéØ MINI PROJETO: GERADOR DE CART√ïES DIGITAIS")
        else:
            print("\n" + "="*50)
            print("üéØ MINI PROJETO: GERADOR DE CART√ïES DIGITAIS")
            print("="*50)
        
        self.print_success("üéâ Vamos criar seu projeto pr√°tico aplicando tudo sobre print()!")

        self.print_concept(
            "Gerador de Cart√µes Digitais",
            "Um programa que cria diferentes tipos de cart√µes personalizados usando apenas print()"
        )
        
        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nEste tipo de programa √© √∫til para:", "text")
        usos_praticos = [
            "Sites de e-cards como Hallmark e Blue Mountain",
            "Apps de mensagens que criam cards personalizados",
            "Sistemas de RH para parabenizar funcion√°rios",
            "Redes sociais que geram posts autom√°ticos"
        ]
        for uso in usos_praticos:
            self.print_colored(f"‚Ä¢ {uso}", "accent")
        
        # === DESENVOLVIMENTO PASSO A PASSO ===

        # PASSO 1: Escolha do tipo de cart√£o
        self.print_section("PASSO 1: Escolhendo o tipo de cart√£o", "üìù", "info")
        self.print_tip("Primeiro vamos decidir que tipo de cart√£o criar")

        try:
            print("\nüé® Que tipo de cart√£o voc√™ quer criar?")
            print("1. üéÇ Cart√£o de Anivers√°rio")
            print("2. üéâ Cart√£o de Parab√©ns")
            print("3. ‚ù§Ô∏è Cart√£o de Amor/Amizade")
            print("4. üåü Cart√£o Motivacional")
            
            escolha = input("\nüëâ Escolha (1-4): ").strip()
            
            tipos_cartao = {
                '1': {'nome': 'Anivers√°rio', 'emoji': 'üéÇ', 'cor': 'success'},
                '2': {'nome': 'Parab√©ns', 'emoji': 'üéâ', 'cor': 'warning'}, 
                '3': {'nome': 'Amor/Amizade', 'emoji': '‚ù§Ô∏è', 'cor': 'accent'},
                '4': {'nome': 'Motivacional', 'emoji': 'üåü', 'cor': 'info'}
            }
            
            if escolha in tipos_cartao:
                tipo_escolhido = tipos_cartao[escolha]
                self.print_colored(f"\n‚úÖ Voc√™ escolheu: {tipo_escolhido['emoji']} Cart√£o de {tipo_escolhido['nome']}!", "success")
            else:
                tipo_escolhido = tipos_cartao['1']  # Default
                self.print_colored("\nüéÇ Vamos fazer um cart√£o de anivers√°rio!", "success")

        except KeyboardInterrupt:
            self.print_warning("Projeto cancelado pelo usu√°rio")
            return

        # PASSO 2: Coleta de informa√ß√µes
        self.print_section("PASSO 2: Personalizando seu cart√£o", "‚öôÔ∏è", "success")
        self.print_colored("Agora vamos personalizar com suas informa√ß√µes:", "text")

        try:
            nome_destinatario = input("\nüë§ Para quem √© o cart√£o? ").strip() or "Amigo"
            nome_remetente = input("üë§ Qual √© o seu nome? ").strip() or "Programador Python"
            mensagem_extra = input("üíå Mensagem especial (opcional): ").strip() or "Feito com Python!"
        except KeyboardInterrupt:
            self.print_warning("Projeto cancelado pelo usu√°rio")
            return

        # PASSO 3: Gera√ß√£o do cart√£o
        self.print_section("PASSO 3: Gerando seu cart√£o digital", "üé¨", "warning")

        # Gera o c√≥digo baseado na escolha
        if escolha == '1':  # Anivers√°rio
            codigo_final = f'''# üéÇ CART√ÉO DE ANIVERS√ÅRIO DIGITAL
# Feito com Python por {nome_remetente}

print("üéä" * 25)
print("")
print("    üéÇ FELIZ ANIVERS√ÅRIO! üéÇ")
print("")
print("üéä" * 25)
print("")
print(f"    Parab√©ns, {nome_destinatario}!")
print("")
print("üéà Que este novo ano seja repleto de:")
print("   ‚ú® Alegrias")
print("   üåü Conquistas")
print("   üíñ Amor")
print("   üöÄ Aventuras")
print("")
print(f"üíå {mensagem_extra}")
print("")
print(f"    Com carinho, {nome_remetente} üíï")
print("")
print("üéä" * 25)'''
        elif escolha == '2':  # Parab√©ns
            codigo_final = f'''# üéâ CART√ÉO DE PARAB√âNS DIGITAL
# Feito com Python por {nome_remetente}

print("üèÜ" * 25)
print("")
print("    üéâ PARAB√âNS! üéâ")
print("")
print("üèÜ" * 25)
print("")
print(f"    {nome_destinatario}, voc√™ conseguiu!")
print("")
print("‚ú® Sua conquista √© motivo de orgulho!")
print("üåü Voc√™ merece todo o sucesso!")
print("üöÄ Continue brilhando assim!")
print("")
print(f"üíå {mensagem_extra}")
print("")
print(f"    Orgulhoso de voc√™, {nome_remetente} üåü")
print("")
print("üèÜ" * 25)'''
        elif escolha == '3':  # Amor/Amizade
            codigo_final = f'''# ‚ù§Ô∏è CART√ÉO DE AMOR/AMIZADE DIGITAL
# Feito com Python por {nome_remetente}

print("üíñ" * 25)
print("")
print("    ‚ù§Ô∏è COM AMOR ‚ù§Ô∏è")
print("")
print("üíñ" * 25)
print("")
print(f"    Para {nome_destinatario},")
print("")
print("üåπ Voc√™ √© especial na minha vida")
print("‚ú® Obrigado por existir")
print("ü§ó Nossa amizade/amor √© um presente")
print("üí´ Que sorte a minha te conhecer!")
print("")
print(f"üíå {mensagem_extra}")
print("")
print(f"    Para sempre, {nome_remetente} üíï")
print("")
print("üíñ" * 25)'''
        else:  # Motivacional
            codigo_final = f'''# üåü CART√ÉO MOTIVACIONAL DIGITAL
# Feito com Python por {nome_remetente}

print("‚≠ê" * 25)
print("")
print("    üåü VOC√ä √â INCR√çVEL! üåü")
print("")
print("‚≠ê" * 25)
print("")
print(f"    {nome_destinatario},")
print("")
print("üí™ Voc√™ √© mais forte do que imagina")
print("üöÄ Seus sonhos s√£o poss√≠veis")
print("‚ú® Cada dia √© uma nova oportunidade")
print("üèÜ Continue acreditando em si!")
print("")
print(f"üíå {mensagem_extra}")
print("")
print(f"    Torcendo por voc√™, {nome_remetente} üåü")
print("")
print("‚≠ê" * 25)'''
        
        # === C√ìDIGO FINAL GERADO ===
        self.print_colored("Aqui est√° o c√≥digo completo que voc√™ criou:", "text")
        self.exemplo(codigo_final)

        # === EXECU√á√ÉO DO RESULTADO ===
        self.print_section("RESULTADO FINAL", "üé¨", "warning")
        self.executar_codigo(codigo_final)

        # === MENSAGEM DE CONQUISTA ===
        self.print_success("üéâ PARAB√âNS! Voc√™ criou seu projeto de cart√µes digitais!")

        # === APLICA√á√ïES AVAN√áADAS ===
        self.print_section("PR√ìXIMOS PASSOS", "üöÄ", "info")
        proximos_passos = [
            "Adicionar mais tipos de cart√µes (formatura, natal, etc.)",
            "Criar bordas mais elaboradas com caracteres ASCII",
            "Integrar com sistema de envio de email",
            "Salvar cart√µes em arquivos de texto"
        ]
        for passo in proximos_passos:
            self.print_colored(f"‚Ä¢ {passo}", "primary")

        self.print_success("\nüèÜ CONQUISTA DESBLOQUEADA: Criador de Cart√µes Digitais!")

        # === REGISTRO DE CONCLUS√ÉO ===
        self.complete_mini_project("Gerador de Cart√µes Digitais")
        
        self.pausar()
    
    def _secao_pratica_interativa(self) -> None:
        """Se√ß√£o de pr√°tica interativa do m√≥dulo"""

        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_section("HORA DE PRATICAR!", "üéØ", "success")
        self.print_colored("Vamos testar o que voc√™ aprendeu com exerc√≠cios pr√°ticos!", "text")

        # === INSTRU√á√ïES PARA INICIANTES ===
        self.print_tip("Para iniciantes: Cada exerc√≠cio √© opcional, mas recomendamos fazer todos!")
        self.print_colored("\nüéì SOBRE OS EXERC√çCIOS:", "info")
        self.print_colored("‚Ä¢ N√£o se preocupe se errar - faz parte do aprendizado!", "text")
        self.print_colored("‚Ä¢ Voc√™ pode tentar quantas vezes quiser", "text")
        self.print_colored("‚Ä¢ Digite 'help' se precisar de ajuda", "text")
        self.print_colored("‚Ä¢ Use Ctrl+C para voltar ao menu principal se necess√°rio", "text")

        # === DEFINI√á√ÉO DOS EXERC√çCIOS ===
        exercicios = [
            {
                'title': 'Quiz: Conhecimentos sobre print()',
                'type': 'quiz',
                'questions': [
                    {
                        'question': 'Qual √© o nome da fun√ß√£o que exibe texto na tela em Python?',
                        'answer': ['print', 'print()', 'fun√ß√£o print'],
                        'hint': '√â uma fun√ß√£o que come√ßa com "p" e tem 5 letras'
                    },
                    {
                        'question': 'Python diferencia mai√∫sculas de min√∫sculas? (sim/n√£o)',
                        'answer': ['sim', 's', 'yes'],
                        'hint': 'print √© diferente de Print'
                    },
                    {
                        'question': 'Posso usar tanto aspas simples \'\' quanto duplas ""? (sim/n√£o)',
                        'answer': ['sim', 's', 'yes'],
                        'hint': 'Ambas funcionam igualmente bem em Python'
                    },
                    {
                        'question': 'Complete: print(___"Ol√°"___) - que s√≠mbolos v√£o no lugar dos ___?',
                        'answer': ['()','par√™nteses', '( )'],
                        'hint': 'print √© uma fun√ß√£o, precisa de...'
                    },
                    {
                        'question': 'O que est√° errado: Print("teste") ?',
                        'answer': ['P mai√∫sculo', 'mai√∫sculo', 'letra mai√∫scula', 'Print'],
                        'hint': 'Olhe a primeira letra da palavra print'
                    }
                ]
            },
            {
                'title': 'Desafio: Complete o C√≥digo',
                'type': 'code_completion',
                'exercises': [
                    {
                        'instruction': 'B√ÅSICO: Complete o c√≥digo para exibir "Ol√° Python!"',
                        'starter': '_____("Ol√° Python!")',
                        'solution': 'print("Ol√° Python!")',
                        'type': 'simple'
                    },
                    {
                        'instruction': 'INTERMEDI√ÅRIO: Crie dois prints que formem uma mensagem de boas-vindas',
                        'starter': '# Linha 1: "Bem-vindo ao Python!"\n# Linha 2: "Vamos programar juntos!"\n_____\n_____',
                        'solution': 'print("Bem-vindo ao Python!")\nprint("Vamos programar juntos!")',
                        'type': 'intermediate'
                    },
                    {
                        'instruction': 'AVAN√áADO: Crie um cart√£o simples usando m√∫ltiplos prints e s√≠mbolos',
                        'starter': '# Crie um cart√£o com bordas usando * ou =\n# Inclua uma mensagem no meio\n# Use pelo menos 3 prints',
                        'solution': 'print("*" * 20)\nprint("* Ol√°, Mundo! *")\nprint("*" * 20)',
                        'type': 'advanced'
                    }
                ]
            },
            {
                'title': 'Exerc√≠cio Criativo: Arte ASCII Simples',
                'type': 'creative',
                'instruction': 'Use apenas print() para criar uma arte ASCII simples (emoji, casa, estrela, etc.)'
            }
        ]

        # === MENU PRINCIPAL DE EXERC√çCIOS ===
        while True:
            print("\nEscolha uma atividade:")
            print("1. üìù Quiz de Conhecimentos")
            print("2. üíª Complete o C√≥digo")
            print("3. üé® Exerc√≠cio Criativo")
            print("0. Continuar para o Mini Projeto")

            try:
                escolha = input("\nüëâ Sua escolha: ").strip().lower()

                if escolha in ["0", "continuar", "sair", "proximo"]:
                    break
                elif escolha in ["1", "quiz", "conhecimentos"]:
                    try:
                        self._run_quiz(exercicios[0])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Quiz interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no quiz. Continuando...")
                elif escolha in ["2", "codigo", "completar"]:
                    try:
                        self._run_code_completion(exercicios[1])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio de c√≥digo interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio de c√≥digo. Continuando...")
                elif escolha in ["3", "criativo"]:
                    try:
                        self._run_creative_exercise(exercicios[2])
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio criativo interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio criativo. Continuando...")
                elif escolha in ["help", "ajuda", "h", "?"]:
                    self._show_help()
                else:
                    self.print_warning("‚ùå Op√ß√£o inv√°lida! Digite 1, 2, 3, 0 ou 'help' para ajuda.")

            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Opera√ß√£o cancelada pelo usu√°rio. Voltando ao menu principal...")
                return  # CR√çTICO: Return em vez de break para sair completamente
            except Exception as e:
                self.print_warning("‚ùå Erro inesperado no menu. Tente novamente.")

    def _show_help(self) -> None:
        """Mostra ajuda sobre as op√ß√µes dispon√≠veis"""
        self.print_section("AJUDA - SE√á√ÉO DE PR√ÅTICA", "‚ùì", "info")
        help_text = [
            "üìù OP√á√ÉO 1 - Quiz: Teste seus conhecimentos sobre print()",
            "üíª OP√á√ÉO 2 - Complete o C√≥digo: 3 exerc√≠cios progressivos",
            "üé® OP√á√ÉO 3 - Exerc√≠cio Criativo: Crie arte ASCII simples",
            "üî¢ OP√á√ÉO 0 - Continue para o Mini Projeto final",
            "",
            "üí° DICAS:",
            "‚Ä¢ Voc√™ pode digitar o n√∫mero ou palavras como 'quiz', 'codigo'",
            "‚Ä¢ Digite 'help' a qualquer momento para ver esta ajuda",
            "‚Ä¢ Use Ctrl+C se quiser voltar ao menu principal",
            "‚Ä¢ Recomendamos fazer todas as atividades para aprender melhor!"
        ]

        for line in help_text:
            if line:
                self.print_colored(f"  {line}", "text")
            else:
                print()

        input("\nüî∏ Pressione ENTER para voltar ao menu...")

    def _run_quiz(self, quiz_data) -> None:
        """Executa o quiz de conhecimentos"""
        self.print_section(quiz_data['title'], "üìù", "info")
        score = 0
        total = len(quiz_data['questions'])

        self.print_colored(f"Vamos testar seus conhecimentos com {total} perguntas!", "text")
        print()

        for i, q in enumerate(quiz_data['questions'], 1):
            self.print_colored(f"\nüìå PERGUNTA {i}/{total}:", "warning")
            self.print_colored(q['question'], "text")
            
            tentativas = 0
            max_tentativas = 2
            
            while tentativas < max_tentativas:
                try:
                    resposta = input("\nüëâ Sua resposta: ").strip().lower()
                    
                    if any(ans.lower() in resposta for ans in q['answer']):
                        self.print_success("‚úÖ Correto! Muito bem!")
                        score += 1
                        break
                    else:
                        tentativas += 1
                        if tentativas < max_tentativas:
                            self.print_warning(f"‚ùå N√£o √© isso. Dica: {q['hint']}")
                            self.print_colored("Tente novamente:", "text")
                        else:
                            self.print_warning(f"‚ùå A resposta era: {q['answer'][0]}")
                            
                except KeyboardInterrupt:
                    self.print_warning("\n‚ö†Ô∏è Quiz cancelado.")
                    return

        # Resultado final
        percentual = (score / total) * 100
        self.print_section("RESULTADO DO QUIZ", "üèÜ", "success")
        self.print_colored(f"Voc√™ acertou {score} de {total} perguntas ({percentual:.0f}%)", "text")
        
        if score == total:
            self.print_success("üåü PERFEITO! Voc√™ dominou completamente o print()!")
        elif score >= total * 0.8:
            self.print_success("üéâ EXCELENTE! Voc√™ entende muito bem o print()!")
        elif score >= total * 0.6:
            self.print_colored("üëç BOM! Voc√™ est√° no caminho certo!", "info")
        else:
            self.print_colored("üìö Continue estudando! Revisite as se√ß√µes se necess√°rio.", "warning")
            
        self.pausar()

    def _run_code_completion(self, exercise_data) -> None:
        """Executa exerc√≠cios de completar c√≥digo"""
        self.print_section(exercise_data['title'], "üíª", "success")
        
        for i, exercise in enumerate(exercise_data['exercises'], 1):
            self.print_colored(f"\nüéØ EXERC√çCIO {i}: {exercise['type'].upper()}", "warning")
            self.print_colored(exercise['instruction'], "text")
            
            self.print_code_section("C√ìDIGO PARA COMPLETAR", exercise['starter'])
            
            print("\n‚úçÔ∏è Digite sua solu√ß√£o (ou 'skip' para pular):")
            try:
                resposta = input(">>> ").strip()
                
                if resposta.lower() == 'skip':
                    self.print_colored("‚è≠Ô∏è Exerc√≠cio pulado.", "warning")
                    continue
                    
                if resposta:
                    print("\nüöÄ Testando sua solu√ß√£o:")
                    try:
                        self.executar_codigo(resposta)
                        self.print_success("‚úÖ Sua solu√ß√£o funcionou!")
                        
                        ver_solucao = input("\nüí° Quer ver a solu√ß√£o sugerida? (s/n): ").lower()
                        if ver_solucao == 's':
                            self.print_colored("\nüîç SOLU√á√ÉO SUGERIDA:", "info")
                            self.exemplo(exercise['solution'])
                            
                    except Exception as e:
                        self.print_warning(f"‚ùå Erro ao executar: {str(e)}")
                        self.print_colored("\nüí° SOLU√á√ÉO CORRETA:", "info")
                        self.exemplo(exercise['solution'])
                        self.executar_codigo(exercise['solution'])
                        
            except KeyboardInterrupt:
                self.print_warning("\n‚ö†Ô∏è Exerc√≠cio cancelado.")
                return
                
        self.print_success("\nüéâ Parab√©ns! Voc√™ completou todos os exerc√≠cios de c√≥digo!")
        self.pausar()

    def _run_creative_exercise(self, exercise_data) -> None:
        """Executa exerc√≠cio criativo"""
        self.print_section(exercise_data['title'], "üé®", "accent")
        self.print_colored(exercise_data['instruction'], "text")
        
        print("\nüí° EXEMPLOS DE ARTE ASCII SIMPLES:")
        exemplos = [
            "Estrela:\n  *\n ***\n*****",
            "Casa:\n   /\\\n  /  \\\n |__|",
            "Cora√ß√£o:\n ‚ô• ‚ô•\n‚ô•‚ô•‚ô•‚ô•\n ‚ô•‚ô•‚ô•"
        ]
        
        for exemplo in exemplos:
            self.print_colored(f"‚Ä¢ {exemplo}", "primary")
            
        print("\n‚úçÔ∏è Agora √© sua vez! Digite seus prints (digite 'fim' para terminar):")
        
        linhas_codigo = []
        try:
            while True:
                linha = input(">>> ")
                if linha.lower() == 'fim':
                    break
                if linha.strip():
                    linhas_codigo.append(linha)
                    
        except KeyboardInterrupt:
            self.print_warning("\n‚ö†Ô∏è Exerc√≠cio cancelado.")
            return
            
        if linhas_codigo:
            codigo_completo = '\n'.join(linhas_codigo)
            print("\nüöÄ Sua cria√ß√£o:")
            try:
                self.executar_codigo(codigo_completo)
                self.print_success("\nüé® Fant√°stico! Voc√™ criou arte com c√≥digo!")
            except Exception as e:
                self.print_warning(f"‚ùå Erro na execu√ß√£o: {str(e)}")
        else:
            self.print_colored("üëã Tudo bem, talvez na pr√≥xima vez!", "info")
            
        self.pausar()
    


# Para teste standalone
if __name__ == "__main__":
    module = Modulo02PrimeiroPrograma()
    print("Teste do m√≥dulo 2 - vers√£o standalone")
    module._primeiro_programa_interativo()