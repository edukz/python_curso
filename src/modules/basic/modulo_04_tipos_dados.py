#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
M√≥dulo 4: Tipos de Dados
Aprenda sobre os tipos fundamentais de dados em Python
"""

from ..shared.base_module import BaseModule


class Modulo04TiposDados(BaseModule):
    """M√≥dulo 4: Tipos de Dados - O DNA das Informa√ß√µes"""
    
    def __init__(self):
        super().__init__("modulo_4", "Tipos de Dados")
        self.has_mini_project = True
        self.mini_project_points = 50
    
    def execute(self) -> None:
        """Executa o m√≥dulo sobre tipos de dados"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return
        
        try:
            self._tipos_dados()
        except Exception as e:
            self.error_handler(lambda: None)
    
    def _tipos_dados(self) -> None:
        """Conte√∫do principal sobre tipos de dados"""
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üß¨ M√ìDULO 4: TIPOS DE DADOS - O DNA DAS INFORMA√á√ïES")
        else:
            print("\n" + "="*50)
            print("üß¨ M√ìDULO 4: TIPOS DE DADOS - O DNA DAS INFORMA√á√ïES")
            print("="*50)
        
        self.print_concept("üß¨ Cada informa√ß√£o em Python tem um 'DNA' especial!")
        self.print_colored("Esse DNA define o que podemos fazer com ela.", "cyan")
        
        self.print_section("OS 4 TIPOS FUNDAMENTAIS")
        
        self.print_concept("\nüî¢ 1. N√öMEROS INTEIROS (int)")
        self.print_colored("   S√£o n√∫meros SEM v√≠rgula: 1, 100, -5, 0", "yellow")
        self.print_colored("   Usamos para: idades, quantidade, posi√ß√µes...", "green")
        
        self.print_concept("\nüî¢ 2. N√öMEROS DECIMAIS (float)")  
        self.print_colored("   S√£o n√∫meros COM v√≠rgula: 3.14, 1.75, -2.5", "yellow")
        self.print_colored("   Usamos para: pre√ßos, medidas, percentuais...", "green")
        
        self.print_concept("\nüìù 3. TEXTOS (string)")
        self.print_colored("   S√£o palavras entre aspas: 'Jo√£o', \"Python\"", "yellow")
        self.print_colored("   Usamos para: nomes, mensagens, descri√ß√µes...", "green")
        
        self.print_concept("\n‚úÖ 4. VERDADEIRO/FALSO (boolean)")
        self.print_colored("   Apenas dois valores: True ou False", "yellow")
        self.print_colored("   Usamos para: decis√µes, estados, flags...", "green")
        
        self.print_section("\nüéØ Vamos ver cada tipo em a√ß√£o:")
        
        codigo = '''# N√∫meros inteiros (int)
idade = 25
quantidade = 100
temperatura = -10

print("=== INTEIROS ===")
print("Idade:", idade)
print("Quantidade:", quantidade) 
print("Temperatura:", temperatura)

# N√∫meros decimais (float)
altura = 1.75
preco = 29.99
pi = 3.14159

print("\\n=== DECIMAIS ===")
print("Altura:", altura)
print("Pre√ßo: R$", preco)
print("Pi:", pi)

# Textos (string)
nome = "Ana Silva"
cidade = "S√£o Paulo"
hobby = 'programa√ß√£o'

print("\\n=== TEXTOS ===")
print("Nome:", nome)
print("Cidade:", cidade)
print("Hobby:", hobby)

# Verdadeiro/Falso (boolean)
tem_carteira = True
e_maior_idade = True
gosta_python = True
tem_medo_python = False

print("\\n=== VERDADEIRO/FALSO ===")
print("Tem carteira:", tem_carteira)
print("√â maior de idade:", e_maior_idade)
print("Gosta de Python:", gosta_python)
print("Tem medo de Python:", tem_medo_python)'''
        
        self.exemplo(codigo)
        self.executar_codigo(codigo)
        
        self.print_concept("\nüîç Como descobrir o tipo de uma vari√°vel?")
        self.print_tip("Use a fun√ß√£o type()!")
        
        codigo2 = '''# Testando tipos
nome = "Jo√£o"
idade = 30
altura = 1.80
tem_pets = True

print("Tipo de 'nome':", type(nome))
print("Tipo de 'idade':", type(idade))
print("Tipo de 'altura':", type(altura))
print("Tipo de 'tem_pets':", type(tem_pets))'''
        
        self.exemplo(codigo2)
        self.executar_codigo(codigo2)
        
        self.print_section("\nüîÑ CONVERS√ÉO ENTRE TIPOS (Type Casting):")
        
        codigo3 = '''# Convertendo entre tipos
numero_texto = "123"
numero_int = int(numero_texto)
numero_float = float(numero_texto)

print("Original (string):", numero_texto, "- Tipo:", type(numero_texto))
print("Como int:", numero_int, "- Tipo:", type(numero_int))
print("Como float:", numero_float, "- Tipo:", type(numero_float))

# Convertendo n√∫meros para texto
idade = 25
idade_texto = str(idade)
print("\\nIdade como n√∫mero:", idade, "- Tipo:", type(idade))
print("Idade como texto:", idade_texto, "- Tipo:", type(idade_texto))

# Convertendo para boolean
print("\\n=== CONVERS√ïES PARA BOOLEAN ===")
print("bool(1):", bool(1))
print("bool(0):", bool(0))
print("bool('Python'):", bool("Python"))
print("bool(''):", bool(""))'''
        
        self.exemplo(codigo3)
        self.executar_codigo(codigo3)
        
        self.print_warning("\n‚ö†Ô∏è CUIDADOS com convers√µes:")
        
        codigo4 = '''# Convers√µes que podem dar erro
try:
    numero = int("abc")  # Isso vai dar erro!
except ValueError as e:
    print("ERRO:", e)
    print("N√£o posso converter 'abc' para n√∫mero!")

try:
    numero = int("3.14")  # Isso tamb√©m d√° erro!
except ValueError as e:
    print("ERRO:", e)
    print("Para converter '3.14', use float() primeiro!")
    
# Jeito correto:
numero_correto = int(float("3.14"))
print("Convers√£o correta:", numero_correto)'''
        
        self.exemplo(codigo4)
        self.executar_codigo(codigo4)
        
        self.print_section("\nüßÆ OPERA√á√ïES por tipo:")
        
        self.print_concept("\nüìä COM N√öMEROS (int/float):")
        self.print_colored("‚Ä¢ Soma: 5 + 3 = 8", "yellow")
        self.print_colored("‚Ä¢ Subtra√ß√£o: 10 - 4 = 6", "yellow") 
        self.print_colored("‚Ä¢ Multiplica√ß√£o: 3 * 7 = 21", "yellow")
        self.print_colored("‚Ä¢ Divis√£o: 15 / 3 = 5.0", "yellow")
        self.print_colored("‚Ä¢ Pot√™ncia: 2 ** 3 = 8", "yellow")
        
        codigo5 = '''a = 10
b = 3
print(f"{a} + {b} = {a + b}")
print(f"{a} - {b} = {a - b}")
print(f"{a} * {b} = {a * b}")
print(f"{a} / {b} = {a / b}")
print(f"{a} ** {b} = {a ** b}")'''
        
        self.exemplo(codigo5)
        self.executar_codigo(codigo5)
        
        self.print_concept("\nüìù COM TEXTOS (string):")
        self.print_colored("‚Ä¢ Concatena√ß√£o: 'Ol√°' + ' ' + 'Mundo' = 'Ol√° Mundo'", "yellow")
        self.print_colored("‚Ä¢ Repeti√ß√£o: 'Python! ' * 3 = 'Python! Python! Python! '", "yellow")
        
        codigo6 = '''nome = "Ana"
sobrenome = "Silva"
nome_completo = nome + " " + sobrenome
print("Nome completo:", nome_completo)

grito = "Python! " * 3
print("Grito:", grito)

# Tamanho do texto
print("Tamanho do nome:", len(nome_completo))'''
        
        self.exemplo(codigo6)
        self.executar_codigo(codigo6)
        
        self.print_concept("\nüí° CURIOSIDADES sobre tipos:")
        self.print_colored("‚Ä¢ Python descobre o tipo automaticamente!", "cyan")
        self.print_colored("‚Ä¢ Uma vari√°vel pode mudar de tipo durante o programa", "cyan")
        self.print_colored("‚Ä¢ Strings podem usar aspas simples ' ou duplas \"", "cyan")
        self.print_colored("‚Ä¢ N√∫meros muito grandes s√£o automaticamente int", "cyan")
        self.print_colored("‚Ä¢ True e False SEMPRE come√ßam com mai√∫scula", "cyan")
        
        codigo7 = '''# Vari√°vel mudando de tipo
variavel = 42          # int
print("Como int:", variavel, type(variavel))

variavel = 3.14        # float  
print("Como float:", variavel, type(variavel))

variavel = "Python"    # string
print("Como string:", variavel, type(variavel))

variavel = True        # boolean
print("Como boolean:", variavel, type(variavel))'''
        
        self.exemplo(codigo7)
        self.executar_codigo(codigo7)
        
        self.pausar()
        
        self.print_tip("\nüéØ DICAS PROFISSIONAIS:")
        self.print_colored("‚Ä¢ Use int para contadores, idades, quantidades", "green")
        self.print_colored("‚Ä¢ Use float para medidas, pre√ßos, c√°lculos precisos", "green")
        self.print_colored("‚Ä¢ Use string para nomes, mensagens, textos", "green")
        self.print_colored("‚Ä¢ Use boolean para flags, estados, condi√ß√µes", "green")
        self.print_colored("‚Ä¢ Sempre valide entradas do usu√°rio!", "yellow")
        self.print_colored("‚Ä¢ Nomes de vari√°veis devem indicar o tipo esperado", "yellow")
        
        # Exerc√≠cios pr√°ticos
        self.exercicio(
            "Qual tipo de dado √© o valor 3.14?",
            ["float", "ponto flutuante", "n√∫mero decimal"],
            "√â um n√∫mero com decimais"
        )
        
        self.exercicio(
            "Como converter o texto '100' para n√∫mero inteiro?",
            ["int('100')", "int(\"100\")", "int('100')"],
            "Use a fun√ß√£o int()"
        )
        
        self.exercicio(
            "True e False s√£o de que tipo?",
            ["boolean", "bool", "verdadeiro/falso"],
            "S√£o valores l√≥gicos"
        )
        
        # Mini Projeto Pr√°tico
        self._mini_projeto_calculadora_estatisticas()
        
        # Marcar m√≥dulo como completo
        self.complete_module()
    
    def _mini_projeto_calculadora_estatisticas(self) -> None:
        """Mini Projeto - M√≥dulo 4: Calculadora de Estat√≠sticas Pessoais"""
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üéØ MINI PROJETO: CALCULADORA DE ESTAT√çSTICAS PESSOAIS")
        else:
            print("\n" + "="*50)
            print("üéØ MINI PROJETO: CALCULADORA DE ESTAT√çSTICAS PESSOAIS")
            print("="*50)
        
        self.print_success("üìä Vamos criar uma calculadora que processa diferentes tipos de dados!")
        self.print_colored("Sistema similar aos usados em:", "cyan")
        self.print_colored("‚Ä¢ Apps de sa√∫de (Apple Health, Google Fit)", "green")
        self.print_colored("‚Ä¢ Sistemas banc√°rios (controle financeiro)", "green")
        self.print_colored("‚Ä¢ E-commerce (an√°lise de compras)", "green")
        self.print_colored("‚Ä¢ Redes sociais (estat√≠sticas de perfil)", "green")
        
        self.print_section("\nüíª Programa completo usando todos os tipos de dados:")
        
        codigo_completo = '''# üìä CALCULADORA DE ESTAT√çSTICAS PESSOAIS
print("üî¢" * 20)
print("   AN√ÅLISE DE DADOS PESSOAIS")
print("üî¢" * 20)

# Dados pessoais (diferentes tipos)
nome = "Maria Silva"                    # string
idade = 28                             # int
altura = 1.68                          # float
peso = 65.5                           # float
tem_plano_saude = True                # boolean
pratica_exercicios = True             # boolean
salario = 4500.00                     # float
dependentes = 2                       # int

print(f"\\nüë§ DADOS PESSOAIS:")
print(f"Nome: {nome} (tipo: {type(nome).__name__})")
print(f"Idade: {idade} anos (tipo: {type(idade).__name__})")
print(f"Altura: {altura}m (tipo: {type(altura).__name__})")

print(f"\\nüí™ SA√öDE:")
print(f"Peso: {peso}kg (tipo: {type(peso).__name__})")
print(f"Plano de Sa√∫de: {tem_plano_saude} (tipo: {type(tem_plano_saude).__name__})")
print(f"Pratica Exerc√≠cios: {pratica_exercicios} (tipo: {type(pratica_exercicios).__name__})")

# C√°lculos autom√°ticos (convers√µes e opera√ß√µes)
imc = peso / (altura ** 2)             # float result
idade_meses = idade * 12               # int calculation
salario_anual = salario * 12           # float calculation
renda_per_capita = salario / (dependentes + 1)  # float division

print(f"\\nüìà C√ÅLCULOS AUTOM√ÅTICOS:")
print(f"IMC: {imc:.2f} (tipo: {type(imc).__name__})")
print(f"Idade em meses: {idade_meses} (tipo: {type(idade_meses).__name__})")
print(f"Sal√°rio anual: R$ {salario_anual:.2f} (tipo: {type(salario_anual).__name__})")
print(f"Renda per capita: R$ {renda_per_capita:.2f} (tipo: {type(renda_per_capita).__name__})")

# An√°lises com boolean
print(f"\\nüéØ AN√ÅLISES:")
if imc < 18.5:
    situacao_peso = "Abaixo do peso"
elif imc < 25:
    situacao_peso = "Peso normal"
else:
    situacao_peso = "Acima do peso"
    
perfil_saudavel = tem_plano_saude and pratica_exercicios
print(f"Situa√ß√£o do peso: {situacao_peso}")
print(f"Perfil saud√°vel: {perfil_saudavel} (tipo: {type(perfil_saudavel).__name__})")

print("\\nüî¢" * 20)
print("   AN√ÅLISE CONCLU√çDA!")
print("üî¢" * 20)'''
        
        self.exemplo(codigo_completo)
        self.executar_codigo(codigo_completo)
        
        self.print_success("\nüéâ CALCULADORA CRIADA COM SUCESSO!")
        self.print_concept("\nüåç ONDE ISSO √â USADO:")
        self.print_colored("‚Ä¢ üè• Sistemas hospitalares: C√°lculo de IMC e estat√≠sticas", "green")
        self.print_colored("‚Ä¢ üí∞ Bancos: An√°lise de renda e perfil financeiro", "green")
        self.print_colored("‚Ä¢ üì± Apps fitness: Monitoramento de sa√∫de", "green")
        self.print_colored("‚Ä¢ üõí E-commerce: An√°lise de comportamento de compra", "green")
        self.print_colored("‚Ä¢ üìä Business Intelligence: Relat√≥rios executivos", "green")
        
        self.print_concept("\nüí° T√âCNICAS PROFISSIONAIS USADAS:")
        self.print_colored("‚Ä¢ Convers√£o autom√°tica entre tipos", "yellow")
        self.print_colored("‚Ä¢ Formata√ß√£o de n√∫meros com decimais (.2f)", "yellow")
        self.print_colored("‚Ä¢ Opera√ß√µes l√≥gicas com boolean", "yellow")
        self.print_colored("‚Ä¢ C√°lculos matem√°ticos com diferentes tipos", "yellow")
        self.print_colored("‚Ä¢ An√°lise de dados em tempo real", "yellow")
        
        self.print_success("\nüèÜ CONQUISTA: Analista de Dados!")
        
        # Registra conclus√£o do mini projeto
        self.complete_mini_project("Calculadora de Estat√≠sticas Pessoais")
        
        self.pausar()


# Para teste standalone
if __name__ == "__main__":
    module = Modulo04TiposDados()
    print("Teste do m√≥dulo 4 - vers√£o standalone")
    module._tipos_dados()