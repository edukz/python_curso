#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
M√≥dulo 6: Opera√ß√µes Matem√°ticas
Aprenda sobre operadores aritm√©ticos e c√°lculos em Python
"""

from ..shared.base_module import BaseModule


class Modulo06Operacoes(BaseModule):
    """M√≥dulo 6: Opera√ß√µes Matem√°ticas"""
    
    def __init__(self):
        super().__init__("modulo_6", "Opera√ß√µes Matem√°ticas")
        self.has_mini_project = True
        self.mini_project_points = 65
    
    def execute(self) -> None:
        """Executa o m√≥dulo sobre opera√ß√µes matem√°ticas"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return
        
        try:
            self._operacoes_matematicas_interativo()
        except Exception as e:
            self.error_handler(lambda: None)
    
    def _operacoes_matematicas_interativo(self) -> None:
        """Conte√∫do principal do m√≥dulo Opera√ß√µes Matem√°ticas"""
        # === CABE√áALHO VISUAL ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üßÆ M√ìDULO 6: OPERA√á√ïES MATEM√ÅTICAS - A CALCULADORA PYTHON")
        else:
            print("\n" + "="*50)
            print("üßÆ M√ìDULO 6: OPERA√á√ïES MATEM√ÅTICAS - A CALCULADORA PYTHON")
            print("="*50)

        # === MENSAGENS MOTIVACIONAIS ===
        self.print_success("üéâ Chegou a hora de dominar a matem√°tica com Python!")
        self.print_tip("Este m√≥dulo est√° dividido em se√ß√µes interativas. Voc√™ controla o ritmo!")

        # === FLUXO PRINCIPAL COM TRATAMENTO DE CTRL+C ===

        # 1. Sistema de navega√ß√£o por se√ß√µes
        try:
            self._navegacao_secoes_interativas()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Navega√ß√£o interrompida pelo usu√°rio. Voltando ao menu principal...")
            return

        # 2. Se√ß√£o de Pr√°tica Interativa
        try:
            self._secao_pratica_interativa()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è M√≥dulo interrompido pelo usu√°rio. Voltando ao menu principal...")
            return

        # 3. Mini Projeto Pr√°tico
        try:
            self._mini_projeto_calculadora_cientifica()
        except KeyboardInterrupt:
            self.print_warning("\n\n‚ö†Ô∏è Mini projeto interrompido. Voltando ao menu principal...")
            return

        # 4. Marcar m√≥dulo como completo
        self.complete_module()

    def _navegacao_secoes_interativas(self) -> None:
        """Sistema de navega√ß√£o por se√ß√µes do m√≥dulo"""

        # === DEFINI√á√ÉO DAS SE√á√ïES ===
        secoes = [
            {
                'id': 'secao_o_que_sao_operacoes',
                'titulo': 'üßÆ O que s√£o opera√ß√µes matem√°ticas?',
                'descricao': 'Entenda como o Python √© uma super calculadora',
                'funcao': self._secao_o_que_sao_operacoes
            },
            {
                'id': 'secao_operadores_basicos',
                'titulo': '‚ûï Operadores b√°sicos (+, -, *, /)',
                'descricao': 'Domine as opera√ß√µes fundamentais',
                'funcao': self._secao_operadores_basicos
            },
            {
                'id': 'secao_operadores_avancados',
                'titulo': 'üöÄ Operadores avan√ßados (**, //, %)',
                'descricao': 'Descubra ferramentas poderosas para c√°lculos',
                'funcao': self._secao_operadores_avancados
            },
            {
                'id': 'secao_precedencia',
                'titulo': 'üéØ Ordem de precedencia (PEMDAS)',
                'descricao': 'Aprenda qual conta √© feita primeiro',
                'funcao': self._secao_precedencia
            },
            {
                'id': 'secao_calculos_praticos',
                'titulo': 'üìä C√°lculos pr√°ticos do dia a dia',
                'descricao': 'Resolva problemas reais com Python',
                'funcao': self._secao_calculos_praticos
            },
            {
                'id': 'secao_funcoes_matematicas',
                'titulo': 'üß™ Fun√ß√µes matem√°ticas especiais',
                'descricao': 'Explore round(), abs(), min(), max()',
                'funcao': self._secao_funcoes_matematicas
            },
            {
                'id': 'secao_aplicacoes_reais',
                'titulo': 'üåç Aplica√ß√µes no mundo real',
                'descricao': 'Veja onde a matem√°tica √© usada profissionalmente',
                'funcao': self._secao_aplicacoes_reais
            }
        ]

        secoes_visitadas = set()

        # === LOOP PRINCIPAL DE NAVEGA√á√ÉO ===
        while True:
            # Limpa tela e mostra cabe√ßalho
            self.ui.clear_screen() if self.ui else print("\n" + "="*50)
            self.print_section("NAVEGA√á√ÉO DO M√ìDULO", "üìö", "accent")
            self.print_colored("Escolha uma se√ß√£o para estudar:", "text")

            # Lista todas as se√ß√µes com status
            print()
            for i, secao in enumerate(secoes, 1):
                status = "‚úÖ" if secao['id'] in secoes_visitadas else "üìñ"
                print(f"{status} {i}. {secao['titulo']}")
                self.print_colored(f"    {secao['descricao']}", "text")
                print()

            print("0. üéØ Continuar para os Exerc√≠cios Pr√°ticos")

            # Mostra progresso visual
            progresso = len(secoes_visitadas)
            total = len(secoes)
            self.print_colored(f"\nüìä Progresso: {progresso}/{total} se√ß√µes visitadas", "info")

            if progresso == total:
                self.print_success("üåü Voc√™ completou todas as se√ß√µes! Est√° pronto para praticar!")

            # Processa escolha do usu√°rio
            try:
                escolha = input(f"\nüëâ Escolha uma se√ß√£o (1-{len(secoes)}) ou 0 para continuar: ").strip()

                if escolha == "0":
                    # Verifica se visitou se√ß√µes suficientes
                    if progresso >= 3:  # Pelo menos 3 se√ß√µes visitadas
                        break
                    else:
                        self.print_warning("üìö Recomendamos visitar pelo menos 3 se√ß√µes antes de continuar!")
                        continuar = input("Quer continuar mesmo assim? (s/n): ").lower()
                        if continuar in ['s', 'sim', 'yes']:
                            break
                elif escolha.isdigit() and 1 <= int(escolha) <= len(secoes):
                    # Executa se√ß√£o escolhida
                    idx = int(escolha) - 1
                    secoes[idx]['funcao']()
                    secoes_visitadas.add(secoes[idx]['id'])
                else:
                    self.print_warning(f"‚ùå Op√ß√£o inv√°lida! Digite um n√∫mero de 1 a {len(secoes)} ou 0.")

            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Pulando para exerc√≠cios pr√°ticos...")
                break
            except Exception as e:
                self.print_warning(f"‚ùå Erro: {str(e)}. Tente novamente.")
    
    def _secao_o_que_sao_operacoes(self) -> None:
        """Se√ß√£o: O que s√£o opera√ß√µes matem√°ticas?"""
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üßÆ O QUE S√ÉO OPERA√á√ïES MATEM√ÅTICAS?")

        self.print_colored("üßÆ Imagine que voc√™ tem uma super calculadora na m√£o...", "info")
        self.print_colored("Mas esta calculadora √© t√£o poderosa que pode fazer qualquer c√°lculo!", "cyan")
        
        self.print_section("\nüéØ O QUE S√ÉO OPERA√á√ïES:")
        self.print_colored("Opera√ß√µes s√£o comandos que dizem ao Python:", "yellow")
        self.print_colored("‚Ä¢ 'Some estes n√∫meros'", "yellow")
        self.print_colored("‚Ä¢ 'Divida este valor'", "yellow")
        self.print_colored("‚Ä¢ 'Calcule a pot√™ncia'", "yellow")
        
        self.print_colored("\nüíª Em Python, voc√™ escreve matem√°tica quase como no papel!", "info")
        self.print_colored("A diferen√ßa √© que o Python executa na hora e mostra o resultado.", "green")
        
        self.print_section("\nüéØ COMPARANDO COM O MUNDO REAL:")
        
        codigo = '''# Matem√°tica tradicional vs Python
print("üìù Na escola voc√™ escreve: 2 + 3 = ?")
print("üíª No Python voc√™ escreve: 2 + 3")
print(f"E o resultado √©: {2 + 3}")

print("\nüßÆ Vamos ver mais exemplos:")
print(f"10 - 4 = {10 - 4}")
print(f"5 * 6 = {5 * 6}")
print(f"15 / 3 = {15 / 3}")'''
        
        self.exemplo(codigo)
        self.executar_codigo(codigo)
        
        self.print_tip("\nüí° VANTAGEM: Python calcula tudo automaticamente!")
        
        self.print_colored("\nüéÜ ONDE ISSO √â USADO NA VIDA REAL:", "info")
        self.print_colored("üè¶ Bancos: Calcular juros e parcelamentos", "green")
        self.print_colored("üõçÔ∏è E-commerce: Pre√ßos com desconto", "green")
        self.print_colored("üéÆ Games: Sistema de pontua√ß√£o", "green")
        self.print_colored("üìà Empresas: Relat√≥rios financeiros", "green")
        
        self.pausar()

    def _secao_operadores_basicos(self) -> None:
        """Se√ß√£o: Operadores b√°sicos (+, -, *, /)"""
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("‚ûï OPERADORES B√ÅSICOS")

        self.print_colored("‚ûï Os operadores b√°sicos s√£o como ferramentas universais...", "info")
        self.print_colored("Voc√™ vai usar eles o tempo todo, em qualquer programa!", "cyan")
        
        self.print_section("\nüéØ OS 4 OPERADORES ESSENCIAIS:")
        
        operadores = [
            ("+", "SOMA", "Junta valores", "2 + 3 = 5"),
            ("-", "SUBTRA√á√ÉO", "Retira valores", "10 - 4 = 6"),
            ("*", "MULTIPLICA√á√ÉO", "Repete valores", "3 * 4 = 12"),
            ("/", "DIVIS√ÉO", "Divide valores", "15 / 3 = 5.0")
        ]
        
        for simbolo, nome, descricao, exemplo in operadores:
            self.print_colored(f"{simbolo} {nome}: {descricao}", "yellow")
            self.print_colored(f"   Exemplo: {exemplo}", "cyan")
            print()
        
        self.print_section("\nüíª EXEMPLOS PR√ÅTICOS:")
        
        codigo = '''# Operadores b√°sicos em a√ß√£o
# Vamos simular uma compra no mercado

preco_pao = 5.50
preco_leite = 4.20
preco_ovos = 8.90

print("=== COMPRAS NO MERCADO ===")
print(f"üçû P√£o: R$ {preco_pao}")
print(f"ü•õ Leite: R$ {preco_leite}")
print(f"ü•ö Ovos: R$ {preco_ovos}")

# Soma: total da compra
total = preco_pao + preco_leite + preco_ovos
print(f"\n‚ûï Total da compra: R$ {total:.2f}")

# Subtra√ß√£o: troco
dinheiro = 25.00
troco = dinheiro - total
print(f"‚ûñ Troco: R$ {troco:.2f}")

# Multiplica√ß√£o: comprar v√°rias unidades
quantidade_paes = 3
total_paes = preco_pao * quantidade_paes
print(f"\n‚úñÔ∏è {quantidade_paes} p√£es: R$ {total_paes:.2f}")

# Divis√£o: dividir conta entre amigos
amigos = 2
valor_por_pessoa = total / amigos
print(f"‚ûó Dividindo entre {amigos} pessoas: R$ {valor_por_pessoa:.2f} cada")'''
        
        self.exemplo(codigo)
        self.executar_codigo(codigo)
        
        self.print_tip("\nüí° OBSERVE: Python respeita os tipos! 15 / 3 = 5.0 (float, n√£o int)")
        
        self.print_colored("\nüéÜ USOS PROFISSIONAIS:", "info")
        self.print_colored("üí∞ Sistemas de pagamento (soma, desconto)", "green")
        self.print_colored("üìà Planilhas inteligentes (c√°lculos autom√°ticos)", "green")
        self.print_colored("üéÆ Jogos (pontos, vida, dano)", "green")
        self.print_colored("üìä An√°lise de dados (m√©dias, somat√≥rios)", "green")
        
        self.pausar()

    def _secao_operadores_avancados(self) -> None:
        """Se√ß√£o: Operadores avan√ßados (**, //, %)"""
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üöÄ OPERADORES AVAN√áADOS")

        self.print_colored("üöÄ Os operadores avan√ßados s√£o como ferramentas especiais...", "info")
        self.print_colored("Eles resolvem problemas que os b√°sicos n√£o conseguem!", "cyan")
        
        self.print_section("\nüéØ OS 3 OPERADORES ESPECIAIS:")
        
        operadores_avancados = [
            ("**", "POT√äNCIA", "Eleva √† pot√™ncia", "2 ** 3 = 8 (2 ao cubo)"),
            ("//", "DIVIS√ÉO INTEIRA", "Divis√£o sem decimais", "10 // 3 = 3 (s√≥ a parte inteira)"),
            ("%", "RESTO (M√ìDULO)", "Sobra da divis√£o", "10 % 3 = 1 (resto da divis√£o)")
        ]
        
        for simbolo, nome, descricao, exemplo in operadores_avancados:
            self.print_colored(f"{simbolo} {nome}: {descricao}", "yellow")
            self.print_colored(f"   Exemplo: {exemplo}", "cyan")
            print()
        
        self.print_section("\nüß™ POT√äNCIA (**) - O MAIS PODEROSO:")
        
        codigo_potencia = '''# Pot√™ncia em a√ß√£o
print("=== CALCULADORA DE POT√äNCIAS ===")

# Casos simples
print(f"2 ao quadrado: 2 ** 2 = {2 ** 2}")
print(f"3 ao cubo: 3 ** 3 = {3 ** 3}")
print(f"10 ao quadrado: 10 ** 2 = {10 ** 2}")

# Casos pr√°ticos
print("\n=== APLICA√á√ïES PR√ÅTICAS ===")

# Juros compostos
capital = 1000
taxa = 1.05  # 5% ao m√™s
meses = 12
valor_final = capital * (taxa ** meses)
print(f"Investimento: R$ {capital} por {meses} meses a 5%")
print(f"Valor final: R$ {valor_final:.2f}")

# √Årea de um quadrado
lado = 5
area = lado ** 2
print(f"\n√Årea de quadrado {lado}x{lado}: {area} m¬≤")'''
        
        self.exemplo(codigo_potencia)
        self.executar_codigo(codigo_potencia)
        
        self.print_section("\nüî¢ DIVIS√ÉO INTEIRA (//) - PARA QUANTIDADES:")
        
        codigo_divisao = '''# Divis√£o inteira - s√≥ n√∫meros inteiros
print("=== DIVIS√ÉO INTEIRA ===")

# Exemplo: Organizar pessoas em grupos
pessoas = 23
grupos_de = 5

# Quantos grupos completos?
grupos_completos = pessoas // grupos_de
print(f"{pessoas} pessoas em grupos de {grupos_de}")
print(f"Grupos completos: {grupos_completos}")

# Exemplo: Pacotes
chocolates = 47
chocolates_por_pacote = 6
pacotes = chocolates // chocolates_por_pacote
print(f"\n{chocolates} chocolates, {chocolates_por_pacote} por pacote")
print(f"Pacotes cheios: {pacotes}")

# Comparando com divis√£o normal
print(f"\nDivis√£o normal: {chocolates} / {chocolates_por_pacote} = {chocolates / chocolates_por_pacote}")
print(f"Divis√£o inteira: {chocolates} // {chocolates_por_pacote} = {chocolates // chocolates_por_pacote}")'''
        
        self.exemplo(codigo_divisao)
        self.executar_codigo(codigo_divisao)
        
        self.print_section("\nüîÑ RESTO (%) - O DETETIVE DOS N√öMEROS:")
        
        codigo_resto = '''# Operador resto - encontra sobras
print("=== OPERADOR RESTO ===")

# Descobrir sobras
chocolates = 47
chocolates_por_pacote = 6
pacotes = chocolates // chocolates_por_pacote
sobra = chocolates % chocolates_por_pacote

print(f"{chocolates} chocolates em pacotes de {chocolates_por_pacote}")
print(f"Pacotes: {pacotes}")
print(f"Sobram: {sobra} chocolates")

# Verificar se √© par ou √≠mpar
print("\n=== DETECTOR DE PARES E √çMPARES ===")
numeros = [10, 15, 22, 7, 100]

for numero in numeros:
    resto = numero % 2
    if resto == 0:
        tipo = "PAR"
    else:
        tipo = "√çMPAR"
    print(f"{numero} √© {tipo} (resto por 2: {resto})")

# Dias da semana
print("\n=== CALEND√ÅRIO INTELIGENTE ===")
dia_hoje = 3  # 0=Dom, 1=Seg, 2=Ter, 3=Qua, 4=Qui, 5=Sex, 6=Sab
dias_nomes = ["Domingo", "Segunda", "Ter√ßa", "Quarta", "Quinta", "Sexta", "S√°bado"]

print(f"Hoje √© {dias_nomes[dia_hoje]}")
print(f"Em 10 dias ser√°: {dias_nomes[(dia_hoje + 10) % 7]}")
print(f"Em 50 dias ser√°: {dias_nomes[(dia_hoje + 50) % 7]}")'''
        
        self.exemplo(codigo_resto)
        self.executar_codigo(codigo_resto)
        
        self.print_tip("\nüí° DICA PRO: O operador % √© usado para criar sistemas c√≠clicos!")
        
        self.print_colored("\nüéÜ USOS PROFISSIONAIS:", "info")
        self.print_colored("üìà ** - C√°lculos financeiros e cient√≠ficos", "green")
        self.print_colored("üì¶ // - Distribui√ß√£o de produtos e recursos", "green")
        self.print_colored("üîÑ % - Sistemas de turno, pagina√ß√£o, criptografia", "green")
        
        self.pausar()

    def _secao_precedencia(self) -> None:
        """Se√ß√£o: Ordem de preced√™ncia (PEMDAS)"""
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üéØ ORDEM DE PRECED√äNCIA (PEMDAS)")

        self.print_colored("üéØ Quando h√° v√°rias opera√ß√µes juntas, quem vai primeiro?", "info")
        self.print_colored("Python segue a mesma regra da matem√°tica: PEMDAS!", "cyan")
        
        self.print_section("\nüèÖ A REGRA PEMDAS:")
        self.print_colored("P - Par√™nteses () - SEMPRE primeiro", "yellow")
        self.print_colored("E - Expoentes ** - Pot√™ncias", "yellow")
        self.print_colored("M - Multiplica√ß√£o * - Da esquerda para direita", "yellow")
        self.print_colored("D - Divis√£o / - Da esquerda para direita", "yellow")
        self.print_colored("A - Adi√ß√£o + - Da esquerda para direita", "yellow")
        self.print_colored("S - Subtra√ß√£o - - Da esquerda para direita", "yellow")
        
        self.print_section("\nüíª EXEMPLOS PASSO A PASSO:")
        
        codigo_precedencia = '''# Demonstrando ordem de opera√ß√µes
print("=== ORDEM DE PRECED√äNCIA ===")

# Exemplo 1: Sem par√™nteses
resultado1 = 2 + 3 * 4
print(f"2 + 3 * 4 = {resultado1}")
print("Passo a passo:")
print("1. Primeiro: 3 * 4 = 12")
print("2. Depois: 2 + 12 = 14")

# Exemplo 2: Com par√™nteses
resultado2 = (2 + 3) * 4
print(f"\n(2 + 3) * 4 = {resultado2}")
print("Passo a passo:")
print("1. Primeiro: (2 + 3) = 5")
print("2. Depois: 5 * 4 = 20")

# Exemplo 3: Complexo
resultado3 = 2 ** 3 + 4 * 5 - 6 / 2
print(f"\n2 ** 3 + 4 * 5 - 6 / 2 = {resultado3}")
print("Passo a passo:")
print("1. Pot√™ncia: 2 ** 3 = 8")
print("2. Multiplica√ß√£o: 4 * 5 = 20")
print("3. Divis√£o: 6 / 2 = 3.0")
print("4. Soma/Subtra√ß√£o: 8 + 20 - 3.0 = 25.0")'''
        
        self.exemplo(codigo_precedencia)
        self.executar_codigo(codigo_precedencia)
        
        self.print_section("\nüõçÔ∏è EXEMPLO PR√ÅTICO - CALCULADORA DE DESCONTO:")
        
        codigo_desconto = '''# Calculadora de desconto com preced√™ncia
print("=== CALCULADORA DE DESCONTO ===")

preco_original = 100
desconto_percentual = 20
taxa_entrega = 15

# JEITO ERRADO (sem par√™nteses)
calculo_errado = preco_original - desconto_percentual / 100 * preco_original + taxa_entrega
print(f"C√°lculo ERRADO: {calculo_errado}")
print("Problema: Python fez 20/100 primeiro, depois multiplicou...")

# JEITO CERTO (com par√™nteses)
desconto_real = (desconto_percentual / 100) * preco_original
preco_com_desconto = preco_original - desconto_real
preco_final = preco_com_desconto + taxa_entrega

print(f"\nC√°lculo CORRETO:")
print(f"Pre√ßo original: R$ {preco_original:.2f}")
print(f"Desconto ({desconto_percentual}%): R$ {desconto_real:.2f}")
print(f"Pre√ßo com desconto: R$ {preco_com_desconto:.2f}")
print(f"+ Taxa entrega: R$ {taxa_entrega:.2f}")
print(f"Pre√ßo final: R$ {preco_final:.2f}")

# JEITO MAIS DIRETO (com par√™nteses)
preco_direto = preco_original * (1 - desconto_percentual/100) + taxa_entrega
print(f"\nC√°lculo direto: R$ {preco_direto:.2f}")'''
        
        self.exemplo(codigo_desconto)
        self.executar_codigo(codigo_desconto)
        
        self.print_tip("\nüí° DICA DE OURO: Na d√∫vida, use par√™nteses! Eles deixam seu c√≥digo mais claro.")
        
        self.print_colored("\nüéÜ POR QUE ISSO IMPORTA:", "info")
        self.print_colored("üí∞ Sistemas financeiros: Um erro de precedencia pode custar milh√µes", "green")
        self.print_colored("üéÆ Games: HP, dano, b√¥nus precisam ser calculados na ordem certa", "green")
        self.print_colored("üìä Relat√≥rios: M√©dias, percentuais e totais devem estar corretos", "green")
        
        self.pausar()

    def _secao_calculos_praticos(self) -> None:
        """Se√ß√£o: C√°lculos pr√°ticos do dia a dia"""
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üìä C√ÅLCULOS PR√ÅTICOS DO DIA A DIA")

        self.print_colored("üìä Vamos resolver problemas reais que voc√™ encontra no dia a dia!", "info")
        self.print_colored("Estes exemplos mostram o poder da programa√ß√£o na vida pr√°tica.", "cyan")
        
        self.print_section("\nüí∞ PROBLEMA 1: DIVIDIR CONTA NO RESTAURANTE")
        
        codigo_restaurante = '''# Dividir conta no restaurante
print("=== CALCULADORA DE RESTAURANTE ===")

# Dados da conta
valor_conta = 120.50
gorjeta_percentual = 10
numero_pessoas = 4

# C√°lculos
valor_gorjeta = valor_conta * (gorjeta_percentual / 100)
total_com_gorjeta = valor_conta + valor_gorjeta
valor_por_pessoa = total_com_gorjeta / numero_pessoas

print(f"Conta: R$ {valor_conta:.2f}")
print(f"Gorjeta ({gorjeta_percentual}%): R$ {valor_gorjeta:.2f}")
print(f"Total: R$ {total_com_gorjeta:.2f}")
print(f"Valor por pessoa ({numero_pessoas} pessoas): R$ {valor_por_pessoa:.2f}")

# Vers√£o com diferentes gorjetas
print("\n=== SIMULA√á√ÉO DE GORJETAS ===")
for gorjeta in [5, 10, 15, 20]:
    total = valor_conta * (1 + gorjeta/100)
    por_pessoa = total / numero_pessoas
    print(f"Gorjeta {gorjeta}%: R$ {por_pessoa:.2f} por pessoa")'''
        
        self.exemplo(codigo_restaurante)
        self.executar_codigo(codigo_restaurante)
        
        self.print_section("\nüè† PROBLEMA 2: CALCULADORA DE FINANCIAMENTO")
        
        codigo_financiamento = '''# Calculadora de financiamento
print("=== FINANCIAMENTO DE CASA ===")

valor_casa = 350000  # R$ 350 mil
entrada_percentual = 20  # 20% de entrada
parcelas = 360  # 30 anos (360 meses)
juros_anual = 8.5  # 8.5% ao ano

# C√°lculos
valor_entrada = valor_casa * (entrada_percentual / 100)
valor_financiado = valor_casa - valor_entrada
juros_mensal = juros_anual / 12 / 100  # Converter para mensal e decimal

# F√≥rmula da presta√ß√£o (simplificada)
# PMT = PV * (i * (1+i)^n) / ((1+i)^n - 1)
fator = (1 + juros_mensal) ** parcelas
prestacao = valor_financiado * (juros_mensal * fator) / (fator - 1)

total_pago = prestacao * parcelas
total_juros = total_pago - valor_financiado

print(f"Valor da casa: R$ {valor_casa:,.2f}")
print(f"Entrada ({entrada_percentual}%): R$ {valor_entrada:,.2f}")
print(f"Valor financiado: R$ {valor_financiado:,.2f}")
print(f"Presta√ß√£o mensal: R$ {prestacao:,.2f}")
print(f"Total de juros: R$ {total_juros:,.2f}")
print(f"Total pago: R$ {(valor_entrada + total_pago):,.2f}")

print(f"\nCada presta√ß√£o representar√° {(prestacao/8000)*100:.1f}% de um sal√°rio de R$ 8.000")'''
        
        self.exemplo(codigo_financiamento)
        self.executar_codigo(codigo_financiamento)
        
        self.print_section("\n‚õΩ PROBLEMA 3: CALCULADORA DE VIAGEM")
        
        codigo_viagem = '''# Calculadora de viagem
print("=== PLANEJADOR DE VIAGEM ===")

# Dados da viagem
distancia_km = 500  # S√£o Paulo - Rio
consumo_carro = 12  # km por litro
preco_litro = 5.50
pedegio_total = 45.80
diarias_hotel = 3
preco_diaria = 180.00

# C√°lculos de combust√≠vel
litros_necessarios = distancia_km / consummo_carro
custo_combustivel = litros_necessarios * preco_litro

# C√°lculos totais
custo_hotel = diarias_hotel * preco_diaria
custo_total_viagem = custo_combustivel + custo_hotel + pedagio_total

print(f"Dist√¢ncia: {distancia_km} km")
print(f"Consumo: {consummo_carro} km/L")
print(f"Litros necess√°rios: {litros_necessarios:.1f}L")
print(f"Custo combust√≠vel: R$ {custo_combustivel:.2f}")
print(f"Ped√°gio: R$ {pedagio_total:.2f}")
print(f"Hotel ({diarias_hotel} di√°rias): R$ {custo_hotel:.2f}")
print(f"\nTOTAL DA VIAGEM: R$ {custo_total_viagem:.2f}")

# Custo por pessoa
pessoas = 4
custo_por_pessoa = custo_total_viagem / pessoas
print(f"Custo por pessoa ({pessoas} pessoas): R$ {custo_por_pessoa:.2f}")'''
        
        # Fix the typo in the code before execution
        codigo_viagem_corrigido = codigo_viagem.replace('consummo_carro', 'consumo_carro').replace('pedagio_total', 'pedegio_total')
        
        self.exemplo(codigo_viagem)
        self.executar_codigo(codigo_viagem_corrigido)
        
        self.print_tip("\nüí° OBSERVOU? Programar √© resolver problemas reais de forma autom√°tica!")
        
        self.print_colored("\nüéÜ ONDE ESSAS HABILIDADES S√ÉO USADAS:", "info")
        self.print_colored("üè¶ Bancos: Simula√ß√µes de cr√©dito e financiamento", "green")
        self.print_colored("üì± Apps: Calculadoras de corrida, delivery, viagem", "green")
        self.print_colored("üè¢ Empresas: Planejamento or√ßament√°rio e de custos", "green")
        self.print_colored("üéØ Consultorias: Assessoria financeira personalizada", "green")
        
        self.pausar()

    def _secao_funcoes_matematicas(self) -> None:
        """Se√ß√£o: Fun√ß√µes matem√°ticas especiais"""
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üß™ FUN√á√ïES MATEM√ÅTICAS ESPECIAIS")

        self.print_colored("üß™ Python tem fun√ß√µes prontas para c√°lculos especiais!", "info")
        self.print_colored("S√£o como ferramentas m√°gicas para problemas comuns.", "cyan")
        
        self.print_section("\nüéØ AS 5 FUN√á√ïES MAIS √öTEIS:")
        
        funcoes = [
            ("round()", "ARREDONDAR", "round(3.7) = 4"),
            ("abs()", "VALOR ABSOLUTO", "abs(-5) = 5"),
            ("min()", "MENOR VALOR", "min(1, 5, 3) = 1"),
            ("max()", "MAIOR VALOR", "max(1, 5, 3) = 5"),
            ("sum()", "SOMAR LISTA", "sum([1, 2, 3]) = 6")
        ]
        
        for funcao, nome, exemplo in funcoes:
            self.print_colored(f"{funcao} - {nome}: {exemplo}", "yellow")
        
        self.print_section("\nüíª EXEMPLOS PR√ÅTICOS:")
        
        codigo_funcoes = '''# Fun√ß√µes matem√°ticas em a√ß√£o
print("=== FUN√á√ïES MATEM√ÅTICAS ===")

# round() - Arredondar n√∫meros
preco_bruto = 29.876
preco_bonito = round(preco_bruto, 2)  # 2 casas decimais
print(f"Pre√ßo bruto: R$ {preco_bruto}")
print(f"Pre√ßo arredondado: R$ {preco_bonito}")

# abs() - Valor absoluto (sempre positivo)
temperatura_ontem = -5
temperatura_hoje = 8
diferenca = abs(temperatura_hoje - temperatura_ontem)
print(f"\nTemperatura ontem: {temperatura_ontem}¬∞C")
print(f"Temperatura hoje: {temperatura_hoje}¬∞C")
print(f"Diferen√ßa: {diferenca}¬∞C")

# min() e max() - Menor e maior
notas = [8.5, 7.2, 9.1, 6.8, 8.9]
menor_nota = min(notas)
maior_nota = max(notas)
media = sum(notas) / len(notas)

print(f"\nNotas: {notas}")
print(f"Menor nota: {menor_nota}")
print(f"Maior nota: {maior_nota}")
print(f"M√©dia: {round(media, 2)}")

# sum() - Somar todos os valores
vendas_semana = [1200, 850, 1500, 900, 1800, 2100, 950]
total_vendas = sum(vendas_semana)
media_diaria = total_vendas / len(vendas_semana)

print(f"\nVendas da semana: {vendas_semana}")
print(f"Total: R$ {total_vendas:.2f}")
print(f"M√©dia di√°ria: R$ {round(media_diaria, 2)}")

# Encontrando extremos
melhor_dia = vendas_semana.index(max(vendas_semana)) + 1
pior_dia = vendas_semana.index(min(vendas_semana)) + 1
print(f"Melhor dia: {melhor_dia}¬∫ (R$ {max(vendas_semana)})")
print(f"Pior dia: {pior_dia}¬∫ (R$ {min(vendas_semana)})")'''
        
        self.exemplo(codigo_funcoes)
        self.executar_codigo(codigo_funcoes)
        
        self.print_section("\nüìà EXEMPLO AVAN√áADO - AN√ÅLISE DE DADOS:")
        
        codigo_analise = '''# An√°lise estat√≠stica simples
print("=== AN√ÅLISE ESTAT√çSTICA ===")

# Dados de vendas de 3 meses
vendas_janeiro = [15000, 18000, 12000, 16000]
vendas_fevereiro = [14000, 17000, 19000, 15000]
vendas_marco = [20000, 22000, 18000, 21000]

# Todas as vendas juntas
todas_vendas = vendas_janeiro + vendas_fevereiro + vendas_marco

# Estat√≠sticas gerais
total_vendas = sum(todas_vendas)
media_geral = total_vendas / len(todas_vendas)
maior_venda = max(todas_vendas)
menor_venda = min(todas_vendas)
amplitude = maior_venda - menor_venda

print(f"Total de vendas: R$ {total_vendas:,.2f}")
print(f"M√©dia geral: R$ {round(media_geral, 2):,.2f}")
print(f"Maior venda: R$ {maior_venda:,.2f}")
print(f"Menor venda: R$ {menor_venda:,.2f}")
print(f"Amplitude: R$ {amplitude:,.2f}")

# An√°lise por m√™s
print("\n=== AN√ÅLISE MENSAL ===")
meses = [
    ("Janeiro", vendas_janeiro),
    ("Fevereiro", vendas_fevereiro),
    ("Mar√ßo", vendas_marco)
]

for nome_mes, vendas_mes in meses:
    total_mes = sum(vendas_mes)
    media_mes = total_mes / len(vendas_mes)
    crescimento = ((media_mes - media_geral) / media_geral) * 100
    
    print(f"{nome_mes}:")
    print(f"  Total: R$ {total_mes:,.2f}")
    print(f"  M√©dia: R$ {round(media_mes, 2):,.2f}")
    print(f"  vs M√©dia geral: {round(crescimento, 1)}%")
    print()'''
        
        self.exemplo(codigo_analise)
        self.executar_codigo(codigo_analise)
        
        self.print_tip("\nüí° DICA: Essas fun√ß√µes s√£o os blocos b√°sicos da an√°lise de dados!")
        
        self.print_colored("\nüéÜ APLICA√á√ïES PROFISSIONAIS:", "info")
        self.print_colored("üìà Data Science: Base para an√°lises estat√≠sticas", "green")
        self.print_colored("üí∞ Finan√ßas: C√°lculos de risco e retorno", "green")
        self.print_colored("üéÆ Games: Sistemas de pontos e ranking", "green")
        self.print_colored("üè¢ Vendas: Relat√≥rios e metas autom√°ticas", "green")
        
        self.pausar()

    def _secao_aplicacoes_reais(self) -> None:
        """Se√ß√£o: Aplica√ß√µes no mundo real"""
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üåç APLICA√á√ïES NO MUNDO REAL")

        self.print_colored("üåç Vamos descobrir onde a matem√°tica Python √© usada no mundo!", "info")
        self.print_colored("Prepare-se para se surpreender com o que d√° para fazer!", "cyan")
        
        self.print_section("\nüè¶ 1. SISTEMA BANC√ÅRIO - NUBANK")
        self.print_colored("Como o Nubank calcula tudo automaticamente:", "yellow")
        
        codigo_banco = '''# Sistema banc√°rio simplificado
print("=== SISTEMA BANC√ÅRIO ===")

# Perfil do cliente
saldo = 2500.0
limite_cartao = 1500.0
renda_mensal = 4000.0
score = 750

# C√°lculo autom√°tico de cr√©dito
# F√≥rmula simplificada: (renda * score / 1000) + saldo
credito_disponivel = (renda_mensal * score / 1000) + saldo * 0.5
credito_aprovado = min(credito_disponivel, 10000)  # Limite m√°ximo

# An√°lise de risco
percentual_renda = (credito_aprovado / renda_mensal) * 100
if percentual_renda <= 300:
    classificacao = "BAIXO RISCO"
elif percentual_renda <= 500:
    classificacao = "M√âDIO RISCO"
else:
    classificacao = "ALTO RISCO"

print(f"Cliente:")
print(f"  Saldo: R$ {saldo:,.2f}")
print(f"  Renda: R$ {renda_mensal:,.2f}")
print(f"  Score: {score}")
print(f"\nAn√°lise autom√°tica:")
print(f"  Cr√©dito calculado: R$ {credito_disponivel:,.2f}")
print(f"  Cr√©dito aprovado: R$ {credito_aprovado:,.2f}")
print(f"  Classifica√ß√£o: {classificacao}")

# Simula√ß√£o de parcelamento
compra = 1200.0
print(f"\n=== SIMULA√á√ÉO DE PARCELAMENTO ===")
print(f"Compra: R$ {compra:.2f}")
for parcelas in [1, 3, 6, 12]:
    if parcelas == 1:
        juros = 0
        valor_parcela = compra
    else:
        juros = 2.5 * (parcelas - 1)  # 2.5% por m√™s adicional
        valor_total = compra * (1 + juros/100)
        valor_parcela = valor_total / parcelas
    
    print(f"{parcelas:2d}x: R$ {valor_parcela:6.2f} (total: R$ {valor_parcela * parcelas:,.2f})")'''
        
        self.exemplo(codigo_banco)
        self.executar_codigo(codigo_banco)
        
        self.print_section("\nüõçÔ∏è 2. E-COMMERCE - AMAZON/MERCADO LIVRE")
        self.print_colored("Como plataformas calculam pre√ßos, frete e recomenda√ß√µes:", "yellow")
        
        codigo_ecommerce = '''# Sistema de e-commerce
print("=== PLATAFORMA E-COMMERCE ===")

# Dados do produto
preco_base = 89.90
desconto_categoria = 15  # 15% off eletr√¥nicos
frete_base = 12.50
distancia_km = 150
avaliacao_vendedor = 4.8

# C√°lculo de pre√ßo din√¢mico
preco_com_desconto = preco_base * (1 - desconto_categoria/100)

# C√°lculo de frete din√¢mico
frete_por_km = 0.08
frete_calculado = frete_base + (distancia_km * frete_por_km)

# Frete gr√°tis para compras acima de R$ 80
if preco_com_desconto >= 80:
    frete_final = 0
    economia_frete = frete_calculado
else:
    frete_final = frete_calculado
    economia_frete = 0

# Pontua√ß√£o do produto (algoritmo simplificado)
pontuacao_preco = max(0, 10 - (preco_com_desconto / 10))  # Quanto menor, melhor
pontuacao_frete = 10 if frete_final == 0 else max(0, 10 - frete_final)
pontuacao_vendedor = avaliacao_vendedor * 2
pontuacao_total = round((pontuacao_preco + pontuacao_frete + pontuacao_vendedor) / 3, 1)

print(f"Produto: Smartphone XYZ")
print(f"Pre√ßo base: R$ {preco_base:.2f}")
print(f"Desconto: {desconto_categoria}%")
print(f"Pre√ßo final: R$ {preco_com_desconto:.2f}")
print(f"\nFrete:")
print(f"  Dist√¢ncia: {distancia_km} km")
print(f"  Calculado: R$ {frete_calculado:.2f}")
print(f"  Final: R$ {frete_final:.2f}")
if economia_frete > 0:
    print(f"  üéâ Frete GR√ÅTIS! (economia: R$ {economia_frete:.2f})")

print(f"\nAn√°lise do algoritmo:")
print(f"  Vendedor: {avaliacao_vendedor}/5.0 estrelas")
print(f"  Pontua√ß√£o total: {pontuacao_total}/10")
print(f"  Total da compra: R$ {preco_com_desconto + frete_final:.2f}")'''
        
        self.exemplo(codigo_ecommerce)
        self.executar_codigo(codigo_ecommerce)
        
        self.print_section("\nüéÆ 3. GAME DEVELOPMENT - SISTEMA DE PONTOS")
        self.print_colored("Como jogos calculam XP, n√≠vel e recompensas:", "yellow")
        
        codigo_game = '''# Sistema de jogo
print("=== RPG SISTEMA DE N√çVEL ===")

# Status do jogador
xp_atual = 8750
nivel_atual = 12
kills = 45
mortes = 8
tempo_jogo_horas = 25

# C√°lculo de n√≠vel (XP necess√°rio cresce exponencialmente)
xp_para_proximo = (nivel_atual + 1) ** 2 * 50
xp_faltando = xp_para_proximo - xp_atual
percentual_nivel = (xp_atual / xp_para_proximo) * 100

# C√°lculo de KDA (Kill/Death/Assist ratio)
kda = kills / max(mortes, 1)  # Evitar divis√£o por zero

# Sistema de ranking
if kda >= 3.0:
    rank = "LENDA"
    multiplicador_xp = 1.5
elif kda >= 2.0:
    rank = "VETERANO"
    multiplicador_xp = 1.3
elif kda >= 1.5:
    rank = "EXPERIENTE"
    multiplicador_xp = 1.1
else:
    rank = "NOVATO"
    multiplicador_xp = 1.0

# Recompensa por tempo de jogo
bonus_tempo = min(tempo_jogo_horas * 10, 500)  # M√°x 500 XP

# XP total da pr√≥xima partida (simulada)
xp_base_partida = 150
xp_partida = round(xp_base_partida * multiplicador_xp) + bonus_tempo

print(f"Jogador: DragonSlayer2024")
print(f"N√≠vel: {nivel_atual}")
print(f"XP: {xp_atual:,} / {xp_para_proximo:,} ({percentual_nivel:.1f}%)")
print(f"XP faltando: {xp_faltando:,}")
print(f"\nEstat√≠sticas:")
print(f"  Kills: {kills}")
print(f"  Mortes: {mortes}")
print(f"  KDA: {kda:.2f}")
print(f"  Rank: {rank}")
print(f"  Tempo: {tempo_jogo_horas}h")
print(f"\nPr√≥xima partida:")
print(f"  XP base: {xp_base_partida}")
print(f"  Multiplicador: {multiplicador_xp}x")
print(f"  B√¥nus tempo: +{bonus_tempo}")
print(f"  Total XP: {xp_partida}")

# Simular se vai subir de n√≠vel
if xp_atual + xp_partida >= xp_para_proximo:
    print(f"  üéâ VAI SUBIR DE N√çVEL!")'''
        
        self.exemplo(codigo_game)
        self.executar_codigo(codigo_game)
        
        self.print_colored("\nüéÜ O QUE VOC√ä ACABOU DE VER:", "info")
        self.print_colored("üßÆ F√≥rmulas matem√°ticas controlam nossas vidas digitais!", "green")
        self.print_colored("üí∞ Cada compra, cada cr√©dito, cada jogo usa esses c√°lculos", "green")
        self.print_colored("üöÄ E agora VOC√ä sabe fazer isso tamb√©m!", "green")
        
        self.print_tip("\nüí° INSPIRE-SE: Estes exemplos mostram como programadores criam produtos que milh√µes usam!")
        
        self.pausar()

    def _secao_pratica_interativa(self) -> None:
        """Se√ß√£o de pr√°tica interativa do m√≥dulo"""

        # === INTRODU√á√ÉO MOTIVACIONAL ===
        if self.ui:
            self.ui.clear_screen()
            
        self.print_section("HORA DE PRATICAR!", "üéØ", "success")
        self.print_colored("Vamos testar o que voc√™ aprendeu com exerc√≠cios pr√°ticos!", "text")

        # === INSTRU√á√ïES PARA INICIANTES ===
        self.print_tip("Para iniciantes: Cada exerc√≠cio √© opcional, mas recomendamos fazer todos!")
        self.print_colored("\nüéì SOBRE OS EXERC√çCIOS:", "info")
        self.print_colored("‚Ä¢ N√£o se preocupe se errar - faz parte do aprendizado!", "text")
        self.print_colored("‚Ä¢ Voc√™ pode tentar quantas vezes quiser", "text")
        self.print_colored("‚Ä¢ Digite 'help' se precisar de ajuda", "text")
        self.print_colored("‚Ä¢ Use Ctrl+C para voltar ao menu principal se necess√°rio", "text")

        # === MENU PRINCIPAL DE EXERC√çCIOS ===
        while True:
            print("\nEscolha uma atividade:")
            print("1. üìù Quiz de Conhecimentos")
            print("2. üíª Complete o C√≥digo")
            print("3. üé® Exerc√≠cio Criativo")
            print("0. Continuar para o Mini Projeto")

            try:
                escolha = input("\nüëâ Sua escolha: ").strip().lower()

                if escolha in ["0", "continuar", "sair", "proximo"]:
                    break
                elif escolha in ["1", "quiz", "conhecimentos"]:
                    try:
                        self._exercicio_quiz_operacoes()
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Quiz interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no quiz. Continuando...")
                elif escolha in ["2", "codigo", "completar"]:
                    try:
                        self._exercicio_completar_codigo()
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio de c√≥digo interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio de c√≥digo. Continuando...")
                elif escolha in ["3", "criativo"]:
                    try:
                        self._exercicio_criativo_calculadora()
                    except KeyboardInterrupt:
                        self.print_warning("\n\n‚ö†Ô∏è Exerc√≠cio criativo interrompido. Voltando ao menu principal...")
                        return
                    except Exception as e:
                        self.print_warning("‚ùå Erro no exerc√≠cio criativo. Continuando...")
                elif escolha in ["help", "ajuda", "h", "?"]:
                    self._show_help()
                else:
                    self.print_warning("‚ùå Op√ß√£o inv√°lida! Digite 1, 2, 3, 0 ou 'help' para ajuda.")

            except KeyboardInterrupt:
                self.print_warning("\n\n‚ö†Ô∏è Opera√ß√£o cancelada pelo usu√°rio. Voltando ao menu principal...")
                return  # CR√çTICO: Return em vez de break para sair completamente
            except Exception as e:
                self.print_warning("‚ùå Erro inesperado no menu. Tente novamente.")

    def _show_help(self) -> None:
        """Mostra ajuda sobre as op√ß√µes dispon√≠veis"""
        self.print_section("AJUDA - SE√á√ÉO DE PR√ÅTICA", "‚ùì", "info")
        help_text = [
            "üìù OP√á√ÉO 1 - Quiz: Teste seus conhecimentos sobre opera√ß√µes matem√°ticas",
            "üíª OP√á√ÉO 2 - Complete o C√≥digo: 3 exerc√≠cios progressivos",
            "üé® OP√á√ÉO 3 - Exerc√≠cio Criativo: Crie sua calculadora personalizada",
            "üî¢ OP√á√ÉO 0 - Continue para o Mini Projeto final",
            "",
            "üí° DICAS:",
            "‚Ä¢ Voc√™ pode digitar o n√∫mero ou palavras como 'quiz', 'codigo'",
            "‚Ä¢ Digite 'help' a qualquer momento para ver esta ajuda",
            "‚Ä¢ Use Ctrl+C se quiser voltar ao menu principal",
            "‚Ä¢ Recomendamos fazer todas as atividades para aprender melhor!"
        ]

        for line in help_text:
            if line:
                self.print_colored(f"  {line}", "text")
            else:
                print()

        input("\nüî∏ Pressione ENTER para voltar ao menu...")

    def _exercicio_quiz_operacoes(self) -> None:
        """Quiz sobre opera√ß√µes matem√°ticas"""
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üß† QUIZ R√ÅPIDO - OPERA√á√ïES")

        self.print_colored("üß† Vamos testar seus conhecimentos com 5 perguntas!", "info")
        
        perguntas = [
            {
                'pergunta': 'Qual √© o resultado de 2 ** 3?',
                'opcoes': ['A) 6', 'B) 8', 'C) 9', 'D) 5'],
                'resposta_correta': 'B',
                'explicacao': '2 ** 3 = 2 √ó 2 √ó 2 = 8. O operador ** calcula pot√™ncias.'
            },
            {
                'pergunta': 'O que faz o operador % (m√≥dulo)?',
                'opcoes': ['A) Multiplica√ß√£o', 'B) Percentual', 'C) Resto da divis√£o', 'D) Pot√™ncia'],
                'resposta_correta': 'C',
                'explicacao': 'O operador % retorna o resto da divis√£o. Ex: 10 % 3 = 1.'
            },
            {
                'pergunta': 'Qual √© o resultado de 10 // 3?',
                'opcoes': ['A) 3.33', 'B) 3', 'C) 4', 'D) 1'],
                'resposta_correta': 'B',
                'explicacao': 'O operador // faz divis√£o inteira, retornando apenas a parte inteira.'
            },
            {
                'pergunta': 'Na express√£o 2 + 3 * 4, qual opera√ß√£o √© feita primeiro?',
                'opcoes': ['A) 2 + 3', 'B) 3 * 4', 'C) Ambas simultaneamente', 'D) Depende'],
                'resposta_correta': 'B',
                'explicacao': 'Multiplica√ß√£o tem preced√™ncia sobre adi√ß√£o (regra PEMDAS).'
            },
            {
                'pergunta': 'O que retorna abs(-15)?',
                'opcoes': ['A) -15', 'B) 15', 'C) 0', 'D) Erro'],
                'resposta_correta': 'B',
                'explicacao': 'abs() retorna o valor absoluto, sempre positivo. abs(-15) = 15.'
            }
        ]
        
        acertos = 0
        for i, pergunta in enumerate(perguntas, 1):
            self.print_section(f"üìù PERGUNTA {i}/5", "üìù")
            self.print_colored(f"\n{pergunta['pergunta']}", "warning")
            print()
            for opcao in pergunta['opcoes']:
                self.print_colored(f"  {opcao}", "yellow")
            
            while True:
                resposta = input("\nüéØ Sua resposta (A, B, C ou D): ").upper().strip()
                if resposta in ['A', 'B', 'C', 'D']:
                    break
                self.print_warning("‚ö†Ô∏è Digite apenas A, B, C ou D")
            
            if resposta == pergunta['resposta_correta']:
                self.print_success(f"‚úÖ CORRETO! {pergunta['explicacao']}")
                acertos += 1
            else:
                self.print_colored(f"‚ùå Incorreto. {pergunta['explicacao']}", "error")
            
            self.pausar()
        
        # Resultado final
        percentual = (acertos / len(perguntas)) * 100
        if percentual >= 80:
            self.print_success(f"\nüéÜ EXCELENTE! Voc√™ acertou {acertos}/5 ({percentual:.0f}%)")
        elif percentual >= 60:
            self.print_colored(f"\nüí™ BOM! Voc√™ acertou {acertos}/5 ({percentual:.0f}%)", "yellow")
        else:
            self.print_colored(f"\nüìö Continue estudando! Voc√™ acertou {acertos}/5 ({percentual:.0f}%)", "cyan")

    def _exercicio_completar_codigo(self) -> None:
        """Exerc√≠cios de completar c√≥digo"""
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üîß COMPLETAR C√ìDIGO - OPERA√á√ïES")

        self.print_colored("üîß Agora vamos completar trechos de c√≥digo!", "info")
        self.print_tip("Vou mostrar c√≥digo incompleto e voc√™ me diz o que est√° faltando.")
        
        exercicios = [
            {
                'titulo': 'Pot√™ncia',
                'codigo_incompleto': '''base = 3
expoente = 4
resultado = base ______ expoente
print(f"{base} elevado a {expoente} = {resultado}")''',
                'resposta_correta': '**',
                'codigo_completo': '''base = 3
expoente = 4
resultado = base ** expoente
print(f"{base} elevado a {expoente} = {resultado}")''',
                'explicacao': 'Use ** para calcular pot√™ncias em Python.'
            },
            {
                'titulo': 'Resto da divis√£o',
                'codigo_incompleto': '''numero = 17
divisor = 5
resto = numero ______ divisor
print(f"O resto de {numero} dividido por {divisor} √© {resto}")''',
                'resposta_correta': '%',
                'codigo_completo': '''numero = 17
divisor = 5
resto = numero % divisor
print(f"O resto de {numero} dividido por {divisor} √© {resto}")''',
                'explicacao': 'Use % para calcular o resto da divis√£o (m√≥dulo).'
            },
            {
                'titulo': 'Arredondamento',
                'codigo_incompleto': '''preco = 29.876
preco_arredondado = ______(preco, 2)
print(f"Pre√ßo: R$ {preco_arredondado}")''',
                'resposta_correta': 'round',
                'codigo_completo': '''preco = 29.876
preco_arredondado = round(preco, 2)
print(f"Pre√ßo: R$ {preco_arredondado}")''',
                'explicacao': 'Use round() para arredondar n√∫meros.'
            }
        ]
        
        for i, exercicio in enumerate(exercicios, 1):
            self.print_section(f"üìù EXERC√çCIO {i}/3: {exercicio['titulo']}", "üìù")
            self.print_colored("\nC√≥digo incompleto:", "warning")
            self.exemplo(exercicio['codigo_incompleto'])
            
            resposta = input("\nüéØ O que deve substituir os ______ ? ").strip()
            
            if resposta.lower() == exercicio['resposta_correta'].lower():
                self.print_success(f"‚úÖ CORRETO! {exercicio['explicacao']}")
                self.print_colored("\nC√≥digo completo:", "success")
                self.exemplo(exercicio['codigo_completo'])
                self.executar_codigo(exercicio['codigo_completo'])
            else:
                self.print_colored(f"‚ùå N√£o foi dessa vez. A resposta era: {exercicio['resposta_correta']}", "error")
                self.print_colored(exercicio['explicacao'], "yellow")
                self.print_colored("\nC√≥digo correto:", "info")
                self.exemplo(exercicio['codigo_completo'])
            
            self.pausar()

    def _exercicio_criativo_calculadora(self) -> None:
        """Exerc√≠cio criativo com opera√ß√µes"""
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üé® EXERC√çCIO CRIATIVO - CALCULADORA PESSOAL")

        self.print_colored("üé® Vamos criar uma calculadora personalizada para VOC√ä!", "info")
        self.print_tip("Voc√™ vai criar c√°lculos √∫teis para seu dia a dia.")
        
        self.print_section("\nüéØ DESAFIO:")
        self.print_colored("Crie uma calculadora que resolva UM problema do seu dia:", "cyan")
        self.print_colored("‚Ä¢ Dividir conta no restaurante", "yellow")
        self.print_colored("‚Ä¢ Calcular desconto em compras", "yellow")
        self.print_colored("‚Ä¢ Descobrir quantas horas faltam para algo", "yellow")
        self.print_colored("‚Ä¢ Ou qualquer c√°lculo que voc√™ sempre faz!", "yellow")
        
        print("\n" + "-"*50)
        print("üìù Vamos criar juntos:")
        
        try:
            # Escolher tipo de calculadora
            print("\nEscolha o tipo de calculadora:")
            print("1. üçΩÔ∏è Divisor de conta")
            print("2. üí∞ Calculadora de desconto")
            print("3. ‚è∞ Contador de tempo")
            print("4. üé® Criar minha pr√≥pria")
            
            escolha = input("\nüéØ Sua escolha (1-4): ").strip()
            
            if escolha == "1":
                self._criar_divisor_conta()
            elif escolha == "2":
                self._criar_calculadora_desconto()
            elif escolha == "3":
                self._criar_contador_tempo()
            elif escolha == "4":
                self._criar_calculadora_personalizada()
            else:
                self.print_warning("Op√ß√£o inv√°lida! Vou criar uma calculadora b√°sica para voc√™.")
                self._criar_calculadora_basica()
                
        except KeyboardInterrupt:
            raise
        except Exception as e:
            self.print_error(f"‚ùå Erro no exerc√≠cio: {e}")
            self.print_tip("Tudo bem! O importante √© praticar.")
        
        self.pausar()

    def _criar_divisor_conta(self) -> None:
        """Criar divisor de conta personalizado"""
        self.print_colored("\nüçΩÔ∏è Vamos criar seu divisor de conta personalizado!", "info")
        
        # Coletar dados
        try:
            valor_str = input("üí∞ Valor total da conta: R$ ").replace(',', '.')
            valor = float(valor_str) if valor_str else 100.0
            
            pessoas_str = input("üë• N√∫mero de pessoas: ").strip()
            pessoas = int(pessoas_str) if pessoas_str.isdigit() else 4
            
            gorjeta_str = input("üéÜ Gorjeta (% ou deixe vazio para 10%): ").strip()
            gorjeta = float(gorjeta_str) if gorjeta_str else 10.0
            
        except:
            valor, pessoas, gorjeta = 100.0, 4, 10.0
        
        # Gerar c√≥digo personalizado
        codigo_gerado = f'''# üçΩÔ∏è DIVISOR DE CONTA PERSONALIZADO
print("üçΩÔ∏è" * 20)
print("   SEU DIVISOR DE CONTA")
print("üçΩÔ∏è" * 20)

# Seus dados
valor_conta = {valor}
num_pessoas = {pessoas}
gorjeta_percent = {gorjeta}

# C√°lculos autom√°ticos
valor_gorjeta = valor_conta * (gorjeta_percent / 100)
total_com_gorjeta = valor_conta + valor_gorjeta
valor_por_pessoa = total_com_gorjeta / num_pessoas

# Resultado
print(f"Conta: R$ {{valor_conta:.2f}}")
print(f"Gorjeta ({{gorjeta_percent}}%): R$ {{valor_gorjeta:.2f}}")
print(f"Total: R$ {{total_com_gorjeta:.2f}}")
print(f"Por pessoa ({{num_pessoas}} pessoas): R$ {{valor_por_pessoa:.2f}}")

# B√¥nus: simular diferentes gorjetas
print("\nüìà SIMULA√á√ÉO DE GORJETAS:")
for g in [5, 10, 15, 20]:
    total = valor_conta * (1 + g/100) / num_pessoas
    print(f"{{g:2d}}%: R$ {{total:.2f}} por pessoa")

print("\nüçΩÔ∏è" * 20)'''
        
        self.print_colored("\nüíª Sua calculadora personalizada:", "info")
        self.exemplo(codigo_gerado)
        
        print("\n" + "="*50)
        print("üâ∫ EXECUTANDO SUA CALCULADORA:")
        print("="*50)
        
        exec(codigo_gerado.split('print("üçΩÔ∏è" * 20)')[1])
        
        self.print_success("\nüéâ Sua calculadora est√° pronta! Salve esse c√≥digo para usar sempre!")

    def _criar_calculadora_desconto(self) -> None:
        """Criar calculadora de desconto"""
        self.print_colored("\nüí∞ Vamos criar sua calculadora de desconto!", "info")
        
        # C√≥digo exemplo
        codigo_desconto = '''# üí∞ CALCULADORA DE DESCONTO INTELIGENTE
print("üí∞" * 25)
print("   CALCULADORA DE DESCONTO")
print("üí∞" * 25)

# Simula√ß√£o com produto real
preco_original = 199.90
desconto_percentual = 30

# C√°lculos
valor_desconto = preco_original * (desconto_percentual / 100)
preco_final = preco_original - valor_desconto
economia = valor_desconto

print(f"Produto: Smartphone XYZ")
print(f"Pre√ßo original: R$ {preco_original:.2f}")
print(f"Desconto: {desconto_percentual}%")
print(f"Voc√™ economiza: R$ {economia:.2f}")
print(f"Pre√ßo final: R$ {preco_final:.2f}")

# Comparador de descontos
print(f"\nüìà COMPARADOR DE DESCONTOS:")
for desc in [10, 20, 30, 40, 50]:
    preco_com_desc = preco_original * (1 - desc/100)
    economia_desc = preco_original - preco_com_desc
    print(f"{desc:2d}%: R$ {preco_com_desc:6.2f} (economia: R$ {economia_desc:.2f})")

print("\nüí∞" * 25)'''
        
        self.print_colored("\nüíª Calculadora de desconto inteligente:", "info")
        self.exemplo(codigo_desconto)
        self.executar_codigo(codigo_desconto)
        
        self.print_success("\nüéâ Perfeita para comparar ofertas em lojas!")

    def _criar_contador_tempo(self) -> None:
        """Criar contador de tempo"""
        self.print_colored("\n‚è∞ Vamos criar seu contador de tempo!", "info")
        
        codigo_tempo = '''# ‚è∞ CONTADOR DE TEMPO INTELIGENTE
print("‚è∞" * 25)
print("   CONTADOR DE TEMPO")
print("‚è∞" * 25)

# Exemplo: quanto tempo para o fim de semana?
hora_atual = 14  # 14h (2pm)
dia_atual = 2    # Ter√ßa-feira (0=Seg, 1=Ter, 2=Qua...)

# C√°lculos
horas_restantes_hoje = 24 - hora_atual
dias_para_sexta = (4 - dia_atual) % 7  # Sexta √© dia 4
horas_totais_para_sexta = dias_para_sexta * 24 + (18 - hora_atual)  # At√© 18h da sexta

print(f"Agora s√£o {hora_atual}h de uma Ter√ßa-feira")
print(f"Horas restantes hoje: {horas_restantes_hoje}h")
print(f"Dias para sexta: {dias_para_sexta}")
print(f"Horas at√© o fim do expediente (sexta 18h): {horas_totais_para_sexta}h")

# Converter para dias e horas
dias_completos = horas_totais_para_sexta // 24
horas_restantes = horas_totais_para_sexta % 24

print(f"\nüèÅ Faltam {dias_completos} dias e {horas_restantes} horas!")

# B√¥nus: contador para eventos
eventos = [
    ("Fim de semana", 2 * 24),  # 2 dias
    ("Pr√≥ximo feriado", 15 * 24),  # 15 dias
    ("F√©rias", 60 * 24)  # 60 dias
]

print(f"\nüìÖ EVENTOS IMPORTANTES:")
for evento, horas in eventos:
    dias = horas // 24
    print(f"{evento}: {dias} dias ({horas} horas)")

print("\n‚è∞" * 25)'''
        
        self.print_colored("\nüíª Contador de tempo inteligente:", "info")
        self.exemplo(codigo_tempo)
        self.executar_codigo(codigo_tempo)
        
        self.print_success("\nüéâ √ìtimo para planejar eventos e metas!")

    def _criar_calculadora_personalizada(self) -> None:
        """Criar calculadora personalizada"""
        self.print_colored("\nüé® Vamos criar algo √∫nico para voc√™!", "info")
        
        # Exemplo gen√©rico mas √∫til
        codigo_personalizado = '''# üé® SUA CALCULADORA PERSONALIZADA
print("üé®" * 25)
print("   CALCULADORA UNIVERSAL")
print("üé®" * 25)

# Exemplos de c√°lculos √∫teis
print("üìà C√ÅLCULOS √öTEIS DO DIA A DIA:")

# 1. Velocidade m√©dia
distancia = 120  # km
tempo = 1.5      # horas
velocidade = distancia / tempo
print(f"\n1. Velocidade m√©dia: {velocidade:.1f} km/h")

# 2. Consumo de combust√≠vel
km_rodados = 400
litros_gastos = 35
consumo = km_rodados / litros_gastos
print(f"2. Consumo do carro: {consumo:.2f} km/L")

# 3. √çndice de Massa Corporal (IMC)
peso = 70  # kg
altura = 1.75  # metros
imc = peso / (altura ** 2)
print(f"3. IMC: {imc:.1f}")

# 4. Juros simples
capital = 1000
taxa = 5  # % ao m√™s
meses = 12
juros = capital * (taxa / 100) * meses
total = capital + juros
print(f"4. Investimento: R$ {total:.2f} em {meses} meses")

# 5. Regra de 3 simples
# Se 3 pessoas comem 2 pizzas, quantas pizzas para 8 pessoas?
pessoas_base = 3
pizzas_base = 2
pessoas_nova = 8
pizzas_necessarias = (pessoas_nova * pizzas_base) / pessoas_base
print(f"5. Pizzas para {pessoas_nova} pessoas: {pizzas_necessarias:.1f}")

print(f"\nüèÜ Voc√™ domina a matem√°tica do dia a dia!")
print("üé®" * 25)'''
        
        self.print_colored("\nüíª Calculadora universal:", "info")
        self.exemplo(codigo_personalizado)
        self.executar_codigo(codigo_personalizado)
        
        self.print_success("\nüéâ Agora voc√™ tem uma caixa de ferramentas matem√°tica!")

    def _criar_calculadora_basica(self) -> None:
        """Criar calculadora b√°sica"""
        codigo_basico = '''# üßÆ CALCULADORA B√ÅSICA
print("üßÆ OPERA√á√ïES B√ÅSICAS")
a, b = 10, 3
print(f"{a} + {b} = {a + b}")
print(f"{a} - {b} = {a - b}")
print(f"{a} * {b} = {a * b}")
print(f"{a} / {b} = {a / b:.2f}")'''
        
        self.executar_codigo(codigo_basico)

    def _mini_projeto_calculadora_cientifica(self) -> None:
        """Mini Projeto - M√≥dulo 6: Calculadora Cient√≠fica Multi-funcional"""

        # === CABE√áALHO IMPACTANTE ===
        if self.ui:
            self.ui.clear_screen()
            self.ui.header("üéØ MINI PROJETO: CALCULADORA CIENT√çFICA PESSOAL")
        else:
            print("\n" + "="*50)
            print("üéØ MINI PROJETO: CALCULADORA CIENT√çFICA PESSOAL")
            print("="*50)

        # === INTRODU√á√ÉO MOTIVACIONAL ===
        self.print_success("üéâ Vamos criar sua calculadora cient√≠fica aplicando todas as opera√ß√µes que voc√™ aprendeu!")

        self.print_colored(
            "Calculadora Cient√≠fica Multi-funcional",
            "info"
        )
        self.print_colored(
            "Um sistema completo que resolve problemas matem√°ticos do mundo real, desde c√°lculos b√°sicos at√© an√°lises financeiras e estat√≠sticas",
            "text"
        )

        # === APLICA√á√ïES NO MUNDO REAL ===
        self.print_colored("\nEste tipo de programa √© √∫til para:", "text")
        usos_praticos = [
            "Engenheiros calculando estruturas e cargas",
            "Analistas financeiros avaliando investimentos",
            "Estudantes resolvendo problemas matem√°ticos",
            "Empres√°rios analisando custos e lucros"
        ]
        for uso in usos_praticos:
            self.print_colored(f"‚Ä¢ {uso}", "accent")

        # === DESENVOLVIMENTO PASSO A PASSO ===

        # PASSO 1: Definir funcionalidades
        self.print_section("PASSO 1: Definindo as Funcionalidades", "üìù", "info")
        self.print_tip("Vamos criar uma calculadora com 5 m√≥dulos especializados")

        try:
            funcionalidades = [
                "üßÆ Opera√ß√µes B√°sicas (+-*/)",
                "üöÄ Opera√ß√µes Avan√ßadas (**,//,%)",
                "üìä An√°lise Estat√≠stica (m√©dia, min, max)",
                "üí∞ Calculadora Financeira (juros, parcelas)",
                "üî¢ Conversor de Unidades (temperatura, medidas)"
            ]
            
            print("\nFuncionalidades da sua calculadora:")
            for i, func in enumerate(funcionalidades, 1):
                self.print_colored(f"{i}. {func}", "yellow")
                
        except KeyboardInterrupt:
            self.print_warning("Projeto cancelado pelo usu√°rio")
            return

        # PASSO 2: Construir o sistema
        self.print_section("PASSO 2: Construindo o Sistema", "‚öôÔ∏è", "success")
        self.print_colored("Agora vamos programar cada m√≥dulo:", "text")

        # PASSO 3: C√≥digo final
        self.print_section("PASSO 3: Sua Calculadora Completa", "üé¨", "warning")

        # === C√ìDIGO FINAL GERADO ===
        self.print_colored("Aqui est√° o c√≥digo completo que voc√™ criou:", "text")

        codigo_final = '''# üßÆ PROJETO: CALCULADORA CIENT√çFICA PESSOAL
# M√≥dulo 6: Opera√ß√µes Matem√°ticas

def calculadora_cientifica():
    """Calculadora cient√≠fica multi-funcional"""
    print("üßÆ" * 30)
    print("   CALCULADORA CIENT√çFICA PESSOAL")
    print("üßÆ" * 30)
    
    while True:
        # Menu principal
        print("\\nüìã ESCOLHA UMA OPERA√á√ÉO:")
        print("1. üßÆ Opera√ß√µes B√°sicas")
        print("2. üöÄ Opera√ß√µes Avan√ßadas")
        print("3. üìä An√°lise Estat√≠stica")
        print("4. üí∞ Calculadora Financeira")
        print("5. üî¢ Conversor de Unidades")
        print("0. üö™ Sair")
        
        try:
            opcao = input("\\nüëâ Sua escolha: ")
            
            if opcao == "0":
                print("\\nüëã Obrigado por usar a Calculadora Cient√≠fica!")
                break
            elif opcao == "1":
                operacoes_basicas()
            elif opcao == "2":
                operacoes_avancadas()
            elif opcao == "3":
                analise_estatistica()
            elif opcao == "4":
                calculadora_financeira()
            elif opcao == "5":
                conversor_unidades()
            else:
                print("‚ùå Op√ß√£o inv√°lida!")
                
        except KeyboardInterrupt:
            print("\\n\\nüëã Calculadora encerrada pelo usu√°rio!")
            break
        except Exception as e:
            print(f"‚ùå Erro: {e}")

def operacoes_basicas():
    """M√≥dulo de opera√ß√µes b√°sicas"""
    print("\\nüßÆ OPERA√á√ïES B√ÅSICAS")
    try:
        a = float(input("Digite o primeiro n√∫mero: "))
        operador = input("Digite a opera√ß√£o (+, -, *, /): ")
        b = float(input("Digite o segundo n√∫mero: "))
        
        if operador == "+":
            resultado = a + b
        elif operador == "-":
            resultado = a - b
        elif operador == "*":
            resultado = a * b
        elif operador == "/":
            if b != 0:
                resultado = a / b
            else:
                print("‚ùå Erro: Divis√£o por zero!")
                return
        else:
            print("‚ùå Operador inv√°lido!")
            return
            
        print(f"\\n‚úÖ Resultado: {a} {operador} {b} = {resultado}")
        
    except ValueError:
        print("‚ùå Erro: Digite apenas n√∫meros!")

def operacoes_avancadas():
    """M√≥dulo de opera√ß√µes avan√ßadas"""
    print("\\nüöÄ OPERA√á√ïES AVAN√áADAS")
    try:
        a = float(input("Digite a base: "))
        print("Opera√ß√µes dispon√≠veis:")
        print("** - Pot√™ncia")
        print("// - Divis√£o inteira")
        print("% - Resto da divis√£o")
        
        operador = input("Digite a opera√ß√£o: ")
        b = float(input("Digite o segundo n√∫mero: "))
        
        if operador == "**":
            resultado = a ** b
        elif operador == "//":
            if b != 0:
                resultado = a // b
            else:
                print("‚ùå Erro: Divis√£o por zero!")
                return
        elif operador == "%":
            if b != 0:
                resultado = a % b
            else:
                print("‚ùå Erro: Divis√£o por zero!")
                return
        else:
            print("‚ùå Operador inv√°lido!")
            return
            
        print(f"\\n‚úÖ Resultado: {a} {operador} {b} = {resultado}")
        
    except ValueError:
        print("‚ùå Erro: Digite apenas n√∫meros!")

def analise_estatistica():
    """M√≥dulo de an√°lise estat√≠stica"""
    print("\\nüìä AN√ÅLISE ESTAT√çSTICA")
    try:
        numeros_str = input("Digite os n√∫meros separados por espa√ßo: ")
        numeros = [float(x) for x in numeros_str.split()]
        
        if not numeros:
            print("‚ùå Nenhum n√∫mero fornecido!")
            return
            
        # C√°lculos estat√≠sticos
        soma = sum(numeros)
        media = soma / len(numeros)
        minimo = min(numeros)
        maximo = max(numeros)
        amplitude = maximo - minimo
        
        print(f"\\nüìä RESULTADOS:")
        print(f"N√∫meros analisados: {numeros}")
        print(f"Quantidade: {len(numeros)}")
        print(f"Soma: {soma}")
        print(f"M√©dia: {media:.2f}")
        print(f"Menor: {minimo}")
        print(f"Maior: {maximo}")
        print(f"Amplitude: {amplitude}")
        
    except ValueError:
        print("‚ùå Erro: Digite apenas n√∫meros v√°lidos!")

def calculadora_financeira():
    """M√≥dulo financeiro"""
    print("\\nüí∞ CALCULADORA FINANCEIRA")
    try:
        capital = float(input("Capital inicial (R$): "))
        taxa = float(input("Taxa de juros (% ao m√™s): "))
        periodo = int(input("Per√≠odo (meses): "))
        
        # Juros simples
        juros_simples = capital * (taxa / 100) * periodo
        montante_simples = capital + juros_simples
        
        # Juros compostos
        montante_composto = capital * ((1 + taxa/100) ** periodo)
        juros_compostos = montante_composto - capital
        
        print(f"\\nüí∞ SIMULA√á√ÉO FINANCEIRA:")
        print(f"Capital inicial: R$ {capital:.2f}")
        print(f"Taxa: {taxa}% ao m√™s")
        print(f"Per√≠odo: {periodo} meses")
        print(f"\\nüìà JUROS SIMPLES:")
        print(f"Juros: R$ {juros_simples:.2f}")
        print(f"Montante: R$ {montante_simples:.2f}")
        print(f"\\nüìà JUROS COMPOSTOS:")
        print(f"Juros: R$ {juros_compostos:.2f}")
        print(f"Montante: R$ {montante_composto:.2f}")
        print(f"\\nüí° Diferen√ßa: R$ {(montante_composto - montante_simples):.2f}")
        
    except ValueError:
        print("‚ùå Erro: Digite valores v√°lidos!")

def conversor_unidades():
    """M√≥dulo conversor"""
    print("\\nüî¢ CONVERSOR DE UNIDADES")
    print("1. Celsius ‚Üî Fahrenheit")
    print("2. Metros ‚Üî P√©s")
    print("3. Quilos ‚Üî Libras")
    
    try:
        opcao = input("Escolha a convers√£o: ")
        valor = float(input("Digite o valor: "))
        
        if opcao == "1":
            print("C - Celsius para Fahrenheit")
            print("F - Fahrenheit para Celsius")
            tipo = input("Tipo de convers√£o: ").upper()
            
            if tipo == "C":
                resultado = (valor * 9/5) + 32
                print(f"\\nüå°Ô∏è {valor}¬∞C = {resultado:.1f}¬∞F")
            elif tipo == "F":
                resultado = (valor - 32) * 5/9
                print(f"\\nüå°Ô∏è {valor}¬∞F = {resultado:.1f}¬∞C")
                
        elif opcao == "2":
            print("M - Metros para P√©s")
            print("P - P√©s para Metros")
            tipo = input("Tipo de convers√£o: ").upper()
            
            if tipo == "M":
                resultado = valor * 3.28084
                print(f"\\nüìè {valor}m = {resultado:.2f} p√©s")
            elif tipo == "P":
                resultado = valor / 3.28084
                print(f"\\nüìè {valor} p√©s = {resultado:.2f}m")
                
        elif opcao == "3":
            print("K - Quilos para Libras")
            print("L - Libras para Quilos")
            tipo = input("Tipo de convers√£o: ").upper()
            
            if tipo == "K":
                resultado = valor * 2.20462
                print(f"\\n‚öñÔ∏è {valor}kg = {resultado:.2f} libras")
            elif tipo == "L":
                resultado = valor / 2.20462
                print(f"\\n‚öñÔ∏è {valor} libras = {resultado:.2f}kg")
                
    except ValueError:
        print("‚ùå Erro: Digite valores v√°lidos!")

# Executar a calculadora
calculadora_cientifica()'''

        self.exemplo(codigo_final)

        # === EXECU√á√ÉO DO RESULTADO ===
        self.print_section("RESULTADO FINAL", "üé¨", "warning")
        
        print("\nüöÄ Vamos testar sua calculadora com alguns exemplos:")
        
        # Demonstra√ß√£o das funcionalidades
        exemplos_codigo = '''
# Demonstra√ß√£o da Calculadora Cient√≠fica
print("üßÆ" * 30)
print("   CALCULADORA CIENT√çFICA - DEMONSTRA√á√ÉO")
print("üßÆ" * 30)

# Teste de opera√ß√µes b√°sicas
print("\\nüßÆ OPERA√á√ïES B√ÅSICAS:")
print(f"10 + 5 = {10 + 5}")
print(f"10 - 5 = {10 - 5}")
print(f"10 * 5 = {10 * 5}")
print(f"10 / 5 = {10 / 5}")

# Teste de opera√ß√µes avan√ßadas
print("\\nüöÄ OPERA√á√ïES AVAN√áADAS:")
print(f"2 ** 8 = {2 ** 8} (2 elevado √† 8¬™ pot√™ncia)")
print(f"17 // 5 = {17 // 5} (divis√£o inteira)")
print(f"17 % 5 = {17 % 5} (resto da divis√£o)")

# Teste de an√°lise estat√≠stica
print("\\nüìä AN√ÅLISE ESTAT√çSTICA:")
numeros = [85, 92, 78, 96, 88, 91, 79, 94]
print(f"Notas: {numeros}")
print(f"M√©dia: {sum(numeros)/len(numeros):.1f}")
print(f"Maior nota: {max(numeros)}")
print(f"Menor nota: {min(numeros)}")

# Teste financeiro
print("\\nüí∞ SIMULA√á√ÉO FINANCEIRA:")
capital = 1000
taxa = 2  # 2% ao m√™s
meses = 12
juros_compostos = capital * ((1 + taxa/100) ** meses) - capital
print(f"Investindo R$ {capital} a {taxa}% por {meses} meses")
print(f"Juros ganhos: R$ {juros_compostos:.2f}")
print(f"Montante final: R$ {capital + juros_compostos:.2f}")

# Teste de convers√£o
print("\\nüî¢ CONVERS√ïES √öTEIS:")
print(f"25¬∞C = {(25 * 9/5) + 32}¬∞F")
print(f"100 metros = {100 * 3.28084:.1f} p√©s")
print(f"70 kg = {70 * 2.20462:.1f} libras")

print("\\nüéâ Sua calculadora est√° funcionando perfeitamente!")
print("üßÆ" * 30)
'''
        
        self.executar_codigo(exemplos_codigo)

        # === MENSAGEM DE CONQUISTA ===
        self.print_success("üéâ PARAB√âNS! Voc√™ criou sua Calculadora Cient√≠fica Pessoal!")

        # === APLICA√á√ïES AVAN√áADAS ===
        self.print_section("PR√ìXIMOS PASSOS", "üöÄ", "info")
        proximos_passos = [
            "Adicionar mais fun√ß√µes matem√°ticas (trigonometria, logaritmos)",
            "Criar interface gr√°fica com bot√µes clic√°veis",
            "Salvar hist√≥rico de c√°lculos em arquivo",
            "Integrar com planilhas Excel para an√°lise de dados"
        ]
        for passo in proximos_passos:
            self.print_colored(f"‚Ä¢ {passo}", "primary")

        self.print_success("\nüèÜ CONQUISTA DESBLOQUEADA: Mestre das Opera√ß√µes Matem√°ticas!")

        # === REGISTRO DE CONCLUS√ÉO ===
        self.complete_mini_project("Calculadora Cient√≠fica Multi-funcional")

        self.pausar()


# Para teste standalone
if __name__ == "__main__":
    module = Modulo06Operacoes()
    print("Teste do m√≥dulo 6 - vers√£o standalone")
    module._operacoes_matematicas_interativo()