#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Classe Base para M√≥dulos do Curso
Fornece funcionalidades comuns para todos os m√≥dulos
"""

import os
import time
from typing import Optional, Dict, Any, Union, List
from abc import ABC, abstractmethod

try:
    from ...utils import PythonCourseUtils
    from ...ui_components import UIComponents
    from ...progress_manager import ProgressManager
except ImportError:
    import sys
    sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
    from utils import PythonCourseUtils
    from ui_components import UIComponents
    from progress_manager import ProgressManager


class BaseModule(ABC):
    """Classe base para todos os m√≥dulos do curso"""
    
    def __init__(self, module_id: str, module_name: str):
        """
        Inicializa o m√≥dulo base
        
        Args:
            module_id: ID do m√≥dulo (ex: "modulo_01")
            module_name: Nome do m√≥dulo (ex: "Introdu√ß√£o ao Python")
        """
        self.module_id = module_id
        self.module_name = module_name
        self.utils = PythonCourseUtils()
        self.ui: Optional[UIComponents] = None
        self.progress: Optional[ProgressManager] = None
        
        # Configura√ß√µes do m√≥dulo
        self.has_mini_project = False
        self.mini_project_points = 50
        self.completion_points = 100
        
    def set_dependencies(self, ui: UIComponents, progress: ProgressManager):
        """Define depend√™ncias necess√°rias"""
        self.ui = ui
        self.progress = progress
        
        # Conecta utils aos gerenciadores
        if hasattr(self.utils, 'set_managers'):
            self.utils.set_managers(progress, None)
    
    @abstractmethod
    def execute(self) -> None:
        """
        Executa o m√≥dulo principal
        Deve ser implementado por cada m√≥dulo espec√≠fico
        """
        pass
    
    def show_menu(self, options: Dict[str, str], title: str = None) -> str:
        """
        Exibe menu padr√£o e retorna escolha do usu√°rio
        
        Args:
            options: Dicion√°rio com op√ß√µes {key: description}
            title: T√≠tulo do menu (opcional)
            
        Returns:
            Escolha do usu√°rio
        """
        if not self.ui:
            raise RuntimeError("UI components n√£o foram configurados")
            
        self.ui.clear_screen()
        
        if title:
            self.ui.header(title)
        else:
            self.ui.header(f"üìö {self.module_name.upper()}")
        
        print("Escolha uma op√ß√£o:")
        for key, description in options.items():
            if key == "0":
                print(f"\n{key}. {description}")
            else:
                print(f"{key}. {description}")
        
        return input("\nüëâ Sua escolha: ").strip()
    
    def complete_module(self, points: int = None) -> None:
        """
        Marca o m√≥dulo como completo
        
        Args:
            points: Pontos a serem atribu√≠dos (padr√£o: self.completion_points)
        """
        if points is None:
            points = self.completion_points
            
        if self.utils and hasattr(self.utils, 'complete_module'):
            self.utils.complete_module(self.module_id, points)
        elif self.progress:
            self.progress.complete_module(self.module_id, points)
        else:
            print(f"\nüéâ M√ìDULO {self.module_id.upper()} CONCLU√çDO!")
            print(f"‚≠ê Pontos ganhos: {points}")
    
    def complete_mini_project(self, project_name: str, points: int = None) -> None:
        """
        Marca mini projeto como completo
        
        Args:
            project_name: Nome do mini projeto
            points: Pontos a serem atribu√≠dos (padr√£o: self.mini_project_points)
        """
        if points is None:
            points = self.mini_project_points
            
        if self.utils and hasattr(self.utils, 'mini_projeto_completo'):
            self.utils.mini_projeto_completo(self.module_id, project_name, points)
        else:
            print(f"\nüéâ MINI PROJETO CONCLU√çDO!")
            print(f"üìö M√≥dulo: {self.module_id}")
            print(f"üöÄ Projeto: {project_name}")
            print(f"‚≠ê Pontos ganhos: {points}")
    
    def pausar(self) -> None:
        """Pausa a execu√ß√£o e espera o usu√°rio"""
        if self.utils:
            self.utils.pausar()
        else:
            input("\nüî∏ Pressione ENTER para continuar...")
    
    def print_colored(self, text: str, color: str = "primary") -> None:
        """Imprime texto com cor se UI estiver dispon√≠vel"""
        if self.ui:
            color_code = self.ui.get_color(color)
            reset = self.ui.get_color("reset")
            print(f"{color_code}{text}{reset}")
        else:
            print(text)
    
    def print_section(self, title: str, emoji: str = "üìå", color: str = "accent") -> None:
        """Imprime uma se√ß√£o destacada"""
        if self.ui:
            color_code = self.ui.get_color(color)
            reset = self.ui.get_color("reset")
            separator = "‚îÄ" * 50
            print(f"\n{color_code}{separator}{reset}")
            print(f"{color_code}{emoji} {title.upper()}{reset}")
            print(f"{color_code}{separator}{reset}")
        else:
            print(f"\n{emoji} {title.upper()}")
            print("‚îÄ" * 50)
    
    def exemplo(self, codigo: str) -> None:
        """Exibe um exemplo de c√≥digo"""
        if self.utils:
            self.utils.exemplo(codigo)
        else:
            print("\nüìù EXEMPLO:")
            print("-" * 40)
            print(codigo)
            print("-" * 40)
    
    def executar_codigo(self, codigo: str) -> None:
        """Executa um c√≥digo de exemplo"""
        if self.utils:
            self.utils.executar_codigo(codigo)
        else:
            print("\n‚ñ∂Ô∏è  EXECUTANDO:")
            print("-" * 40)
            try:
                exec(codigo)
            except Exception as e:
                print(f"‚ùå Erro: {e}")
            print("-" * 40)
    
    def exercicio(self, descricao: str, resposta_esperada: Union[str, List[str]], dica: str = "") -> bool:
        """Prop√µe um exerc√≠cio ao aluno"""
        if self.utils:
            return self.utils.exercicio(descricao, resposta_esperada, dica)
        else:
            print(f"\nüéØ EXERC√çCIO: {descricao}")
            if dica:
                print(f"üí° Dica: {dica}")
            
            resposta = input("\nüëâ Sua resposta: ").strip()
            
            if isinstance(resposta_esperada, str):
                respostas_validas = [resposta_esperada]
            else:
                respostas_validas = resposta_esperada
            
            correto = any(resposta.lower() == resp.lower() for resp in respostas_validas)
            
            if correto:
                print("‚úÖ Correto! Muito bem!")
                return True
            else:
                print("‚ùå Resposta incorreta!")
                if len(respostas_validas) == 1:
                    print(f"üí° A resposta correta era: {respostas_validas[0]}")
                else:
                    print(f"üí° Respostas poss√≠veis: {', '.join(respostas_validas)}")
                return False
    
    def error_handler(self, func, *args, **kwargs):
        """Executa fun√ß√£o com tratamento de erro padr√£o"""
        try:
            return func(*args, **kwargs)
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è Opera√ß√£o interrompida pelo usu√°rio")
            return False
        except Exception as e:
            if self.ui:
                self.ui.error(f"Erro no m√≥dulo {self.module_id}: {str(e)}")
            else:
                print(f"‚ùå Erro no m√≥dulo {self.module_id}: {str(e)}")
            return False
    
    def __str__(self) -> str:
        return f"{self.module_id}: {self.module_name}"
    
    def __repr__(self) -> str:
        return f"BaseModule(id='{self.module_id}', name='{self.module_name}')"
    
    @property
    def name(self) -> str:
        """Propriedade para acessar o nome do m√≥dulo (compatibilidade)"""
        return self.module_name