#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
M√≥dulos Essenciais do Curso de Python
Ferramentas fundamentais que todo desenvolvedor Python deve dominar
"""

import os
import time
import subprocess
import sys
from typing import Dict, List, Any, Optional
from ..ui_components import UIComponents
from ..progress_manager import ProgressManager
from .modulo_24_git_github import GitGitHubModule


class EssentialModules:
    """Classe que cont√©m os m√≥dulos essenciais do curso"""
    
    def __init__(self):
        self.ui = None
        self.progress = None
        
    def set_dependencies(self, ui: UIComponents, progress: ProgressManager):
        """Define depend√™ncias necess√°rias"""
        self.ui = ui
        self.progress = progress

    def modulo_24_git_github(self) -> None:
        """M√≥dulo 24: Git e GitHub Essencial"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return
            
        git_module = GitGitHubModule(self.ui, self.progress)
        git_module.executar()

    def modulo_25_terminal_cli(self) -> None:
        """M√≥dulo 25: Terminal e Command Line Interface"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return
        
        try:
            self.ui.clear_screen()
            self.ui.header("üêß M√ìDULO 25: TERMINAL E COMMAND LINE", 
                          "Domine a Interface de Linha de Comando")
            
            while True:
                self._mostrar_menu_terminal()
                escolha = input("\nüëâ Escolha uma op√ß√£o: ").strip()
                
                if escolha == "0":
                    break
                elif escolha == "1":
                    self._teoria_terminal()
                elif escolha == "2":
                    self._comandos_basicos()
                elif escolha == "3":
                    self._navegacao_arquivos()
                elif escolha == "4":
                    self._manipulacao_arquivos()
                elif escolha == "5":
                    self._pipes_redirecionamento()
                elif escolha == "6":
                    self._bash_scripting_basico()
                elif escolha == "7":
                    self._exercicios_terminal()
                elif escolha == "8":
                    self._simulador_terminal()
                else:
                    self.ui.warning("‚ùå Op√ß√£o inv√°lida! Tente novamente.")
                    time.sleep(1)
            
            self.progress.complete_module("modulo_25")
            self.ui.success("üéâ M√≥dulo Terminal conclu√≠do!")
            
        except Exception as e:
            self.ui.error(f"Erro no m√≥dulo: {str(e)}")

    def modulo_26_ambientes_virtuais(self) -> None:
        """M√≥dulo 26: Ambientes Virtuais e Gerenciamento de Depend√™ncias"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return
        
        try:
            self.ui.clear_screen()
            self.ui.header("üì¶ M√ìDULO 26: AMBIENTES VIRTUAIS", 
                          "Isolamento e Gerenciamento de Depend√™ncias")
            
            while True:
                self._mostrar_menu_venv()
                escolha = input("\nüëâ Escolha uma op√ß√£o: ").strip()
                
                if escolha == "0":
                    break
                elif escolha == "1":
                    self._teoria_ambientes_virtuais()
                elif escolha == "2":
                    self._criando_venv()
                elif escolha == "3":
                    self._gerenciamento_pip()
                elif escolha == "4":
                    self._requirements_txt()
                elif escolha == "5":
                    self._boas_praticas_dependencias()
                elif escolha == "6":
                    self._exercicios_venv()
                elif escolha == "7":
                    self._projeto_pratico_venv()
                else:
                    self.ui.warning("‚ùå Op√ß√£o inv√°lida! Tente novamente.")
                    time.sleep(1)
            
            self.progress.complete_module("modulo_26")
            self.ui.success("üéâ M√≥dulo Ambientes Virtuais conclu√≠do!")
            
        except Exception as e:
            self.ui.error(f"Erro no m√≥dulo: {str(e)}")

    def modulo_27_testes_tdd(self) -> None:
        """M√≥dulo 27: Testes e Test-Driven Development"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return
        
        try:
            self.ui.clear_screen()
            self.ui.header("üß™ M√ìDULO 27: TESTES E TDD", 
                          "Test-Driven Development e Qualidade de C√≥digo")
            
            while True:
                self._mostrar_menu_testes()
                escolha = input("\nüëâ Escolha uma op√ß√£o: ").strip()
                
                if escolha == "0":
                    break
                elif escolha == "1":
                    self._teoria_testes()
                elif escolha == "2":
                    self._unittest_basico()
                elif escolha == "3":
                    self._pytest_introducao()
                elif escolha == "4":
                    self._tdd_na_pratica()
                elif escolha == "5":
                    self._mocks_fixtures()
                elif escolha == "6":
                    self._coverage_testes()
                elif escolha == "7":
                    self._exercicios_tdd()
                elif escolha == "8":
                    self._projeto_com_testes()
                else:
                    self.ui.warning("‚ùå Op√ß√£o inv√°lida! Tente novamente.")
                    time.sleep(1)
            
            self.progress.complete_module("modulo_27")
            self.ui.success("üéâ M√≥dulo Testes e TDD conclu√≠do!")
            
        except Exception as e:
            self.ui.error(f"Erro no m√≥dulo: {str(e)}")

    def modulo_28_estrutura_projetos(self) -> None:
        """M√≥dulo 28: Estrutura de Projetos Python"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return
        
        try:
            self.ui.clear_screen()
            self.ui.header("üèóÔ∏è M√ìDULO 28: ESTRUTURA DE PROJETOS", 
                          "Organiza√ß√£o Profissional de C√≥digo Python")
            
            while True:
                self._mostrar_menu_estrutura()
                escolha = input("\nüëâ Escolha uma op√ß√£o: ").strip()
                
                if escolha == "0":
                    break
                elif escolha == "1":
                    self._organizacao_pastas()
                elif escolha == "2":
                    self._packages_modules()
                elif escolha == "3":
                    self._setup_pyproject()
                elif escolha == "4":
                    self._documentacao_projetos()
                elif escolha == "5":
                    self._configuracoes_projeto()
                elif escolha == "6":
                    self._templates_projeto()
                elif escolha == "7":
                    self._exercicios_estrutura()
                elif escolha == "8":
                    self._projeto_completo()
                else:
                    self.ui.warning("‚ùå Op√ß√£o inv√°lida! Tente novamente.")
                    time.sleep(1)
            
            self.progress.complete_module("modulo_28")
            self.ui.success("üéâ M√≥dulo Estrutura de Projetos conclu√≠do!")
            
        except Exception as e:
            self.ui.error(f"Erro no m√≥dulo: {str(e)}")

    def modulo_29_apis_web_requests(self) -> None:
        """M√≥dulo 29: APIs e Web Requests"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return
        
        try:
            self.ui.clear_screen()
            self.ui.header("üåê M√ìDULO 29: APIs E WEB REQUESTS", 
                          "Conectando Python com o Mundo Web")
            
            while True:
                self._mostrar_menu_apis()
                escolha = input("\nüëâ Escolha uma op√ß√£o: ").strip()
                
                if escolha == "0":
                    break
                elif escolha == "1":
                    self._teoria_apis()
                elif escolha == "2":
                    self._biblioteca_requests()
                elif escolha == "3":
                    self._metodos_http()
                elif escolha == "4":
                    self._json_handling()
                elif escolha == "5":
                    self._autenticacao_apis()
                elif escolha == "6":
                    self._tratamento_erros_apis()
                elif escolha == "7":
                    self._exercicios_apis()
                elif escolha == "8":
                    self._projeto_consumo_api()
                else:
                    self.ui.warning("‚ùå Op√ß√£o inv√°lida! Tente novamente.")
                    time.sleep(1)
            
            self.progress.complete_module("modulo_29")
            self.ui.success("üéâ M√≥dulo APIs e Web Requests conclu√≠do!")
            
        except Exception as e:
            self.ui.error(f"Erro no m√≥dulo: {str(e)}")

    def modulo_30_seguranca_basica(self) -> None:
        """M√≥dulo 30: Seguran√ßa B√°sica em Python"""
        if not self.ui or not self.progress:
            print("‚ùå Erro: Depend√™ncias n√£o configuradas para este m√≥dulo")
            input("Pressione ENTER para continuar...")
            return
        
        try:
            self.ui.clear_screen()
            self.ui.header("üõ°Ô∏è M√ìDULO 30: SEGURAN√áA B√ÅSICA", 
                          "Desenvolvendo com Responsabilidade e Seguran√ßa")
            
            while True:
                self._mostrar_menu_seguranca()
                escolha = input("\nüëâ Escolha uma op√ß√£o: ").strip()
                
                if escolha == "0":
                    break
                elif escolha == "1":
                    self._principios_seguranca()
                elif escolha == "2":
                    self._validacao_input()
                elif escolha == "3":
                    self._prevencao_injection()
                elif escolha == "4":
                    self._gerenciamento_secrets()
                elif escolha == "5":
                    self._criptografia_basica()
                elif escolha == "6":
                    self._logging_seguro()
                elif escolha == "7":
                    self._exercicios_seguranca()
                elif escolha == "8":
                    self._auditoria_codigo()
                else:
                    self.ui.warning("‚ùå Op√ß√£o inv√°lida! Tente novamente.")
                    time.sleep(1)
            
            self.progress.complete_module("modulo_30")
            self.ui.success("üéâ M√≥dulo Seguran√ßa B√°sica conclu√≠do!")
            
        except Exception as e:
            self.ui.error(f"Erro no m√≥dulo: {str(e)}")

    # ============ M√âTODOS DE MENU ============
    
    def _mostrar_menu_terminal(self):
        """Menu do m√≥dulo Terminal"""
        self.ui.clear_screen()
        self.ui.header("üêß TERMINAL E COMMAND LINE", "Interface de Linha de Comando")
        
        print("üìö CONTE√öDO DO M√ìDULO:")
        print("=" * 60)
        print("1. üìñ Teoria: Por que usar Terminal?")
        print("2. üíª Comandos B√°sicos (ls, cd, pwd, etc.)")
        print("3. üìÅ Navega√ß√£o e Explora√ß√£o de Arquivos")
        print("4. üîß Manipula√ß√£o de Arquivos e Diret√≥rios")
        print("5. üîÄ Pipes e Redirecionamento")
        print("6. üìú Bash Scripting B√°sico")
        print("7. üß™ Exerc√≠cios Pr√°ticos")
        print("8. üéÆ Simulador de Terminal")
        print("0. üîô Voltar ao Menu Principal")

    def _mostrar_menu_venv(self):
        """Menu do m√≥dulo Ambientes Virtuais"""
        self.ui.clear_screen()
        self.ui.header("üì¶ AMBIENTES VIRTUAIS", "Isolamento de Depend√™ncias")
        
        print("üìö CONTE√öDO DO M√ìDULO:")
        print("=" * 60)
        print("1. üìñ Teoria: Por que Ambientes Virtuais?")
        print("2. üèóÔ∏è Criando e Ativando venv")
        print("3. üì¶ Gerenciamento com pip")
        print("4. üìã requirements.txt e Reprodu√ß√£o")
        print("5. ‚≠ê Boas Pr√°ticas de Depend√™ncias")
        print("6. üß™ Exerc√≠cios Pr√°ticos")
        print("7. üöÄ Projeto: Setup Completo")
        print("0. üîô Voltar ao Menu Principal")

    def _mostrar_menu_testes(self):
        """Menu do m√≥dulo Testes"""
        self.ui.clear_screen()
        self.ui.header("üß™ TESTES E TDD", "Test-Driven Development")
        
        print("üìö CONTE√öDO DO M√ìDULO:")
        print("=" * 60)
        print("1. üìñ Teoria: Por que Testar?")
        print("2. üî¨ unittest - Testes B√°sicos")
        print("3. üöÄ pytest - Framework Moderno")
        print("4. üéØ TDD na Pr√°tica")
        print("5. üé≠ Mocks e Fixtures")
        print("6. üìä Coverage de Testes")
        print("7. üß™ Exerc√≠cios TDD")
        print("8. üèóÔ∏è Projeto com Testes Completos")
        print("0. üîô Voltar ao Menu Principal")

    def _mostrar_menu_estrutura(self):
        """Menu do m√≥dulo Estrutura de Projetos"""
        self.ui.clear_screen()
        self.ui.header("üèóÔ∏è ESTRUTURA DE PROJETOS", "Organiza√ß√£o Profissional")
        
        print("üìö CONTE√öDO DO M√ìDULO:")
        print("=" * 60)
        print("1. üìÅ Organiza√ß√£o de Pastas")
        print("2. üì¶ Packages e Modules")
        print("3. ‚öôÔ∏è setup.py e pyproject.toml")
        print("4. üìö Documenta√ß√£o de Projetos")
        print("5. üîß Configura√ß√µes e Vari√°veis")
        print("6. üìã Templates de Projeto")
        print("7. üß™ Exerc√≠cios de Estrutura√ß√£o")
        print("8. üöÄ Projeto Completo Organizado")
        print("0. üîô Voltar ao Menu Principal")

    def _mostrar_menu_apis(self):
        """Menu do m√≥dulo APIs"""
        self.ui.clear_screen()
        self.ui.header("üåê APIs E WEB REQUESTS", "Conectividade Web")
        
        print("üìö CONTE√öDO DO M√ìDULO:")
        print("=" * 60)
        print("1. üìñ Teoria: REST APIs e HTTP")
        print("2. üì° Biblioteca requests")
        print("3. üîÑ M√©todos HTTP (GET, POST, etc.)")
        print("4. üìã Manipula√ß√£o de JSON")
        print("5. üîê Autentica√ß√£o em APIs")
        print("6. ‚ö†Ô∏è Tratamento de Erros")
        print("7. üß™ Exerc√≠cios com APIs Reais")
        print("8. üöÄ Projeto: Cliente de API")
        print("0. üîô Voltar ao Menu Principal")

    def _mostrar_menu_seguranca(self):
        """Menu do m√≥dulo Seguran√ßa"""
        self.ui.clear_screen()
        self.ui.header("üõ°Ô∏è SEGURAN√áA B√ÅSICA", "Desenvolvimento Seguro")
        
        print("üìö CONTE√öDO DO M√ìDULO:")
        print("=" * 60)
        print("1. üìñ Princ√≠pios de Seguran√ßa")
        print("2. ‚úÖ Valida√ß√£o de Input")
        print("3. üõ°Ô∏è Preven√ß√£o de Injection")
        print("4. üîê Gerenciamento de Secrets")
        print("5. üîí Criptografia B√°sica")
        print("6. üìù Logging Seguro")
        print("7. üß™ Exerc√≠cios de Seguran√ßa")
        print("8. üîç Auditoria de C√≥digo")
        print("0. üîô Voltar ao Menu Principal")

    # ============ IMPLEMENTA√á√ïES DOS M√âTODOS ============
    
    def _teoria_terminal(self):
        """Teoria sobre terminal"""
        self.ui.clear_screen()
        self.ui.header("üìñ TEORIA: POR QUE USAR TERMINAL?", "Fundamentos da CLI")
        
        print("üéØ O TERMINAL √â FUNDAMENTAL PORQUE:")
        print("=" * 50)
        print("‚úÖ Mais r√°pido que interfaces gr√°ficas")
        print("‚úÖ Permite automa√ß√£o com scripts")
        print("‚úÖ Controle total sobre o sistema")
        print("‚úÖ Funciona em servidores remotos")
        print("‚úÖ Padr√£o em desenvolvimento profissional")
        print("‚úÖ Integra√ß√£o com Git, Docker, etc.")
        
        print("\nüèóÔ∏è CONCEITOS B√ÅSICOS:")
        print("=" * 30)
        print("üñ•Ô∏è Shell: Interpretador de comandos")
        print("üìÅ Diret√≥rio: Pasta no sistema")
        print("üìÑ Path: Caminho para arquivo/pasta")
        print("üîó Comando: Instru√ß√£o para o sistema")
        print("‚öôÔ∏è Flag/Op√ß√£o: Modificador de comando")
        print("üì§ Output: Resultado do comando")
        
        input("\nüî∏ Pressione ENTER para continuar...")

    def _comandos_basicos(self):
        """Comandos b√°sicos do terminal"""
        self.ui.clear_screen()
        self.ui.header("üíª COMANDOS B√ÅSICOS", "Toolkit Essencial")
        
        comandos = {
            "üß≠ NAVEGA√á√ÉO": [
                ("pwd", "Mostra diret√≥rio atual"),
                ("ls", "Lista arquivos e pastas"),
                ("ls -la", "Lista detalhada (incluindo ocultos)"),
                ("cd pasta", "Entra na pasta"),
                ("cd ..", "Volta um n√≠vel"),
                ("cd ~", "Vai para home do usu√°rio"),
                ("cd /", "Vai para raiz do sistema")
            ],
            "üìÅ ARQUIVOS E PASTAS": [
                ("mkdir pasta", "Cria pasta"),
                ("touch arquivo.txt", "Cria arquivo vazio"),
                ("cp origem destino", "Copia arquivo"),
                ("mv origem destino", "Move/renomeia arquivo"),
                ("rm arquivo", "Remove arquivo"),
                ("rm -rf pasta", "Remove pasta e conte√∫do"),
                ("rmdir pasta", "Remove pasta vazia")
            ],
            "üëÄ VISUALIZA√á√ÉO": [
                ("cat arquivo.txt", "Mostra conte√∫do do arquivo"),
                ("less arquivo.txt", "Mostra arquivo paginado"),
                ("head arquivo.txt", "Mostra primeiras linhas"),
                ("tail arquivo.txt", "Mostra √∫ltimas linhas"),
                ("wc arquivo.txt", "Conta linhas, palavras, caracteres"),
                ("file arquivo", "Mostra tipo do arquivo")
            ],
            "üîç BUSCA": [
                ("find . -name '*.py'", "Busca arquivos Python"),
                ("grep 'texto' arquivo", "Busca texto em arquivo"),
                ("which python", "Mostra caminho do comando"),
                ("locate arquivo", "Busca arquivo no sistema")
            ]
        }
        
        for categoria, cmds in comandos.items():
            print(f"\n{categoria}")
            print("=" * 40)
            for cmd, desc in cmds:
                print(f"  üìù {cmd:<25} | {desc}")
            
            input("\nüî∏ Pressione ENTER para pr√≥xima categoria...")
            if categoria != list(comandos.keys())[-1]:
                self.ui.clear_screen()
                self.ui.header("üíª COMANDOS B√ÅSICOS", "Pr√≥xima Categoria")

    def _navegacao_arquivos(self):
        """Navega√ß√£o e explora√ß√£o"""
        self.ui.clear_screen()
        self.ui.header("üìÅ NAVEGA√á√ÉO E EXPLORA√á√ÉO", "Dominando o Sistema de Arquivos")
        
        print("üó∫Ô∏è ESTRUTURA DO SISTEMA DE ARQUIVOS:")
        print("=" * 50)
        print("üìÅ / (raiz)")
        print("‚îú‚îÄ‚îÄ üìÅ home/")
        print("‚îÇ   ‚îî‚îÄ‚îÄ üìÅ usuario/")
        print("‚îÇ       ‚îú‚îÄ‚îÄ üìÅ Documents/")
        print("‚îÇ       ‚îú‚îÄ‚îÄ üìÅ Downloads/")
        print("‚îÇ       ‚îî‚îÄ‚îÄ üìÅ Desktop/")
        print("‚îú‚îÄ‚îÄ üìÅ usr/")
        print("‚îÇ   ‚îú‚îÄ‚îÄ üìÅ bin/ (programas)")
        print("‚îÇ   ‚îî‚îÄ‚îÄ üìÅ local/")
        print("‚îî‚îÄ‚îÄ üìÅ var/ (logs, dados)")
        
        print("\nüß≠ NAVEGA√á√ÉO EFICIENTE:")
        print("=" * 30)
        print("üìç . = diret√≥rio atual")
        print("üìç .. = diret√≥rio pai")
        print("üìç ~ = home do usu√°rio")
        print("üìç / = raiz do sistema")
        print("üìç - = diret√≥rio anterior")
        
        print("\nüí° DICAS DE NAVEGA√á√ÉO:")
        print("=" * 25)
        print("‚ö° Use TAB para autocompletar")
        print("‚ö° Ctrl+R para buscar hist√≥rico")
        print("‚ö° Ctrl+L para limpar tela")
        print("‚ö° Setas ‚Üë‚Üì para hist√≥rico")
        print("‚ö° Ctrl+C para cancelar comando")
        
        input("\nüî∏ Pressione ENTER para continuar...")

    def _manipulacao_arquivos(self):
        """Manipula√ß√£o de arquivos"""
        self.ui.clear_screen()
        self.ui.header("üîß MANIPULA√á√ÉO DE ARQUIVOS", "Criando, Editando, Organizando")
        
        print("üéØ OPERA√á√ïES COMUNS:")
        print("=" * 30)
        
        exemplos = [
            ("üìù CRIAR", [
                "mkdir meu_projeto",
                "touch README.md",
                "echo 'Hello World' > hello.txt"
            ]),
            ("üìã COPIAR", [
                "cp arquivo.txt backup.txt",
                "cp -r pasta/ pasta_backup/",
                "cp *.py /dest/"
            ]),
            ("üöö MOVER/RENOMEAR", [
                "mv arquivo.txt novo_nome.txt",
                "mv arquivo.txt /nova/pasta/",
                "mv *.log logs/"
            ]),
            ("üóëÔ∏è REMOVER", [
                "rm arquivo.txt",
                "rm -rf pasta_temporaria/",
                "rm *.tmp"
            ])
        ]
        
        for operacao, cmds in exemplos:
            print(f"\n{operacao}")
            print("-" * 20)
            for cmd in cmds:
                print(f"  $ {cmd}")
            
            input("\nüî∏ Pressione ENTER para pr√≥xima opera√ß√£o...")
            if operacao != exemplos[-1][0]:
                self.ui.clear_screen()
                self.ui.header("üîß MANIPULA√á√ÉO DE ARQUIVOS", "Pr√≥xima Opera√ß√£o")

    def _pipes_redirecionamento(self):
        """Pipes e redirecionamento"""
        self.ui.clear_screen()
        self.ui.header("üîÄ PIPES E REDIRECIONAMENTO", "Conectando Comandos")
        
        print("üö∞ REDIRECIONAMENTO:")
        print("=" * 30)
        print("üì§ > arquivo.txt    | Sobrescreve arquivo")
        print("üì§ >> arquivo.txt   | Adiciona ao arquivo")
        print("üì• < arquivo.txt    | Usa arquivo como input")
        print("‚ö†Ô∏è 2> erro.log     | Redireciona erros")
        print("üîÑ &> tudo.log     | Redireciona tudo")
        
        print("\nüîó PIPES (|):")
        print("=" * 15)
        print("üìä ls | wc -l              | Conta arquivos")
        print("üîç cat arquivo.txt | grep 'palavra' | Busca palavra")
        print("üìà ps aux | grep python    | Processos Python")
        print("üìã history | tail -10      | √öltimos 10 comandos")
        
        print("\nüéØ EXEMPLOS PR√ÅTICOS:")
        print("=" * 25)
        
        exemplos = [
            "# Criar lista de arquivos Python",
            "find . -name '*.py' > lista_python.txt",
            "",
            "# Backup de logs com data",
            "cat app.log | grep ERROR > errors_$(date +%Y%m%d).log",
            "",
            "# Contar linhas de c√≥digo",
            "find . -name '*.py' | xargs wc -l | tail -1",
            "",
            "# Buscar e organizar",
            "grep -r 'TODO' . | sort | uniq > todos.txt"
        ]
        
        for exemplo in exemplos:
            print(exemplo)
        
        input("\nüî∏ Pressione ENTER para continuar...")

    def _bash_scripting_basico(self):
        """Bash scripting b√°sico"""
        self.ui.clear_screen()
        self.ui.header("üìú BASH SCRIPTING B√ÅSICO", "Automa√ß√£o com Scripts")
        
        print("üöÄ MEU PRIMEIRO SCRIPT:")
        print("=" * 30)
        
        script_exemplo = '''#!/bin/bash
# backup.sh - Script de backup simples

echo "üîÑ Iniciando backup..."
DATA=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="backup_$DATA"

mkdir $BACKUP_DIR
cp -r src/ $BACKUP_DIR/
cp *.py $BACKUP_DIR/

echo "‚úÖ Backup criado em: $BACKUP_DIR"
echo "üìä Arquivos copiados: $(find $BACKUP_DIR -type f | wc -l)"'''
        
        print(script_exemplo)
        
        print("\nüí° CONCEITOS IMPORTANTES:")
        print("=" * 30)
        print("üìã #!/bin/bash = shebang (interprete)")
        print("üí¨ # = coment√°rio")
        print("üì¶ $VARIAVEL = usar vari√°vel")
        print("‚öôÔ∏è $(comando) = executar comando")
        print("üîß chmod +x script.sh = tornar execut√°vel")
        print("‚ñ∂Ô∏è ./script.sh = executar script")
        
        print("\nüéØ ESTRUTURAS B√ÅSICAS:")
        print("=" * 25)
        
        estruturas = '''# Condicionais
if [ -f "arquivo.txt" ]; then
    echo "Arquivo existe"
fi

# Loops
for arquivo in *.py; do
    echo "Processando: $arquivo"
done

# Fun√ß√µes
fazer_backup() {
    cp "$1" "backup_$1"
    echo "Backup de $1 criado"
}'''
        
        print(estruturas)
        
        input("\nüî∏ Pressione ENTER para continuar...")

    def _exercicios_terminal(self):
        """Exerc√≠cios pr√°ticos de terminal"""
        self.ui.clear_screen()
        self.ui.header("üß™ EXERC√çCIOS PR√ÅTICOS", "Praticando no Terminal")
        
        exercicios = [
            {
                "titulo": "üèÅ Exerc√≠cio 1: Explora√ß√£o B√°sica",
                "objetivo": "Familiarizar-se com navega√ß√£o",
                "tarefas": [
                    "1. Descubra em que diret√≥rio voc√™ est√°",
                    "2. Liste todos os arquivos (incluindo ocultos)",
                    "3. Navegue at√© sua pasta home",
                    "4. Crie uma pasta chamada 'python_pratica'",
                    "5. Entre na pasta criada"
                ],
                "comandos": [
                    "pwd",
                    "ls -la",
                    "cd ~",
                    "mkdir python_pratica",
                    "cd python_pratica"
                ]
            },
            {
                "titulo": "üìÅ Exerc√≠cio 2: Organiza√ß√£o de Arquivos",
                "objetivo": "Praticar manipula√ß√£o de arquivos",
                "tarefas": [
                    "1. Crie 3 arquivos Python vazios",
                    "2. Crie uma pasta 'src'",
                    "3. Mova os arquivos para a pasta src",
                    "4. Fa√ßa backup da pasta src",
                    "5. Liste o conte√∫do recursivamente"
                ],
                "comandos": [
                    "touch main.py utils.py config.py",
                    "mkdir src",
                    "mv *.py src/",
                    "cp -r src/ src_backup/",
                    "ls -R"
                ]
            },
            {
                "titulo": "üîç Exerc√≠cio 3: Busca e Filtros",
                "objetivo": "Dominar busca e pipes",
                "tarefas": [
                    "1. Encontre todos arquivos .py no sistema",
                    "2. Conte quantos arquivos Python existem",
                    "3. Busque a palavra 'import' em arquivos Python",
                    "4. Crie um relat√≥rio dos resultados",
                    "5. Visualize as √∫ltimas 5 linhas"
                ],
                "comandos": [
                    "find /usr -name '*.py' 2>/dev/null",
                    "find . -name '*.py' | wc -l",
                    "grep -r 'import' *.py",
                    "find . -name '*.py' | wc -l > relatorio.txt",
                    "tail -5 relatorio.txt"
                ]
            }
        ]
        
        for i, ex in enumerate(exercicios, 1):
            print(f"\n{ex['titulo']}")
            print("=" * 50)
            print(f"üéØ OBJETIVO: {ex['objetivo']}")
            print("\nüìã TAREFAS:")
            for tarefa in ex['tarefas']:
                print(f"  {tarefa}")
            
            print("\nüíª COMANDOS SUGERIDOS:")
            for cmd in ex['comandos']:
                print(f"  $ {cmd}")
            
            if i < len(exercicios):
                input(f"\nüî∏ Pressione ENTER para pr√≥ximo exerc√≠cio ({i+1}/{len(exercicios)})...")
                self.ui.clear_screen()
                self.ui.header("üß™ EXERC√çCIOS PR√ÅTICOS", f"Exerc√≠cio {i+1}/{len(exercicios)}")
        
        input("\nüî∏ Pressione ENTER para voltar ao menu...")

    def _simulador_terminal(self):
        """Simulador de terminal"""
        self.ui.clear_screen()
        self.ui.header("üéÆ SIMULADOR DE TERMINAL", "Pratique Comandos Sem Riscos")
        
        print("üéØ INSTRU√á√ïES:")
        print("  ‚Ä¢ Digite comandos como se fosse um terminal real")
        print("  ‚Ä¢ O simulador mostrar√° o resultado esperado")
        print("  ‚Ä¢ Digite 'help' para ver comandos dispon√≠veis")
        print("  ‚Ä¢ Digite 'exit' para sair do simulador")
        
        # Simulador b√°sico
        current_dir = "/home/usuario"
        files = ["documento.txt", "foto.jpg", "script.py"]
        dirs = ["projetos", "downloads", "documentos"]
        
        while True:
            comando = input(f"\n{current_dir} $ ").strip().lower()
            
            if comando == "exit":
                break
            elif comando == "help":
                print("üìã Comandos dispon√≠veis:")
                print("  ls, pwd, cd, mkdir, touch, cat, help, exit")
            elif comando == "pwd":
                print(current_dir)
            elif comando == "ls":
                print("  ".join(dirs + files))
            elif comando == "ls -la":
                print("drwxr-xr-x  usuario usuario  projetos")
                print("drwxr-xr-x  usuario usuario  downloads") 
                print("drwxr-xr-x  usuario usuario  documentos")
                print("-rw-r--r--  usuario usuario  documento.txt")
                print("-rw-r--r--  usuario usuario  foto.jpg")
                print("-rwxr-xr-x  usuario usuario  script.py")
            elif comando.startswith("cd "):
                dir_name = comando.split()[1]
                if dir_name in dirs or dir_name == "..":
                    print(f"‚úÖ Navegou para {dir_name}")
                else:
                    print(f"‚ùå Diret√≥rio '{dir_name}' n√£o encontrado")
            elif comando.startswith("mkdir "):
                dir_name = comando.split()[1]
                dirs.append(dir_name)
                print(f"‚úÖ Diret√≥rio '{dir_name}' criado")
            elif comando.startswith("touch "):
                file_name = comando.split()[1]
                files.append(file_name)
                print(f"‚úÖ Arquivo '{file_name}' criado")
            elif comando.startswith("cat "):
                file_name = comando.split()[1]
                if file_name in files:
                    print(f"üìÑ Conte√∫do de {file_name}:")
                    print("Hello World!")
                else:
                    print(f"‚ùå Arquivo '{file_name}' n√£o encontrado")
            else:
                print(f"‚ùì Comando '{comando}' n√£o reconhecido. Digite 'help' para ajuda")

    # ============ M√âTODOS PARA OUTROS M√ìDULOS (IMPLEMENTA√á√ÉO B√ÅSICA) ============
    
    def _teoria_ambientes_virtuais(self):
        """Teoria sobre ambientes virtuais"""
        self.ui.clear_screen()
        self.ui.header("üìñ TEORIA: AMBIENTES VIRTUAIS", "Isolamento √© Fundamental")
        
        print("üéØ POR QUE USAR AMBIENTES VIRTUAIS?")
        print("=" * 50)
        print("üîí Isolamento de depend√™ncias entre projetos")
        print("üì¶ Evita conflitos de vers√µes de bibliotecas")
        print("üßπ Mant√©m sistema limpo e organizado")
        print("üìã Facilita reprodu√ß√£o do ambiente")
        print("üöÄ Deploy mais previs√≠vel")
        print("üë• Colabora√ß√£o em equipe sem problemas")
        
        print("\nüí° EXEMPLO DE PROBLEMA SEM VENV:")
        print("=" * 40)
        print("üö® Projeto A precisa Django 3.2")
        print("üö® Projeto B precisa Django 4.1")
        print("üö® Imposs√≠vel ter ambas vers√µes globalmente!")
        print("‚úÖ Solu√ß√£o: Um venv para cada projeto")
        
        input("\nüî∏ Pressione ENTER para continuar...")

    def _criando_venv(self):
        """Como criar ambientes virtuais"""
        self.ui.clear_screen()
        self.ui.header("üèóÔ∏è CRIANDO E ATIVANDO VENV", "Passo a Passo")
        
        print("üìã PASSO A PASSO:")
        print("=" * 25)
        
        passos = [
            ("1Ô∏è‚É£ CRIAR VENV", "python -m venv meu_projeto_env"),
            ("2Ô∏è‚É£ ATIVAR (Linux/Mac)", "source meu_projeto_env/bin/activate"),
            ("2Ô∏è‚É£ ATIVAR (Windows)", "meu_projeto_env\\Scripts\\activate"),
            ("3Ô∏è‚É£ VERIFICAR", "which python && python --version"),
            ("4Ô∏è‚É£ INSTALAR PACOTES", "pip install requests"),
            ("5Ô∏è‚É£ DESATIVAR", "deactivate")
        ]
        
        for passo, comando in passos:
            print(f"\n{passo}:")
            print(f"  $ {comando}")
            
        print("\nüéØ SINAIS DE QUE EST√Å ATIVO:")
        print("=" * 30)
        print("üìç (nome_env) aparece no prompt")
        print("üìç which python aponta para venv")
        print("üìç pip list mostra apenas pacotes do venv")
        
        input("\nüî∏ Pressione ENTER para continuar...")

    def _gerenciamento_pip(self):
        """Gerenciamento com pip"""
        self.ui.clear_screen()
        self.ui.header("üì¶ GERENCIAMENTO COM PIP", "Instalando e Organizando Pacotes")
        
        comandos_pip = {
            "üì• INSTALA√á√ÉO": [
                ("pip install requests", "Instala pacote"),
                ("pip install requests==2.28.0", "Vers√£o espec√≠fica"),
                ("pip install -r requirements.txt", "Instala depend√™ncias"),
                ("pip install -e .", "Instala projeto em modo desenvolvimento")
            ],
            "üìã INFORMA√á√ïES": [
                ("pip list", "Lista pacotes instalados"),
                ("pip show requests", "Detalhes do pacote"),
                ("pip freeze", "Lista com vers√µes exatas"),
                ("pip check", "Verifica depend√™ncias")
            ],
            "üîÑ ATUALIZA√á√ÉO": [
                ("pip install --upgrade pip", "Atualiza o pr√≥prio pip"),
                ("pip install --upgrade requests", "Atualiza pacote"),
                ("pip list --outdated", "Mostra pacotes desatualizados")
            ],
            "üóëÔ∏è REMO√á√ÉO": [
                ("pip uninstall requests", "Remove pacote"),
                ("pip uninstall -r requirements.txt", "Remove lista de pacotes")
            ]
        }
        
        for categoria, cmds in comandos_pip.items():
            print(f"\n{categoria}")
            print("=" * 30)
            for cmd, desc in cmds:
                print(f"  üìù {cmd:<35} | {desc}")
            
            input("\nüî∏ Pressione ENTER para pr√≥xima categoria...")
            if categoria != list(comandos_pip.keys())[-1]:
                self.ui.clear_screen()
                self.ui.header("üì¶ GERENCIAMENTO COM PIP", "Pr√≥xima Categoria")

    def _requirements_txt(self):
        """Requirements.txt e reprodu√ß√£o"""
        self.ui.clear_screen()
        self.ui.header("üìã REQUIREMENTS.TXT", "Reproduzindo Ambientes")
        
        print("üéØ O QUE √â REQUIREMENTS.TXT?")
        print("=" * 40)
        print("üìã Lista de todas as depend√™ncias do projeto")
        print("üîí Garante que todos usem as mesmas vers√µes")
        print("üöÄ Facilita deploy e configura√ß√£o")
        print("üë• Essencial para trabalho em equipe")
        
        print("\nüìù EXEMPLO DE REQUIREMENTS.TXT:")
        print("=" * 40)
        exemplo_req = """requests==2.28.1
flask==2.2.2
pandas>=1.4.0,<2.0.0
pytest==7.1.2
black==22.6.0
# Depend√™ncias de desenvolvimento
pytest-cov==3.0.0"""
        print(exemplo_req)
        
        print("\n‚öôÔ∏è COMANDOS IMPORTANTES:")
        print("=" * 30)
        comandos = [
            ("pip freeze > requirements.txt", "Gera requirements.txt"),
            ("pip install -r requirements.txt", "Instala depend√™ncias"),
            ("pip-tools compile requirements.in", "Gera vers√µes exatas"),
            ("pip-tools sync", "Sincroniza ambiente")
        ]
        
        for cmd, desc in comandos:
            print(f"  üìù {cmd:<35} | {desc}")
        
        input("\nüî∏ Pressione ENTER para continuar...")

    def _boas_praticas_dependencias(self):
        """Boas pr√°ticas de depend√™ncias"""
        self.ui.clear_screen()
        self.ui.header("‚≠ê BOAS PR√ÅTICAS", "Gerenciamento Profissional")
        
        praticas = {
            "üìÅ ORGANIZA√á√ÉO": [
                "‚úÖ Um venv por projeto",
                "‚úÖ Nome descritivo para venv",
                "‚úÖ .gitignore inclui venv/",
                "‚úÖ requirements.txt na raiz do projeto"
            ],
            "üîí VERSIONAMENTO": [
                "‚úÖ Use vers√µes exatas para produ√ß√£o",
                "‚úÖ Ranges flex√≠veis para desenvolvimento", 
                "‚úÖ Pin vers√µes cr√≠ticas",
                "‚úÖ Teste upgrades regularmente"
            ],
            "üöÄ DEPLOY": [
                "‚úÖ requirements.txt separado para produ√ß√£o",
                "‚úÖ requirements-dev.txt para desenvolvimento",
                "‚úÖ Use pip-tools para manage dependencies",
                "‚úÖ Docker para ambientes complexos"
            ],
            "üîß FERRAMENTAS": [
                "‚úÖ pip-tools para dependency management",
                "‚úÖ pipenv como alternativa moderna",
                "‚úÖ conda para ci√™ncia de dados",
                "‚úÖ poetry para projetos complexos"
            ]
        }
        
        for categoria, items in praticas.items():
            print(f"\n{categoria}")
            print("=" * 25)
            for item in items:
                print(f"  {item}")
            
            input("\nüî∏ Pressione ENTER para pr√≥xima categoria...")
            if categoria != list(praticas.keys())[-1]:
                self.ui.clear_screen()
                self.ui.header("‚≠ê BOAS PR√ÅTICAS", "Pr√≥xima Categoria")

    # Implementa√ß√µes b√°sicas para outros m√≥dulos...
    def _exercicios_venv(self): 
        print("üß™ Exerc√≠cios de venv em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _projeto_pratico_venv(self): 
        print("üöÄ Projeto pr√°tico em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _teoria_testes(self): 
        print("üìñ Teoria de testes em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _unittest_basico(self): 
        print("üî¨ unittest b√°sico em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _pytest_introducao(self): 
        print("üöÄ pytest em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _tdd_na_pratica(self): 
        print("üéØ TDD pr√°tico em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _mocks_fixtures(self): 
        print("üé≠ Mocks e fixtures em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _coverage_testes(self): 
        print("üìä Coverage em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _exercicios_tdd(self): 
        print("üß™ Exerc√≠cios TDD em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _projeto_com_testes(self): 
        print("üèóÔ∏è Projeto com testes em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    # Continuando com implementa√ß√µes b√°sicas...
    def _organizacao_pastas(self): 
        print("üìÅ Organiza√ß√£o de pastas em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _packages_modules(self): 
        print("üì¶ Packages e modules em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _setup_pyproject(self): 
        print("‚öôÔ∏è setup.py/pyproject.toml em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _documentacao_projetos(self): 
        print("üìö Documenta√ß√£o em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _configuracoes_projeto(self): 
        print("üîß Configura√ß√µes em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _templates_projeto(self): 
        print("üìã Templates em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _exercicios_estrutura(self): 
        print("üß™ Exerc√≠cios estrutura em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _projeto_completo(self): 
        print("üöÄ Projeto completo em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    # APIs
    def _teoria_apis(self): 
        print("üìñ Teoria APIs em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _biblioteca_requests(self): 
        print("üì° Biblioteca requests em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _metodos_http(self): 
        print("üîÑ M√©todos HTTP em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _json_handling(self): 
        print("üìã JSON handling em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _autenticacao_apis(self): 
        print("üîê Autentica√ß√£o em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _tratamento_erros_apis(self): 
        print("‚ö†Ô∏è Tratamento de erros em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _exercicios_apis(self): 
        print("üß™ Exerc√≠cios APIs em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _projeto_consumo_api(self): 
        print("üöÄ Projeto API em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    # Seguran√ßa
    def _principios_seguranca(self): 
        print("üìñ Princ√≠pios seguran√ßa em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _validacao_input(self): 
        print("‚úÖ Valida√ß√£o de input em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _prevencao_injection(self): 
        print("üõ°Ô∏è Preven√ß√£o injection em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _gerenciamento_secrets(self): 
        print("üîê Gerenciamento secrets em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _criptografia_basica(self): 
        print("üîí Criptografia em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _logging_seguro(self): 
        print("üìù Logging seguro em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _exercicios_seguranca(self): 
        print("üß™ Exerc√≠cios seguran√ßa em desenvolvimento...")
        input("Pressione ENTER para continuar...")
    
    def _auditoria_codigo(self): 
        print("üîç Auditoria de c√≥digo em desenvolvimento...")
        input("Pressione ENTER para continuar...")